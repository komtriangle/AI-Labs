/* file "RequestInfoJSON.cs" */

/* Generated automatically by Classy JSON. */


using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.IO;
using System.Numerics;


public class RequestInfoJSON : JSONBase
  {
    public class TypeDeviceInfoJSON : JSONBase
      {
        public enum TypeDriverSideKnownValues
          {
            DriverSide_Left,
            DriverSide_Right,
            DriverSide__none
          };
        public struct TypeDriverSide
          {
            public bool in_known_list;
            public string string_value;
            public TypeDriverSideKnownValues list_value;
          };

        public static TypeDriverSideKnownValues  stringToDriverSide(string chars)
          {
            switch (chars[0])
              {
                case 'L':
                    if ((String.Compare(chars, 1, "eft", 0, 3, false) == 0) && (chars.Length == 4))
                        return TypeDriverSideKnownValues.DriverSide_Left;
                    break;
                case 'R':
                    if ((String.Compare(chars, 1, "ight", 0, 4, false) == 0) && (chars.Length == 5))
                        return TypeDriverSideKnownValues.DriverSide_Right;
                    break;
                default:
                    break;
              }
            return TypeDriverSideKnownValues.DriverSide__none;
          }

        public static string  stringFromDriverSide(TypeDriverSideKnownValues the_enum)
          {
            switch (the_enum)
              {
                case TypeDriverSideKnownValues.DriverSide_Left:
                    return "Left";
                case TypeDriverSideKnownValues.DriverSide_Right:
                    return "Right";
                default:
                    Debug.Assert(false);
                    return null;
              }
          }

        private bool flagHasDeviceModel;
        private string storeDeviceModel;
        private bool flagHasDeviceYear;
        private JSONValue  storeDeviceYear;
        private bool flagHasDeviceName;
        private string storeDeviceName;
        private bool flagHasDriverSide;
        private TypeDriverSide storeDriverSide;
        private List<string> extraKeys;
        private List<JSONValue > extraValues;
        private Dictionary<string, JSONValue > extraIndex;


        private void  fromJSONDeviceModel(JSONValue json_value, bool ignore_extras)
          {
            Debug.Assert(json_value != null);
            JSONStringValue json_string = json_value.string_value();
            if (json_string == null)
                throw new Exception("The value for field DeviceModel of TypeDeviceInfoJSON is not a string.");
            setDeviceModel(json_string.getData());
          }


        private void  fromJSONDeviceYear(JSONValue json_value, bool ignore_extras)
          {
            Debug.Assert(json_value != null);
            setDeviceYear(json_value);
          }


        private void  fromJSONDeviceName(JSONValue json_value, bool ignore_extras)
          {
            Debug.Assert(json_value != null);
            JSONStringValue json_string = json_value.string_value();
            if (json_string == null)
                throw new Exception("The value for field DeviceName of TypeDeviceInfoJSON is not a string.");
            setDeviceName(json_string.getData());
          }


        private void  fromJSONDriverSide(JSONValue json_value, bool ignore_extras)
          {
            Debug.Assert(json_value != null);
            JSONStringValue json_string = json_value.string_value();
            if (json_string == null)
                throw new Exception("The value for field DriverSide of TypeDeviceInfoJSON is not a string.");
            TypeDriverSide the_open_enum = new TypeDriverSide();
            switch (json_string.getData()[0])
              {
                case 'L':
                    if ((String.Compare(json_string.getData(), 1, "eft", 0, 3, false) == 0) && (json_string.getData().Length == 4))
                          {
                            the_open_enum.in_known_list = true;
                            the_open_enum.list_value = TypeDriverSideKnownValues.DriverSide_Left;
                            goto open_enum_is_done;
                          }
                    break;
                case 'R':
                    if ((String.Compare(json_string.getData(), 1, "ight", 0, 4, false) == 0) && (json_string.getData().Length == 5))
                          {
                            the_open_enum.in_known_list = true;
                            the_open_enum.list_value = TypeDriverSideKnownValues.DriverSide_Right;
                            goto open_enum_is_done;
                          }
                    break;
                default:
                    break;
              }
            the_open_enum.in_known_list = false;
            the_open_enum.string_value = json_string.getData();
          open_enum_is_done:;
            setDriverSide(the_open_enum);
          }


        public TypeDeviceInfoJSON()
          {
            flagHasDeviceModel = false;
            flagHasDeviceYear = false;
            flagHasDeviceName = false;
            flagHasDriverSide = false;
            extraKeys = new List<string>();
        extraValues = new List<JSONValue >();
        extraIndex = new Dictionary<string, JSONValue >();
          }

        public bool  hasDeviceModel()
          {
            return flagHasDeviceModel;
          }

        public string  getDeviceModel()
          {
            Debug.Assert(flagHasDeviceModel);
            return storeDeviceModel;
          }

        public bool  hasDeviceYear()
          {
            return flagHasDeviceYear;
          }

        public JSONValue   getDeviceYear()
          {
            Debug.Assert(flagHasDeviceYear);
            return storeDeviceYear;
          }

        public bool  hasDeviceName()
          {
            return flagHasDeviceName;
          }

        public string  getDeviceName()
          {
            Debug.Assert(flagHasDeviceName);
            return storeDeviceName;
          }

        public bool  hasDriverSide()
          {
            return flagHasDriverSide;
          }

        public TypeDriverSide  getDriverSide()
          {
            Debug.Assert(flagHasDriverSide);
            return storeDriverSide;
          }

        public string  getDriverSideAsString()
          {
            TypeDriverSide result = getDriverSide();
            if (result.in_known_list)
                return stringFromDriverSide(result.list_value);
            else
                return result.string_value;
          }


        public virtual int extraTypeDeviceInfoComponentCount()
          {
            Debug.Assert(extraKeys.Count == extraValues.Count);
            return extraKeys.Count;
          }
        public virtual string extraTypeDeviceInfoComponentKey(int component_num)
          {
            Debug.Assert(extraKeys.Count == extraValues.Count);
            Debug.Assert(component_num < extraValues.Count);
            return extraKeys[component_num];
          }
        public virtual JSONValue extraTypeDeviceInfoComponentValue(int component_num)
          {
            Debug.Assert(extraKeys.Count == extraValues.Count);
            Debug.Assert(component_num < extraValues.Count);
            return extraValues[component_num];
          }
        public virtual JSONValue extraTypeDeviceInfoLookup(string field_name)
          {
            JSONValue result = (extraIndex.ContainsKey(field_name) ? extraIndex[field_name] : null);
            return result;
          }

        public void setDeviceModel(string new_value)
          {
            flagHasDeviceModel = true;
            storeDeviceModel = new_value;
          }
        public void unsetDeviceModel()
          {
            flagHasDeviceModel = false;
          }
        public void setDeviceYear(JSONValue  new_value)
          {
            if (flagHasDeviceYear)
              {
              }
            flagHasDeviceYear = true;
            storeDeviceYear = new_value;
          }
        public void unsetDeviceYear()
          {
            if (flagHasDeviceYear)
              {
              }
            flagHasDeviceYear = false;
          }
        public void setDeviceName(string new_value)
          {
            flagHasDeviceName = true;
            storeDeviceName = new_value;
          }
        public void unsetDeviceName()
          {
            flagHasDeviceName = false;
          }
        public void setDriverSide(TypeDriverSide new_value)
          {
            flagHasDriverSide = true;
            storeDriverSide = new_value;
          }
        public void setDriverSide(string chars)
          {
            TypeDriverSideKnownValues known = stringToDriverSide(chars);
            TypeDriverSide new_value = new TypeDriverSide();
            if (known == TypeDriverSideKnownValues.DriverSide__none)
              {
                new_value.in_known_list = false;
                new_value.string_value = chars;
              }
            else
              {
                new_value.in_known_list = true;
                new_value.list_value = known;
              }
            setDriverSide(new_value);
          }
        public void setDriverSide(TypeDriverSideKnownValues new_value)
          {
            TypeDriverSide new_full_value = new TypeDriverSide();
            Debug.Assert(new_value != TypeDriverSideKnownValues.DriverSide__none);
            new_full_value.in_known_list = true;
            new_full_value.list_value = new_value;
            setDriverSide(new_full_value);
          }
        public void unsetDriverSide()
          {
            flagHasDriverSide = false;
          }

        public virtual void extraTypeDeviceInfoAppendPair(string key, JSONValue new_component)
          {
            Debug.Assert(key != null);
            Debug.Assert(new_component != null);

            Debug.Assert(extraKeys.Count == extraValues.Count);
            extraKeys.Add(key);
            extraValues.Add(new_component);
            extraIndex.Add(key, new_component);
          }
        public virtual void extraTypeDeviceInfoSetField(string key, JSONValue new_component)
          {
            Debug.Assert(key != null);
            Debug.Assert(new_component != null);

            JSONValue old_field = extraTypeDeviceInfoLookup(key);
            if (old_field == null)
              {
                extraTypeDeviceInfoAppendPair(key, new_component);
              }
            else
              {
                int count = extraKeys.Count;
                Debug.Assert(count == extraValues.Count);
                for (int num = 0; num < count; ++num)
                  {
                    if (extraKeys[num].Equals( key))
                      {
                        extraValues[num] = new_component;
                        break;
                      }
                  }
                extraIndex.Add(key, new_component);
              }
          }

        public override void write_as_json(JSONHandler handler)
          {
            handler.start_object();
            write_fields_as_json(handler);
            int extra_count = extraKeys.Count;
            Debug.Assert(extra_count == extraValues.Count);
            for (int extra_num = 0; extra_num < extra_count; ++extra_num)
              {
                handler.start_pair(extraKeys[extra_num]);
                extraValues[extra_num].write(handler);
              }
            handler.finish_object();
          }

        public virtual void write_fields_as_json(JSONHandler handler)
          {
            write_fields_as_json(handler, false);
          }

        public virtual void write_fields_as_json(JSONHandler handler, bool partial_allowed)
          {
            if (flagHasDeviceModel)
              {
                handler.start_pair("DeviceModel");
                handler.string_value(storeDeviceModel);
              }
            if (flagHasDeviceYear)
              {
                handler.start_pair("DeviceYear");
                storeDeviceYear.write(handler);
              }
            if (flagHasDeviceName)
              {
                handler.start_pair("DeviceName");
                handler.string_value(storeDeviceName);
              }
            if (flagHasDriverSide)
              {
                handler.start_pair("DriverSide");
                if (storeDriverSide.in_known_list)
                  {
                    switch (storeDriverSide.list_value)
                      {
                        case TypeDriverSideKnownValues.DriverSide_Left:
                            handler.string_value("Left");
                            break;
                        case TypeDriverSideKnownValues.DriverSide_Right:
                            handler.string_value("Right");
                            break;
                        default:
                            Debug.Assert(false);
                            break;
                      }
                  }
                else
                  {
                            handler.string_value(storeDriverSide.string_value);
                  }
              }
          }
        public override void write_partial_as_json(JSONHandler handler)
          {
            handler.start_object();
            write_fields_as_json(handler, true);
            int extra_count = extraKeys.Count;
            Debug.Assert(extra_count == extraValues.Count);
            for (int extra_num = 0; extra_num < extra_count; ++extra_num)
              {
                handler.start_pair(extraKeys[extra_num]);
                extraValues[extra_num].write(handler);
              }
            handler.finish_object();
          }
        public virtual string missing_field_error(bool allow_unpolished)
          {
            return null;
          }

        public static TypeDeviceInfoJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
          {
            TypeDeviceInfoJSON result;
              {
                HoldingGenerator generator = new HoldingGenerator("Type TypeDeviceInfo", ignore_extras);
                generator.set_allow_incomplete(allow_incomplete);
                generator.set_allow_unpolished(allow_unpolished);
                if (allow_incomplete || allow_unpolished)
                    json_value.write(generator);
                else
                    json_value.write(generator);
                Debug.Assert(generator.have_value);
                result = generator.value;
              };
            return result;
          }
        public static TypeDeviceInfoJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete)
      {
        return from_json(json_value, ignore_extras, allow_incomplete, false);
      }
        public static TypeDeviceInfoJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
          {
            TypeDeviceInfoJSON result;
              {
                HoldingGenerator generator = new HoldingGenerator("Type TypeDeviceInfo", ignore_extras);
                generator.set_allow_incomplete(allow_incomplete);
                generator.set_allow_unpolished(allow_unpolished);
                if (allow_incomplete || allow_unpolished)
                    json_value.write_partial_as_json(generator);
                else
                    json_value.write_as_json(generator);
                Debug.Assert(generator.have_value);
                result = generator.value;
              };
            return result;
          }
        public static TypeDeviceInfoJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete)
      {
        return from_json(json_value, ignore_extras, allow_incomplete, false);
      }
        public static TypeDeviceInfoJSON from_text(string text, bool ignore_extras)
          {
            TypeDeviceInfoJSON result;
              {
                HoldingGenerator generator = new HoldingGenerator("Type TypeDeviceInfo", ignore_extras);
                JSONParse.parse_json_value(text, "Text for TypeDeviceInfoJSON", generator);
                Debug.Assert(generator.have_value);
                result = generator.value;
              };
            return result;
          }
        public static TypeDeviceInfoJSON from_file(TextReader fp, string file_name, bool ignore_extras)
          {
            TypeDeviceInfoJSON result;
              {
                HoldingGenerator generator = new HoldingGenerator("Type TypeDeviceInfo", ignore_extras);
                JSONParse.parse_json_value(fp, file_name, generator);
                Debug.Assert(generator.have_value);
                result = generator.value;
              };
            return result;
          }
        public abstract class Generator : JSONObjectGenerator
          {
            private JSONHoldingStringGenerator fieldGeneratorDeviceModel;
            private JSONHoldingValueGenerator fieldGeneratorDeviceYear;
            private JSONHoldingStringGenerator fieldGeneratorDeviceName;
        private abstract class FieldGeneratorDriverSide : JSONStringGenerator
              {
                protected FieldGeneratorDriverSide(string what)
                  {
                    set_what(what);
                  }
                protected FieldGeneratorDriverSide()
                  {
                  }
                protected override void handle_result(string result)
                  {
                    TypeDriverSideKnownValues known = stringToDriverSide(result);
                    TypeDriverSide new_value = new TypeDriverSide();
                    if (known == TypeDriverSideKnownValues.DriverSide__none)
                      {
                        new_value.in_known_list = false;
                        new_value.string_value = result;
                      }
                    else
                      {
                        new_value.in_known_list = true;
                        new_value.list_value = known;
                      }
                    handle_result(new_value);
                  }
                protected abstract void handle_result(TypeDriverSide result);
              };
        private class FieldHoldingGeneratorDriverSide : FieldGeneratorDriverSide
      {
        protected override void handle_result(TypeDriverSide result)
          {
    //@@@        Debug.Assert(!have_value);
            have_value = true;
            value = result;
          }

        public FieldHoldingGeneratorDriverSide(String what)
          {
            have_value = false;
            base.set_what(what);
          }

        public override void reset()
          {
            have_value = false;
            base.reset();
          }

        public bool have_value;
        public TypeDriverSide value;
      };
        private class FieldHoldingArrayGeneratorDriverSide : JSONArrayGenerator
      {
        protected class ElementHandler : FieldGeneratorDriverSide
          {
            private FieldHoldingArrayGeneratorDriverSide top;

            protected override void handle_result(TypeDriverSide result)
              {
                top.value.Add(result);
              }
            protected override string get_what()
              {
                return "element " + top.value.Count + " of " + top.get_what();
              }

            public ElementHandler(FieldHoldingArrayGeneratorDriverSide init_top)
              {
                top = init_top;
              }
          };

        private ElementHandler element_handler;

        protected override JSONHandler start()
          {
            have_value = true;
            value.Clear();
            return element_handler;
          }
        protected override void finish()
          {
            Debug.Assert(have_value);
            handle_result(value);
            element_handler.reset();
          }
        protected virtual void handle_result(List<TypeDriverSide> result)
          {
          }

        public FieldHoldingArrayGeneratorDriverSide(string what)
          {
            element_handler = new ElementHandler(this);
            have_value = false;
            value = new List<TypeDriverSide>();
            base.set_what(what);
          }
        public FieldHoldingArrayGeneratorDriverSide()
          {
            element_handler = new ElementHandler(this);
            have_value = false;
            value = new List<TypeDriverSide>();
          }

        public override void reset()
          {
            element_handler.reset();
            have_value = false;
            value.Clear();
            base.reset();
          }

        public bool have_value;
        public List<TypeDriverSide> value;
      };
            private FieldHoldingGeneratorDriverSide fieldGeneratorDriverSide;
            private class UnknownFieldGenerator : JSONValueHandler
              {
                public bool ignore;
                public List<string> field_names;
                public List<JSONValue > field_values;
                public Dictionary<string, JSONValue > index;
                public UnknownFieldGenerator(bool init_ignore)
                  {
                    ignore = init_ignore;
                    field_names = new List<string>();
                    field_values = new List<JSONValue >();
                index = new Dictionary<string, JSONValue >();
                  }

                protected override void new_value(JSONValue item)
                  {
                    if (ignore)
                        return;
                    Debug.Assert(field_names.Count == (field_values.Count + 1));
                    index.Add(field_names[field_values.Count], item);
                    field_values.Add(item);
                  }
                public override void reset()
                  {
                    field_names.Clear();
                    field_values.Clear();
                index = new Dictionary<string, JSONValue >();
                  }
              };
            private UnknownFieldGenerator unknownFieldGenerator;

            protected bool allow_incomplete;

            protected bool allow_unpolished;

            protected override void start()
              {
              }
            protected override JSONHandler start_field(string field_name)
              {
                JSONHandler result = start_known_field(field_name);
                if (result != null)
                    return result;
                Debug.Assert(unknownFieldGenerator.field_names.Count ==
                       unknownFieldGenerator.field_values.Count);
                if (unknownFieldGenerator.ignore)
                  {
                    Debug.Assert(unknownFieldGenerator.field_names.Count == 0);
                  }
                else
                  {
                    unknownFieldGenerator.field_names.Add(field_name);
                  }
                return unknownFieldGenerator;
              }
            protected override void finish_field(string field_name, JSONHandler field_handler)
              {
              }
            protected override void finish()
              {
                TypeDeviceInfoJSON result = new TypeDeviceInfoJSON();
                Debug.Assert(result != null);
                finish(result);
                int extra_count = unknownFieldGenerator.field_names.Count;
                Debug.Assert(extra_count == unknownFieldGenerator.field_values.Count);
                for (int extra_num = 0; extra_num < extra_count; ++extra_num)
                  {
                    result.extraTypeDeviceInfoAppendPair(unknownFieldGenerator.field_names[extra_num], unknownFieldGenerator.field_values[extra_num]);
                  }
                unknownFieldGenerator.field_names.Clear();
                unknownFieldGenerator.field_values.Clear();
                unknownFieldGenerator.index = new Dictionary<string, JSONValue >();
                handle_result(result);
              }
            protected void finish(TypeDeviceInfoJSON result)
              {
                if (fieldGeneratorDeviceModel.have_value)
                  {
                    result.setDeviceModel(fieldGeneratorDeviceModel.value);
                    fieldGeneratorDeviceModel.have_value = false;
                  }
                if (fieldGeneratorDeviceYear.have_value)
                  {
                    result.setDeviceYear(fieldGeneratorDeviceYear.value);
                    fieldGeneratorDeviceYear.have_value = false;
                  }
                if (fieldGeneratorDeviceName.have_value)
                  {
                    result.setDeviceName(fieldGeneratorDeviceName.value);
                    fieldGeneratorDeviceName.have_value = false;
                  }
                if (fieldGeneratorDriverSide.have_value)
                  {
                    result.setDriverSide(fieldGeneratorDriverSide.value);
                    fieldGeneratorDriverSide.have_value = false;
                  }
              }
            protected abstract void handle_result(TypeDeviceInfoJSON new_result);
            protected virtual JSONHandler start_known_field(string field_name)
              {
                if (String.Compare(field_name, 0, "D", 0, 1, false) == 0)
                  {
                    switch (field_name[1])
                      {
                        case 'e':
                            if (String.Compare(field_name, 2, "vice", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'M':
                                        if ((String.Compare(field_name, 7, "odel", 0, 4, false) == 0) && (field_name.Length == 11))
                                            return fieldGeneratorDeviceModel;
                                        break;
                                    case 'N':
                                        if ((String.Compare(field_name, 7, "ame", 0, 3, false) == 0) && (field_name.Length == 10))
                                            return fieldGeneratorDeviceName;
                                        break;
                                    case 'Y':
                                        if ((String.Compare(field_name, 7, "ear", 0, 3, false) == 0) && (field_name.Length == 10))
                                            return fieldGeneratorDeviceYear;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'r':
                            if ((String.Compare(field_name, 2, "iverSide", 0, 8, false) == 0) && (field_name.Length == 10))
                                return fieldGeneratorDriverSide;
                            break;
                        default:
                            break;
                      }
                  }
                return null;
              }
            public Generator(bool ignore_extras)
              {
                fieldGeneratorDeviceModel = new JSONHoldingStringGenerator("field \"DeviceModel\" of the TypeDeviceInfo class");
                fieldGeneratorDeviceYear = new JSONHoldingValueGenerator("field \"DeviceYear\" of the TypeDeviceInfo class");
                fieldGeneratorDeviceName = new JSONHoldingStringGenerator("field \"DeviceName\" of the TypeDeviceInfo class");
                fieldGeneratorDriverSide = new FieldHoldingGeneratorDriverSide("field \"DriverSide\" of the TypeDeviceInfo class");
                unknownFieldGenerator = new UnknownFieldGenerator(ignore_extras);
                set_what("the TypeDeviceInfo class");
                allow_incomplete = false;
                allow_unpolished = false;
              }
            public Generator()
              {
                fieldGeneratorDeviceModel = new JSONHoldingStringGenerator("field \"DeviceModel\" of the TypeDeviceInfo class");
                fieldGeneratorDeviceYear = new JSONHoldingValueGenerator("field \"DeviceYear\" of the TypeDeviceInfo class");
                fieldGeneratorDeviceName = new JSONHoldingStringGenerator("field \"DeviceName\" of the TypeDeviceInfo class");
                fieldGeneratorDriverSide = new FieldHoldingGeneratorDriverSide("field \"DriverSide\" of the TypeDeviceInfo class");
                unknownFieldGenerator = new UnknownFieldGenerator(false);
                set_what("the TypeDeviceInfo class");
                allow_incomplete = false;
                allow_unpolished = false;
              }

            public override void reset()
              {
                fieldGeneratorDeviceModel.reset();
                fieldGeneratorDeviceYear.reset();
                fieldGeneratorDeviceName.reset();
                fieldGeneratorDriverSide.reset();
                base.reset();
                unknownFieldGenerator.reset();
              }
            public void set_allow_incomplete(bool new_allow_incomplete)
              {
                allow_incomplete = new_allow_incomplete;
              }
            public void set_allow_unpolished(bool new_allow_unpolished)
              {
                allow_unpolished = new_allow_unpolished;
              }
          };
        public class HoldingGenerator : Generator
          {
            protected override void handle_result(TypeDeviceInfoJSON  result)
              {
    //@@@            Debug.Assert(!have_value);
                have_value = true;
                value = result;
              }

            public HoldingGenerator(String what, bool ignore_extras) : base(ignore_extras)
              {
                have_value = false;
                base.set_what(what);
              }

            public HoldingGenerator(String what) : base(false)
              {
                have_value = false;
                base.set_what(what);
              }

            public override void reset()
              {
                have_value = false;
                base.reset();
              }

            public bool have_value;
            public TypeDeviceInfoJSON value;
          };
        public class HoldingArrayGenerator : JSONArrayGenerator
      {
        protected class ElementHandler : Generator
          {
            private HoldingArrayGenerator top;

            protected override void handle_result(TypeDeviceInfoJSON  result)
              {
                top.value.Add(result);
              }
            protected override string get_what()
              {
                return "element " + top.value.Count + " of " + top.get_what();
              }

            public ElementHandler(HoldingArrayGenerator init_top, bool ignore_extras) : base(ignore_extras)
              {
                top = init_top;
              }
          };

        private ElementHandler element_handler;

        protected override JSONHandler start()
          {
            have_value = true;
            value.Clear();
            return element_handler;
          }
        protected override void finish()
          {
            Debug.Assert(have_value);
            handle_result(value);
            element_handler.reset();
          }
        protected virtual void handle_result(List<TypeDeviceInfoJSON> result)

          {
          }

        public HoldingArrayGenerator(string what, bool ignore_extras)
          {
            element_handler = new ElementHandler(this, ignore_extras);
            have_value = false;
            value = new List<TypeDeviceInfoJSON>();
            base.set_what(what);
          }
        public HoldingArrayGenerator(bool ignore_extras)
          {
            element_handler = new ElementHandler(this, ignore_extras);
            value = new List<TypeDeviceInfoJSON>();
            have_value = false;
          }

        public void set_allow_incomplete(bool new_allow_incomplete)
          {
            element_handler.set_allow_incomplete(new_allow_incomplete);
          }

        public void set_allow_unpolished(bool new_allow_unpolished)
          {
            element_handler.set_allow_unpolished(new_allow_unpolished);
          }

        public override void reset()
          {
            element_handler.reset();
            have_value = false;
            value.Clear();
            base.reset();
          }

        public bool have_value;
        public List<TypeDeviceInfoJSON> value;
      };
      };
    public enum TypeUnitPreference
      {
        UnitPreference_US,
        UnitPreference_METRIC
      };

    public static TypeUnitPreference  stringToUnitPreference(string chars)
      {
        switch (chars[0])
          {
            case 'M':
                if ((String.Compare(chars, 1, "ETRIC", 0, 5, false) == 0) && (chars.Length == 6))
                    return TypeUnitPreference.UnitPreference_METRIC;
                break;
            case 'U':
                if ((String.Compare(chars, 1, "S", 0, 1, false) == 0) && (chars.Length == 2))
                    return TypeUnitPreference.UnitPreference_US;
                break;
            default:
                break;
          }
        throw new Exception("The value for field `UnitPreference' is not one of the legal values.");
      }

    public static string  stringFromUnitPreference(TypeUnitPreference the_enum)
      {
        switch (the_enum)
          {
            case TypeUnitPreference.UnitPreference_US:
                return "US";
            case TypeUnitPreference.UnitPreference_METRIC:
                return "METRIC";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    public struct TypeClientVersion
      {
        public int key;
        public string choice0;
        public BigInteger choice1;
      };
    public enum TypeProfanityFilter
      {
        ProfanityFilter_AllowAll,
        ProfanityFilter_StarAllButFirst,
        ProfanityFilter_StarAll
      };

    public static TypeProfanityFilter  stringToProfanityFilter(string chars)
      {
        switch (chars[0])
          {
            case 'A':
                if ((String.Compare(chars, 1, "llowAll", 0, 7, false) == 0) && (chars.Length == 8))
                    return TypeProfanityFilter.ProfanityFilter_AllowAll;
                break;
            case 'S':
                if (String.Compare(chars, 1, "tarAll", 0, 6, false) == 0)
                  {
                    if (chars.Length == 7)
                      {
                        return TypeProfanityFilter.ProfanityFilter_StarAll;
                      }
                    switch (chars[7])
                      {
                        case 'B':
                            if ((String.Compare(chars, 8, "utFirst", 0, 7, false) == 0) && (chars.Length == 15))
                                return TypeProfanityFilter.ProfanityFilter_StarAllButFirst;
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        throw new Exception("The value for field `ProfanityFilter' is not one of the legal values.");
      }

    public static string  stringFromProfanityFilter(TypeProfanityFilter the_enum)
      {
        switch (the_enum)
          {
            case TypeProfanityFilter.ProfanityFilter_AllowAll:
                return "AllowAll";
            case TypeProfanityFilter.ProfanityFilter_StarAllButFirst:
                return "StarAllButFirst";
            case TypeProfanityFilter.ProfanityFilter_StarAll:
                return "StarAll";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    public enum TypeResponseAudioShortOrLong
      {
        ResponseAudioShortOrLong_Short,
        ResponseAudioShortOrLong_Long
      };

    public static TypeResponseAudioShortOrLong  stringToResponseAudioShortOrLong(string chars)
      {
        switch (chars[0])
          {
            case 'L':
                if ((String.Compare(chars, 1, "ong", 0, 3, false) == 0) && (chars.Length == 4))
                    return TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Long;
                break;
            case 'S':
                if ((String.Compare(chars, 1, "hort", 0, 4, false) == 0) && (chars.Length == 5))
                    return TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Short;
                break;
            default:
                break;
          }
        throw new Exception("The value for field `ResponseAudioShortOrLong' is not one of the legal values.");
      }

    public static string  stringFromResponseAudioShortOrLong(TypeResponseAudioShortOrLong the_enum)
      {
        switch (the_enum)
          {
            case TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Short:
                return "Short";
            case TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Long:
                return "Long";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    public enum TypeResponseAudioAcceptedEncodingsKnownValues
      {
        ResponseAudioAcceptedEncodings_WAV,
        ResponseAudioAcceptedEncodings_Speex,
        ResponseAudioAcceptedEncodings__none
      };
    public struct TypeResponseAudioAcceptedEncodings
      {
        public bool in_known_list;
        public string string_value;
        public TypeResponseAudioAcceptedEncodingsKnownValues list_value;
      };

    public static TypeResponseAudioAcceptedEncodingsKnownValues  stringToResponseAudioAcceptedEncodings(string chars)
      {
        switch (chars[0])
          {
            case 'S':
                if ((String.Compare(chars, 1, "peex", 0, 4, false) == 0) && (chars.Length == 5))
                    return TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_Speex;
                break;
            case 'W':
                if ((String.Compare(chars, 1, "AV", 0, 2, false) == 0) && (chars.Length == 3))
                    return TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_WAV;
                break;
            default:
                break;
          }
        return TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings__none;
      }

    public static string  stringFromResponseAudioAcceptedEncodings(TypeResponseAudioAcceptedEncodingsKnownValues the_enum)
      {
        switch (the_enum)
          {
            case TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_WAV:
                return "WAV";
            case TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_Speex:
                return "Speex";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    private bool flagHasLatitude;
    private double storeLatitude;
    private string textStoreLatitude;
    private bool flagHasLongitude;
    private double storeLongitude;
    private string textStoreLongitude;
    private bool flagHasPositionTime;
    private BigInteger storePositionTime;
    private bool flagHasPositionHorizontalAccuracy;
    private double storePositionHorizontalAccuracy;
    private string textStorePositionHorizontalAccuracy;
    private bool flagHasStreet;
    private string storeStreet;
    private bool flagHasCity;
    private string storeCity;
    private bool flagHasState;
    private string storeState;
    private bool flagHasCountry;
    private string storeCountry;
    private bool flagHasRoutePoints;
    private RoutePointsJSON  storeRoutePoints;
    private bool flagHasRouteInformation;
    private ClientRouteInformationJSON  storeRouteInformation;
    private bool flagHasControllableTrackPlaying;
    private bool storeControllableTrackPlaying;
    private bool flagHasTimeStamp;
    private BigInteger storeTimeStamp;
    private bool flagHasTimeZone;
    private string storeTimeZone;
    private bool flagHasConversationState;
    private ConversationStateJSON  storeConversationState;
    private bool flagHasClientState;
    private ClientStateJSON  storeClientState;
    private bool flagHasDeviceInfo;
    private TypeDeviceInfoJSON  storeDeviceInfo;
    private bool flagHasSendBack;
    private JSONValue  storeSendBack;
    private bool flagHasPreferredImageSize;
    private List< BigInteger > storePreferredImageSize;
    private bool flagHasInputLanguageEnglishName;
    private string storeInputLanguageEnglishName;
    private bool flagHasInputLanguageNativeName;
    private string storeInputLanguageNativeName;
    private bool flagHasInputLanguageIETFTag;
    private string storeInputLanguageIETFTag;
    private bool flagHasOutputLanguageEnglishName;
    private string storeOutputLanguageEnglishName;
    private bool flagHasOutputLanguageNativeName;
    private string storeOutputLanguageNativeName;
    private bool flagHasOutputLanguageIETFTag;
    private string storeOutputLanguageIETFTag;
    private bool flagHasResultVersionAccepted;
    private double storeResultVersionAccepted;
    private string textStoreResultVersionAccepted;
    private bool flagHasUnitPreference;
    private TypeUnitPreference storeUnitPreference;
    private bool flagHasDefaultTimeFormat24Hours;
    private bool storeDefaultTimeFormat24Hours;
    private bool flagHasClientID;
    private string storeClientID;
    private bool flagHasClientVersion;
    private TypeClientVersion storeClientVersion;
    private bool flagHasDeviceID;
    private string storeDeviceID;
    private bool flagHasSDK;
    private string storeSDK;
    private bool flagHasSDKInfo;
    private JSONObjectValue  storeSDKInfo;
    private bool flagHasFirstPersonSelf;
    private string storeFirstPersonSelf;
    private bool flagHasFirstPersonSelfSpoken;
    private string storeFirstPersonSelfSpoken;
    private bool flagHasSecondPersonSelf;
    private List< string > storeSecondPersonSelf;
    private bool flagHasSecondPersonSelfSpoken;
    private List< string > storeSecondPersonSelfSpoken;
    private bool flagHasWakeUpPhraseIncludedInAudio;
    private bool storeWakeUpPhraseIncludedInAudio;
    private bool flagHasInitialSecondsOfAudioToIgnore;
    private double storeInitialSecondsOfAudioToIgnore;
    private string textStoreInitialSecondsOfAudioToIgnore;
    private bool flagHasWakeUpPattern;
    private string storeWakeUpPattern;
    private bool flagHasUserID;
    private string storeUserID;
    private bool flagHasRequestID;
    private string storeRequestID;
    private bool flagHasSessionID;
    private string storeSessionID;
    private bool flagHasDomains;
    private DomainsJSON  storeDomains;
    private bool flagHasResultUpdateAllowed;
    private bool storeResultUpdateAllowed;
    private bool flagHasPartialTranscriptsDesired;
    private bool storePartialTranscriptsDesired;
    private bool flagHasMinResults;
    private BigInteger storeMinResults;
    private bool flagHasMaxResults;
    private BigInteger storeMaxResults;
    private bool flagHasObjectByteCountPrefix;
    private bool storeObjectByteCountPrefix;
    private bool flagHasProfanityFilter;
    private TypeProfanityFilter storeProfanityFilter;
    private bool flagHasClientMatches;
    private List< ClientMatchJSON  > storeClientMatches;
    private bool flagHasClientMatchesOnly;
    private bool storeClientMatchesOnly;
    private bool flagHasPagination;
    private PaginationJSON  storePagination;
    private bool flagHasResponseAudioVoice;
    private string storeResponseAudioVoice;
    private bool flagHasResponseAudioShortOrLong;
    private TypeResponseAudioShortOrLong storeResponseAudioShortOrLong;
    private bool flagHasResponseAudioAcceptedEncodings;
    private List< TypeResponseAudioAcceptedEncodings > storeResponseAudioAcceptedEncodings;
    private bool flagHasReturnResponseAudioAsURL;
    private bool storeReturnResponseAudioAsURL;
    private bool flagHasVoiceActivityDetection;
    private VoiceActivityDetectionJSON  storeVoiceActivityDetection;
    private bool flagHasServerDeterminesEndOfAudio;
    private bool storeServerDeterminesEndOfAudio;
    private bool flagHasIntentOnly;
    private bool storeIntentOnly;
    private bool flagHasDisableSpellCorrection;
    private bool storeDisableSpellCorrection;
    private bool flagHasUseContactData;
    private bool storeUseContactData;
    private bool flagHasUseClientTime;
    private bool storeUseClientTime;
    private bool flagHasForceConversationStateTime;
    private BigInteger storeForceConversationStateTime;
    private bool flagHasOutputLatticeSize;
    private BigInteger storeOutputLatticeSize;
    private bool flagHasMatchingMutations;
    private MatchingMutationsJSON  storeMatchingMutations;
    private bool flagHasUseFormattedTranscriptionAsDefault;
    private bool storeUseFormattedTranscriptionAsDefault;
    private bool flagHasResponseRanking;
    private ResponseRankingJSON  storeResponseRanking;
    private bool flagHasAcapelaVoiceParameters;
    private AcapelaVoiceParametersJSON  storeAcapelaVoiceParameters;
    private bool flagHasAllowPopularNameContactMatches;
    private AllowPopularNameContactMatchesJSON  storeAllowPopularNameContactMatches;
    private bool flagHasAlwaysFetchCurrentConditionsData;
    private AlwaysFetchCurrentConditionsDataJSON  storeAlwaysFetchCurrentConditionsData;
    private bool flagHasAlwaysFetchHourlyForecastData;
    private AlwaysFetchHourlyForecastDataJSON  storeAlwaysFetchHourlyForecastData;
    private bool flagHasArrivalTime;
    private DateAndOrTimeJSON  storeArrivalTime;
    private bool flagHasAvantiMachineState;
    private AvantiMachineStateJSON  storeAvantiMachineState;
    private bool flagHasBingAdExtensions;
    private BingRequestInfoAdExtensionsJSON  storeBingAdExtensions;
    private bool flagHasBunnIsConfirmationRequired;
    private BunnIsConfirmationRequiredJSON  storeBunnIsConfirmationRequired;
    private bool flagHasBunnMachineState;
    private BunnMachineStateJSON  storeBunnMachineState;
    private bool flagHasCalendarDataSynchronization;
    private CalendarDataSynchronizationRequestInfoJSON  storeCalendarDataSynchronization;
    private bool flagHasCallPermissions;
    private CallPermissionsJSON  storeCallPermissions;
    private bool flagHasCarControlClimateClientConfiguration;
    private CarControlClimateClientConfigurationJSON  storeCarControlClimateClientConfiguration;
    private bool flagHasCarControlClimateTemperatureConfig;
    private CarControlClimateTemperatureConfigJSON  storeCarControlClimateTemperatureConfig;
    private bool flagHasCarManualModel;
    private CarManualModelJSON  storeCarManualModel;
    private bool flagHasCarManualNormalizedQueryToSet;
    private CarManualNormalizedQueryJSON  storeCarManualNormalizedQueryToSet;
    private bool flagHasCarManualResponseToSet;
    private DynamicResponseJSON  storeCarManualResponseToSet;
    private bool flagHasCarStatus;
    private CarStatusJSON  storeCarStatus;
    private bool flagHasChargingClientState;
    private ChargingClientStateJSON  storeChargingClientState;
    private bool flagHasClientListMatches;
    private ClientListMatchesJSON  storeClientListMatches;
    private bool flagHasCollateMusicEntities;
    private CollateMusicEntitiesJSON  storeCollateMusicEntities;
    private bool flagHasConnectedToThirdPartyMusicApp;
    private ConnectedToThirdPartyMusicAppJSON  storeConnectedToThirdPartyMusicApp;
    private bool flagHasContactQueryExclusions;
    private ContactQueryExclusionsJSON  storeContactQueryExclusions;
    private bool flagHasPhoneCommandConfiguration;
    private PhoneCommandConfigurationJSON  storePhoneCommandConfiguration;
    private bool flagHasConvertToNewInformationNuggets;
    private ConvertToNewInformationNuggetsJSON  storeConvertToNewInformationNuggets;
    private bool flagHasCustomSpeechRecognitionPatternsGroupListData;
    private CustomSpeechRecognitionPatternsGroupListDataJSON  storeCustomSpeechRecognitionPatternsGroupListData;
    private bool flagHasCustomSpeechRecognitionPatternsReadData;
    private CustomSpeechRecognitionPatternsReadDataJSON  storeCustomSpeechRecognitionPatternsReadData;
    private bool flagHasCustomSpeechRecognitionPatternsWeight;
    private CustomSpeechRecognitionPatternsWeightJSON  storeCustomSpeechRecognitionPatternsWeight;
    private bool flagHasCustomSpeechRecognitionPatternsWriteData;
    private CustomSpeechRecognitionPatternsDataJSON  storeCustomSpeechRecognitionPatternsWriteData;
    private bool flagHasDeleteUserMemoryLocation;
    private DeleteUserMemoryLocationJSON  storeDeleteUserMemoryLocation;
    private bool flagHasDisableMusicPlayerListPositionSpecification;
    private DisableListPositionSpecificationJSON  storeDisableMusicPlayerListPositionSpecification;
    private bool flagHasDisableMusicSearchListPositionSpecification;
    private DisableListPositionSpecificationJSON  storeDisableMusicSearchListPositionSpecification;
    private bool flagHasDisambiguateResultsBeforeAction;
    private DisambiguateResultsBeforeActionJSON  storeDisambiguateResultsBeforeAction;
    private bool flagHasDisplayedReminder;
    private ReminderJSON  storeDisplayedReminder;
    private bool flagHasEnableClientControlInModes;
    private RequestInfoBooleanFlagJSON  storeEnableClientControlInModes;
    private bool flagHasEnableLocalPlacesQueries;
    private RequestInfoBooleanFlagJSON  storeEnableLocalPlacesQueries;
    private bool flagHasLocalPlacesSettings;
    private LocalPlacesSettingsJSON  storeLocalPlacesSettings;
    private bool flagHasEnableMusicPlayerFavorites;
    private EnableMusicPlayerFavoritesJSON  storeEnableMusicPlayerFavorites;
    private bool flagHasEnabledCustomSpeechRecognitionPatternGroups;
    private CustomSpeechRecognitionPatternsGroupListJSON  storeEnabledCustomSpeechRecognitionPatternGroups;
    private bool flagHasEntertainmentClientState;
    private EntertainmentClientStateJSON  storeEntertainmentClientState;
    private bool flagHasEntertainmentTitlesUploadData;
    private EntertainmentTitlesUploadDataJSON  storeEntertainmentTitlesUploadData;
    private bool flagHasExcludeAllMusicResultsWithoutExplicitContext;
    private ExcludeAllMusicResultsWithoutExplicitContextJSON  storeExcludeAllMusicResultsWithoutExplicitContext;
    private bool flagHasExcludeWikipediaLowConfidenceResults;
    private ExcludeWikipediaLowConfidenceResultsJSON  storeExcludeWikipediaLowConfidenceResults;
    private bool flagHasFitBitAccessToken;
    private FitBitAccessTokenJSON  storeFitBitAccessToken;
    private bool flagHasFitBitRefreshToken;
    private FitBitRefreshTokenJSON  storeFitBitRefreshToken;
    private bool flagHasGetHumaxMediaCloudURL;
    private GetHumaxMediaCloudURLJSON  storeGetHumaxMediaCloudURL;
    private bool flagHasGetOAuth2ClientID;
    private GetClientIDOAuth2RequestInfoFieldJSON  storeGetOAuth2ClientID;
    private bool flagHasGetOAuth2ClientSecret;
    private GetClientSecretOAuth2RequestInfoFieldJSON  storeGetOAuth2ClientSecret;
    private bool flagHasSquare;
    private GetClientSecretOAuth2RequestInfoFieldJSON  storeSquare;
    private bool flagHasGetOAuth2ClientToken;
    private GetClientTokenOAuth2RequestInfoFieldJSON  storeGetOAuth2ClientToken;
    private bool flagHasGetUberClientId;
    private GetUberClientIdJSON  storeGetUberClientId;
    private bool flagHasGetUberServerToken;
    private GetUberServerTokenJSON  storeGetUberServerToken;
    private bool flagHasHLSRadius;
    private HLSRadiusJSON  storeHLSRadius;
    private bool flagHasHarmanDeviceRegistration;
    private HarmanDeviceRegistrationJSON  storeHarmanDeviceRegistration;
    private bool flagHasHarmanHospitalityAmxControllerHttpRequest;
    private HarmanAmxControllerHttpRequestJSON  storeHarmanHospitalityAmxControllerHttpRequest;
    private bool flagHasHarmanHospitalityMeetingInformation;
    private HarmanHospitalityMeetingInformationJSON  storeHarmanHospitalityMeetingInformation;
    private bool flagHasHarmanHospitalityPropertyInformation;
    private HarmanHospitalityPropertyInformationJSON  storeHarmanHospitalityPropertyInformation;
    private bool flagHasHarmanPropertyRegistration;
    private HarmanPropertyRegistrationJSON  storeHarmanPropertyRegistration;
    private bool flagHasHasTollsOnThisRoad;
    private RequestInfoBooleanFlagJSON  storeHasTollsOnThisRoad;
    private bool flagHasHomeAutomationDomainSettings;
    private HomeAutomationDomainSettingsJSON  storeHomeAutomationDomainSettings;
    private bool flagHasHondaAgent20MParameters;
    private HondaAgent20MParametersJSON  storeHondaAgent20MParameters;
    private bool flagHasHondaAgentParameters;
    private HondaAgentParametersJSON  storeHondaAgentParameters;
    private bool flagHasHondaCarManualParameters;
    private HondaCarManualParametersJSON  storeHondaCarManualParameters;
    private bool flagHasHueDeviceRegistration;
    private HueDeviceRegistrationJSON  storeHueDeviceRegistration;
    private bool flagHasHumaxHomeAutomationCredentials;
    private HumaxHomeAutomationCredentialsJSON  storeHumaxHomeAutomationCredentials;
    private bool flagHasHumaxMediaCloudURL;
    private HumaxMediaCloudURLJSON  storeHumaxMediaCloudURL;
    private bool flagHasHumaxSmartTVClientState;
    private HumaxSmartTVClientStateJSON  storeHumaxSmartTVClientState;
    private bool flagHasIHeartMediaDeviceIdentifiers;
    private IHeartMediaDeviceIdentifiersJSON  storeIHeartMediaDeviceIdentifiers;
    private bool flagHasIHeartRadioPreferArtistStations;
    private IHeartRadioPreferArtistStationsJSON  storeIHeartRadioPreferArtistStations;
    private bool flagHasIHeartRadioPreferGenericRadioMatches;
    private IHeartRadioPreferGenericRadioMatchesJSON  storeIHeartRadioPreferGenericRadioMatches;
    private bool flagHasIHeartRadioPreferTerrestrialRadioMatches;
    private IHeartRadioPreferTerrestrialRadioMatchesJSON  storeIHeartRadioPreferTerrestrialRadioMatches;
    private bool flagHasIftttKeyItem;
    private IftttKeyItemJSON  storeIftttKeyItem;
    private bool flagHasImageSearchConfiguration;
    private ImageSearchRequestInfoConfigurationJSON  storeImageSearchConfiguration;
    private bool flagHasImageSearchRequestInfoProviders;
    private ImageSearchRequestInfoProvidersJSON  storeImageSearchRequestInfoProviders;
    private bool flagHasIncludeAllMusicResultsWithoutContext;
    private IncludeAllMusicResultsWithoutContextJSON  storeIncludeAllMusicResultsWithoutContext;
    private bool flagHasIncomingCallPending;
    private IncomingCallPendingJSON  storeIncomingCallPending;
    private bool flagHasInputOverrideDeleteFunction;
    private RequestInfoBooleanFlagJSON  storeInputOverrideDeleteFunction;
    private bool flagHasInputOverrideFunction;
    private InputOverrideFunctionJSON  storeInputOverrideFunction;
    private bool flagHasInputOverrideFunctionLanguage;
    private UploadedCodeFunctionLanguageJSON  storeInputOverrideFunctionLanguage;
    private bool flagHasInputOverrideFunctionSource;
    private UploadedCodeSourceJSON  storeInputOverrideFunctionSource;
    private bool flagHasInputOverrideReadFunction;
    private RequestInfoBooleanFlagJSON  storeInputOverrideReadFunction;
    private bool flagHasKuriInfo;
    private KuriInfoJSON  storeKuriInfo;
    private bool flagHasLocalSearchClientState;
    private LocalSearchClientStateJSON  storeLocalSearchClientState;
    private bool flagHasMapClientControlPageToScroll;
    private RequestInfoBooleanFlagJSON  storeMapClientControlPageToScroll;
    private bool flagHasMultipleChoiceQuizAPIRequest;
    private MultipleChoiceQuizAPIRequestJSON  storeMultipleChoiceQuizAPIRequest;
    private bool flagHasMusicClientState;
    private MusicClientStateJSON  storeMusicClientState;
    private bool flagHasNaritaAirportGuideArea;
    private NaritaAirportGuideAreaJSON  storeNaritaAirportGuideArea;
    private bool flagHasNaritaAirportGuideFloor;
    private NaritaAirportGuideFloorJSON  storeNaritaAirportGuideFloor;
    private bool flagHasNaritaAirportGuideTerminal;
    private NaritaAirportGuideTerminalJSON  storeNaritaAirportGuideTerminal;
    private bool flagHasNavigationControlContext;
    private NavigationControlContextJSON  storeNavigationControlContext;
    private bool flagHasTurnOffGuidanceMeansMute;
    private RequestInfoBooleanFlagJSON  storeTurnOffGuidanceMeansMute;
    private bool flagHasNavigationLocationDisambiguation;
    private NavigationLocationDisambiguationConfigJSON  storeNavigationLocationDisambiguation;
    private bool flagHasNewReminder;
    private CreateReminderFullDataJSON  storeNewReminder;
    private bool flagHasNumberOfVolumeLevels;
    private NumberOfVolumeLevelsJSON  storeNumberOfVolumeLevels;
    private bool flagHasOAuth2ClientID;
    private ClientIDOAuth2RequestInfoFieldJSON  storeOAuth2ClientID;
    private bool flagHasOAuth2ClientSecret;
    private ClientSecretOAuth2RequestInfoFieldJSON  storeOAuth2ClientSecret;
    private bool flagHasOAuth2ClientToken;
    private OAuth2ClientTokenJSON  storeOAuth2ClientToken;
    private bool flagHasOAuth2CodeData;
    private CodeDataOAuth2RequestInfoFieldJSON  storeOAuth2CodeData;
    private bool flagHasOAuth2RefreshToken;
    private RefreshTokenOAuth2RequestInfoFieldJSON  storeOAuth2RefreshToken;
    private bool flagHasOrganizationalChartRequest;
    private OrganizationalChartRequestJSON  storeOrganizationalChartRequest;
    private bool flagHasOutputDeepIntegrationLattice;
    private OutputDeepIntegrationLatticeJSON  storeOutputDeepIntegrationLattice;
    private bool flagHasOutputSLMLattice;
    private OutputSLMLatticeJSON  storeOutputSLMLattice;
    private bool flagHasOutputOverrideKind;
    private OutputOverrideKindJSON  storeOutputOverrideKind;
    private bool flagHasOutputOverrideFunction;
    private OutputOverrideFunctionJSON  storeOutputOverrideFunction;
    private bool flagHasOutputOverrideFunctionLanguage;
    private UploadedCodeFunctionLanguageJSON  storeOutputOverrideFunctionLanguage;
    private bool flagHasOutputOverrideFunctionSource;
    private UploadedCodeSourceJSON  storeOutputOverrideFunctionSource;
    private bool flagHasOutputOverrideCommandIsPreAudioOut;
    private RequestInfoBooleanFlagJSON  storeOutputOverrideCommandIsPreAudioOut;
    private bool flagHasOutputOverrideDeleteCommandFunction;
    private RequestInfoBooleanFlagJSON  storeOutputOverrideDeleteCommandFunction;
    private bool flagHasOutputOverrideDeleteInformationNuggetFunction;
    private RequestInfoBooleanFlagJSON  storeOutputOverrideDeleteInformationNuggetFunction;
    private bool flagHasOutputOverrideInformationNuggetFunction;
    private OutputOverrideFunctionJSON  storeOutputOverrideInformationNuggetFunction;
    private bool flagHasOutputOverrideInformationNuggetFunctionLanguage;
    private UploadedCodeFunctionLanguageJSON  storeOutputOverrideInformationNuggetFunctionLanguage;
    private bool flagHasOutputOverrideInformationNuggetFunctionSource;
    private UploadedCodeSourceJSON  storeOutputOverrideInformationNuggetFunctionSource;
    private bool flagHasOutputOverrideReadCommandFunction;
    private RequestInfoBooleanFlagJSON  storeOutputOverrideReadCommandFunction;
    private bool flagHasOutputOverrideReadInformationNuggetFunction;
    private RequestInfoBooleanFlagJSON  storeOutputOverrideReadInformationNuggetFunction;
    private bool flagHasOutputOverrideCommandFunction;
    private OutputOverrideFunctionJSON  storeOutputOverrideCommandFunction;
    private bool flagHasOutputOverrideCommandFunctionLanguage;
    private UploadedCodeFunctionLanguageJSON  storeOutputOverrideCommandFunctionLanguage;
    private bool flagHasOutputOverrideCommandFunctionSource;
    private UploadedCodeSourceJSON  storeOutputOverrideCommandFunctionSource;
    private bool flagHasPandoraCustomClientPrompt;
    private ClientPromptPandoraCustomRequestInfoFieldJSON  storePandoraCustomClientPrompt;
    private bool flagHasPandoraCustomEnableComponentFormat;
    private EnableComponentFormatPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableComponentFormat;
    private bool flagHasPandoraCustomEnableDomain;
    private EnableDomainPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableDomain;
    private bool flagHasPandoraCustomEnableExclusionInTarzanMode;
    private EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableExclusionInTarzanMode;
    private bool flagHasPandoraCustomEnableInferredPlay;
    private EnableInferredPlayPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableInferredPlay;
    private bool flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
    private EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
    private bool flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
    private EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON  storePandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
    private bool flagHasPandoraCustomEnableLongJSONFallback;
    private EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableLongJSONFallback;
    private bool flagHasPandoraCustomEnablePodcastMatches;
    private EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnablePodcastMatches;
    private bool flagHasPandoraCustomEnableUserDataQueries;
    private EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableUserDataQueries;
    private bool flagHasPandoraCustomEnableWildcardMatches;
    private EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableWildcardMatches;
    private bool flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback;
    private EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON  storePandoraCustomEnableWildcardMatchesOnlyAsFallback;
    private bool flagHasPandoraCustomExtendedStationModeData;
    private ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON  storePandoraCustomExtendedStationModeData;
    private bool flagHasPandoraCustomRapidIngestionData;
    private RapidIngestionDataPandoraCustomRequestInfoFieldJSON  storePandoraCustomRapidIngestionData;
    private bool flagHasPandoraCustomUserData;
    private UserDataPandoraCustomRequestInfoFieldJSON  storePandoraCustomUserData;
    private bool flagHasParkingClientState;
    private ParkingClientStateJSON  storeParkingClientState;
    private bool flagHasPepperEnabled;
    private PepperEnabledJSON  storePepperEnabled;
    private bool flagHasPhoneDisambiguationOmitList;
    private PhoneDisambiguationOmitListJSON  storePhoneDisambiguationOmitList;
    private bool flagHasRadioControlAvailableAudioSources;
    private RadioControlAvailableAudioSourcesJSON  storeRadioControlAvailableAudioSources;
    private bool flagHasRadioControlOtherAMBands;
    private RadioControlOtherAMBandsJSON  storeRadioControlOtherAMBands;
    private bool flagHasRadioControlOtherFMBands;
    private RadioControlOtherFMBandsJSON  storeRadioControlOtherFMBands;
    private bool flagHasRadioControlRecognizeNorthAmericanAMBand;
    private RadioControlRecognizeNorthAmericanAMBandJSON  storeRadioControlRecognizeNorthAmericanAMBand;
    private bool flagHasRadioControlRecognizeNorthAmericanFMBand;
    private RadioControlRecognizeNorthAmericanFMBandJSON  storeRadioControlRecognizeNorthAmericanFMBand;
    private bool flagHasRadioControlTunableStations;
    private RadioControlTunableStationsJSON  storeRadioControlTunableStations;
    private bool flagHasReadSpeakerVoiceParameters;
    private ReadSpeakerVoiceParametersJSON  storeReadSpeakerVoiceParameters;
    private bool flagHasRecipeParameters;
    private RecipeParametersJSON  storeRecipeParameters;
    private bool flagHasRegionalPhoneNumberConfiguration;
    private RegionalPhoneNumberConfigurationJSON  storeRegionalPhoneNumberConfiguration;
    private bool flagHasRemainingDistance;
    private AmountJSON  storeRemainingDistance;
    private bool flagHasRemainingTravelTime;
    private AmountJSON  storeRemainingTravelTime;
    private bool flagHasReminders;
    private ReminderListJSON  storeReminders;
    private bool flagHasRestaurantMenuMetadata;
    private RestaurantMenuMetadataJSON  storeRestaurantMenuMetadata;
    private bool flagHasRestaurantMenuObject;
    private RestaurantMenuObjectJSON  storeRestaurantMenuObject;
    private bool flagHasRestaurantOrderingMenuData;
    private RestaurantOrderingMenuDataJSON  storeRestaurantOrderingMenuData;
    private bool flagHasRestaurantOrderingQueriesMenuDataStoreID;
    private RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON  storeRestaurantOrderingQueriesMenuDataStoreID;
    private bool flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
    private RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON  storeRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
    private bool flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
    private RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON  storeRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
    private bool flagHasRestaurantOrderingQueriesRequestData;
    private RestaurantOrderingQueriesRequestDataJSON  storeRestaurantOrderingQueriesRequestData;
    private bool flagHasReturnInformationNuggetsForMusicSearch;
    private ReturnInformationNuggetsForMusicSearchJSON  storeReturnInformationNuggetsForMusicSearch;
    private bool flagHasRobotInfo;
    private RobotInfoJSON  storeRobotInfo;
    private bool flagHasSendFullWeatherForecastData;
    private SendFullWeatherForecastDataJSON  storeSendFullWeatherForecastData;
    private bool flagHasSetUserMemoryLocation;
    private SetUserMemoryLocationJSON  storeSetUserMemoryLocation;
    private bool flagHasSiriusXMEnableDomain;
    private SiriusXMEnableDomainJSON  storeSiriusXMEnableDomain;
    private bool flagHasSiriusXMEnableGenericChannelMatches;
    private SiriusXMEnableGenericChannelMatchesJSON  storeSiriusXMEnableGenericChannelMatches;
    private bool flagHasSiriusXMEnableWildcardMatches;
    private SiriusXMEnableWildcardMatchesJSON  storeSiriusXMEnableWildcardMatches;
    private bool flagHasSmartTVOnScreenItems;
    private SmartTVOnScreenItemsRequestInfoFieldJSON  storeSmartTVOnScreenItems;
    private bool flagHasSmartTVUserCustomInputSource;
    private SmartTVUserCustomInputSourceRequestInfoFieldJSON  storeSmartTVUserCustomInputSource;
    private bool flagHasSoundHoundTTSParameters;
    private SoundHoundTTSParametersJSON  storeSoundHoundTTSParameters;
    private bool flagHasSpeedLimitOnThisRoad;
    private AmountJSON  storeSpeedLimitOnThisRoad;
    private bool flagHasSportsLeagueControl;
    private SportsLeagueControlJSON  storeSportsLeagueControl;
    private bool flagHasSpotifyPlaylistEnableWildcardMatches;
    private EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON  storeSpotifyPlaylistEnableWildcardMatches;
    private bool flagHasStoredAlwaysMatchReadData;
    private StoredAlwaysMatchReadDataJSON  storeStoredAlwaysMatchReadData;
    private bool flagHasStoredAlwaysMatchWriteData;
    private ClientMatchesJSON  storeStoredAlwaysMatchWriteData;
    private bool flagHasStoredGlobalPagesToMatch;
    private StoredPageMatchPageListJSON  storeStoredGlobalPagesToMatch;
    private bool flagHasStoredGlobalPagesToNotMatch;
    private StoredPageMatchPageListJSON  storeStoredGlobalPagesToNotMatch;
    private bool flagHasStoredGlobalPagesToSetOffByDefault;
    private StoredPageMatchPageListJSON  storeStoredGlobalPagesToSetOffByDefault;
    private bool flagHasStoredGlobalPagesToSetOnByDefault;
    private StoredPageMatchPageListJSON  storeStoredGlobalPagesToSetOnByDefault;
    private bool flagHasStoredPageMatchPageListData;
    private StoredPageMatchPageListDataJSON  storeStoredPageMatchPageListData;
    private bool flagHasStoredPageMatchReadData;
    private StoredPageMatchReadDataJSON  storeStoredPageMatchReadData;
    private bool flagHasStoredPageMatchWeight;
    private StoredPageMatchWeightJSON  storeStoredPageMatchWeight;
    private bool flagHasStoredPageMatchWriteData;
    private StoredPageMatchWriteDataJSON  storeStoredPageMatchWriteData;
    private bool flagHasStoredPerUserPagesToMatch;
    private StoredPageMatchPageListJSON  storeStoredPerUserPagesToMatch;
    private bool flagHasStoredPerUserPagesToNotMatch;
    private StoredPageMatchPageListJSON  storeStoredPerUserPagesToNotMatch;
    private bool flagHasStoredPerUserPagesToSetOffByDefault;
    private StoredPageMatchPageListJSON  storeStoredPerUserPagesToSetOffByDefault;
    private bool flagHasStoredPerUserPagesToSetOnByDefault;
    private StoredPageMatchPageListJSON  storeStoredPerUserPagesToSetOnByDefault;
    private bool flagHasSurveyAPIRequest;
    private SurveyAPIRequestJSON  storeSurveyAPIRequest;
    private bool flagHasTVChannelList;
    private TVChannelListJSON  storeTVChannelList;
    private bool flagHasTerrierTableUploadReadData;
    private TerrierTableUploadReadDataJSON  storeTerrierTableUploadReadData;
    private bool flagHasTerrierTableUploadWriteData;
    private TerrierTableUploadWriteDataJSON  storeTerrierTableUploadWriteData;
    private bool flagHasTerrierUploadDeleteProject;
    private TerrierUploadDeleteProjectJSON  storeTerrierUploadDeleteProject;
    private bool flagHasTerrierUploadDeleteProjectOptions;
    private TerrierUploadDeleteProjectOptionsJSON  storeTerrierUploadDeleteProjectOptions;
    private bool flagHasTerrierUploadGetProject;
    private TerrierUploadGetProjectJSON  storeTerrierUploadGetProject;
    private bool flagHasTerrierUploadGetProjectList;
    private TerrierUploadGetProjectListJSON  storeTerrierUploadGetProjectList;
    private bool flagHasTerrierUploadGetProjectListOptions;
    private TerrierUploadGetProjectListOptionsJSON  storeTerrierUploadGetProjectListOptions;
    private bool flagHasTerrierUploadGetProjectOptions;
    private TerrierUploadGetProjectOptionsJSON  storeTerrierUploadGetProjectOptions;
    private bool flagHasTerrierUploadReadData;
    private TerrierUploadReadDataJSON  storeTerrierUploadReadData;
    private bool flagHasTerrierUploadWriteData;
    private TerrierUploadWriteDataJSON  storeTerrierUploadWriteData;
    private bool flagHasTerrierUploadWriteProject;
    private TerrierUploadedProjectJSON  storeTerrierUploadWriteProject;
    private bool flagHasTerrierUploadWriteProjectOptions;
    private TerrierUploadWriteProjectOptionsJSON  storeTerrierUploadWriteProjectOptions;
    private bool flagHasThirdPartyCalendarService;
    private ThirdPartyCalendarServiceJSON  storeThirdPartyCalendarService;
    private bool flagHasCalendarMatchingLoosenessLevel;
    private CalendarMatchingLoosenessLevelJSON  storeCalendarMatchingLoosenessLevel;
    private bool flagHasCalendarEvents;
    private CalendarRequestInfoEventsListJSON  storeCalendarEvents;
    private bool flagHasToshibaTTSParameters;
    private ToshibaTTSParametersJSON  storeToshibaTTSParameters;
    private bool flagHasTravelBearing;
    private HLSHeadingJSON  storeTravelBearing;
    private bool flagHasUDSExampleRequest;
    private UDSExampleRequestJSON  storeUDSExampleRequest;
    private bool flagHasUberClientId;
    private UberClientIdJSON  storeUberClientId;
    private bool flagHasUberServerToken;
    private UberServerTokenJSON  storeUberServerToken;
    private bool flagHasUploadedTestConfiguration;
    private UploadedTestConfigurationJSON  storeUploadedTestConfiguration;
    private bool flagHasUploadedTestData;
    private UploadedTestsJSON  storeUploadedTestData;
    private bool flagHasUseNewStyleSMSCommands;
    private RequestInfoBooleanFlagJSON  storeUseNewStyleSMSCommands;
    private bool flagHasUseXAPAPI;
    private RequestInfoBooleanFlagJSON  storeUseXAPAPI;
    private bool flagHasUserContactsConfiguration;
    private UserContactsConfigurationJSON  storeUserContactsConfiguration;
    private bool flagHasUserContactsRequests;
    private UserContactsRequestsJSON  storeUserContactsRequests;
    private bool flagHasUserFeedback;
    private UserFeedbackJSON  storeUserFeedback;
    private bool flagHasUserMusicAvailableSources;
    private UserMusicAvailableSourcesJSON  storeUserMusicAvailableSources;
    private bool flagHasUserMusicControls;
    private UserMusicControlsJSON  storeUserMusicControls;
    private bool flagHasUserMusicInfo;
    private UserMusicInfoJSON  storeUserMusicInfo;
    private bool flagHasVideoSearchConfiguration;
    private VideoSearchRequestInfoConfigurationJSON  storeVideoSearchConfiguration;
    private bool flagHasVideoSearchRequestInfoProviders;
    private VideoSearchRequestInfoProvidersJSON  storeVideoSearchRequestInfoProviders;
    private bool flagHasVoiceParameters;
    private VoiceParametersJSON  storeVoiceParameters;
    private bool flagHasWebSearchConfiguration;
    private WebSearchRequestInfoConfigurationJSON  storeWebSearchConfiguration;
    private bool flagHasWebSearchRequestInfoProviders;
    private WebSearchRequestInfoProvidersJSON  storeWebSearchRequestInfoProviders;
    private bool flagHasWhat3WordsCluePhraseNotRequired;
    private What3WordsCluePhraseNotRequiredJSON  storeWhat3WordsCluePhraseNotRequired;
    private bool flagHasWhat3WordsStandardGeofenceRadius;
    private What3WordsStandardGeofenceRadiusJSON  storeWhat3WordsStandardGeofenceRadius;
    private bool flagHasHereApiPlacesFallback;
    private HereApiPlacesFallbackSettingsJSON  storeHereApiPlacesFallback;
    private bool flagHasPaymentsPredeterminedSMSNumber;
    private PaymentsPredeterminedSMSNumberFieldJSON  storePaymentsPredeterminedSMSNumber;
    private bool flagHasPaymentsPredeterminedPaymentMethod;
    private PaymentsPaymentMethodTypeJSON  storePaymentsPredeterminedPaymentMethod;
    private bool flagHasOrderSource;
    private PaymentsOrderSourceFieldJSON  storeOrderSource;
    private bool flagHasOrderPrepDuration;
    private PaymentsOrderPrepDurationFieldJSON  storeOrderPrepDuration;
    private bool flagHasSquareEnvironment;
    private SquareEnvironmentJSON  storeSquareEnvironment;
    private bool flagHasEnableSquareCustomerInformationPermissions;
    private EnableSquareCustomerInformationPermissionsJSON  storeEnableSquareCustomerInformationPermissions;
    private bool flagHasMessagingConvertPunctuation;
    private RequestInfoBooleanFlagJSON  storeMessagingConvertPunctuation;
    private bool flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
    private RequestInfoBooleanFlagJSON  storeAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
    private bool flagHasStreamPreference;
    private StreamPreferenceJSON  storeStreamPreference;
    private bool flagHasMusicQueriesForceInfoNuggetToPlayCommand;
    private MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON  storeMusicQueriesForceInfoNuggetToPlayCommand;
    private bool flagHasMusicQueriesAllowRawTop;
    private MusicQueriesAllowRawTopRequestInfoFieldJSON  storeMusicQueriesAllowRawTop;
    private bool flagHasBusinessInformationUploadData;
    private BusinessInformationUploadDataRequestJSON  storeBusinessInformationUploadData;
    private bool flagHasBusinessInformationDataStoreId;
    private BusinessInformationDataStoreIdJSON  storeBusinessInformationDataStoreId;
    private bool flagHasCustomASREnhancementWriteData;
    private CustomASREnhancementDataJSON  storeCustomASREnhancementWriteData;
    private bool flagHasCustomASREnhancementReadData;
    private CustomASREnhancementReadDataJSON  storeCustomASREnhancementReadData;
    private bool flagHasCustomASREnhancementListData;
    private CustomASREnhancementListDataJSON  storeCustomASREnhancementListData;
    private bool flagHasEnabledCustomASREnhancementGrammars;
    private CustomASREnhancementListJSON  storeEnabledCustomASREnhancementGrammars;
    private bool flagHasCustomASREnhancementWeight;
    private CustomASREnhancementWeightJSON  storeCustomASREnhancementWeight;
    private bool flagHasToastEnvironment;
    private ToastEnvironmentJSON  storeToastEnvironment;
    private bool flagHasIntentToExecute;
    private CommandIntentJSON  storeIntentToExecute;
    private bool flagHasUniversalTranslatorSubstitutionList;
    private UniversalTranslatorSubstitutionListJSON  storeUniversalTranslatorSubstitutionList;
    private bool flagHasCustomTopicIdentificationWriteData;
    private CustomTopicIdentificationDataJSON  storeCustomTopicIdentificationWriteData;
    private List<string> extraKeys;
    private List<JSONValue > extraValues;
    private Dictionary<string, JSONValue > extraIndex;


    private void  fromJSONLatitude(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONRationalValue json_rational = json_value.rational_value();
        string the_rational_text;
        if (json_rational != null)
          {
            the_rational_text = json_rational.getText();
          }
        else
          {
            JSONIntegerValue json_integer = json_value.integer_value();
            if (json_integer != null)
              {
                the_rational_text = json_integer.getText();
              }
            else
              {
                throw new Exception("The value for field Latitude of RequestInfoJSON is not a number.");
              }
          }
        setLatitudeText(the_rational_text);
      }


    private void  fromJSONLongitude(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONRationalValue json_rational = json_value.rational_value();
        string the_rational_text;
        if (json_rational != null)
          {
            the_rational_text = json_rational.getText();
          }
        else
          {
            JSONIntegerValue json_integer = json_value.integer_value();
            if (json_integer != null)
              {
                the_rational_text = json_integer.getText();
              }
            else
              {
                throw new Exception("The value for field Longitude of RequestInfoJSON is not a number.");
              }
          }
        setLongitudeText(the_rational_text);
      }


    private void  fromJSONPositionTime(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field PositionTime of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field PositionTime of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setPositionTime(extracted_integer);
      }


    private void  fromJSONPositionHorizontalAccuracy(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONRationalValue json_rational = json_value.rational_value();
        string the_rational_text;
        if (json_rational != null)
          {
            the_rational_text = json_rational.getText();
          }
        else
          {
            JSONIntegerValue json_integer = json_value.integer_value();
            if (json_integer != null)
              {
                the_rational_text = json_integer.getText();
              }
            else
              {
                throw new Exception("The value for field PositionHorizontalAccuracy of RequestInfoJSON is not a number.");
              }
          }
        setPositionHorizontalAccuracyText(the_rational_text);
      }


    private void  fromJSONStreet(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field Street of RequestInfoJSON is not a string.");
        setStreet(json_string.getData());
      }


    private void  fromJSONCity(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field City of RequestInfoJSON is not a string.");
        setCity(json_string.getData());
      }


    private void  fromJSONState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field State of RequestInfoJSON is not a string.");
        setState(json_string.getData());
      }


    private void  fromJSONCountry(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field Country of RequestInfoJSON is not a string.");
        setCountry(json_string.getData());
      }


    private void  fromJSONRoutePoints(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RoutePointsJSON convert_classy = RoutePointsJSON.from_json(json_value, ignore_extras, true);
        setRoutePoints(convert_classy);
      }


    private void  fromJSONRouteInformation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientRouteInformationJSON convert_classy = ClientRouteInformationJSON.from_json(json_value, ignore_extras, true);
        setRouteInformation(convert_classy);
      }


    private void  fromJSONControllableTrackPlaying(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ControllableTrackPlaying of RequestInfoJSON is not true for false.");
              }
          }
        setControllableTrackPlaying(the_bool);
      }


    private void  fromJSONTimeStamp(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field TimeStamp of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field TimeStamp of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setTimeStamp(extracted_integer);
      }


    private void  fromJSONTimeZone(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field TimeZone of RequestInfoJSON is not a string.");
        setTimeZone(json_string.getData());
      }


    private void  fromJSONConversationState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ConversationStateJSON convert_classy = ConversationStateJSON.from_json(json_value, ignore_extras, true);
        setConversationState(convert_classy);
      }


    private void  fromJSONClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientStateJSON convert_classy = ClientStateJSON.from_json(json_value, ignore_extras, true);
        setClientState(convert_classy);
      }


    private void  fromJSONDeviceInfo(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TypeDeviceInfoJSON convert_classy = TypeDeviceInfoJSON.from_json(json_value, ignore_extras, true);
        setDeviceInfo(convert_classy);
      }


    private void  fromJSONSendBack(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        setSendBack(json_value);
      }


    private void  fromJSONPreferredImageSize(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONArrayValue json_array1 = json_value.array_value();
        if (json_array1 == null)
            throw new Exception("The value for field PreferredImageSize of RequestInfoJSON is not an array.");
        int count1 = json_array1.componentCount();
        if (count1 < 2)
            throw new Exception("The value for field PreferredImageSize of RequestInfoJSON has too few elements.");
        List< BigInteger > vector_PreferredImageSize1 = new List< BigInteger >(count1);
        for (int num1 = 0; num1 < count1; ++num1)
          {
            BigInteger extracted_integer;
            JSONIntegerValue json_integer = json_array1.component(num1).integer_value();
            if (json_integer == null)
              {
                JSONRationalValue json_rational = json_array1.component(num1).rational_value();
                if (json_rational == null)
                  {
                    throw new Exception("The value for an element of field PreferredImageSize of RequestInfoJSON is not a number.");
                  }
                if (!(json_rational.isInteger()))
                  {
                    throw new Exception("The value for an element of field PreferredImageSize of RequestInfoJSON is not an integer.");
                  }
                extracted_integer = json_rational.getInteger()            ;
              }
            else
              {
                extracted_integer = json_integer.getData()            ;
              }
            vector_PreferredImageSize1.Add(extracted_integer);
          }
        Debug.Assert(vector_PreferredImageSize1.Count >= 2);
        initPreferredImageSize();
        for (int num1 = 0; num1 < vector_PreferredImageSize1.Count; ++num1)
            appendPreferredImageSize(vector_PreferredImageSize1[num1]);
        for (int num1 = 0; num1 < vector_PreferredImageSize1.Count; ++num1)
          {
          }
      }


    private void  fromJSONInputLanguageEnglishName(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field InputLanguageEnglishName of RequestInfoJSON is not a string.");
        setInputLanguageEnglishName(json_string.getData());
      }


    private void  fromJSONInputLanguageNativeName(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field InputLanguageNativeName of RequestInfoJSON is not a string.");
        setInputLanguageNativeName(json_string.getData());
      }


    private void  fromJSONInputLanguageIETFTag(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field InputLanguageIETFTag of RequestInfoJSON is not a string.");
        setInputLanguageIETFTag(json_string.getData());
      }


    private void  fromJSONOutputLanguageEnglishName(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field OutputLanguageEnglishName of RequestInfoJSON is not a string.");
        setOutputLanguageEnglishName(json_string.getData());
      }


    private void  fromJSONOutputLanguageNativeName(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field OutputLanguageNativeName of RequestInfoJSON is not a string.");
        setOutputLanguageNativeName(json_string.getData());
      }


    private void  fromJSONOutputLanguageIETFTag(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field OutputLanguageIETFTag of RequestInfoJSON is not a string.");
        setOutputLanguageIETFTag(json_string.getData());
      }


    private void  fromJSONResultVersionAccepted(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONRationalValue json_rational = json_value.rational_value();
        string the_rational_text;
        if (json_rational != null)
          {
            the_rational_text = json_rational.getText();
          }
        else
          {
            JSONIntegerValue json_integer = json_value.integer_value();
            if (json_integer != null)
              {
                the_rational_text = json_integer.getText();
              }
            else
              {
                throw new Exception("The value for field ResultVersionAccepted of RequestInfoJSON is not a number.");
              }
          }
        setResultVersionAcceptedText(the_rational_text);
      }


    private void  fromJSONUnitPreference(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field UnitPreference of RequestInfoJSON is not a string.");
        TypeUnitPreference the_enum;
        switch (json_string.getData()[0])
          {
            case 'M':
                if ((String.Compare(json_string.getData(), 1, "ETRIC", 0, 5, false) == 0) && (json_string.getData().Length == 6))
                      {
                        the_enum = TypeUnitPreference.UnitPreference_METRIC;
                        goto enum_is_done;
                      }
                break;
            case 'U':
                if ((String.Compare(json_string.getData(), 1, "S", 0, 1, false) == 0) && (json_string.getData().Length == 2))
                      {
                        the_enum = TypeUnitPreference.UnitPreference_US;
                        goto enum_is_done;
                      }
                break;
            default:
                break;
          }
        throw new Exception("The value for field UnitPreference of RequestInfoJSON is not one of the legal strings.");
      enum_is_done:;
        setUnitPreference(the_enum);
      }


    private void  fromJSONDefaultTimeFormat24Hours(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field DefaultTimeFormat24Hours of RequestInfoJSON is not true for false.");
              }
          }
        setDefaultTimeFormat24Hours(the_bool);
      }


    private void  fromJSONClientID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field ClientID of RequestInfoJSON is not a string.");
        setClientID(json_string.getData());
      }


    private void  fromJSONClientVersion(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TypeClientVersion or_result = new TypeClientVersion();
        bool or_done = false;
        if (!or_done)
          {
            try
              {
                JSONStringValue json_string = json_value.string_value();
                if (json_string == null)
                    throw new Exception("The value for ??? is not a string.");
                or_result.choice0 = json_string.getData();
                or_result.key = 0;
                or_done = true;
              }
            catch (Exception )
              {
              }
          }
        if (!or_done)
          {
            try
              {
                BigInteger extracted_integer;
                JSONIntegerValue json_integer = json_value.integer_value();
                if (json_integer == null)
                  {
                    JSONRationalValue json_rational = json_value.rational_value();
                    if (json_rational == null)
                      {
                        throw new Exception("The value for ??? is not a number.");
                      }
                    if (!(json_rational.isInteger()))
                      {
                        throw new Exception("The value for ??? is not an integer.");
                      }
                    extracted_integer = json_rational.getInteger()                ;
                  }
                else
                  {
                    extracted_integer = json_integer.getData()                ;
                  }
                if (extracted_integer < 0)
                    throw new Exception("The value for ??? is less than the lower bound (0) for that field.");
                or_result.choice1 = extracted_integer;
                or_result.key = 1;
                or_done = true;
              }
            catch (Exception )
              {
              }
          }
        if (!or_done)
            throw new Exception("The value for field ClientVersion of RequestInfoJSON is not one of the allowed values.");
        setClientVersion(or_result);
        switch (or_result.key)
          {
            case 0:
                break;
            case 1:
                break;
            default:
                Debug.Assert(false);
                break;
          }
      }


    private void  fromJSONDeviceID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field DeviceID of RequestInfoJSON is not a string.");
        setDeviceID(json_string.getData());
      }


    private void  fromJSONSDK(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field SDK of RequestInfoJSON is not a string.");
        setSDK(json_string.getData());
      }


    private void  fromJSONSDKInfo(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        if (json_value.object_value() == null)
            throw new Exception("The value for field SDKInfo of RequestInfoJSON is not an object.");
        setSDKInfo(json_value.object_value());
      }


    private void  fromJSONFirstPersonSelf(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field FirstPersonSelf of RequestInfoJSON is not a string.");
        setFirstPersonSelf(json_string.getData());
      }


    private void  fromJSONFirstPersonSelfSpoken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field FirstPersonSelfSpoken of RequestInfoJSON is not a string.");
        setFirstPersonSelfSpoken(json_string.getData());
      }


    private void  fromJSONSecondPersonSelf(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONArrayValue json_array1 = json_value.array_value();
        if (json_array1 == null)
            throw new Exception("The value for field SecondPersonSelf of RequestInfoJSON is not an array.");
        int count1 = json_array1.componentCount();
        List< string > vector_SecondPersonSelf1 = new List< string >(count1);
        for (int num1 = 0; num1 < count1; ++num1)
          {
            JSONStringValue json_string = json_array1.component(num1).string_value();
            if (json_string == null)
                throw new Exception("The value for an element of field SecondPersonSelf of RequestInfoJSON is not a string.");
            vector_SecondPersonSelf1.Add(json_string.getData());
          }
        initSecondPersonSelf();
        for (int num2 = 0; num2 < vector_SecondPersonSelf1.Count; ++num2)
            appendSecondPersonSelf(vector_SecondPersonSelf1[num2]);
        for (int num1 = 0; num1 < vector_SecondPersonSelf1.Count; ++num1)
          {
          }
      }


    private void  fromJSONSecondPersonSelfSpoken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONArrayValue json_array1 = json_value.array_value();
        if (json_array1 == null)
            throw new Exception("The value for field SecondPersonSelfSpoken of RequestInfoJSON is not an array.");
        int count1 = json_array1.componentCount();
        List< string > vector_SecondPersonSelfSpoken1 = new List< string >(count1);
        for (int num1 = 0; num1 < count1; ++num1)
          {
            JSONStringValue json_string = json_array1.component(num1).string_value();
            if (json_string == null)
                throw new Exception("The value for an element of field SecondPersonSelfSpoken of RequestInfoJSON is not a string.");
            vector_SecondPersonSelfSpoken1.Add(json_string.getData());
          }
        initSecondPersonSelfSpoken();
        for (int num3 = 0; num3 < vector_SecondPersonSelfSpoken1.Count; ++num3)
            appendSecondPersonSelfSpoken(vector_SecondPersonSelfSpoken1[num3]);
        for (int num1 = 0; num1 < vector_SecondPersonSelfSpoken1.Count; ++num1)
          {
          }
      }


    private void  fromJSONWakeUpPhraseIncludedInAudio(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field WakeUpPhraseIncludedInAudio of RequestInfoJSON is not true for false.");
              }
          }
        setWakeUpPhraseIncludedInAudio(the_bool);
      }


    private void  fromJSONInitialSecondsOfAudioToIgnore(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONRationalValue json_rational = json_value.rational_value();
        string the_rational_text;
        if (json_rational != null)
          {
            the_rational_text = json_rational.getText();
          }
        else
          {
            JSONIntegerValue json_integer = json_value.integer_value();
            if (json_integer != null)
              {
                the_rational_text = json_integer.getText();
              }
            else
              {
                throw new Exception("The value for field InitialSecondsOfAudioToIgnore of RequestInfoJSON is not a number.");
              }
          }
        setInitialSecondsOfAudioToIgnoreText(the_rational_text);
      }


    private void  fromJSONWakeUpPattern(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field WakeUpPattern of RequestInfoJSON is not a string.");
        setWakeUpPattern(json_string.getData());
      }


    private void  fromJSONUserID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field UserID of RequestInfoJSON is not a string.");
        setUserID(json_string.getData());
      }


    private void  fromJSONRequestID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field RequestID of RequestInfoJSON is not a string.");
        setRequestID(json_string.getData());
      }


    private void  fromJSONSessionID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field SessionID of RequestInfoJSON is not a string.");
        setSessionID(json_string.getData());
      }


    private void  fromJSONDomains(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DomainsJSON convert_classy = DomainsJSON.from_json(json_value, ignore_extras, true);
        setDomains(convert_classy);
      }


    private void  fromJSONResultUpdateAllowed(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ResultUpdateAllowed of RequestInfoJSON is not true for false.");
              }
          }
        setResultUpdateAllowed(the_bool);
      }


    private void  fromJSONPartialTranscriptsDesired(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field PartialTranscriptsDesired of RequestInfoJSON is not true for false.");
              }
          }
        setPartialTranscriptsDesired(the_bool);
      }


    private void  fromJSONMinResults(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field MinResults of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field MinResults of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setMinResults(extracted_integer);
      }


    private void  fromJSONMaxResults(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field MaxResults of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field MaxResults of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setMaxResults(extracted_integer);
      }


    private void  fromJSONObjectByteCountPrefix(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ObjectByteCountPrefix of RequestInfoJSON is not true for false.");
              }
          }
        setObjectByteCountPrefix(the_bool);
      }


    private void  fromJSONProfanityFilter(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field ProfanityFilter of RequestInfoJSON is not a string.");
        TypeProfanityFilter the_enum;
        switch (json_string.getData()[0])
          {
            case 'A':
                if ((String.Compare(json_string.getData(), 1, "llowAll", 0, 7, false) == 0) && (json_string.getData().Length == 8))
                      {
                        the_enum = TypeProfanityFilter.ProfanityFilter_AllowAll;
                        goto enum_is_done;
                      }
                break;
            case 'S':
                if (String.Compare(json_string.getData(), 1, "tarAll", 0, 6, false) == 0)
                  {
                    if (json_string.getData().Length == 7)
                      {
                          {
                            the_enum = TypeProfanityFilter.ProfanityFilter_StarAll;
                            goto enum_is_done;
                          }
                      }
                    switch (json_string.getData()[7])
                      {
                        case 'B':
                            if ((String.Compare(json_string.getData(), 8, "utFirst", 0, 7, false) == 0) && (json_string.getData().Length == 15))
                                  {
                                    the_enum = TypeProfanityFilter.ProfanityFilter_StarAllButFirst;
                                    goto enum_is_done;
                                  }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        throw new Exception("The value for field ProfanityFilter of RequestInfoJSON is not one of the legal strings.");
      enum_is_done:;
        setProfanityFilter(the_enum);
      }


    private void  fromJSONClientMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONArrayValue json_array1 = json_value.array_value();
        if (json_array1 == null)
            throw new Exception("The value for field ClientMatches of RequestInfoJSON is not an array.");
        int count1 = json_array1.componentCount();
        if (count1 < 1)
            throw new Exception("The value for field ClientMatches of RequestInfoJSON has too few elements.");
        List< ClientMatchJSON  > vector_ClientMatches1 = new List< ClientMatchJSON  >(count1);
        for (int num1 = 0; num1 < count1; ++num1)
          {
            ClientMatchJSON convert_classy = ClientMatchJSON.from_json(json_array1.component(num1), ignore_extras, true);
            vector_ClientMatches1.Add(convert_classy);
          }
        Debug.Assert(vector_ClientMatches1.Count >= 1);
        initClientMatches();
        for (int num4 = 0; num4 < vector_ClientMatches1.Count; ++num4)
            appendClientMatches(vector_ClientMatches1[num4]);
        for (int num1 = 0; num1 < vector_ClientMatches1.Count; ++num1)
          {
          }
      }


    private void  fromJSONClientMatchesOnly(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ClientMatchesOnly of RequestInfoJSON is not true for false.");
              }
          }
        setClientMatchesOnly(the_bool);
      }


    private void  fromJSONPagination(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PaginationJSON convert_classy = PaginationJSON.from_json(json_value, ignore_extras, true);
        setPagination(convert_classy);
      }


    private void  fromJSONResponseAudioVoice(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field ResponseAudioVoice of RequestInfoJSON is not a string.");
        setResponseAudioVoice(json_string.getData());
      }


    private void  fromJSONResponseAudioShortOrLong(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field ResponseAudioShortOrLong of RequestInfoJSON is not a string.");
        TypeResponseAudioShortOrLong the_enum;
        switch (json_string.getData()[0])
          {
            case 'L':
                if ((String.Compare(json_string.getData(), 1, "ong", 0, 3, false) == 0) && (json_string.getData().Length == 4))
                      {
                        the_enum = TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Long;
                        goto enum_is_done;
                      }
                break;
            case 'S':
                if ((String.Compare(json_string.getData(), 1, "hort", 0, 4, false) == 0) && (json_string.getData().Length == 5))
                      {
                        the_enum = TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Short;
                        goto enum_is_done;
                      }
                break;
            default:
                break;
          }
        throw new Exception("The value for field ResponseAudioShortOrLong of RequestInfoJSON is not one of the legal strings.");
      enum_is_done:;
        setResponseAudioShortOrLong(the_enum);
      }


    private void  fromJSONResponseAudioAcceptedEncodings(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONArrayValue json_array1 = json_value.array_value();
        if (json_array1 == null)
            throw new Exception("The value for field ResponseAudioAcceptedEncodings of RequestInfoJSON is not an array.");
        int count1 = json_array1.componentCount();
        if (count1 < 1)
            throw new Exception("The value for field ResponseAudioAcceptedEncodings of RequestInfoJSON has too few elements.");
        List< TypeResponseAudioAcceptedEncodings > vector_ResponseAudioAcceptedEncodings1 = new List< TypeResponseAudioAcceptedEncodings >(count1);
        for (int num1 = 0; num1 < count1; ++num1)
          {
            JSONStringValue json_string = json_array1.component(num1).string_value();
            if (json_string == null)
                throw new Exception("The value for an element of field ResponseAudioAcceptedEncodings of RequestInfoJSON is not a string.");
            TypeResponseAudioAcceptedEncodings the_open_enum = new TypeResponseAudioAcceptedEncodings();
            switch (json_string.getData()[0])
              {
                case 'S':
                    if ((String.Compare(json_string.getData(), 1, "peex", 0, 4, false) == 0) && (json_string.getData().Length == 5))
                          {
                            the_open_enum.in_known_list = true;
                            the_open_enum.list_value = TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_Speex;
                            goto open_enum_is_done;
                          }
                    break;
                case 'W':
                    if ((String.Compare(json_string.getData(), 1, "AV", 0, 2, false) == 0) && (json_string.getData().Length == 3))
                          {
                            the_open_enum.in_known_list = true;
                            the_open_enum.list_value = TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_WAV;
                            goto open_enum_is_done;
                          }
                    break;
                default:
                    break;
              }
            the_open_enum.in_known_list = false;
            the_open_enum.string_value = json_string.getData();
          open_enum_is_done:;
            vector_ResponseAudioAcceptedEncodings1.Add(the_open_enum);
          }
        Debug.Assert(vector_ResponseAudioAcceptedEncodings1.Count >= 1);
        initResponseAudioAcceptedEncodings();
        for (int num5 = 0; num5 < vector_ResponseAudioAcceptedEncodings1.Count; ++num5)
            appendResponseAudioAcceptedEncodings(vector_ResponseAudioAcceptedEncodings1[num5]);
        for (int num1 = 0; num1 < vector_ResponseAudioAcceptedEncodings1.Count; ++num1)
          {
          }
      }


    private void  fromJSONReturnResponseAudioAsURL(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ReturnResponseAudioAsURL of RequestInfoJSON is not true for false.");
              }
          }
        setReturnResponseAudioAsURL(the_bool);
      }


    private void  fromJSONVoiceActivityDetection(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        VoiceActivityDetectionJSON convert_classy = VoiceActivityDetectionJSON.from_json(json_value, ignore_extras, true);
        setVoiceActivityDetection(convert_classy);
      }


    private void  fromJSONServerDeterminesEndOfAudio(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field ServerDeterminesEndOfAudio of RequestInfoJSON is not true for false.");
              }
          }
        setServerDeterminesEndOfAudio(the_bool);
      }


    private void  fromJSONIntentOnly(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field IntentOnly of RequestInfoJSON is not true for false.");
              }
          }
        setIntentOnly(the_bool);
      }


    private void  fromJSONDisableSpellCorrection(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field DisableSpellCorrection of RequestInfoJSON is not true for false.");
              }
          }
        setDisableSpellCorrection(the_bool);
      }


    private void  fromJSONUseContactData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field UseContactData of RequestInfoJSON is not true for false.");
              }
          }
        setUseContactData(the_bool);
      }


    private void  fromJSONUseClientTime(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field UseClientTime of RequestInfoJSON is not true for false.");
              }
          }
        setUseClientTime(the_bool);
      }


    private void  fromJSONForceConversationStateTime(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field ForceConversationStateTime of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field ForceConversationStateTime of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setForceConversationStateTime(extracted_integer);
      }


    private void  fromJSONOutputLatticeSize(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BigInteger extracted_integer;
        JSONIntegerValue json_integer = json_value.integer_value();
        if (json_integer == null)
          {
            JSONRationalValue json_rational = json_value.rational_value();
            if (json_rational == null)
              {
                throw new Exception("The value for field OutputLatticeSize of RequestInfoJSON is not a number.");
              }
            if (!(json_rational.isInteger()))
              {
                throw new Exception("The value for field OutputLatticeSize of RequestInfoJSON is not an integer.");
              }
            extracted_integer = json_rational.getInteger()        ;
          }
        else
          {
            extracted_integer = json_integer.getData()        ;
          }
        setOutputLatticeSize(extracted_integer);
      }


    private void  fromJSONMatchingMutations(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        MatchingMutationsJSON convert_classy = MatchingMutationsJSON.from_json(json_value, ignore_extras, true);
        setMatchingMutations(convert_classy);
      }


    private void  fromJSONUseFormattedTranscriptionAsDefault(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONTrueValue json_true = json_value.true_value();
        bool the_bool;
        if (json_true != null)
          {
            the_bool = true;
          }
        else
          {
            JSONFalseValue json_false = json_value.false_value();
            if (json_false != null)
              {
                the_bool = false;
              }
            else
              {
                throw new Exception("The value for field UseFormattedTranscriptionAsDefault of RequestInfoJSON is not true for false.");
              }
          }
        setUseFormattedTranscriptionAsDefault(the_bool);
      }


    private void  fromJSONResponseRanking(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ResponseRankingJSON convert_classy = ResponseRankingJSON.from_json(json_value, ignore_extras, true);
        setResponseRanking(convert_classy);
      }


    private void  fromJSONAcapelaVoiceParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AcapelaVoiceParametersJSON convert_classy = AcapelaVoiceParametersJSON.from_json(json_value, ignore_extras, true);
        setAcapelaVoiceParameters(convert_classy);
      }


    private void  fromJSONAllowPopularNameContactMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AllowPopularNameContactMatchesJSON convert_classy = AllowPopularNameContactMatchesJSON.from_json(json_value, ignore_extras, true);
        setAllowPopularNameContactMatches(convert_classy);
      }


    private void  fromJSONAlwaysFetchCurrentConditionsData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AlwaysFetchCurrentConditionsDataJSON convert_classy = AlwaysFetchCurrentConditionsDataJSON.from_json(json_value, ignore_extras, true);
        setAlwaysFetchCurrentConditionsData(convert_classy);
      }


    private void  fromJSONAlwaysFetchHourlyForecastData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AlwaysFetchHourlyForecastDataJSON convert_classy = AlwaysFetchHourlyForecastDataJSON.from_json(json_value, ignore_extras, true);
        setAlwaysFetchHourlyForecastData(convert_classy);
      }


    private void  fromJSONArrivalTime(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DateAndOrTimeJSON convert_classy = DateAndOrTimeJSON.from_json(json_value, ignore_extras, true);
        setArrivalTime(convert_classy);
      }


    private void  fromJSONAvantiMachineState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AvantiMachineStateJSON convert_classy = AvantiMachineStateJSON.from_json(json_value, ignore_extras, true);
        setAvantiMachineState(convert_classy);
      }


    private void  fromJSONBingAdExtensions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BingRequestInfoAdExtensionsJSON convert_classy = BingRequestInfoAdExtensionsJSON.from_json(json_value, ignore_extras, true);
        setBingAdExtensions(convert_classy);
      }


    private void  fromJSONBunnIsConfirmationRequired(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BunnIsConfirmationRequiredJSON convert_classy = BunnIsConfirmationRequiredJSON.from_json(json_value, ignore_extras, true);
        setBunnIsConfirmationRequired(convert_classy);
      }


    private void  fromJSONBunnMachineState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BunnMachineStateJSON convert_classy = BunnMachineStateJSON.from_json(json_value, ignore_extras, true);
        setBunnMachineState(convert_classy);
      }


    private void  fromJSONCalendarDataSynchronization(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CalendarDataSynchronizationRequestInfoJSON convert_classy = CalendarDataSynchronizationRequestInfoJSON.from_json(json_value, ignore_extras, true);
        setCalendarDataSynchronization(convert_classy);
      }


    private void  fromJSONCallPermissions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CallPermissionsJSON convert_classy = CallPermissionsJSON.from_json(json_value, ignore_extras, true);
        setCallPermissions(convert_classy);
      }


    private void  fromJSONCarControlClimateClientConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CarControlClimateClientConfigurationJSON convert_classy = CarControlClimateClientConfigurationJSON.from_json(json_value, ignore_extras, true);
        setCarControlClimateClientConfiguration(convert_classy);
      }


    private void  fromJSONCarControlClimateTemperatureConfig(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CarControlClimateTemperatureConfigJSON convert_classy = CarControlClimateTemperatureConfigJSON.from_json(json_value, ignore_extras, true);
        setCarControlClimateTemperatureConfig(convert_classy);
      }


    private void  fromJSONCarManualModel(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CarManualModelJSON convert_classy = CarManualModelJSON.from_json(json_value, ignore_extras, true);
        setCarManualModel(convert_classy);
      }


    private void  fromJSONCarManualNormalizedQueryToSet(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CarManualNormalizedQueryJSON convert_classy = CarManualNormalizedQueryJSON.from_json(json_value, ignore_extras, true);
        setCarManualNormalizedQueryToSet(convert_classy);
      }


    private void  fromJSONCarManualResponseToSet(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DynamicResponseJSON convert_classy = DynamicResponseJSON.from_json(json_value, ignore_extras, true);
        setCarManualResponseToSet(convert_classy);
      }


    private void  fromJSONCarStatus(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CarStatusJSON convert_classy = CarStatusJSON.from_json(json_value, ignore_extras, true);
        setCarStatus(convert_classy);
      }


    private void  fromJSONChargingClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ChargingClientStateJSON convert_classy = ChargingClientStateJSON.from_json(json_value, ignore_extras, true);
        setChargingClientState(convert_classy);
      }


    private void  fromJSONClientListMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientListMatchesJSON convert_classy = ClientListMatchesJSON.from_json(json_value, ignore_extras, true);
        setClientListMatches(convert_classy);
      }


    private void  fromJSONCollateMusicEntities(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CollateMusicEntitiesJSON convert_classy = CollateMusicEntitiesJSON.from_json(json_value, ignore_extras, true);
        setCollateMusicEntities(convert_classy);
      }


    private void  fromJSONConnectedToThirdPartyMusicApp(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ConnectedToThirdPartyMusicAppJSON convert_classy = ConnectedToThirdPartyMusicAppJSON.from_json(json_value, ignore_extras, true);
        setConnectedToThirdPartyMusicApp(convert_classy);
      }


    private void  fromJSONContactQueryExclusions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ContactQueryExclusionsJSON convert_classy = ContactQueryExclusionsJSON.from_json(json_value, ignore_extras, true);
        setContactQueryExclusions(convert_classy);
      }


    private void  fromJSONPhoneCommandConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PhoneCommandConfigurationJSON convert_classy = PhoneCommandConfigurationJSON.from_json(json_value, ignore_extras, true);
        setPhoneCommandConfiguration(convert_classy);
      }


    private void  fromJSONConvertToNewInformationNuggets(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ConvertToNewInformationNuggetsJSON convert_classy = ConvertToNewInformationNuggetsJSON.from_json(json_value, ignore_extras, true);
        setConvertToNewInformationNuggets(convert_classy);
      }


    private void  fromJSONCustomSpeechRecognitionPatternsGroupListData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomSpeechRecognitionPatternsGroupListDataJSON convert_classy = CustomSpeechRecognitionPatternsGroupListDataJSON.from_json(json_value, ignore_extras, true);
        setCustomSpeechRecognitionPatternsGroupListData(convert_classy);
      }


    private void  fromJSONCustomSpeechRecognitionPatternsReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomSpeechRecognitionPatternsReadDataJSON convert_classy = CustomSpeechRecognitionPatternsReadDataJSON.from_json(json_value, ignore_extras, true);
        setCustomSpeechRecognitionPatternsReadData(convert_classy);
      }


    private void  fromJSONCustomSpeechRecognitionPatternsWeight(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomSpeechRecognitionPatternsWeightJSON convert_classy = CustomSpeechRecognitionPatternsWeightJSON.from_json(json_value, ignore_extras, true);
        setCustomSpeechRecognitionPatternsWeight(convert_classy);
      }


    private void  fromJSONCustomSpeechRecognitionPatternsWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomSpeechRecognitionPatternsDataJSON convert_classy = CustomSpeechRecognitionPatternsDataJSON.from_json(json_value, ignore_extras, true);
        setCustomSpeechRecognitionPatternsWriteData(convert_classy);
      }


    private void  fromJSONDeleteUserMemoryLocation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DeleteUserMemoryLocationJSON convert_classy = DeleteUserMemoryLocationJSON.from_json(json_value, ignore_extras, true);
        setDeleteUserMemoryLocation(convert_classy);
      }


    private void  fromJSONDisableMusicPlayerListPositionSpecification(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DisableListPositionSpecificationJSON convert_classy = DisableListPositionSpecificationJSON.from_json(json_value, ignore_extras, true);
        setDisableMusicPlayerListPositionSpecification(convert_classy);
      }


    private void  fromJSONDisableMusicSearchListPositionSpecification(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DisableListPositionSpecificationJSON convert_classy = DisableListPositionSpecificationJSON.from_json(json_value, ignore_extras, true);
        setDisableMusicSearchListPositionSpecification(convert_classy);
      }


    private void  fromJSONDisambiguateResultsBeforeAction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        DisambiguateResultsBeforeActionJSON convert_classy = DisambiguateResultsBeforeActionJSON.from_json(json_value, ignore_extras, true);
        setDisambiguateResultsBeforeAction(convert_classy);
      }


    private void  fromJSONDisplayedReminder(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ReminderJSON convert_classy = ReminderJSON.from_json(json_value, ignore_extras, true);
        setDisplayedReminder(convert_classy);
      }


    private void  fromJSONEnableClientControlInModes(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setEnableClientControlInModes(convert_classy);
      }


    private void  fromJSONEnableLocalPlacesQueries(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setEnableLocalPlacesQueries(convert_classy);
      }


    private void  fromJSONLocalPlacesSettings(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        LocalPlacesSettingsJSON convert_classy = LocalPlacesSettingsJSON.from_json(json_value, ignore_extras, true);
        setLocalPlacesSettings(convert_classy);
      }


    private void  fromJSONEnableMusicPlayerFavorites(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableMusicPlayerFavoritesJSON convert_classy = EnableMusicPlayerFavoritesJSON.from_json(json_value, ignore_extras, true);
        setEnableMusicPlayerFavorites(convert_classy);
      }


    private void  fromJSONEnabledCustomSpeechRecognitionPatternGroups(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomSpeechRecognitionPatternsGroupListJSON convert_classy = CustomSpeechRecognitionPatternsGroupListJSON.from_json(json_value, ignore_extras, true);
        setEnabledCustomSpeechRecognitionPatternGroups(convert_classy);
      }


    private void  fromJSONEntertainmentClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EntertainmentClientStateJSON convert_classy = EntertainmentClientStateJSON.from_json(json_value, ignore_extras, true);
        setEntertainmentClientState(convert_classy);
      }


    private void  fromJSONEntertainmentTitlesUploadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EntertainmentTitlesUploadDataJSON convert_classy = EntertainmentTitlesUploadDataJSON.from_json(json_value, ignore_extras, true);
        setEntertainmentTitlesUploadData(convert_classy);
      }


    private void  fromJSONExcludeAllMusicResultsWithoutExplicitContext(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ExcludeAllMusicResultsWithoutExplicitContextJSON convert_classy = ExcludeAllMusicResultsWithoutExplicitContextJSON.from_json(json_value, ignore_extras, true);
        setExcludeAllMusicResultsWithoutExplicitContext(convert_classy);
      }


    private void  fromJSONExcludeWikipediaLowConfidenceResults(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ExcludeWikipediaLowConfidenceResultsJSON convert_classy = ExcludeWikipediaLowConfidenceResultsJSON.from_json(json_value, ignore_extras, true);
        setExcludeWikipediaLowConfidenceResults(convert_classy);
      }


    private void  fromJSONFitBitAccessToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        FitBitAccessTokenJSON convert_classy = FitBitAccessTokenJSON.from_json(json_value, ignore_extras, true);
        setFitBitAccessToken(convert_classy);
      }


    private void  fromJSONFitBitRefreshToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        FitBitRefreshTokenJSON convert_classy = FitBitRefreshTokenJSON.from_json(json_value, ignore_extras, true);
        setFitBitRefreshToken(convert_classy);
      }


    private void  fromJSONGetHumaxMediaCloudURL(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetHumaxMediaCloudURLJSON convert_classy = GetHumaxMediaCloudURLJSON.from_json(json_value, ignore_extras, true);
        setGetHumaxMediaCloudURL(convert_classy);
      }


    private void  fromJSONGetOAuth2ClientID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetClientIDOAuth2RequestInfoFieldJSON convert_classy = GetClientIDOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setGetOAuth2ClientID(convert_classy);
      }


    private void  fromJSONGetOAuth2ClientSecret(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetClientSecretOAuth2RequestInfoFieldJSON convert_classy = GetClientSecretOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setGetOAuth2ClientSecret(convert_classy);
      }


    private void  fromJSONSquare(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetClientSecretOAuth2RequestInfoFieldJSON convert_classy = GetClientSecretOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setSquare(convert_classy);
      }


    private void  fromJSONGetOAuth2ClientToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetClientTokenOAuth2RequestInfoFieldJSON convert_classy = GetClientTokenOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setGetOAuth2ClientToken(convert_classy);
      }


    private void  fromJSONGetUberClientId(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetUberClientIdJSON convert_classy = GetUberClientIdJSON.from_json(json_value, ignore_extras, true);
        setGetUberClientId(convert_classy);
      }


    private void  fromJSONGetUberServerToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        GetUberServerTokenJSON convert_classy = GetUberServerTokenJSON.from_json(json_value, ignore_extras, true);
        setGetUberServerToken(convert_classy);
      }


    private void  fromJSONHLSRadius(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HLSRadiusJSON convert_classy = HLSRadiusJSON.from_json(json_value, ignore_extras, true);
        setHLSRadius(convert_classy);
      }


    private void  fromJSONHarmanDeviceRegistration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HarmanDeviceRegistrationJSON convert_classy = HarmanDeviceRegistrationJSON.from_json(json_value, ignore_extras, true);
        setHarmanDeviceRegistration(convert_classy);
      }


    private void  fromJSONHarmanHospitalityAmxControllerHttpRequest(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HarmanAmxControllerHttpRequestJSON convert_classy = HarmanAmxControllerHttpRequestJSON.from_json(json_value, ignore_extras, true);
        setHarmanHospitalityAmxControllerHttpRequest(convert_classy);
      }


    private void  fromJSONHarmanHospitalityMeetingInformation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HarmanHospitalityMeetingInformationJSON convert_classy = HarmanHospitalityMeetingInformationJSON.from_json(json_value, ignore_extras, true);
        setHarmanHospitalityMeetingInformation(convert_classy);
      }


    private void  fromJSONHarmanHospitalityPropertyInformation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HarmanHospitalityPropertyInformationJSON convert_classy = HarmanHospitalityPropertyInformationJSON.from_json(json_value, ignore_extras, true);
        setHarmanHospitalityPropertyInformation(convert_classy);
      }


    private void  fromJSONHarmanPropertyRegistration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HarmanPropertyRegistrationJSON convert_classy = HarmanPropertyRegistrationJSON.from_json(json_value, ignore_extras, true);
        setHarmanPropertyRegistration(convert_classy);
      }


    private void  fromJSONHasTollsOnThisRoad(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setHasTollsOnThisRoad(convert_classy);
      }


    private void  fromJSONHomeAutomationDomainSettings(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HomeAutomationDomainSettingsJSON convert_classy = HomeAutomationDomainSettingsJSON.from_json(json_value, ignore_extras, true);
        setHomeAutomationDomainSettings(convert_classy);
      }


    private void  fromJSONHondaAgent20MParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HondaAgent20MParametersJSON convert_classy = HondaAgent20MParametersJSON.from_json(json_value, ignore_extras, true);
        setHondaAgent20MParameters(convert_classy);
      }


    private void  fromJSONHondaAgentParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HondaAgentParametersJSON convert_classy = HondaAgentParametersJSON.from_json(json_value, ignore_extras, true);
        setHondaAgentParameters(convert_classy);
      }


    private void  fromJSONHondaCarManualParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HondaCarManualParametersJSON convert_classy = HondaCarManualParametersJSON.from_json(json_value, ignore_extras, true);
        setHondaCarManualParameters(convert_classy);
      }


    private void  fromJSONHueDeviceRegistration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HueDeviceRegistrationJSON convert_classy = HueDeviceRegistrationJSON.from_json(json_value, ignore_extras, true);
        setHueDeviceRegistration(convert_classy);
      }


    private void  fromJSONHumaxHomeAutomationCredentials(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HumaxHomeAutomationCredentialsJSON convert_classy = HumaxHomeAutomationCredentialsJSON.from_json(json_value, ignore_extras, true);
        setHumaxHomeAutomationCredentials(convert_classy);
      }


    private void  fromJSONHumaxMediaCloudURL(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HumaxMediaCloudURLJSON convert_classy = HumaxMediaCloudURLJSON.from_json(json_value, ignore_extras, true);
        setHumaxMediaCloudURL(convert_classy);
      }


    private void  fromJSONHumaxSmartTVClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HumaxSmartTVClientStateJSON convert_classy = HumaxSmartTVClientStateJSON.from_json(json_value, ignore_extras, true);
        setHumaxSmartTVClientState(convert_classy);
      }


    private void  fromJSONIHeartMediaDeviceIdentifiers(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IHeartMediaDeviceIdentifiersJSON convert_classy = IHeartMediaDeviceIdentifiersJSON.from_json(json_value, ignore_extras, true);
        setIHeartMediaDeviceIdentifiers(convert_classy);
      }


    private void  fromJSONIHeartRadioPreferArtistStations(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IHeartRadioPreferArtistStationsJSON convert_classy = IHeartRadioPreferArtistStationsJSON.from_json(json_value, ignore_extras, true);
        setIHeartRadioPreferArtistStations(convert_classy);
      }


    private void  fromJSONIHeartRadioPreferGenericRadioMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IHeartRadioPreferGenericRadioMatchesJSON convert_classy = IHeartRadioPreferGenericRadioMatchesJSON.from_json(json_value, ignore_extras, true);
        setIHeartRadioPreferGenericRadioMatches(convert_classy);
      }


    private void  fromJSONIHeartRadioPreferTerrestrialRadioMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IHeartRadioPreferTerrestrialRadioMatchesJSON convert_classy = IHeartRadioPreferTerrestrialRadioMatchesJSON.from_json(json_value, ignore_extras, true);
        setIHeartRadioPreferTerrestrialRadioMatches(convert_classy);
      }


    private void  fromJSONIftttKeyItem(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IftttKeyItemJSON convert_classy = IftttKeyItemJSON.from_json(json_value, ignore_extras, true);
        setIftttKeyItem(convert_classy);
      }


    private void  fromJSONImageSearchConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ImageSearchRequestInfoConfigurationJSON convert_classy = ImageSearchRequestInfoConfigurationJSON.from_json(json_value, ignore_extras, true);
        setImageSearchConfiguration(convert_classy);
      }


    private void  fromJSONImageSearchRequestInfoProviders(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ImageSearchRequestInfoProvidersJSON convert_classy = ImageSearchRequestInfoProvidersJSON.from_json(json_value, ignore_extras, true);
        setImageSearchRequestInfoProviders(convert_classy);
      }


    private void  fromJSONIncludeAllMusicResultsWithoutContext(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IncludeAllMusicResultsWithoutContextJSON convert_classy = IncludeAllMusicResultsWithoutContextJSON.from_json(json_value, ignore_extras, true);
        setIncludeAllMusicResultsWithoutContext(convert_classy);
      }


    private void  fromJSONIncomingCallPending(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        IncomingCallPendingJSON convert_classy = IncomingCallPendingJSON.from_json(json_value, ignore_extras, true);
        setIncomingCallPending(convert_classy);
      }


    private void  fromJSONInputOverrideDeleteFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setInputOverrideDeleteFunction(convert_classy);
      }


    private void  fromJSONInputOverrideFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        InputOverrideFunctionJSON convert_classy = InputOverrideFunctionJSON.from_json(json_value, ignore_extras, true);
        setInputOverrideFunction(convert_classy);
      }


    private void  fromJSONInputOverrideFunctionLanguage(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeFunctionLanguageJSON convert_classy = UploadedCodeFunctionLanguageJSON.from_json(json_value, ignore_extras, true);
        setInputOverrideFunctionLanguage(convert_classy);
      }


    private void  fromJSONInputOverrideFunctionSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeSourceJSON convert_classy = UploadedCodeSourceJSON.from_json(json_value, ignore_extras, true);
        setInputOverrideFunctionSource(convert_classy);
      }


    private void  fromJSONInputOverrideReadFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setInputOverrideReadFunction(convert_classy);
      }


    private void  fromJSONKuriInfo(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        KuriInfoJSON convert_classy = KuriInfoJSON.from_json(json_value, ignore_extras, true);
        setKuriInfo(convert_classy);
      }


    private void  fromJSONLocalSearchClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        LocalSearchClientStateJSON convert_classy = LocalSearchClientStateJSON.from_json(json_value, ignore_extras, true);
        setLocalSearchClientState(convert_classy);
      }


    private void  fromJSONMapClientControlPageToScroll(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setMapClientControlPageToScroll(convert_classy);
      }


    private void  fromJSONMultipleChoiceQuizAPIRequest(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        MultipleChoiceQuizAPIRequestJSON convert_classy = MultipleChoiceQuizAPIRequestJSON.from_json(json_value, ignore_extras, true);
        setMultipleChoiceQuizAPIRequest(convert_classy);
      }


    private void  fromJSONMusicClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        MusicClientStateJSON convert_classy = MusicClientStateJSON.from_json(json_value, ignore_extras, true);
        setMusicClientState(convert_classy);
      }


    private void  fromJSONNaritaAirportGuideArea(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NaritaAirportGuideAreaJSON convert_classy = NaritaAirportGuideAreaJSON.from_json(json_value, ignore_extras, true);
        setNaritaAirportGuideArea(convert_classy);
      }


    private void  fromJSONNaritaAirportGuideFloor(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NaritaAirportGuideFloorJSON convert_classy = NaritaAirportGuideFloorJSON.from_json(json_value, ignore_extras, true);
        setNaritaAirportGuideFloor(convert_classy);
      }


    private void  fromJSONNaritaAirportGuideTerminal(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NaritaAirportGuideTerminalJSON convert_classy = NaritaAirportGuideTerminalJSON.from_json(json_value, ignore_extras, true);
        setNaritaAirportGuideTerminal(convert_classy);
      }


    private void  fromJSONNavigationControlContext(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NavigationControlContextJSON convert_classy = NavigationControlContextJSON.from_json(json_value, ignore_extras, true);
        setNavigationControlContext(convert_classy);
      }


    private void  fromJSONTurnOffGuidanceMeansMute(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setTurnOffGuidanceMeansMute(convert_classy);
      }


    private void  fromJSONNavigationLocationDisambiguation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NavigationLocationDisambiguationConfigJSON convert_classy = NavigationLocationDisambiguationConfigJSON.from_json(json_value, ignore_extras, true);
        setNavigationLocationDisambiguation(convert_classy);
      }


    private void  fromJSONNewReminder(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CreateReminderFullDataJSON convert_classy = CreateReminderFullDataJSON.from_json(json_value, ignore_extras, true);
        setNewReminder(convert_classy);
      }


    private void  fromJSONNumberOfVolumeLevels(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        NumberOfVolumeLevelsJSON convert_classy = NumberOfVolumeLevelsJSON.from_json(json_value, ignore_extras, true);
        setNumberOfVolumeLevels(convert_classy);
      }


    private void  fromJSONOAuth2ClientID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientIDOAuth2RequestInfoFieldJSON convert_classy = ClientIDOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setOAuth2ClientID(convert_classy);
      }


    private void  fromJSONOAuth2ClientSecret(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientSecretOAuth2RequestInfoFieldJSON convert_classy = ClientSecretOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setOAuth2ClientSecret(convert_classy);
      }


    private void  fromJSONOAuth2ClientToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OAuth2ClientTokenJSON convert_classy = OAuth2ClientTokenJSON.from_json(json_value, ignore_extras, true);
        setOAuth2ClientToken(convert_classy);
      }


    private void  fromJSONOAuth2CodeData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CodeDataOAuth2RequestInfoFieldJSON convert_classy = CodeDataOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setOAuth2CodeData(convert_classy);
      }


    private void  fromJSONOAuth2RefreshToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RefreshTokenOAuth2RequestInfoFieldJSON convert_classy = RefreshTokenOAuth2RequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setOAuth2RefreshToken(convert_classy);
      }


    private void  fromJSONOrganizationalChartRequest(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OrganizationalChartRequestJSON convert_classy = OrganizationalChartRequestJSON.from_json(json_value, ignore_extras, true);
        setOrganizationalChartRequest(convert_classy);
      }


    private void  fromJSONOutputDeepIntegrationLattice(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputDeepIntegrationLatticeJSON convert_classy = OutputDeepIntegrationLatticeJSON.from_json(json_value, ignore_extras, true);
        setOutputDeepIntegrationLattice(convert_classy);
      }


    private void  fromJSONOutputSLMLattice(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputSLMLatticeJSON convert_classy = OutputSLMLatticeJSON.from_json(json_value, ignore_extras, true);
        setOutputSLMLattice(convert_classy);
      }


    private void  fromJSONOutputOverrideKind(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputOverrideKindJSON convert_classy = OutputOverrideKindJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideKind(convert_classy);
      }


    private void  fromJSONOutputOverrideFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputOverrideFunctionJSON convert_classy = OutputOverrideFunctionJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideFunctionLanguage(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeFunctionLanguageJSON convert_classy = UploadedCodeFunctionLanguageJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideFunctionLanguage(convert_classy);
      }


    private void  fromJSONOutputOverrideFunctionSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeSourceJSON convert_classy = UploadedCodeSourceJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideFunctionSource(convert_classy);
      }


    private void  fromJSONOutputOverrideCommandIsPreAudioOut(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideCommandIsPreAudioOut(convert_classy);
      }


    private void  fromJSONOutputOverrideDeleteCommandFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideDeleteCommandFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideDeleteInformationNuggetFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideDeleteInformationNuggetFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideInformationNuggetFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputOverrideFunctionJSON convert_classy = OutputOverrideFunctionJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideInformationNuggetFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideInformationNuggetFunctionLanguage(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeFunctionLanguageJSON convert_classy = UploadedCodeFunctionLanguageJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideInformationNuggetFunctionLanguage(convert_classy);
      }


    private void  fromJSONOutputOverrideInformationNuggetFunctionSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeSourceJSON convert_classy = UploadedCodeSourceJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideInformationNuggetFunctionSource(convert_classy);
      }


    private void  fromJSONOutputOverrideReadCommandFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideReadCommandFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideReadInformationNuggetFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideReadInformationNuggetFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideCommandFunction(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        OutputOverrideFunctionJSON convert_classy = OutputOverrideFunctionJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideCommandFunction(convert_classy);
      }


    private void  fromJSONOutputOverrideCommandFunctionLanguage(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeFunctionLanguageJSON convert_classy = UploadedCodeFunctionLanguageJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideCommandFunctionLanguage(convert_classy);
      }


    private void  fromJSONOutputOverrideCommandFunctionSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedCodeSourceJSON convert_classy = UploadedCodeSourceJSON.from_json(json_value, ignore_extras, true);
        setOutputOverrideCommandFunctionSource(convert_classy);
      }


    private void  fromJSONPandoraCustomClientPrompt(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientPromptPandoraCustomRequestInfoFieldJSON convert_classy = ClientPromptPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomClientPrompt(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableComponentFormat(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableComponentFormatPandoraCustomRequestInfoFieldJSON convert_classy = EnableComponentFormatPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableComponentFormat(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableDomain(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableDomainPandoraCustomRequestInfoFieldJSON convert_classy = EnableDomainPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableDomain(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableExclusionInTarzanMode(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON convert_classy = EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableExclusionInTarzanMode(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableInferredPlay(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableInferredPlayPandoraCustomRequestInfoFieldJSON convert_classy = EnableInferredPlayPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableInferredPlay(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON convert_classy = EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON convert_classy = EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableLongJSONFallback(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON convert_classy = EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableLongJSONFallback(convert_classy);
      }


    private void  fromJSONPandoraCustomEnablePodcastMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON convert_classy = EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnablePodcastMatches(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableUserDataQueries(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON convert_classy = EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableUserDataQueries(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableWildcardMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON convert_classy = EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableWildcardMatches(convert_classy);
      }


    private void  fromJSONPandoraCustomEnableWildcardMatchesOnlyAsFallback(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON convert_classy = EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomEnableWildcardMatchesOnlyAsFallback(convert_classy);
      }


    private void  fromJSONPandoraCustomExtendedStationModeData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON convert_classy = ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomExtendedStationModeData(convert_classy);
      }


    private void  fromJSONPandoraCustomRapidIngestionData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RapidIngestionDataPandoraCustomRequestInfoFieldJSON convert_classy = RapidIngestionDataPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomRapidIngestionData(convert_classy);
      }


    private void  fromJSONPandoraCustomUserData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserDataPandoraCustomRequestInfoFieldJSON convert_classy = UserDataPandoraCustomRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setPandoraCustomUserData(convert_classy);
      }


    private void  fromJSONParkingClientState(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ParkingClientStateJSON convert_classy = ParkingClientStateJSON.from_json(json_value, ignore_extras, true);
        setParkingClientState(convert_classy);
      }


    private void  fromJSONPepperEnabled(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PepperEnabledJSON convert_classy = PepperEnabledJSON.from_json(json_value, ignore_extras, true);
        setPepperEnabled(convert_classy);
      }


    private void  fromJSONPhoneDisambiguationOmitList(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PhoneDisambiguationOmitListJSON convert_classy = PhoneDisambiguationOmitListJSON.from_json(json_value, ignore_extras, true);
        setPhoneDisambiguationOmitList(convert_classy);
      }


    private void  fromJSONRadioControlAvailableAudioSources(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlAvailableAudioSourcesJSON convert_classy = RadioControlAvailableAudioSourcesJSON.from_json(json_value, ignore_extras, true);
        setRadioControlAvailableAudioSources(convert_classy);
      }


    private void  fromJSONRadioControlOtherAMBands(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlOtherAMBandsJSON convert_classy = RadioControlOtherAMBandsJSON.from_json(json_value, ignore_extras, true);
        setRadioControlOtherAMBands(convert_classy);
      }


    private void  fromJSONRadioControlOtherFMBands(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlOtherFMBandsJSON convert_classy = RadioControlOtherFMBandsJSON.from_json(json_value, ignore_extras, true);
        setRadioControlOtherFMBands(convert_classy);
      }


    private void  fromJSONRadioControlRecognizeNorthAmericanAMBand(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlRecognizeNorthAmericanAMBandJSON convert_classy = RadioControlRecognizeNorthAmericanAMBandJSON.from_json(json_value, ignore_extras, true);
        setRadioControlRecognizeNorthAmericanAMBand(convert_classy);
      }


    private void  fromJSONRadioControlRecognizeNorthAmericanFMBand(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlRecognizeNorthAmericanFMBandJSON convert_classy = RadioControlRecognizeNorthAmericanFMBandJSON.from_json(json_value, ignore_extras, true);
        setRadioControlRecognizeNorthAmericanFMBand(convert_classy);
      }


    private void  fromJSONRadioControlTunableStations(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RadioControlTunableStationsJSON convert_classy = RadioControlTunableStationsJSON.from_json(json_value, ignore_extras, true);
        setRadioControlTunableStations(convert_classy);
      }


    private void  fromJSONReadSpeakerVoiceParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ReadSpeakerVoiceParametersJSON convert_classy = ReadSpeakerVoiceParametersJSON.from_json(json_value, ignore_extras, true);
        setReadSpeakerVoiceParameters(convert_classy);
      }


    private void  fromJSONRecipeParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RecipeParametersJSON convert_classy = RecipeParametersJSON.from_json(json_value, ignore_extras, true);
        setRecipeParameters(convert_classy);
      }


    private void  fromJSONRegionalPhoneNumberConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RegionalPhoneNumberConfigurationJSON convert_classy = RegionalPhoneNumberConfigurationJSON.from_json(json_value, ignore_extras, true);
        setRegionalPhoneNumberConfiguration(convert_classy);
      }


    private void  fromJSONRemainingDistance(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AmountJSON convert_classy = AmountJSON.from_json(json_value, ignore_extras, true);
        setRemainingDistance(convert_classy);
      }


    private void  fromJSONRemainingTravelTime(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AmountJSON convert_classy = AmountJSON.from_json(json_value, ignore_extras, true);
        setRemainingTravelTime(convert_classy);
      }


    private void  fromJSONReminders(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ReminderListJSON convert_classy = ReminderListJSON.from_json(json_value, ignore_extras, true);
        setReminders(convert_classy);
      }


    private void  fromJSONRestaurantMenuMetadata(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantMenuMetadataJSON convert_classy = RestaurantMenuMetadataJSON.from_json(json_value, ignore_extras, true);
        setRestaurantMenuMetadata(convert_classy);
      }


    private void  fromJSONRestaurantMenuObject(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantMenuObjectJSON convert_classy = RestaurantMenuObjectJSON.from_json(json_value, ignore_extras, true);
        setRestaurantMenuObject(convert_classy);
      }


    private void  fromJSONRestaurantOrderingMenuData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantOrderingMenuDataJSON convert_classy = RestaurantOrderingMenuDataJSON.from_json(json_value, ignore_extras, true);
        setRestaurantOrderingMenuData(convert_classy);
      }


    private void  fromJSONRestaurantOrderingQueriesMenuDataStoreID(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON convert_classy = RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setRestaurantOrderingQueriesMenuDataStoreID(convert_classy);
      }


    private void  fromJSONRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON convert_classy = RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(convert_classy);
      }


    private void  fromJSONRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON convert_classy = RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(convert_classy);
      }


    private void  fromJSONRestaurantOrderingQueriesRequestData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RestaurantOrderingQueriesRequestDataJSON convert_classy = RestaurantOrderingQueriesRequestDataJSON.from_json(json_value, ignore_extras, true);
        setRestaurantOrderingQueriesRequestData(convert_classy);
      }


    private void  fromJSONReturnInformationNuggetsForMusicSearch(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ReturnInformationNuggetsForMusicSearchJSON convert_classy = ReturnInformationNuggetsForMusicSearchJSON.from_json(json_value, ignore_extras, true);
        setReturnInformationNuggetsForMusicSearch(convert_classy);
      }


    private void  fromJSONRobotInfo(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RobotInfoJSON convert_classy = RobotInfoJSON.from_json(json_value, ignore_extras, true);
        setRobotInfo(convert_classy);
      }


    private void  fromJSONSendFullWeatherForecastData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SendFullWeatherForecastDataJSON convert_classy = SendFullWeatherForecastDataJSON.from_json(json_value, ignore_extras, true);
        setSendFullWeatherForecastData(convert_classy);
      }


    private void  fromJSONSetUserMemoryLocation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SetUserMemoryLocationJSON convert_classy = SetUserMemoryLocationJSON.from_json(json_value, ignore_extras, true);
        setSetUserMemoryLocation(convert_classy);
      }


    private void  fromJSONSiriusXMEnableDomain(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SiriusXMEnableDomainJSON convert_classy = SiriusXMEnableDomainJSON.from_json(json_value, ignore_extras, true);
        setSiriusXMEnableDomain(convert_classy);
      }


    private void  fromJSONSiriusXMEnableGenericChannelMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SiriusXMEnableGenericChannelMatchesJSON convert_classy = SiriusXMEnableGenericChannelMatchesJSON.from_json(json_value, ignore_extras, true);
        setSiriusXMEnableGenericChannelMatches(convert_classy);
      }


    private void  fromJSONSiriusXMEnableWildcardMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SiriusXMEnableWildcardMatchesJSON convert_classy = SiriusXMEnableWildcardMatchesJSON.from_json(json_value, ignore_extras, true);
        setSiriusXMEnableWildcardMatches(convert_classy);
      }


    private void  fromJSONSmartTVOnScreenItems(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SmartTVOnScreenItemsRequestInfoFieldJSON convert_classy = SmartTVOnScreenItemsRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setSmartTVOnScreenItems(convert_classy);
      }


    private void  fromJSONSmartTVUserCustomInputSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SmartTVUserCustomInputSourceRequestInfoFieldJSON convert_classy = SmartTVUserCustomInputSourceRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setSmartTVUserCustomInputSource(convert_classy);
      }


    private void  fromJSONSoundHoundTTSParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SoundHoundTTSParametersJSON convert_classy = SoundHoundTTSParametersJSON.from_json(json_value, ignore_extras, true);
        setSoundHoundTTSParameters(convert_classy);
      }


    private void  fromJSONSpeedLimitOnThisRoad(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        AmountJSON convert_classy = AmountJSON.from_json(json_value, ignore_extras, true);
        setSpeedLimitOnThisRoad(convert_classy);
      }


    private void  fromJSONSportsLeagueControl(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SportsLeagueControlJSON convert_classy = SportsLeagueControlJSON.from_json(json_value, ignore_extras, true);
        setSportsLeagueControl(convert_classy);
      }


    private void  fromJSONSpotifyPlaylistEnableWildcardMatches(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON convert_classy = EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setSpotifyPlaylistEnableWildcardMatches(convert_classy);
      }


    private void  fromJSONStoredAlwaysMatchReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredAlwaysMatchReadDataJSON convert_classy = StoredAlwaysMatchReadDataJSON.from_json(json_value, ignore_extras, true);
        setStoredAlwaysMatchReadData(convert_classy);
      }


    private void  fromJSONStoredAlwaysMatchWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ClientMatchesJSON convert_classy = ClientMatchesJSON.from_json(json_value, ignore_extras, true);
        setStoredAlwaysMatchWriteData(convert_classy);
      }


    private void  fromJSONStoredGlobalPagesToMatch(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredGlobalPagesToMatch(convert_classy);
      }


    private void  fromJSONStoredGlobalPagesToNotMatch(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredGlobalPagesToNotMatch(convert_classy);
      }


    private void  fromJSONStoredGlobalPagesToSetOffByDefault(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredGlobalPagesToSetOffByDefault(convert_classy);
      }


    private void  fromJSONStoredGlobalPagesToSetOnByDefault(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredGlobalPagesToSetOnByDefault(convert_classy);
      }


    private void  fromJSONStoredPageMatchPageListData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListDataJSON convert_classy = StoredPageMatchPageListDataJSON.from_json(json_value, ignore_extras, true);
        setStoredPageMatchPageListData(convert_classy);
      }


    private void  fromJSONStoredPageMatchReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchReadDataJSON convert_classy = StoredPageMatchReadDataJSON.from_json(json_value, ignore_extras, true);
        setStoredPageMatchReadData(convert_classy);
      }


    private void  fromJSONStoredPageMatchWeight(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchWeightJSON convert_classy = StoredPageMatchWeightJSON.from_json(json_value, ignore_extras, true);
        setStoredPageMatchWeight(convert_classy);
      }


    private void  fromJSONStoredPageMatchWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchWriteDataJSON convert_classy = StoredPageMatchWriteDataJSON.from_json(json_value, ignore_extras, true);
        setStoredPageMatchWriteData(convert_classy);
      }


    private void  fromJSONStoredPerUserPagesToMatch(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredPerUserPagesToMatch(convert_classy);
      }


    private void  fromJSONStoredPerUserPagesToNotMatch(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredPerUserPagesToNotMatch(convert_classy);
      }


    private void  fromJSONStoredPerUserPagesToSetOffByDefault(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredPerUserPagesToSetOffByDefault(convert_classy);
      }


    private void  fromJSONStoredPerUserPagesToSetOnByDefault(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StoredPageMatchPageListJSON convert_classy = StoredPageMatchPageListJSON.from_json(json_value, ignore_extras, true);
        setStoredPerUserPagesToSetOnByDefault(convert_classy);
      }


    private void  fromJSONSurveyAPIRequest(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SurveyAPIRequestJSON convert_classy = SurveyAPIRequestJSON.from_json(json_value, ignore_extras, true);
        setSurveyAPIRequest(convert_classy);
      }


    private void  fromJSONTVChannelList(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TVChannelListJSON convert_classy = TVChannelListJSON.from_json(json_value, ignore_extras, true);
        setTVChannelList(convert_classy);
      }


    private void  fromJSONTerrierTableUploadReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierTableUploadReadDataJSON convert_classy = TerrierTableUploadReadDataJSON.from_json(json_value, ignore_extras, true);
        setTerrierTableUploadReadData(convert_classy);
      }


    private void  fromJSONTerrierTableUploadWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierTableUploadWriteDataJSON convert_classy = TerrierTableUploadWriteDataJSON.from_json(json_value, ignore_extras, true);
        setTerrierTableUploadWriteData(convert_classy);
      }


    private void  fromJSONTerrierUploadDeleteProject(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadDeleteProjectJSON convert_classy = TerrierUploadDeleteProjectJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadDeleteProject(convert_classy);
      }


    private void  fromJSONTerrierUploadDeleteProjectOptions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadDeleteProjectOptionsJSON convert_classy = TerrierUploadDeleteProjectOptionsJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadDeleteProjectOptions(convert_classy);
      }


    private void  fromJSONTerrierUploadGetProject(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadGetProjectJSON convert_classy = TerrierUploadGetProjectJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadGetProject(convert_classy);
      }


    private void  fromJSONTerrierUploadGetProjectList(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadGetProjectListJSON convert_classy = TerrierUploadGetProjectListJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadGetProjectList(convert_classy);
      }


    private void  fromJSONTerrierUploadGetProjectListOptions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadGetProjectListOptionsJSON convert_classy = TerrierUploadGetProjectListOptionsJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadGetProjectListOptions(convert_classy);
      }


    private void  fromJSONTerrierUploadGetProjectOptions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadGetProjectOptionsJSON convert_classy = TerrierUploadGetProjectOptionsJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadGetProjectOptions(convert_classy);
      }


    private void  fromJSONTerrierUploadReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadReadDataJSON convert_classy = TerrierUploadReadDataJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadReadData(convert_classy);
      }


    private void  fromJSONTerrierUploadWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadWriteDataJSON convert_classy = TerrierUploadWriteDataJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadWriteData(convert_classy);
      }


    private void  fromJSONTerrierUploadWriteProject(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadedProjectJSON convert_classy = TerrierUploadedProjectJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadWriteProject(convert_classy);
      }


    private void  fromJSONTerrierUploadWriteProjectOptions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        TerrierUploadWriteProjectOptionsJSON convert_classy = TerrierUploadWriteProjectOptionsJSON.from_json(json_value, ignore_extras, true);
        setTerrierUploadWriteProjectOptions(convert_classy);
      }


    private void  fromJSONThirdPartyCalendarService(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ThirdPartyCalendarServiceJSON convert_classy = ThirdPartyCalendarServiceJSON.from_json(json_value, ignore_extras, true);
        setThirdPartyCalendarService(convert_classy);
      }


    private void  fromJSONCalendarMatchingLoosenessLevel(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CalendarMatchingLoosenessLevelJSON convert_classy = CalendarMatchingLoosenessLevelJSON.from_json(json_value, ignore_extras, true);
        setCalendarMatchingLoosenessLevel(convert_classy);
      }


    private void  fromJSONCalendarEvents(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CalendarRequestInfoEventsListJSON convert_classy = CalendarRequestInfoEventsListJSON.from_json(json_value, ignore_extras, true);
        setCalendarEvents(convert_classy);
      }


    private void  fromJSONToshibaTTSParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ToshibaTTSParametersJSON convert_classy = ToshibaTTSParametersJSON.from_json(json_value, ignore_extras, true);
        setToshibaTTSParameters(convert_classy);
      }


    private void  fromJSONTravelBearing(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HLSHeadingJSON convert_classy = HLSHeadingJSON.from_json(json_value, ignore_extras, true);
        setTravelBearing(convert_classy);
      }


    private void  fromJSONUDSExampleRequest(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UDSExampleRequestJSON convert_classy = UDSExampleRequestJSON.from_json(json_value, ignore_extras, true);
        setUDSExampleRequest(convert_classy);
      }


    private void  fromJSONUberClientId(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UberClientIdJSON convert_classy = UberClientIdJSON.from_json(json_value, ignore_extras, true);
        setUberClientId(convert_classy);
      }


    private void  fromJSONUberServerToken(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UberServerTokenJSON convert_classy = UberServerTokenJSON.from_json(json_value, ignore_extras, true);
        setUberServerToken(convert_classy);
      }


    private void  fromJSONUploadedTestConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedTestConfigurationJSON convert_classy = UploadedTestConfigurationJSON.from_json(json_value, ignore_extras, true);
        setUploadedTestConfiguration(convert_classy);
      }


    private void  fromJSONUploadedTestData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UploadedTestsJSON convert_classy = UploadedTestsJSON.from_json(json_value, ignore_extras, true);
        setUploadedTestData(convert_classy);
      }


    private void  fromJSONUseNewStyleSMSCommands(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setUseNewStyleSMSCommands(convert_classy);
      }


    private void  fromJSONUseXAPAPI(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setUseXAPAPI(convert_classy);
      }


    private void  fromJSONUserContactsConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserContactsConfigurationJSON convert_classy = UserContactsConfigurationJSON.from_json(json_value, ignore_extras, true);
        setUserContactsConfiguration(convert_classy);
      }


    private void  fromJSONUserContactsRequests(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserContactsRequestsJSON convert_classy = UserContactsRequestsJSON.from_json(json_value, ignore_extras, true);
        setUserContactsRequests(convert_classy);
      }


    private void  fromJSONUserFeedback(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserFeedbackJSON convert_classy = UserFeedbackJSON.from_json(json_value, ignore_extras, true);
        setUserFeedback(convert_classy);
      }


    private void  fromJSONUserMusicAvailableSources(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserMusicAvailableSourcesJSON convert_classy = UserMusicAvailableSourcesJSON.from_json(json_value, ignore_extras, true);
        setUserMusicAvailableSources(convert_classy);
      }


    private void  fromJSONUserMusicControls(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserMusicControlsJSON convert_classy = UserMusicControlsJSON.from_json(json_value, ignore_extras, true);
        setUserMusicControls(convert_classy);
      }


    private void  fromJSONUserMusicInfo(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UserMusicInfoJSON convert_classy = UserMusicInfoJSON.from_json(json_value, ignore_extras, true);
        setUserMusicInfo(convert_classy);
      }


    private void  fromJSONVideoSearchConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        VideoSearchRequestInfoConfigurationJSON convert_classy = VideoSearchRequestInfoConfigurationJSON.from_json(json_value, ignore_extras, true);
        setVideoSearchConfiguration(convert_classy);
      }


    private void  fromJSONVideoSearchRequestInfoProviders(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        VideoSearchRequestInfoProvidersJSON convert_classy = VideoSearchRequestInfoProvidersJSON.from_json(json_value, ignore_extras, true);
        setVideoSearchRequestInfoProviders(convert_classy);
      }


    private void  fromJSONVoiceParameters(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        VoiceParametersJSON convert_classy = VoiceParametersJSON.from_json(json_value, ignore_extras, true);
        setVoiceParameters(convert_classy);
      }


    private void  fromJSONWebSearchConfiguration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        WebSearchRequestInfoConfigurationJSON convert_classy = WebSearchRequestInfoConfigurationJSON.from_json(json_value, ignore_extras, true);
        setWebSearchConfiguration(convert_classy);
      }


    private void  fromJSONWebSearchRequestInfoProviders(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        WebSearchRequestInfoProvidersJSON convert_classy = WebSearchRequestInfoProvidersJSON.from_json(json_value, ignore_extras, true);
        setWebSearchRequestInfoProviders(convert_classy);
      }


    private void  fromJSONWhat3WordsCluePhraseNotRequired(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        What3WordsCluePhraseNotRequiredJSON convert_classy = What3WordsCluePhraseNotRequiredJSON.from_json(json_value, ignore_extras, true);
        setWhat3WordsCluePhraseNotRequired(convert_classy);
      }


    private void  fromJSONWhat3WordsStandardGeofenceRadius(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        What3WordsStandardGeofenceRadiusJSON convert_classy = What3WordsStandardGeofenceRadiusJSON.from_json(json_value, ignore_extras, true);
        setWhat3WordsStandardGeofenceRadius(convert_classy);
      }


    private void  fromJSONHereApiPlacesFallback(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        HereApiPlacesFallbackSettingsJSON convert_classy = HereApiPlacesFallbackSettingsJSON.from_json(json_value, ignore_extras, true);
        setHereApiPlacesFallback(convert_classy);
      }


    private void  fromJSONPaymentsPredeterminedSMSNumber(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PaymentsPredeterminedSMSNumberFieldJSON convert_classy = PaymentsPredeterminedSMSNumberFieldJSON.from_json(json_value, ignore_extras, true);
        setPaymentsPredeterminedSMSNumber(convert_classy);
      }


    private void  fromJSONPaymentsPredeterminedPaymentMethod(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PaymentsPaymentMethodTypeJSON convert_classy = PaymentsPaymentMethodTypeJSON.from_json(json_value, ignore_extras, true);
        setPaymentsPredeterminedPaymentMethod(convert_classy);
      }


    private void  fromJSONOrderSource(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PaymentsOrderSourceFieldJSON convert_classy = PaymentsOrderSourceFieldJSON.from_json(json_value, ignore_extras, true);
        setOrderSource(convert_classy);
      }


    private void  fromJSONOrderPrepDuration(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        PaymentsOrderPrepDurationFieldJSON convert_classy = PaymentsOrderPrepDurationFieldJSON.from_json(json_value, ignore_extras, true);
        setOrderPrepDuration(convert_classy);
      }


    private void  fromJSONSquareEnvironment(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        SquareEnvironmentJSON convert_classy = SquareEnvironmentJSON.from_json(json_value, ignore_extras, true);
        setSquareEnvironment(convert_classy);
      }


    private void  fromJSONEnableSquareCustomerInformationPermissions(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        EnableSquareCustomerInformationPermissionsJSON convert_classy = EnableSquareCustomerInformationPermissionsJSON.from_json(json_value, ignore_extras, true);
        setEnableSquareCustomerInformationPermissions(convert_classy);
      }


    private void  fromJSONMessagingConvertPunctuation(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setMessagingConvertPunctuation(convert_classy);
      }


    private void  fromJSONAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        RequestInfoBooleanFlagJSON convert_classy = RequestInfoBooleanFlagJSON.from_json(json_value, ignore_extras, true);
        setAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(convert_classy);
      }


    private void  fromJSONStreamPreference(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        StreamPreferenceJSON convert_classy = StreamPreferenceJSON.from_json(json_value, ignore_extras, true);
        setStreamPreference(convert_classy);
      }


    private void  fromJSONMusicQueriesForceInfoNuggetToPlayCommand(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON convert_classy = MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setMusicQueriesForceInfoNuggetToPlayCommand(convert_classy);
      }


    private void  fromJSONMusicQueriesAllowRawTop(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        MusicQueriesAllowRawTopRequestInfoFieldJSON convert_classy = MusicQueriesAllowRawTopRequestInfoFieldJSON.from_json(json_value, ignore_extras, true);
        setMusicQueriesAllowRawTop(convert_classy);
      }


    private void  fromJSONBusinessInformationUploadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BusinessInformationUploadDataRequestJSON convert_classy = BusinessInformationUploadDataRequestJSON.from_json(json_value, ignore_extras, true);
        setBusinessInformationUploadData(convert_classy);
      }


    private void  fromJSONBusinessInformationDataStoreId(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        BusinessInformationDataStoreIdJSON convert_classy = BusinessInformationDataStoreIdJSON.from_json(json_value, ignore_extras, true);
        setBusinessInformationDataStoreId(convert_classy);
      }


    private void  fromJSONCustomASREnhancementWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomASREnhancementDataJSON convert_classy = CustomASREnhancementDataJSON.from_json(json_value, ignore_extras, true);
        setCustomASREnhancementWriteData(convert_classy);
      }


    private void  fromJSONCustomASREnhancementReadData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomASREnhancementReadDataJSON convert_classy = CustomASREnhancementReadDataJSON.from_json(json_value, ignore_extras, true);
        setCustomASREnhancementReadData(convert_classy);
      }


    private void  fromJSONCustomASREnhancementListData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomASREnhancementListDataJSON convert_classy = CustomASREnhancementListDataJSON.from_json(json_value, ignore_extras, true);
        setCustomASREnhancementListData(convert_classy);
      }


    private void  fromJSONEnabledCustomASREnhancementGrammars(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomASREnhancementListJSON convert_classy = CustomASREnhancementListJSON.from_json(json_value, ignore_extras, true);
        setEnabledCustomASREnhancementGrammars(convert_classy);
      }


    private void  fromJSONCustomASREnhancementWeight(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomASREnhancementWeightJSON convert_classy = CustomASREnhancementWeightJSON.from_json(json_value, ignore_extras, true);
        setCustomASREnhancementWeight(convert_classy);
      }


    private void  fromJSONToastEnvironment(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        ToastEnvironmentJSON convert_classy = ToastEnvironmentJSON.from_json(json_value, ignore_extras, true);
        setToastEnvironment(convert_classy);
      }


    private void  fromJSONIntentToExecute(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CommandIntentJSON convert_classy = CommandIntentJSON.from_json(json_value, ignore_extras, true);
        setIntentToExecute(convert_classy);
      }


    private void  fromJSONUniversalTranslatorSubstitutionList(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        UniversalTranslatorSubstitutionListJSON convert_classy = UniversalTranslatorSubstitutionListJSON.from_json(json_value, ignore_extras, true);
        setUniversalTranslatorSubstitutionList(convert_classy);
      }


    private void  fromJSONCustomTopicIdentificationWriteData(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        CustomTopicIdentificationDataJSON convert_classy = CustomTopicIdentificationDataJSON.from_json(json_value, ignore_extras, true);
        setCustomTopicIdentificationWriteData(convert_classy);
      }


    public RequestInfoJSON()
      {
        flagHasLatitude = false;
        flagHasLongitude = false;
        flagHasPositionTime = false;
        flagHasPositionHorizontalAccuracy = false;
        flagHasStreet = false;
        flagHasCity = false;
        flagHasState = false;
        flagHasCountry = false;
        flagHasRoutePoints = false;
        flagHasRouteInformation = false;
        flagHasControllableTrackPlaying = false;
        flagHasTimeStamp = false;
        flagHasTimeZone = false;
        flagHasConversationState = false;
        flagHasClientState = false;
        flagHasDeviceInfo = false;
        flagHasSendBack = false;
        flagHasPreferredImageSize = false;
        flagHasInputLanguageEnglishName = false;
        flagHasInputLanguageNativeName = false;
        flagHasInputLanguageIETFTag = false;
        flagHasOutputLanguageEnglishName = false;
        flagHasOutputLanguageNativeName = false;
        flagHasOutputLanguageIETFTag = false;
        flagHasResultVersionAccepted = false;
        flagHasUnitPreference = false;
        flagHasDefaultTimeFormat24Hours = false;
        flagHasClientID = false;
        flagHasClientVersion = false;
        flagHasDeviceID = false;
        flagHasSDK = false;
        flagHasSDKInfo = false;
        flagHasFirstPersonSelf = false;
        flagHasFirstPersonSelfSpoken = false;
        flagHasSecondPersonSelf = false;
        flagHasSecondPersonSelfSpoken = false;
        flagHasWakeUpPhraseIncludedInAudio = false;
        flagHasInitialSecondsOfAudioToIgnore = false;
        flagHasWakeUpPattern = false;
        flagHasUserID = false;
        flagHasRequestID = false;
        flagHasSessionID = false;
        flagHasDomains = false;
        flagHasResultUpdateAllowed = false;
        flagHasPartialTranscriptsDesired = false;
        flagHasMinResults = false;
        flagHasMaxResults = false;
        flagHasObjectByteCountPrefix = false;
        flagHasProfanityFilter = false;
        flagHasClientMatches = false;
        flagHasClientMatchesOnly = false;
        flagHasPagination = false;
        flagHasResponseAudioVoice = false;
        flagHasResponseAudioShortOrLong = false;
        flagHasResponseAudioAcceptedEncodings = false;
        flagHasReturnResponseAudioAsURL = false;
        flagHasVoiceActivityDetection = false;
        flagHasServerDeterminesEndOfAudio = false;
        flagHasIntentOnly = false;
        flagHasDisableSpellCorrection = false;
        flagHasUseContactData = false;
        flagHasUseClientTime = false;
        flagHasForceConversationStateTime = false;
        flagHasOutputLatticeSize = false;
        flagHasMatchingMutations = false;
        flagHasUseFormattedTranscriptionAsDefault = false;
        flagHasResponseRanking = false;
        flagHasAcapelaVoiceParameters = false;
        flagHasAllowPopularNameContactMatches = false;
        flagHasAlwaysFetchCurrentConditionsData = false;
        flagHasAlwaysFetchHourlyForecastData = false;
        flagHasArrivalTime = false;
        flagHasAvantiMachineState = false;
        flagHasBingAdExtensions = false;
        flagHasBunnIsConfirmationRequired = false;
        flagHasBunnMachineState = false;
        flagHasCalendarDataSynchronization = false;
        flagHasCallPermissions = false;
        flagHasCarControlClimateClientConfiguration = false;
        flagHasCarControlClimateTemperatureConfig = false;
        flagHasCarManualModel = false;
        flagHasCarManualNormalizedQueryToSet = false;
        flagHasCarManualResponseToSet = false;
        flagHasCarStatus = false;
        flagHasChargingClientState = false;
        flagHasClientListMatches = false;
        flagHasCollateMusicEntities = false;
        flagHasConnectedToThirdPartyMusicApp = false;
        flagHasContactQueryExclusions = false;
        flagHasPhoneCommandConfiguration = false;
        flagHasConvertToNewInformationNuggets = false;
        flagHasCustomSpeechRecognitionPatternsGroupListData = false;
        flagHasCustomSpeechRecognitionPatternsReadData = false;
        flagHasCustomSpeechRecognitionPatternsWeight = false;
        flagHasCustomSpeechRecognitionPatternsWriteData = false;
        flagHasDeleteUserMemoryLocation = false;
        flagHasDisableMusicPlayerListPositionSpecification = false;
        flagHasDisableMusicSearchListPositionSpecification = false;
        flagHasDisambiguateResultsBeforeAction = false;
        flagHasDisplayedReminder = false;
        flagHasEnableClientControlInModes = false;
        flagHasEnableLocalPlacesQueries = false;
        flagHasLocalPlacesSettings = false;
        flagHasEnableMusicPlayerFavorites = false;
        flagHasEnabledCustomSpeechRecognitionPatternGroups = false;
        flagHasEntertainmentClientState = false;
        flagHasEntertainmentTitlesUploadData = false;
        flagHasExcludeAllMusicResultsWithoutExplicitContext = false;
        flagHasExcludeWikipediaLowConfidenceResults = false;
        flagHasFitBitAccessToken = false;
        flagHasFitBitRefreshToken = false;
        flagHasGetHumaxMediaCloudURL = false;
        flagHasGetOAuth2ClientID = false;
        flagHasGetOAuth2ClientSecret = false;
        flagHasSquare = false;
        flagHasGetOAuth2ClientToken = false;
        flagHasGetUberClientId = false;
        flagHasGetUberServerToken = false;
        flagHasHLSRadius = false;
        flagHasHarmanDeviceRegistration = false;
        flagHasHarmanHospitalityAmxControllerHttpRequest = false;
        flagHasHarmanHospitalityMeetingInformation = false;
        flagHasHarmanHospitalityPropertyInformation = false;
        flagHasHarmanPropertyRegistration = false;
        flagHasHasTollsOnThisRoad = false;
        flagHasHomeAutomationDomainSettings = false;
        flagHasHondaAgent20MParameters = false;
        flagHasHondaAgentParameters = false;
        flagHasHondaCarManualParameters = false;
        flagHasHueDeviceRegistration = false;
        flagHasHumaxHomeAutomationCredentials = false;
        flagHasHumaxMediaCloudURL = false;
        flagHasHumaxSmartTVClientState = false;
        flagHasIHeartMediaDeviceIdentifiers = false;
        flagHasIHeartRadioPreferArtistStations = false;
        flagHasIHeartRadioPreferGenericRadioMatches = false;
        flagHasIHeartRadioPreferTerrestrialRadioMatches = false;
        flagHasIftttKeyItem = false;
        flagHasImageSearchConfiguration = false;
        flagHasImageSearchRequestInfoProviders = false;
        flagHasIncludeAllMusicResultsWithoutContext = false;
        flagHasIncomingCallPending = false;
        flagHasInputOverrideDeleteFunction = false;
        flagHasInputOverrideFunction = false;
        flagHasInputOverrideFunctionLanguage = false;
        flagHasInputOverrideFunctionSource = false;
        flagHasInputOverrideReadFunction = false;
        flagHasKuriInfo = false;
        flagHasLocalSearchClientState = false;
        flagHasMapClientControlPageToScroll = false;
        flagHasMultipleChoiceQuizAPIRequest = false;
        flagHasMusicClientState = false;
        flagHasNaritaAirportGuideArea = false;
        flagHasNaritaAirportGuideFloor = false;
        flagHasNaritaAirportGuideTerminal = false;
        flagHasNavigationControlContext = false;
        flagHasTurnOffGuidanceMeansMute = false;
        flagHasNavigationLocationDisambiguation = false;
        flagHasNewReminder = false;
        flagHasNumberOfVolumeLevels = false;
        flagHasOAuth2ClientID = false;
        flagHasOAuth2ClientSecret = false;
        flagHasOAuth2ClientToken = false;
        flagHasOAuth2CodeData = false;
        flagHasOAuth2RefreshToken = false;
        flagHasOrganizationalChartRequest = false;
        flagHasOutputDeepIntegrationLattice = false;
        flagHasOutputSLMLattice = false;
        flagHasOutputOverrideKind = false;
        flagHasOutputOverrideFunction = false;
        flagHasOutputOverrideFunctionLanguage = false;
        flagHasOutputOverrideFunctionSource = false;
        flagHasOutputOverrideCommandIsPreAudioOut = false;
        flagHasOutputOverrideDeleteCommandFunction = false;
        flagHasOutputOverrideDeleteInformationNuggetFunction = false;
        flagHasOutputOverrideInformationNuggetFunction = false;
        flagHasOutputOverrideInformationNuggetFunctionLanguage = false;
        flagHasOutputOverrideInformationNuggetFunctionSource = false;
        flagHasOutputOverrideReadCommandFunction = false;
        flagHasOutputOverrideReadInformationNuggetFunction = false;
        flagHasOutputOverrideCommandFunction = false;
        flagHasOutputOverrideCommandFunctionLanguage = false;
        flagHasOutputOverrideCommandFunctionSource = false;
        flagHasPandoraCustomClientPrompt = false;
        flagHasPandoraCustomEnableComponentFormat = false;
        flagHasPandoraCustomEnableDomain = false;
        flagHasPandoraCustomEnableExclusionInTarzanMode = false;
        flagHasPandoraCustomEnableInferredPlay = false;
        flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = false;
        flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = false;
        flagHasPandoraCustomEnableLongJSONFallback = false;
        flagHasPandoraCustomEnablePodcastMatches = false;
        flagHasPandoraCustomEnableUserDataQueries = false;
        flagHasPandoraCustomEnableWildcardMatches = false;
        flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback = false;
        flagHasPandoraCustomExtendedStationModeData = false;
        flagHasPandoraCustomRapidIngestionData = false;
        flagHasPandoraCustomUserData = false;
        flagHasParkingClientState = false;
        flagHasPepperEnabled = false;
        flagHasPhoneDisambiguationOmitList = false;
        flagHasRadioControlAvailableAudioSources = false;
        flagHasRadioControlOtherAMBands = false;
        flagHasRadioControlOtherFMBands = false;
        flagHasRadioControlRecognizeNorthAmericanAMBand = false;
        flagHasRadioControlRecognizeNorthAmericanFMBand = false;
        flagHasRadioControlTunableStations = false;
        flagHasReadSpeakerVoiceParameters = false;
        flagHasRecipeParameters = false;
        flagHasRegionalPhoneNumberConfiguration = false;
        flagHasRemainingDistance = false;
        flagHasRemainingTravelTime = false;
        flagHasReminders = false;
        flagHasRestaurantMenuMetadata = false;
        flagHasRestaurantMenuObject = false;
        flagHasRestaurantOrderingMenuData = false;
        flagHasRestaurantOrderingQueriesMenuDataStoreID = false;
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = false;
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = false;
        flagHasRestaurantOrderingQueriesRequestData = false;
        flagHasReturnInformationNuggetsForMusicSearch = false;
        flagHasRobotInfo = false;
        flagHasSendFullWeatherForecastData = false;
        flagHasSetUserMemoryLocation = false;
        flagHasSiriusXMEnableDomain = false;
        flagHasSiriusXMEnableGenericChannelMatches = false;
        flagHasSiriusXMEnableWildcardMatches = false;
        flagHasSmartTVOnScreenItems = false;
        flagHasSmartTVUserCustomInputSource = false;
        flagHasSoundHoundTTSParameters = false;
        flagHasSpeedLimitOnThisRoad = false;
        flagHasSportsLeagueControl = false;
        flagHasSpotifyPlaylistEnableWildcardMatches = false;
        flagHasStoredAlwaysMatchReadData = false;
        flagHasStoredAlwaysMatchWriteData = false;
        flagHasStoredGlobalPagesToMatch = false;
        flagHasStoredGlobalPagesToNotMatch = false;
        flagHasStoredGlobalPagesToSetOffByDefault = false;
        flagHasStoredGlobalPagesToSetOnByDefault = false;
        flagHasStoredPageMatchPageListData = false;
        flagHasStoredPageMatchReadData = false;
        flagHasStoredPageMatchWeight = false;
        flagHasStoredPageMatchWriteData = false;
        flagHasStoredPerUserPagesToMatch = false;
        flagHasStoredPerUserPagesToNotMatch = false;
        flagHasStoredPerUserPagesToSetOffByDefault = false;
        flagHasStoredPerUserPagesToSetOnByDefault = false;
        flagHasSurveyAPIRequest = false;
        flagHasTVChannelList = false;
        flagHasTerrierTableUploadReadData = false;
        flagHasTerrierTableUploadWriteData = false;
        flagHasTerrierUploadDeleteProject = false;
        flagHasTerrierUploadDeleteProjectOptions = false;
        flagHasTerrierUploadGetProject = false;
        flagHasTerrierUploadGetProjectList = false;
        flagHasTerrierUploadGetProjectListOptions = false;
        flagHasTerrierUploadGetProjectOptions = false;
        flagHasTerrierUploadReadData = false;
        flagHasTerrierUploadWriteData = false;
        flagHasTerrierUploadWriteProject = false;
        flagHasTerrierUploadWriteProjectOptions = false;
        flagHasThirdPartyCalendarService = false;
        flagHasCalendarMatchingLoosenessLevel = false;
        flagHasCalendarEvents = false;
        flagHasToshibaTTSParameters = false;
        flagHasTravelBearing = false;
        flagHasUDSExampleRequest = false;
        flagHasUberClientId = false;
        flagHasUberServerToken = false;
        flagHasUploadedTestConfiguration = false;
        flagHasUploadedTestData = false;
        flagHasUseNewStyleSMSCommands = false;
        flagHasUseXAPAPI = false;
        flagHasUserContactsConfiguration = false;
        flagHasUserContactsRequests = false;
        flagHasUserFeedback = false;
        flagHasUserMusicAvailableSources = false;
        flagHasUserMusicControls = false;
        flagHasUserMusicInfo = false;
        flagHasVideoSearchConfiguration = false;
        flagHasVideoSearchRequestInfoProviders = false;
        flagHasVoiceParameters = false;
        flagHasWebSearchConfiguration = false;
        flagHasWebSearchRequestInfoProviders = false;
        flagHasWhat3WordsCluePhraseNotRequired = false;
        flagHasWhat3WordsStandardGeofenceRadius = false;
        flagHasHereApiPlacesFallback = false;
        flagHasPaymentsPredeterminedSMSNumber = false;
        flagHasPaymentsPredeterminedPaymentMethod = false;
        flagHasOrderSource = false;
        flagHasOrderPrepDuration = false;
        flagHasSquareEnvironment = false;
        flagHasEnableSquareCustomerInformationPermissions = false;
        flagHasMessagingConvertPunctuation = false;
        flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = false;
        flagHasStreamPreference = false;
        flagHasMusicQueriesForceInfoNuggetToPlayCommand = false;
        flagHasMusicQueriesAllowRawTop = false;
        flagHasBusinessInformationUploadData = false;
        flagHasBusinessInformationDataStoreId = false;
        flagHasCustomASREnhancementWriteData = false;
        flagHasCustomASREnhancementReadData = false;
        flagHasCustomASREnhancementListData = false;
        flagHasEnabledCustomASREnhancementGrammars = false;
        flagHasCustomASREnhancementWeight = false;
        flagHasToastEnvironment = false;
        flagHasIntentToExecute = false;
        flagHasUniversalTranslatorSubstitutionList = false;
        flagHasCustomTopicIdentificationWriteData = false;
        storeControllableTrackPlaying = false;
        storePreferredImageSize = new List< BigInteger >();
        storeFirstPersonSelf = "Hound";
        storeSecondPersonSelf = new List< string >();
        string element1;
        element1 = "Hound";
        storeSecondPersonSelf.Add(element1);
        storeSecondPersonSelfSpoken = new List< string >();
        storeWakeUpPhraseIncludedInAudio = false;
        storeInitialSecondsOfAudioToIgnore = 0;
        storeWakeUpPattern = "[[\"OK\"] . \"Hound\"]";
        storeResultUpdateAllowed = false;
        storePartialTranscriptsDesired = false;
        storeMinResults = 1;
        storeMaxResults = 1;
        storeObjectByteCountPrefix = false;
        storeClientMatches = new List< ClientMatchJSON  >();
        storeClientMatchesOnly = false;
        storeResponseAudioAcceptedEncodings = new List< TypeResponseAudioAcceptedEncodings >();
        storeUseContactData = true;
        storeUseClientTime = false;
        storeOutputLatticeSize = 0;
        storeUseFormattedTranscriptionAsDefault = false;
        extraKeys = new List<string>();
    extraValues = new List<JSONValue >();
    extraIndex = new Dictionary<string, JSONValue >();
      }

    public bool  hasLatitude()
      {
        return flagHasLatitude;
      }

    public double  getLatitude()
      {
        Debug.Assert(flagHasLatitude);
        if (textStoreLatitude != "")
          {
            return Double.Parse(textStoreLatitude);
          }
        return storeLatitude;
      }

    public string  getLatitudeAsText()
      {
        Debug.Assert(flagHasLatitude);
        if (textStoreLatitude == "")
          {
            return Convert.ToString(storeLatitude);
          }
        else
          {
            return (textStoreLatitude);
          }
      }

    public bool  hasLongitude()
      {
        return flagHasLongitude;
      }

    public double  getLongitude()
      {
        Debug.Assert(flagHasLongitude);
        if (textStoreLongitude != "")
          {
            return Double.Parse(textStoreLongitude);
          }
        return storeLongitude;
      }

    public string  getLongitudeAsText()
      {
        Debug.Assert(flagHasLongitude);
        if (textStoreLongitude == "")
          {
            return Convert.ToString(storeLongitude);
          }
        else
          {
            return (textStoreLongitude);
          }
      }

    public bool  hasPositionTime()
      {
        return flagHasPositionTime;
      }

    public BigInteger  getPositionTime()
      {
        Debug.Assert(flagHasPositionTime);
        return storePositionTime;
      }

    public bool  hasPositionHorizontalAccuracy()
      {
        return flagHasPositionHorizontalAccuracy;
      }

    public double  getPositionHorizontalAccuracy()
      {
        Debug.Assert(flagHasPositionHorizontalAccuracy);
        if (textStorePositionHorizontalAccuracy != "")
          {
            return Double.Parse(textStorePositionHorizontalAccuracy);
          }
        return storePositionHorizontalAccuracy;
      }

    public string  getPositionHorizontalAccuracyAsText()
      {
        Debug.Assert(flagHasPositionHorizontalAccuracy);
        if (textStorePositionHorizontalAccuracy == "")
          {
            return Convert.ToString(storePositionHorizontalAccuracy);
          }
        else
          {
            return (textStorePositionHorizontalAccuracy);
          }
      }

    public bool  hasStreet()
      {
        return flagHasStreet;
      }

    public string  getStreet()
      {
        Debug.Assert(flagHasStreet);
        return storeStreet;
      }

    public bool  hasCity()
      {
        return flagHasCity;
      }

    public string  getCity()
      {
        Debug.Assert(flagHasCity);
        return storeCity;
      }

    public bool  hasState()
      {
        return flagHasState;
      }

    public string  getState()
      {
        Debug.Assert(flagHasState);
        return storeState;
      }

    public bool  hasCountry()
      {
        return flagHasCountry;
      }

    public string  getCountry()
      {
        Debug.Assert(flagHasCountry);
        return storeCountry;
      }

    public bool  hasRoutePoints()
      {
        return flagHasRoutePoints;
      }

    public RoutePointsJSON   getRoutePoints()
      {
        Debug.Assert(flagHasRoutePoints);
        return storeRoutePoints;
      }

    public bool  hasRouteInformation()
      {
        return flagHasRouteInformation;
      }

    public ClientRouteInformationJSON   getRouteInformation()
      {
        Debug.Assert(flagHasRouteInformation);
        return storeRouteInformation;
      }

    public bool  hasControllableTrackPlaying()
      {
        return flagHasControllableTrackPlaying;
      }

    public bool  getControllableTrackPlaying()
      {
        return storeControllableTrackPlaying;
      }

    public bool  hasTimeStamp()
      {
        return flagHasTimeStamp;
      }

    public BigInteger  getTimeStamp()
      {
        Debug.Assert(flagHasTimeStamp);
        return storeTimeStamp;
      }

    public bool  hasTimeZone()
      {
        return flagHasTimeZone;
      }

    public string  getTimeZone()
      {
        Debug.Assert(flagHasTimeZone);
        return storeTimeZone;
      }

    public bool  hasConversationState()
      {
        return flagHasConversationState;
      }

    public ConversationStateJSON   getConversationState()
      {
        Debug.Assert(flagHasConversationState);
        return storeConversationState;
      }

    public bool  hasClientState()
      {
        return flagHasClientState;
      }

    public ClientStateJSON   getClientState()
      {
        Debug.Assert(flagHasClientState);
        return storeClientState;
      }

    public bool  hasDeviceInfo()
      {
        return flagHasDeviceInfo;
      }

    public TypeDeviceInfoJSON   getDeviceInfo()
      {
        Debug.Assert(flagHasDeviceInfo);
        return storeDeviceInfo;
      }

    public bool  hasSendBack()
      {
        return flagHasSendBack;
      }

    public JSONValue   getSendBack()
      {
        Debug.Assert(flagHasSendBack);
        return storeSendBack;
      }

    public bool  hasPreferredImageSize()
      {
        return flagHasPreferredImageSize;
      }

    public int  countOfPreferredImageSize()
      {
        Debug.Assert(flagHasPreferredImageSize);
        return storePreferredImageSize.Count;
      }

    public BigInteger  elementOfPreferredImageSize(int element_num)
      {
        Debug.Assert(flagHasPreferredImageSize);
        return storePreferredImageSize[element_num];
      }

    public List< BigInteger >  getPreferredImageSize()
      {
        Debug.Assert(flagHasPreferredImageSize);
        return storePreferredImageSize;
      }

    public bool  hasInputLanguageEnglishName()
      {
        return flagHasInputLanguageEnglishName;
      }

    public string  getInputLanguageEnglishName()
      {
        Debug.Assert(flagHasInputLanguageEnglishName);
        return storeInputLanguageEnglishName;
      }

    public bool  hasInputLanguageNativeName()
      {
        return flagHasInputLanguageNativeName;
      }

    public string  getInputLanguageNativeName()
      {
        Debug.Assert(flagHasInputLanguageNativeName);
        return storeInputLanguageNativeName;
      }

    public bool  hasInputLanguageIETFTag()
      {
        return flagHasInputLanguageIETFTag;
      }

    public string  getInputLanguageIETFTag()
      {
        Debug.Assert(flagHasInputLanguageIETFTag);
        return storeInputLanguageIETFTag;
      }

    public bool  hasOutputLanguageEnglishName()
      {
        return flagHasOutputLanguageEnglishName;
      }

    public string  getOutputLanguageEnglishName()
      {
        Debug.Assert(flagHasOutputLanguageEnglishName);
        return storeOutputLanguageEnglishName;
      }

    public bool  hasOutputLanguageNativeName()
      {
        return flagHasOutputLanguageNativeName;
      }

    public string  getOutputLanguageNativeName()
      {
        Debug.Assert(flagHasOutputLanguageNativeName);
        return storeOutputLanguageNativeName;
      }

    public bool  hasOutputLanguageIETFTag()
      {
        return flagHasOutputLanguageIETFTag;
      }

    public string  getOutputLanguageIETFTag()
      {
        Debug.Assert(flagHasOutputLanguageIETFTag);
        return storeOutputLanguageIETFTag;
      }

    public bool  hasResultVersionAccepted()
      {
        return flagHasResultVersionAccepted;
      }

    public double  getResultVersionAccepted()
      {
        Debug.Assert(flagHasResultVersionAccepted);
        if (textStoreResultVersionAccepted != "")
          {
            return Double.Parse(textStoreResultVersionAccepted);
          }
        return storeResultVersionAccepted;
      }

    public string  getResultVersionAcceptedAsText()
      {
        Debug.Assert(flagHasResultVersionAccepted);
        if (textStoreResultVersionAccepted == "")
          {
            return Convert.ToString(storeResultVersionAccepted);
          }
        else
          {
            return (textStoreResultVersionAccepted);
          }
      }

    public bool  hasUnitPreference()
      {
        return flagHasUnitPreference;
      }

    public TypeUnitPreference  getUnitPreference()
      {
        Debug.Assert(flagHasUnitPreference);
        return storeUnitPreference;
      }

    public string  getUnitPreferenceAsString()
      {
        return stringFromUnitPreference(getUnitPreference());
      }

    public bool  hasDefaultTimeFormat24Hours()
      {
        return flagHasDefaultTimeFormat24Hours;
      }

    public bool  getDefaultTimeFormat24Hours()
      {
        Debug.Assert(flagHasDefaultTimeFormat24Hours);
        return storeDefaultTimeFormat24Hours;
      }

    public bool  hasClientID()
      {
        return flagHasClientID;
      }

    public string  getClientID()
      {
        Debug.Assert(flagHasClientID);
        return storeClientID;
      }

    public bool  hasClientVersion()
      {
        return flagHasClientVersion;
      }

    public TypeClientVersion  getClientVersion()
      {
        Debug.Assert(flagHasClientVersion);
        return storeClientVersion;
      }

    public bool  hasDeviceID()
      {
        return flagHasDeviceID;
      }

    public string  getDeviceID()
      {
        Debug.Assert(flagHasDeviceID);
        return storeDeviceID;
      }

    public bool  hasSDK()
      {
        return flagHasSDK;
      }

    public string  getSDK()
      {
        Debug.Assert(flagHasSDK);
        return storeSDK;
      }

    public bool  hasSDKInfo()
      {
        return flagHasSDKInfo;
      }

    public JSONObjectValue   getSDKInfo()
      {
        Debug.Assert(flagHasSDKInfo);
        return storeSDKInfo;
      }

    public bool  hasFirstPersonSelf()
      {
        return flagHasFirstPersonSelf;
      }

    public string  getFirstPersonSelf()
      {
        return storeFirstPersonSelf;
      }

    public bool  hasFirstPersonSelfSpoken()
      {
        return flagHasFirstPersonSelfSpoken;
      }

    public string  getFirstPersonSelfSpoken()
      {
        Debug.Assert(flagHasFirstPersonSelfSpoken);
        return storeFirstPersonSelfSpoken;
      }

    public bool  hasSecondPersonSelf()
      {
        return flagHasSecondPersonSelf;
      }

    public int  countOfSecondPersonSelf()
      {
        return storeSecondPersonSelf.Count;
      }

    public string  elementOfSecondPersonSelf(int element_num)
      {
        return storeSecondPersonSelf[element_num];
      }

    public List< string >  getSecondPersonSelf()
      {
        return storeSecondPersonSelf;
      }

    public bool  hasSecondPersonSelfSpoken()
      {
        return flagHasSecondPersonSelfSpoken;
      }

    public int  countOfSecondPersonSelfSpoken()
      {
        Debug.Assert(flagHasSecondPersonSelfSpoken);
        return storeSecondPersonSelfSpoken.Count;
      }

    public string  elementOfSecondPersonSelfSpoken(int element_num)
      {
        Debug.Assert(flagHasSecondPersonSelfSpoken);
        return storeSecondPersonSelfSpoken[element_num];
      }

    public List< string >  getSecondPersonSelfSpoken()
      {
        Debug.Assert(flagHasSecondPersonSelfSpoken);
        return storeSecondPersonSelfSpoken;
      }

    public bool  hasWakeUpPhraseIncludedInAudio()
      {
        return flagHasWakeUpPhraseIncludedInAudio;
      }

    public bool  getWakeUpPhraseIncludedInAudio()
      {
        return storeWakeUpPhraseIncludedInAudio;
      }

    public bool  hasInitialSecondsOfAudioToIgnore()
      {
        return flagHasInitialSecondsOfAudioToIgnore;
      }

    public double  getInitialSecondsOfAudioToIgnore()
      {
        if (textStoreInitialSecondsOfAudioToIgnore != "")
          {
            return Double.Parse(textStoreInitialSecondsOfAudioToIgnore);
          }
        return storeInitialSecondsOfAudioToIgnore;
      }

    public string  getInitialSecondsOfAudioToIgnoreAsText()
      {
        if (textStoreInitialSecondsOfAudioToIgnore == "")
          {
            return Convert.ToString(storeInitialSecondsOfAudioToIgnore);
          }
        else
          {
            return (textStoreInitialSecondsOfAudioToIgnore);
          }
      }

    public bool  hasWakeUpPattern()
      {
        return flagHasWakeUpPattern;
      }

    public string  getWakeUpPattern()
      {
        return storeWakeUpPattern;
      }

    public bool  hasUserID()
      {
        return flagHasUserID;
      }

    public string  getUserID()
      {
        Debug.Assert(flagHasUserID);
        return storeUserID;
      }

    public bool  hasRequestID()
      {
        return flagHasRequestID;
      }

    public string  getRequestID()
      {
        Debug.Assert(flagHasRequestID);
        return storeRequestID;
      }

    public bool  hasSessionID()
      {
        return flagHasSessionID;
      }

    public string  getSessionID()
      {
        Debug.Assert(flagHasSessionID);
        return storeSessionID;
      }

    public bool  hasDomains()
      {
        return flagHasDomains;
      }

    public DomainsJSON   getDomains()
      {
        Debug.Assert(flagHasDomains);
        return storeDomains;
      }

    public bool  hasResultUpdateAllowed()
      {
        return flagHasResultUpdateAllowed;
      }

    public bool  getResultUpdateAllowed()
      {
        return storeResultUpdateAllowed;
      }

    public bool  hasPartialTranscriptsDesired()
      {
        return flagHasPartialTranscriptsDesired;
      }

    public bool  getPartialTranscriptsDesired()
      {
        return storePartialTranscriptsDesired;
      }

    public bool  hasMinResults()
      {
        return flagHasMinResults;
      }

    public BigInteger  getMinResults()
      {
        return storeMinResults;
      }

    public bool  hasMaxResults()
      {
        return flagHasMaxResults;
      }

    public BigInteger  getMaxResults()
      {
        return storeMaxResults;
      }

    public bool  hasObjectByteCountPrefix()
      {
        return flagHasObjectByteCountPrefix;
      }

    public bool  getObjectByteCountPrefix()
      {
        return storeObjectByteCountPrefix;
      }

    public bool  hasProfanityFilter()
      {
        return flagHasProfanityFilter;
      }

    public TypeProfanityFilter  getProfanityFilter()
      {
        Debug.Assert(flagHasProfanityFilter);
        return storeProfanityFilter;
      }

    public string  getProfanityFilterAsString()
      {
        return stringFromProfanityFilter(getProfanityFilter());
      }

    public bool  hasClientMatches()
      {
        return flagHasClientMatches;
      }

    public int  countOfClientMatches()
      {
        Debug.Assert(flagHasClientMatches);
        return storeClientMatches.Count;
      }

    public ClientMatchJSON   elementOfClientMatches(int element_num)
      {
        Debug.Assert(flagHasClientMatches);
        return storeClientMatches[element_num];
      }

    public List< ClientMatchJSON  >  getClientMatches()
      {
        Debug.Assert(flagHasClientMatches);
        return storeClientMatches;
      }

    public bool  hasClientMatchesOnly()
      {
        return flagHasClientMatchesOnly;
      }

    public bool  getClientMatchesOnly()
      {
        return storeClientMatchesOnly;
      }

    public bool  hasPagination()
      {
        return flagHasPagination;
      }

    public PaginationJSON   getPagination()
      {
        Debug.Assert(flagHasPagination);
        return storePagination;
      }

    public bool  hasResponseAudioVoice()
      {
        return flagHasResponseAudioVoice;
      }

    public string  getResponseAudioVoice()
      {
        Debug.Assert(flagHasResponseAudioVoice);
        return storeResponseAudioVoice;
      }

    public bool  hasResponseAudioShortOrLong()
      {
        return flagHasResponseAudioShortOrLong;
      }

    public TypeResponseAudioShortOrLong  getResponseAudioShortOrLong()
      {
        Debug.Assert(flagHasResponseAudioShortOrLong);
        return storeResponseAudioShortOrLong;
      }

    public string  getResponseAudioShortOrLongAsString()
      {
        return stringFromResponseAudioShortOrLong(getResponseAudioShortOrLong());
      }

    public bool  hasResponseAudioAcceptedEncodings()
      {
        return flagHasResponseAudioAcceptedEncodings;
      }

    public int  countOfResponseAudioAcceptedEncodings()
      {
        Debug.Assert(flagHasResponseAudioAcceptedEncodings);
        return storeResponseAudioAcceptedEncodings.Count;
      }

    public TypeResponseAudioAcceptedEncodings  elementOfResponseAudioAcceptedEncodings(int element_num)
      {
        Debug.Assert(flagHasResponseAudioAcceptedEncodings);
        return storeResponseAudioAcceptedEncodings[element_num];
      }

    public List< TypeResponseAudioAcceptedEncodings >  getResponseAudioAcceptedEncodings()
      {
        Debug.Assert(flagHasResponseAudioAcceptedEncodings);
        return storeResponseAudioAcceptedEncodings;
      }

    public bool  hasReturnResponseAudioAsURL()
      {
        return flagHasReturnResponseAudioAsURL;
      }

    public bool  getReturnResponseAudioAsURL()
      {
        Debug.Assert(flagHasReturnResponseAudioAsURL);
        return storeReturnResponseAudioAsURL;
      }

    public bool  hasVoiceActivityDetection()
      {
        return flagHasVoiceActivityDetection;
      }

    public VoiceActivityDetectionJSON   getVoiceActivityDetection()
      {
        Debug.Assert(flagHasVoiceActivityDetection);
        return storeVoiceActivityDetection;
      }

    public bool  hasServerDeterminesEndOfAudio()
      {
        return flagHasServerDeterminesEndOfAudio;
      }

    public bool  getServerDeterminesEndOfAudio()
      {
        Debug.Assert(flagHasServerDeterminesEndOfAudio);
        return storeServerDeterminesEndOfAudio;
      }

    public bool  hasIntentOnly()
      {
        return flagHasIntentOnly;
      }

    public bool  getIntentOnly()
      {
        Debug.Assert(flagHasIntentOnly);
        return storeIntentOnly;
      }

    public bool  hasDisableSpellCorrection()
      {
        return flagHasDisableSpellCorrection;
      }

    public bool  getDisableSpellCorrection()
      {
        Debug.Assert(flagHasDisableSpellCorrection);
        return storeDisableSpellCorrection;
      }

    public bool  hasUseContactData()
      {
        return flagHasUseContactData;
      }

    public bool  getUseContactData()
      {
        return storeUseContactData;
      }

    public bool  hasUseClientTime()
      {
        return flagHasUseClientTime;
      }

    public bool  getUseClientTime()
      {
        return storeUseClientTime;
      }

    public bool  hasForceConversationStateTime()
      {
        return flagHasForceConversationStateTime;
      }

    public BigInteger  getForceConversationStateTime()
      {
        Debug.Assert(flagHasForceConversationStateTime);
        return storeForceConversationStateTime;
      }

    public bool  hasOutputLatticeSize()
      {
        return flagHasOutputLatticeSize;
      }

    public BigInteger  getOutputLatticeSize()
      {
        return storeOutputLatticeSize;
      }

    public bool  hasMatchingMutations()
      {
        return flagHasMatchingMutations;
      }

    public MatchingMutationsJSON   getMatchingMutations()
      {
        Debug.Assert(flagHasMatchingMutations);
        return storeMatchingMutations;
      }

    public bool  hasUseFormattedTranscriptionAsDefault()
      {
        return flagHasUseFormattedTranscriptionAsDefault;
      }

    public bool  getUseFormattedTranscriptionAsDefault()
      {
        return storeUseFormattedTranscriptionAsDefault;
      }

    public bool  hasResponseRanking()
      {
        return flagHasResponseRanking;
      }

    public ResponseRankingJSON   getResponseRanking()
      {
        Debug.Assert(flagHasResponseRanking);
        return storeResponseRanking;
      }

    public bool  hasAcapelaVoiceParameters()
      {
        return flagHasAcapelaVoiceParameters;
      }

    public AcapelaVoiceParametersJSON   getAcapelaVoiceParameters()
      {
        Debug.Assert(flagHasAcapelaVoiceParameters);
        return storeAcapelaVoiceParameters;
      }

    public bool  hasAllowPopularNameContactMatches()
      {
        return flagHasAllowPopularNameContactMatches;
      }

    public AllowPopularNameContactMatchesJSON   getAllowPopularNameContactMatches()
      {
        Debug.Assert(flagHasAllowPopularNameContactMatches);
        return storeAllowPopularNameContactMatches;
      }

    public bool  getAllowPopularNameContactMatchesValue()
      {
        return getAllowPopularNameContactMatches().getValue();
      }

    public bool  hasAlwaysFetchCurrentConditionsData()
      {
        return flagHasAlwaysFetchCurrentConditionsData;
      }

    public AlwaysFetchCurrentConditionsDataJSON   getAlwaysFetchCurrentConditionsData()
      {
        Debug.Assert(flagHasAlwaysFetchCurrentConditionsData);
        return storeAlwaysFetchCurrentConditionsData;
      }

    public bool  getAlwaysFetchCurrentConditionsDataValue()
      {
        return getAlwaysFetchCurrentConditionsData().getValue();
      }

    public bool  hasAlwaysFetchHourlyForecastData()
      {
        return flagHasAlwaysFetchHourlyForecastData;
      }

    public AlwaysFetchHourlyForecastDataJSON   getAlwaysFetchHourlyForecastData()
      {
        Debug.Assert(flagHasAlwaysFetchHourlyForecastData);
        return storeAlwaysFetchHourlyForecastData;
      }

    public bool  getAlwaysFetchHourlyForecastDataValue()
      {
        return getAlwaysFetchHourlyForecastData().getValue();
      }

    public bool  hasArrivalTime()
      {
        return flagHasArrivalTime;
      }

    public DateAndOrTimeJSON   getArrivalTime()
      {
        Debug.Assert(flagHasArrivalTime);
        return storeArrivalTime;
      }

    public bool  hasAvantiMachineState()
      {
        return flagHasAvantiMachineState;
      }

    public AvantiMachineStateJSON   getAvantiMachineState()
      {
        Debug.Assert(flagHasAvantiMachineState);
        return storeAvantiMachineState;
      }

    public AvantiMachineStateJSON.TypeValue  getAvantiMachineStateValue()
      {
        return getAvantiMachineState().getValue();
      }

    public string  getAvantiMachineStateAsString()
      {
        return getAvantiMachineState().getValueAsString();
      }

    public bool  hasBingAdExtensions()
      {
        return flagHasBingAdExtensions;
      }

    public BingRequestInfoAdExtensionsJSON   getBingAdExtensions()
      {
        Debug.Assert(flagHasBingAdExtensions);
        return storeBingAdExtensions;
      }

    public bool  hasBunnIsConfirmationRequired()
      {
        return flagHasBunnIsConfirmationRequired;
      }

    public BunnIsConfirmationRequiredJSON   getBunnIsConfirmationRequired()
      {
        Debug.Assert(flagHasBunnIsConfirmationRequired);
        return storeBunnIsConfirmationRequired;
      }

    public bool  getBunnIsConfirmationRequiredValue()
      {
        return getBunnIsConfirmationRequired().getValue();
      }

    public bool  hasBunnMachineState()
      {
        return flagHasBunnMachineState;
      }

    public BunnMachineStateJSON   getBunnMachineState()
      {
        Debug.Assert(flagHasBunnMachineState);
        return storeBunnMachineState;
      }

    public bool  hasCalendarDataSynchronization()
      {
        return flagHasCalendarDataSynchronization;
      }

    public CalendarDataSynchronizationRequestInfoJSON   getCalendarDataSynchronization()
      {
        Debug.Assert(flagHasCalendarDataSynchronization);
        return storeCalendarDataSynchronization;
      }

    public bool  hasCallPermissions()
      {
        return flagHasCallPermissions;
      }

    public CallPermissionsJSON   getCallPermissions()
      {
        Debug.Assert(flagHasCallPermissions);
        return storeCallPermissions;
      }

    public bool  hasCarControlClimateClientConfiguration()
      {
        return flagHasCarControlClimateClientConfiguration;
      }

    public CarControlClimateClientConfigurationJSON   getCarControlClimateClientConfiguration()
      {
        Debug.Assert(flagHasCarControlClimateClientConfiguration);
        return storeCarControlClimateClientConfiguration;
      }

    public bool  hasCarControlClimateTemperatureConfig()
      {
        return flagHasCarControlClimateTemperatureConfig;
      }

    public CarControlClimateTemperatureConfigJSON   getCarControlClimateTemperatureConfig()
      {
        Debug.Assert(flagHasCarControlClimateTemperatureConfig);
        return storeCarControlClimateTemperatureConfig;
      }

    public bool  hasCarManualModel()
      {
        return flagHasCarManualModel;
      }

    public CarManualModelJSON   getCarManualModel()
      {
        Debug.Assert(flagHasCarManualModel);
        return storeCarManualModel;
      }

    public bool  hasCarManualNormalizedQueryToSet()
      {
        return flagHasCarManualNormalizedQueryToSet;
      }

    public CarManualNormalizedQueryJSON   getCarManualNormalizedQueryToSet()
      {
        Debug.Assert(flagHasCarManualNormalizedQueryToSet);
        return storeCarManualNormalizedQueryToSet;
      }

    public string  getCarManualNormalizedQueryToSetValue()
      {
        return getCarManualNormalizedQueryToSet().getValue();
      }

    public bool  hasCarManualResponseToSet()
      {
        return flagHasCarManualResponseToSet;
      }

    public DynamicResponseJSON   getCarManualResponseToSet()
      {
        Debug.Assert(flagHasCarManualResponseToSet);
        return storeCarManualResponseToSet;
      }

    public bool  hasCarStatus()
      {
        return flagHasCarStatus;
      }

    public CarStatusJSON   getCarStatus()
      {
        Debug.Assert(flagHasCarStatus);
        return storeCarStatus;
      }

    public bool  hasChargingClientState()
      {
        return flagHasChargingClientState;
      }

    public ChargingClientStateJSON   getChargingClientState()
      {
        Debug.Assert(flagHasChargingClientState);
        return storeChargingClientState;
      }

    public bool  hasClientListMatches()
      {
        return flagHasClientListMatches;
      }

    public ClientListMatchesJSON   getClientListMatches()
      {
        Debug.Assert(flagHasClientListMatches);
        return storeClientListMatches;
      }

    public bool  hasCollateMusicEntities()
      {
        return flagHasCollateMusicEntities;
      }

    public CollateMusicEntitiesJSON   getCollateMusicEntities()
      {
        Debug.Assert(flagHasCollateMusicEntities);
        return storeCollateMusicEntities;
      }

    public bool  getCollateMusicEntitiesValue()
      {
        return getCollateMusicEntities().getValue();
      }

    public bool  hasConnectedToThirdPartyMusicApp()
      {
        return flagHasConnectedToThirdPartyMusicApp;
      }

    public ConnectedToThirdPartyMusicAppJSON   getConnectedToThirdPartyMusicApp()
      {
        Debug.Assert(flagHasConnectedToThirdPartyMusicApp);
        return storeConnectedToThirdPartyMusicApp;
      }

    public bool  getConnectedToThirdPartyMusicAppValue()
      {
        return getConnectedToThirdPartyMusicApp().getValue();
      }

    public bool  hasContactQueryExclusions()
      {
        return flagHasContactQueryExclusions;
      }

    public ContactQueryExclusionsJSON   getContactQueryExclusions()
      {
        Debug.Assert(flagHasContactQueryExclusions);
        return storeContactQueryExclusions;
      }

    public bool  hasPhoneCommandConfiguration()
      {
        return flagHasPhoneCommandConfiguration;
      }

    public PhoneCommandConfigurationJSON   getPhoneCommandConfiguration()
      {
        Debug.Assert(flagHasPhoneCommandConfiguration);
        return storePhoneCommandConfiguration;
      }

    public bool  hasConvertToNewInformationNuggets()
      {
        return flagHasConvertToNewInformationNuggets;
      }

    public ConvertToNewInformationNuggetsJSON   getConvertToNewInformationNuggets()
      {
        Debug.Assert(flagHasConvertToNewInformationNuggets);
        return storeConvertToNewInformationNuggets;
      }

    public bool  getConvertToNewInformationNuggetsValue()
      {
        return getConvertToNewInformationNuggets().getValue();
      }

    public bool  hasCustomSpeechRecognitionPatternsGroupListData()
      {
        return flagHasCustomSpeechRecognitionPatternsGroupListData;
      }

    public CustomSpeechRecognitionPatternsGroupListDataJSON   getCustomSpeechRecognitionPatternsGroupListData()
      {
        Debug.Assert(flagHasCustomSpeechRecognitionPatternsGroupListData);
        return storeCustomSpeechRecognitionPatternsGroupListData;
      }

    public bool  hasCustomSpeechRecognitionPatternsReadData()
      {
        return flagHasCustomSpeechRecognitionPatternsReadData;
      }

    public CustomSpeechRecognitionPatternsReadDataJSON   getCustomSpeechRecognitionPatternsReadData()
      {
        Debug.Assert(flagHasCustomSpeechRecognitionPatternsReadData);
        return storeCustomSpeechRecognitionPatternsReadData;
      }

    public bool  hasCustomSpeechRecognitionPatternsWeight()
      {
        return flagHasCustomSpeechRecognitionPatternsWeight;
      }

    public CustomSpeechRecognitionPatternsWeightJSON   getCustomSpeechRecognitionPatternsWeight()
      {
        Debug.Assert(flagHasCustomSpeechRecognitionPatternsWeight);
        return storeCustomSpeechRecognitionPatternsWeight;
      }

    public double  getCustomSpeechRecognitionPatternsWeightValue()
      {
        return getCustomSpeechRecognitionPatternsWeight().getValue();
      }

    public bool  hasCustomSpeechRecognitionPatternsWriteData()
      {
        return flagHasCustomSpeechRecognitionPatternsWriteData;
      }

    public CustomSpeechRecognitionPatternsDataJSON   getCustomSpeechRecognitionPatternsWriteData()
      {
        Debug.Assert(flagHasCustomSpeechRecognitionPatternsWriteData);
        return storeCustomSpeechRecognitionPatternsWriteData;
      }

    public bool  hasDeleteUserMemoryLocation()
      {
        return flagHasDeleteUserMemoryLocation;
      }

    public DeleteUserMemoryLocationJSON   getDeleteUserMemoryLocation()
      {
        Debug.Assert(flagHasDeleteUserMemoryLocation);
        return storeDeleteUserMemoryLocation;
      }

    public bool  hasDisableMusicPlayerListPositionSpecification()
      {
        return flagHasDisableMusicPlayerListPositionSpecification;
      }

    public DisableListPositionSpecificationJSON   getDisableMusicPlayerListPositionSpecification()
      {
        Debug.Assert(flagHasDisableMusicPlayerListPositionSpecification);
        return storeDisableMusicPlayerListPositionSpecification;
      }

    public bool  getDisableMusicPlayerListPositionSpecificationValue()
      {
        return getDisableMusicPlayerListPositionSpecification().getValue();
      }

    public bool  hasDisableMusicSearchListPositionSpecification()
      {
        return flagHasDisableMusicSearchListPositionSpecification;
      }

    public DisableListPositionSpecificationJSON   getDisableMusicSearchListPositionSpecification()
      {
        Debug.Assert(flagHasDisableMusicSearchListPositionSpecification);
        return storeDisableMusicSearchListPositionSpecification;
      }

    public bool  getDisableMusicSearchListPositionSpecificationValue()
      {
        return getDisableMusicSearchListPositionSpecification().getValue();
      }

    public bool  hasDisambiguateResultsBeforeAction()
      {
        return flagHasDisambiguateResultsBeforeAction;
      }

    public DisambiguateResultsBeforeActionJSON   getDisambiguateResultsBeforeAction()
      {
        Debug.Assert(flagHasDisambiguateResultsBeforeAction);
        return storeDisambiguateResultsBeforeAction;
      }

    public bool  getDisambiguateResultsBeforeActionValue()
      {
        return getDisambiguateResultsBeforeAction().getValue();
      }

    public bool  hasDisplayedReminder()
      {
        return flagHasDisplayedReminder;
      }

    public ReminderJSON   getDisplayedReminder()
      {
        Debug.Assert(flagHasDisplayedReminder);
        return storeDisplayedReminder;
      }

    public bool  hasEnableClientControlInModes()
      {
        return flagHasEnableClientControlInModes;
      }

    public RequestInfoBooleanFlagJSON   getEnableClientControlInModes()
      {
        Debug.Assert(flagHasEnableClientControlInModes);
        return storeEnableClientControlInModes;
      }

    public bool  getEnableClientControlInModesValue()
      {
        return getEnableClientControlInModes().getValue();
      }

    public bool  hasEnableLocalPlacesQueries()
      {
        return flagHasEnableLocalPlacesQueries;
      }

    public RequestInfoBooleanFlagJSON   getEnableLocalPlacesQueries()
      {
        Debug.Assert(flagHasEnableLocalPlacesQueries);
        return storeEnableLocalPlacesQueries;
      }

    public bool  getEnableLocalPlacesQueriesValue()
      {
        return getEnableLocalPlacesQueries().getValue();
      }

    public bool  hasLocalPlacesSettings()
      {
        return flagHasLocalPlacesSettings;
      }

    public LocalPlacesSettingsJSON   getLocalPlacesSettings()
      {
        Debug.Assert(flagHasLocalPlacesSettings);
        return storeLocalPlacesSettings;
      }

    public bool  hasEnableMusicPlayerFavorites()
      {
        return flagHasEnableMusicPlayerFavorites;
      }

    public EnableMusicPlayerFavoritesJSON   getEnableMusicPlayerFavorites()
      {
        Debug.Assert(flagHasEnableMusicPlayerFavorites);
        return storeEnableMusicPlayerFavorites;
      }

    public bool  getEnableMusicPlayerFavoritesValue()
      {
        return getEnableMusicPlayerFavorites().getValue();
      }

    public bool  hasEnabledCustomSpeechRecognitionPatternGroups()
      {
        return flagHasEnabledCustomSpeechRecognitionPatternGroups;
      }

    public CustomSpeechRecognitionPatternsGroupListJSON   getEnabledCustomSpeechRecognitionPatternGroups()
      {
        Debug.Assert(flagHasEnabledCustomSpeechRecognitionPatternGroups);
        return storeEnabledCustomSpeechRecognitionPatternGroups;
      }

    public bool  hasEntertainmentClientState()
      {
        return flagHasEntertainmentClientState;
      }

    public EntertainmentClientStateJSON   getEntertainmentClientState()
      {
        Debug.Assert(flagHasEntertainmentClientState);
        return storeEntertainmentClientState;
      }

    public bool  hasEntertainmentTitlesUploadData()
      {
        return flagHasEntertainmentTitlesUploadData;
      }

    public EntertainmentTitlesUploadDataJSON   getEntertainmentTitlesUploadData()
      {
        Debug.Assert(flagHasEntertainmentTitlesUploadData);
        return storeEntertainmentTitlesUploadData;
      }

    public bool  hasExcludeAllMusicResultsWithoutExplicitContext()
      {
        return flagHasExcludeAllMusicResultsWithoutExplicitContext;
      }

    public ExcludeAllMusicResultsWithoutExplicitContextJSON   getExcludeAllMusicResultsWithoutExplicitContext()
      {
        Debug.Assert(flagHasExcludeAllMusicResultsWithoutExplicitContext);
        return storeExcludeAllMusicResultsWithoutExplicitContext;
      }

    public bool  getExcludeAllMusicResultsWithoutExplicitContextValue()
      {
        return getExcludeAllMusicResultsWithoutExplicitContext().getValue();
      }

    public bool  hasExcludeWikipediaLowConfidenceResults()
      {
        return flagHasExcludeWikipediaLowConfidenceResults;
      }

    public ExcludeWikipediaLowConfidenceResultsJSON   getExcludeWikipediaLowConfidenceResults()
      {
        Debug.Assert(flagHasExcludeWikipediaLowConfidenceResults);
        return storeExcludeWikipediaLowConfidenceResults;
      }

    public bool  getExcludeWikipediaLowConfidenceResultsValue()
      {
        return getExcludeWikipediaLowConfidenceResults().getValue();
      }

    public bool  hasFitBitAccessToken()
      {
        return flagHasFitBitAccessToken;
      }

    public FitBitAccessTokenJSON   getFitBitAccessToken()
      {
        Debug.Assert(flagHasFitBitAccessToken);
        return storeFitBitAccessToken;
      }

    public string  getFitBitAccessTokenValue()
      {
        return getFitBitAccessToken().getValue();
      }

    public bool  hasFitBitRefreshToken()
      {
        return flagHasFitBitRefreshToken;
      }

    public FitBitRefreshTokenJSON   getFitBitRefreshToken()
      {
        Debug.Assert(flagHasFitBitRefreshToken);
        return storeFitBitRefreshToken;
      }

    public string  getFitBitRefreshTokenValue()
      {
        return getFitBitRefreshToken().getValue();
      }

    public bool  hasGetHumaxMediaCloudURL()
      {
        return flagHasGetHumaxMediaCloudURL;
      }

    public GetHumaxMediaCloudURLJSON   getGetHumaxMediaCloudURL()
      {
        Debug.Assert(flagHasGetHumaxMediaCloudURL);
        return storeGetHumaxMediaCloudURL;
      }

    public bool  getGetHumaxMediaCloudURLValue()
      {
        return getGetHumaxMediaCloudURL().getValue();
      }

    public bool  hasGetOAuth2ClientID()
      {
        return flagHasGetOAuth2ClientID;
      }

    public GetClientIDOAuth2RequestInfoFieldJSON   getGetOAuth2ClientID()
      {
        Debug.Assert(flagHasGetOAuth2ClientID);
        return storeGetOAuth2ClientID;
      }

    public bool  getGetOAuth2ClientIDValue()
      {
        return getGetOAuth2ClientID().getValue();
      }

    public bool  hasGetOAuth2ClientSecret()
      {
        return flagHasGetOAuth2ClientSecret;
      }

    public GetClientSecretOAuth2RequestInfoFieldJSON   getGetOAuth2ClientSecret()
      {
        Debug.Assert(flagHasGetOAuth2ClientSecret);
        return storeGetOAuth2ClientSecret;
      }

    public bool  getGetOAuth2ClientSecretValue()
      {
        return getGetOAuth2ClientSecret().getValue();
      }

    public bool  hasSquare()
      {
        return flagHasSquare;
      }

    public GetClientSecretOAuth2RequestInfoFieldJSON   getSquare()
      {
        Debug.Assert(flagHasSquare);
        return storeSquare;
      }

    public bool  getSquareValue()
      {
        return getSquare().getValue();
      }

    public bool  hasGetOAuth2ClientToken()
      {
        return flagHasGetOAuth2ClientToken;
      }

    public GetClientTokenOAuth2RequestInfoFieldJSON   getGetOAuth2ClientToken()
      {
        Debug.Assert(flagHasGetOAuth2ClientToken);
        return storeGetOAuth2ClientToken;
      }

    public bool  getGetOAuth2ClientTokenValue()
      {
        return getGetOAuth2ClientToken().getValue();
      }

    public bool  hasGetUberClientId()
      {
        return flagHasGetUberClientId;
      }

    public GetUberClientIdJSON   getGetUberClientId()
      {
        Debug.Assert(flagHasGetUberClientId);
        return storeGetUberClientId;
      }

    public bool  getGetUberClientIdValue()
      {
        return getGetUberClientId().getValue();
      }

    public bool  hasGetUberServerToken()
      {
        return flagHasGetUberServerToken;
      }

    public GetUberServerTokenJSON   getGetUberServerToken()
      {
        Debug.Assert(flagHasGetUberServerToken);
        return storeGetUberServerToken;
      }

    public bool  getGetUberServerTokenValue()
      {
        return getGetUberServerToken().getValue();
      }

    public bool  hasHLSRadius()
      {
        return flagHasHLSRadius;
      }

    public HLSRadiusJSON   getHLSRadius()
      {
        Debug.Assert(flagHasHLSRadius);
        return storeHLSRadius;
      }

    public bool  hasHarmanDeviceRegistration()
      {
        return flagHasHarmanDeviceRegistration;
      }

    public HarmanDeviceRegistrationJSON   getHarmanDeviceRegistration()
      {
        Debug.Assert(flagHasHarmanDeviceRegistration);
        return storeHarmanDeviceRegistration;
      }

    public bool  hasHarmanHospitalityAmxControllerHttpRequest()
      {
        return flagHasHarmanHospitalityAmxControllerHttpRequest;
      }

    public HarmanAmxControllerHttpRequestJSON   getHarmanHospitalityAmxControllerHttpRequest()
      {
        Debug.Assert(flagHasHarmanHospitalityAmxControllerHttpRequest);
        return storeHarmanHospitalityAmxControllerHttpRequest;
      }

    public bool  hasHarmanHospitalityMeetingInformation()
      {
        return flagHasHarmanHospitalityMeetingInformation;
      }

    public HarmanHospitalityMeetingInformationJSON   getHarmanHospitalityMeetingInformation()
      {
        Debug.Assert(flagHasHarmanHospitalityMeetingInformation);
        return storeHarmanHospitalityMeetingInformation;
      }

    public bool  hasHarmanHospitalityPropertyInformation()
      {
        return flagHasHarmanHospitalityPropertyInformation;
      }

    public HarmanHospitalityPropertyInformationJSON   getHarmanHospitalityPropertyInformation()
      {
        Debug.Assert(flagHasHarmanHospitalityPropertyInformation);
        return storeHarmanHospitalityPropertyInformation;
      }

    public bool  hasHarmanPropertyRegistration()
      {
        return flagHasHarmanPropertyRegistration;
      }

    public HarmanPropertyRegistrationJSON   getHarmanPropertyRegistration()
      {
        Debug.Assert(flagHasHarmanPropertyRegistration);
        return storeHarmanPropertyRegistration;
      }

    public bool  hasHasTollsOnThisRoad()
      {
        return flagHasHasTollsOnThisRoad;
      }

    public RequestInfoBooleanFlagJSON   getHasTollsOnThisRoad()
      {
        Debug.Assert(flagHasHasTollsOnThisRoad);
        return storeHasTollsOnThisRoad;
      }

    public bool  getHasTollsOnThisRoadValue()
      {
        return getHasTollsOnThisRoad().getValue();
      }

    public bool  hasHomeAutomationDomainSettings()
      {
        return flagHasHomeAutomationDomainSettings;
      }

    public HomeAutomationDomainSettingsJSON   getHomeAutomationDomainSettings()
      {
        Debug.Assert(flagHasHomeAutomationDomainSettings);
        return storeHomeAutomationDomainSettings;
      }

    public bool  hasHondaAgent20MParameters()
      {
        return flagHasHondaAgent20MParameters;
      }

    public HondaAgent20MParametersJSON   getHondaAgent20MParameters()
      {
        Debug.Assert(flagHasHondaAgent20MParameters);
        return storeHondaAgent20MParameters;
      }

    public bool  hasHondaAgentParameters()
      {
        return flagHasHondaAgentParameters;
      }

    public HondaAgentParametersJSON   getHondaAgentParameters()
      {
        Debug.Assert(flagHasHondaAgentParameters);
        return storeHondaAgentParameters;
      }

    public bool  hasHondaCarManualParameters()
      {
        return flagHasHondaCarManualParameters;
      }

    public HondaCarManualParametersJSON   getHondaCarManualParameters()
      {
        Debug.Assert(flagHasHondaCarManualParameters);
        return storeHondaCarManualParameters;
      }

    public bool  hasHueDeviceRegistration()
      {
        return flagHasHueDeviceRegistration;
      }

    public HueDeviceRegistrationJSON   getHueDeviceRegistration()
      {
        Debug.Assert(flagHasHueDeviceRegistration);
        return storeHueDeviceRegistration;
      }

    public bool  hasHumaxHomeAutomationCredentials()
      {
        return flagHasHumaxHomeAutomationCredentials;
      }

    public HumaxHomeAutomationCredentialsJSON   getHumaxHomeAutomationCredentials()
      {
        Debug.Assert(flagHasHumaxHomeAutomationCredentials);
        return storeHumaxHomeAutomationCredentials;
      }

    public bool  hasHumaxMediaCloudURL()
      {
        return flagHasHumaxMediaCloudURL;
      }

    public HumaxMediaCloudURLJSON   getHumaxMediaCloudURL()
      {
        Debug.Assert(flagHasHumaxMediaCloudURL);
        return storeHumaxMediaCloudURL;
      }

    public string  getHumaxMediaCloudURLValue()
      {
        return getHumaxMediaCloudURL().getValue();
      }

    public bool  hasHumaxSmartTVClientState()
      {
        return flagHasHumaxSmartTVClientState;
      }

    public HumaxSmartTVClientStateJSON   getHumaxSmartTVClientState()
      {
        Debug.Assert(flagHasHumaxSmartTVClientState);
        return storeHumaxSmartTVClientState;
      }

    public bool  hasIHeartMediaDeviceIdentifiers()
      {
        return flagHasIHeartMediaDeviceIdentifiers;
      }

    public IHeartMediaDeviceIdentifiersJSON   getIHeartMediaDeviceIdentifiers()
      {
        Debug.Assert(flagHasIHeartMediaDeviceIdentifiers);
        return storeIHeartMediaDeviceIdentifiers;
      }

    public bool  hasIHeartRadioPreferArtistStations()
      {
        return flagHasIHeartRadioPreferArtistStations;
      }

    public IHeartRadioPreferArtistStationsJSON   getIHeartRadioPreferArtistStations()
      {
        Debug.Assert(flagHasIHeartRadioPreferArtistStations);
        return storeIHeartRadioPreferArtistStations;
      }

    public bool  getIHeartRadioPreferArtistStationsValue()
      {
        return getIHeartRadioPreferArtistStations().getValue();
      }

    public bool  hasIHeartRadioPreferGenericRadioMatches()
      {
        return flagHasIHeartRadioPreferGenericRadioMatches;
      }

    public IHeartRadioPreferGenericRadioMatchesJSON   getIHeartRadioPreferGenericRadioMatches()
      {
        Debug.Assert(flagHasIHeartRadioPreferGenericRadioMatches);
        return storeIHeartRadioPreferGenericRadioMatches;
      }

    public bool  getIHeartRadioPreferGenericRadioMatchesValue()
      {
        return getIHeartRadioPreferGenericRadioMatches().getValue();
      }

    public bool  hasIHeartRadioPreferTerrestrialRadioMatches()
      {
        return flagHasIHeartRadioPreferTerrestrialRadioMatches;
      }

    public IHeartRadioPreferTerrestrialRadioMatchesJSON   getIHeartRadioPreferTerrestrialRadioMatches()
      {
        Debug.Assert(flagHasIHeartRadioPreferTerrestrialRadioMatches);
        return storeIHeartRadioPreferTerrestrialRadioMatches;
      }

    public bool  getIHeartRadioPreferTerrestrialRadioMatchesValue()
      {
        return getIHeartRadioPreferTerrestrialRadioMatches().getValue();
      }

    public bool  hasIftttKeyItem()
      {
        return flagHasIftttKeyItem;
      }

    public IftttKeyItemJSON   getIftttKeyItem()
      {
        Debug.Assert(flagHasIftttKeyItem);
        return storeIftttKeyItem;
      }

    public bool  hasImageSearchConfiguration()
      {
        return flagHasImageSearchConfiguration;
      }

    public ImageSearchRequestInfoConfigurationJSON   getImageSearchConfiguration()
      {
        Debug.Assert(flagHasImageSearchConfiguration);
        return storeImageSearchConfiguration;
      }

    public bool  hasImageSearchRequestInfoProviders()
      {
        return flagHasImageSearchRequestInfoProviders;
      }

    public ImageSearchRequestInfoProvidersJSON   getImageSearchRequestInfoProviders()
      {
        Debug.Assert(flagHasImageSearchRequestInfoProviders);
        return storeImageSearchRequestInfoProviders;
      }

    public bool  hasIncludeAllMusicResultsWithoutContext()
      {
        return flagHasIncludeAllMusicResultsWithoutContext;
      }

    public IncludeAllMusicResultsWithoutContextJSON   getIncludeAllMusicResultsWithoutContext()
      {
        Debug.Assert(flagHasIncludeAllMusicResultsWithoutContext);
        return storeIncludeAllMusicResultsWithoutContext;
      }

    public bool  getIncludeAllMusicResultsWithoutContextValue()
      {
        return getIncludeAllMusicResultsWithoutContext().getValue();
      }

    public bool  hasIncomingCallPending()
      {
        return flagHasIncomingCallPending;
      }

    public IncomingCallPendingJSON   getIncomingCallPending()
      {
        Debug.Assert(flagHasIncomingCallPending);
        return storeIncomingCallPending;
      }

    public bool  getIncomingCallPendingValue()
      {
        return getIncomingCallPending().getValue();
      }

    public bool  hasInputOverrideDeleteFunction()
      {
        return flagHasInputOverrideDeleteFunction;
      }

    public RequestInfoBooleanFlagJSON   getInputOverrideDeleteFunction()
      {
        Debug.Assert(flagHasInputOverrideDeleteFunction);
        return storeInputOverrideDeleteFunction;
      }

    public bool  getInputOverrideDeleteFunctionValue()
      {
        return getInputOverrideDeleteFunction().getValue();
      }

    public bool  hasInputOverrideFunction()
      {
        return flagHasInputOverrideFunction;
      }

    public InputOverrideFunctionJSON   getInputOverrideFunction()
      {
        Debug.Assert(flagHasInputOverrideFunction);
        return storeInputOverrideFunction;
      }

    public string  getInputOverrideFunctionValue()
      {
        return getInputOverrideFunction().getValue();
      }

    public bool  hasInputOverrideFunctionLanguage()
      {
        return flagHasInputOverrideFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON   getInputOverrideFunctionLanguage()
      {
        Debug.Assert(flagHasInputOverrideFunctionLanguage);
        return storeInputOverrideFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON.TypeValue  getInputOverrideFunctionLanguageValue()
      {
        return getInputOverrideFunctionLanguage().getValue();
      }

    public string  getInputOverrideFunctionLanguageAsString()
      {
        return getInputOverrideFunctionLanguage().getValueAsString();
      }

    public bool  hasInputOverrideFunctionSource()
      {
        return flagHasInputOverrideFunctionSource;
      }

    public UploadedCodeSourceJSON   getInputOverrideFunctionSource()
      {
        Debug.Assert(flagHasInputOverrideFunctionSource);
        return storeInputOverrideFunctionSource;
      }

    public bool  hasInputOverrideReadFunction()
      {
        return flagHasInputOverrideReadFunction;
      }

    public RequestInfoBooleanFlagJSON   getInputOverrideReadFunction()
      {
        Debug.Assert(flagHasInputOverrideReadFunction);
        return storeInputOverrideReadFunction;
      }

    public bool  getInputOverrideReadFunctionValue()
      {
        return getInputOverrideReadFunction().getValue();
      }

    public bool  hasKuriInfo()
      {
        return flagHasKuriInfo;
      }

    public KuriInfoJSON   getKuriInfo()
      {
        Debug.Assert(flagHasKuriInfo);
        return storeKuriInfo;
      }

    public bool  hasLocalSearchClientState()
      {
        return flagHasLocalSearchClientState;
      }

    public LocalSearchClientStateJSON   getLocalSearchClientState()
      {
        Debug.Assert(flagHasLocalSearchClientState);
        return storeLocalSearchClientState;
      }

    public bool  hasMapClientControlPageToScroll()
      {
        return flagHasMapClientControlPageToScroll;
      }

    public RequestInfoBooleanFlagJSON   getMapClientControlPageToScroll()
      {
        Debug.Assert(flagHasMapClientControlPageToScroll);
        return storeMapClientControlPageToScroll;
      }

    public bool  getMapClientControlPageToScrollValue()
      {
        return getMapClientControlPageToScroll().getValue();
      }

    public bool  hasMultipleChoiceQuizAPIRequest()
      {
        return flagHasMultipleChoiceQuizAPIRequest;
      }

    public MultipleChoiceQuizAPIRequestJSON   getMultipleChoiceQuizAPIRequest()
      {
        Debug.Assert(flagHasMultipleChoiceQuizAPIRequest);
        return storeMultipleChoiceQuizAPIRequest;
      }

    public bool  hasMusicClientState()
      {
        return flagHasMusicClientState;
      }

    public MusicClientStateJSON   getMusicClientState()
      {
        Debug.Assert(flagHasMusicClientState);
        return storeMusicClientState;
      }

    public bool  hasNaritaAirportGuideArea()
      {
        return flagHasNaritaAirportGuideArea;
      }

    public NaritaAirportGuideAreaJSON   getNaritaAirportGuideArea()
      {
        Debug.Assert(flagHasNaritaAirportGuideArea);
        return storeNaritaAirportGuideArea;
      }

    public NaritaAirportGuideAreaJSON.TypeValue  getNaritaAirportGuideAreaValue()
      {
        return getNaritaAirportGuideArea().getValue();
      }

    public string  getNaritaAirportGuideAreaAsString()
      {
        return getNaritaAirportGuideArea().getValueAsString();
      }

    public bool  hasNaritaAirportGuideFloor()
      {
        return flagHasNaritaAirportGuideFloor;
      }

    public NaritaAirportGuideFloorJSON   getNaritaAirportGuideFloor()
      {
        Debug.Assert(flagHasNaritaAirportGuideFloor);
        return storeNaritaAirportGuideFloor;
      }

    public NaritaAirportGuideFloorJSON.TypeValue  getNaritaAirportGuideFloorValue()
      {
        return getNaritaAirportGuideFloor().getValue();
      }

    public string  getNaritaAirportGuideFloorAsString()
      {
        return getNaritaAirportGuideFloor().getValueAsString();
      }

    public bool  hasNaritaAirportGuideTerminal()
      {
        return flagHasNaritaAirportGuideTerminal;
      }

    public NaritaAirportGuideTerminalJSON   getNaritaAirportGuideTerminal()
      {
        Debug.Assert(flagHasNaritaAirportGuideTerminal);
        return storeNaritaAirportGuideTerminal;
      }

    public NaritaAirportGuideTerminalJSON.TypeValue  getNaritaAirportGuideTerminalValue()
      {
        return getNaritaAirportGuideTerminal().getValue();
      }

    public string  getNaritaAirportGuideTerminalAsString()
      {
        return getNaritaAirportGuideTerminal().getValueAsString();
      }

    public bool  hasNavigationControlContext()
      {
        return flagHasNavigationControlContext;
      }

    public NavigationControlContextJSON   getNavigationControlContext()
      {
        Debug.Assert(flagHasNavigationControlContext);
        return storeNavigationControlContext;
      }

    public string  getNavigationControlContextValue()
      {
        return getNavigationControlContext().getValue();
      }

    public bool  hasTurnOffGuidanceMeansMute()
      {
        return flagHasTurnOffGuidanceMeansMute;
      }

    public RequestInfoBooleanFlagJSON   getTurnOffGuidanceMeansMute()
      {
        Debug.Assert(flagHasTurnOffGuidanceMeansMute);
        return storeTurnOffGuidanceMeansMute;
      }

    public bool  getTurnOffGuidanceMeansMuteValue()
      {
        return getTurnOffGuidanceMeansMute().getValue();
      }

    public bool  hasNavigationLocationDisambiguation()
      {
        return flagHasNavigationLocationDisambiguation;
      }

    public NavigationLocationDisambiguationConfigJSON   getNavigationLocationDisambiguation()
      {
        Debug.Assert(flagHasNavigationLocationDisambiguation);
        return storeNavigationLocationDisambiguation;
      }

    public bool  hasNewReminder()
      {
        return flagHasNewReminder;
      }

    public CreateReminderFullDataJSON   getNewReminder()
      {
        Debug.Assert(flagHasNewReminder);
        return storeNewReminder;
      }

    public bool  hasNumberOfVolumeLevels()
      {
        return flagHasNumberOfVolumeLevels;
      }

    public NumberOfVolumeLevelsJSON   getNumberOfVolumeLevels()
      {
        Debug.Assert(flagHasNumberOfVolumeLevels);
        return storeNumberOfVolumeLevels;
      }

    public BigInteger  getNumberOfVolumeLevelsValue()
      {
        return getNumberOfVolumeLevels().getValue();
      }

    public bool  hasOAuth2ClientID()
      {
        return flagHasOAuth2ClientID;
      }

    public ClientIDOAuth2RequestInfoFieldJSON   getOAuth2ClientID()
      {
        Debug.Assert(flagHasOAuth2ClientID);
        return storeOAuth2ClientID;
      }

    public string  getOAuth2ClientIDValue()
      {
        return getOAuth2ClientID().getValue();
      }

    public bool  hasOAuth2ClientSecret()
      {
        return flagHasOAuth2ClientSecret;
      }

    public ClientSecretOAuth2RequestInfoFieldJSON   getOAuth2ClientSecret()
      {
        Debug.Assert(flagHasOAuth2ClientSecret);
        return storeOAuth2ClientSecret;
      }

    public string  getOAuth2ClientSecretValue()
      {
        return getOAuth2ClientSecret().getValue();
      }

    public bool  hasOAuth2ClientToken()
      {
        return flagHasOAuth2ClientToken;
      }

    public OAuth2ClientTokenJSON   getOAuth2ClientToken()
      {
        Debug.Assert(flagHasOAuth2ClientToken);
        return storeOAuth2ClientToken;
      }

    public bool  hasOAuth2CodeData()
      {
        return flagHasOAuth2CodeData;
      }

    public CodeDataOAuth2RequestInfoFieldJSON   getOAuth2CodeData()
      {
        Debug.Assert(flagHasOAuth2CodeData);
        return storeOAuth2CodeData;
      }

    public bool  hasOAuth2RefreshToken()
      {
        return flagHasOAuth2RefreshToken;
      }

    public RefreshTokenOAuth2RequestInfoFieldJSON   getOAuth2RefreshToken()
      {
        Debug.Assert(flagHasOAuth2RefreshToken);
        return storeOAuth2RefreshToken;
      }

    public string  getOAuth2RefreshTokenValue()
      {
        return getOAuth2RefreshToken().getValue();
      }

    public bool  hasOrganizationalChartRequest()
      {
        return flagHasOrganizationalChartRequest;
      }

    public OrganizationalChartRequestJSON   getOrganizationalChartRequest()
      {
        Debug.Assert(flagHasOrganizationalChartRequest);
        return storeOrganizationalChartRequest;
      }

    public bool  hasOutputDeepIntegrationLattice()
      {
        return flagHasOutputDeepIntegrationLattice;
      }

    public OutputDeepIntegrationLatticeJSON   getOutputDeepIntegrationLattice()
      {
        Debug.Assert(flagHasOutputDeepIntegrationLattice);
        return storeOutputDeepIntegrationLattice;
      }

    public bool  getOutputDeepIntegrationLatticeValue()
      {
        return getOutputDeepIntegrationLattice().getValue();
      }

    public bool  hasOutputSLMLattice()
      {
        return flagHasOutputSLMLattice;
      }

    public OutputSLMLatticeJSON   getOutputSLMLattice()
      {
        Debug.Assert(flagHasOutputSLMLattice);
        return storeOutputSLMLattice;
      }

    public bool  getOutputSLMLatticeValue()
      {
        return getOutputSLMLattice().getValue();
      }

    public bool  hasOutputOverrideKind()
      {
        return flagHasOutputOverrideKind;
      }

    public OutputOverrideKindJSON   getOutputOverrideKind()
      {
        Debug.Assert(flagHasOutputOverrideKind);
        return storeOutputOverrideKind;
      }

    public OutputOverrideKindJSON.TypeValue  getOutputOverrideKindValue()
      {
        return getOutputOverrideKind().getValue();
      }

    public string  getOutputOverrideKindAsString()
      {
        return getOutputOverrideKind().getValueAsString();
      }

    public bool  hasOutputOverrideFunction()
      {
        return flagHasOutputOverrideFunction;
      }

    public OutputOverrideFunctionJSON   getOutputOverrideFunction()
      {
        Debug.Assert(flagHasOutputOverrideFunction);
        return storeOutputOverrideFunction;
      }

    public string  getOutputOverrideFunctionValue()
      {
        return getOutputOverrideFunction().getValue();
      }

    public bool  hasOutputOverrideFunctionLanguage()
      {
        return flagHasOutputOverrideFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON   getOutputOverrideFunctionLanguage()
      {
        Debug.Assert(flagHasOutputOverrideFunctionLanguage);
        return storeOutputOverrideFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON.TypeValue  getOutputOverrideFunctionLanguageValue()
      {
        return getOutputOverrideFunctionLanguage().getValue();
      }

    public string  getOutputOverrideFunctionLanguageAsString()
      {
        return getOutputOverrideFunctionLanguage().getValueAsString();
      }

    public bool  hasOutputOverrideFunctionSource()
      {
        return flagHasOutputOverrideFunctionSource;
      }

    public UploadedCodeSourceJSON   getOutputOverrideFunctionSource()
      {
        Debug.Assert(flagHasOutputOverrideFunctionSource);
        return storeOutputOverrideFunctionSource;
      }

    public bool  hasOutputOverrideCommandIsPreAudioOut()
      {
        return flagHasOutputOverrideCommandIsPreAudioOut;
      }

    public RequestInfoBooleanFlagJSON   getOutputOverrideCommandIsPreAudioOut()
      {
        Debug.Assert(flagHasOutputOverrideCommandIsPreAudioOut);
        return storeOutputOverrideCommandIsPreAudioOut;
      }

    public bool  getOutputOverrideCommandIsPreAudioOutValue()
      {
        return getOutputOverrideCommandIsPreAudioOut().getValue();
      }

    public bool  hasOutputOverrideDeleteCommandFunction()
      {
        return flagHasOutputOverrideDeleteCommandFunction;
      }

    public RequestInfoBooleanFlagJSON   getOutputOverrideDeleteCommandFunction()
      {
        Debug.Assert(flagHasOutputOverrideDeleteCommandFunction);
        return storeOutputOverrideDeleteCommandFunction;
      }

    public bool  getOutputOverrideDeleteCommandFunctionValue()
      {
        return getOutputOverrideDeleteCommandFunction().getValue();
      }

    public bool  hasOutputOverrideDeleteInformationNuggetFunction()
      {
        return flagHasOutputOverrideDeleteInformationNuggetFunction;
      }

    public RequestInfoBooleanFlagJSON   getOutputOverrideDeleteInformationNuggetFunction()
      {
        Debug.Assert(flagHasOutputOverrideDeleteInformationNuggetFunction);
        return storeOutputOverrideDeleteInformationNuggetFunction;
      }

    public bool  getOutputOverrideDeleteInformationNuggetFunctionValue()
      {
        return getOutputOverrideDeleteInformationNuggetFunction().getValue();
      }

    public bool  hasOutputOverrideInformationNuggetFunction()
      {
        return flagHasOutputOverrideInformationNuggetFunction;
      }

    public OutputOverrideFunctionJSON   getOutputOverrideInformationNuggetFunction()
      {
        Debug.Assert(flagHasOutputOverrideInformationNuggetFunction);
        return storeOutputOverrideInformationNuggetFunction;
      }

    public string  getOutputOverrideInformationNuggetFunctionValue()
      {
        return getOutputOverrideInformationNuggetFunction().getValue();
      }

    public bool  hasOutputOverrideInformationNuggetFunctionLanguage()
      {
        return flagHasOutputOverrideInformationNuggetFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON   getOutputOverrideInformationNuggetFunctionLanguage()
      {
        Debug.Assert(flagHasOutputOverrideInformationNuggetFunctionLanguage);
        return storeOutputOverrideInformationNuggetFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON.TypeValue  getOutputOverrideInformationNuggetFunctionLanguageValue()
      {
        return getOutputOverrideInformationNuggetFunctionLanguage().getValue();
      }

    public string  getOutputOverrideInformationNuggetFunctionLanguageAsString()
      {
        return getOutputOverrideInformationNuggetFunctionLanguage().getValueAsString();
      }

    public bool  hasOutputOverrideInformationNuggetFunctionSource()
      {
        return flagHasOutputOverrideInformationNuggetFunctionSource;
      }

    public UploadedCodeSourceJSON   getOutputOverrideInformationNuggetFunctionSource()
      {
        Debug.Assert(flagHasOutputOverrideInformationNuggetFunctionSource);
        return storeOutputOverrideInformationNuggetFunctionSource;
      }

    public bool  hasOutputOverrideReadCommandFunction()
      {
        return flagHasOutputOverrideReadCommandFunction;
      }

    public RequestInfoBooleanFlagJSON   getOutputOverrideReadCommandFunction()
      {
        Debug.Assert(flagHasOutputOverrideReadCommandFunction);
        return storeOutputOverrideReadCommandFunction;
      }

    public bool  getOutputOverrideReadCommandFunctionValue()
      {
        return getOutputOverrideReadCommandFunction().getValue();
      }

    public bool  hasOutputOverrideReadInformationNuggetFunction()
      {
        return flagHasOutputOverrideReadInformationNuggetFunction;
      }

    public RequestInfoBooleanFlagJSON   getOutputOverrideReadInformationNuggetFunction()
      {
        Debug.Assert(flagHasOutputOverrideReadInformationNuggetFunction);
        return storeOutputOverrideReadInformationNuggetFunction;
      }

    public bool  getOutputOverrideReadInformationNuggetFunctionValue()
      {
        return getOutputOverrideReadInformationNuggetFunction().getValue();
      }

    public bool  hasOutputOverrideCommandFunction()
      {
        return flagHasOutputOverrideCommandFunction;
      }

    public OutputOverrideFunctionJSON   getOutputOverrideCommandFunction()
      {
        Debug.Assert(flagHasOutputOverrideCommandFunction);
        return storeOutputOverrideCommandFunction;
      }

    public string  getOutputOverrideCommandFunctionValue()
      {
        return getOutputOverrideCommandFunction().getValue();
      }

    public bool  hasOutputOverrideCommandFunctionLanguage()
      {
        return flagHasOutputOverrideCommandFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON   getOutputOverrideCommandFunctionLanguage()
      {
        Debug.Assert(flagHasOutputOverrideCommandFunctionLanguage);
        return storeOutputOverrideCommandFunctionLanguage;
      }

    public UploadedCodeFunctionLanguageJSON.TypeValue  getOutputOverrideCommandFunctionLanguageValue()
      {
        return getOutputOverrideCommandFunctionLanguage().getValue();
      }

    public string  getOutputOverrideCommandFunctionLanguageAsString()
      {
        return getOutputOverrideCommandFunctionLanguage().getValueAsString();
      }

    public bool  hasOutputOverrideCommandFunctionSource()
      {
        return flagHasOutputOverrideCommandFunctionSource;
      }

    public UploadedCodeSourceJSON   getOutputOverrideCommandFunctionSource()
      {
        Debug.Assert(flagHasOutputOverrideCommandFunctionSource);
        return storeOutputOverrideCommandFunctionSource;
      }

    public bool  hasPandoraCustomClientPrompt()
      {
        return flagHasPandoraCustomClientPrompt;
      }

    public ClientPromptPandoraCustomRequestInfoFieldJSON   getPandoraCustomClientPrompt()
      {
        Debug.Assert(flagHasPandoraCustomClientPrompt);
        return storePandoraCustomClientPrompt;
      }

    public ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValue  getPandoraCustomClientPromptValue()
      {
        return getPandoraCustomClientPrompt().getValue();
      }

    public string  getPandoraCustomClientPromptAsString()
      {
        return getPandoraCustomClientPrompt().getValueAsString();
      }

    public bool  hasPandoraCustomEnableComponentFormat()
      {
        return flagHasPandoraCustomEnableComponentFormat;
      }

    public EnableComponentFormatPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableComponentFormat()
      {
        Debug.Assert(flagHasPandoraCustomEnableComponentFormat);
        return storePandoraCustomEnableComponentFormat;
      }

    public bool  getPandoraCustomEnableComponentFormatValue()
      {
        return getPandoraCustomEnableComponentFormat().getValue();
      }

    public bool  hasPandoraCustomEnableDomain()
      {
        return flagHasPandoraCustomEnableDomain;
      }

    public EnableDomainPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableDomain()
      {
        Debug.Assert(flagHasPandoraCustomEnableDomain);
        return storePandoraCustomEnableDomain;
      }

    public bool  getPandoraCustomEnableDomainValue()
      {
        return getPandoraCustomEnableDomain().getValue();
      }

    public bool  hasPandoraCustomEnableExclusionInTarzanMode()
      {
        return flagHasPandoraCustomEnableExclusionInTarzanMode;
      }

    public EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableExclusionInTarzanMode()
      {
        Debug.Assert(flagHasPandoraCustomEnableExclusionInTarzanMode);
        return storePandoraCustomEnableExclusionInTarzanMode;
      }

    public bool  getPandoraCustomEnableExclusionInTarzanModeValue()
      {
        return getPandoraCustomEnableExclusionInTarzanMode().getValue();
      }

    public bool  hasPandoraCustomEnableInferredPlay()
      {
        return flagHasPandoraCustomEnableInferredPlay;
      }

    public EnableInferredPlayPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableInferredPlay()
      {
        Debug.Assert(flagHasPandoraCustomEnableInferredPlay);
        return storePandoraCustomEnableInferredPlay;
      }

    public bool  getPandoraCustomEnableInferredPlayValue()
      {
        return getPandoraCustomEnableInferredPlay().getValue();
      }

    public bool  hasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList()
      {
        return flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
      }

    public EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList()
      {
        Debug.Assert(flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList);
        return storePandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
      }

    public bool  getPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionListValue()
      {
        return getPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList().getValue();
      }

    public bool  hasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords()
      {
        return flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
      }

    public EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON   getPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords()
      {
        Debug.Assert(flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords);
        return storePandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
      }

    public EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.TypeValue  getPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywordsValue()
      {
        return getPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords().getValue();
      }

    public string  getPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywordsAsString()
      {
        return getPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords().getValueAsString();
      }

    public bool  hasPandoraCustomEnableLongJSONFallback()
      {
        return flagHasPandoraCustomEnableLongJSONFallback;
      }

    public EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableLongJSONFallback()
      {
        Debug.Assert(flagHasPandoraCustomEnableLongJSONFallback);
        return storePandoraCustomEnableLongJSONFallback;
      }

    public bool  getPandoraCustomEnableLongJSONFallbackValue()
      {
        return getPandoraCustomEnableLongJSONFallback().getValue();
      }

    public bool  hasPandoraCustomEnablePodcastMatches()
      {
        return flagHasPandoraCustomEnablePodcastMatches;
      }

    public EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnablePodcastMatches()
      {
        Debug.Assert(flagHasPandoraCustomEnablePodcastMatches);
        return storePandoraCustomEnablePodcastMatches;
      }

    public bool  getPandoraCustomEnablePodcastMatchesValue()
      {
        return getPandoraCustomEnablePodcastMatches().getValue();
      }

    public bool  hasPandoraCustomEnableUserDataQueries()
      {
        return flagHasPandoraCustomEnableUserDataQueries;
      }

    public EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableUserDataQueries()
      {
        Debug.Assert(flagHasPandoraCustomEnableUserDataQueries);
        return storePandoraCustomEnableUserDataQueries;
      }

    public bool  getPandoraCustomEnableUserDataQueriesValue()
      {
        return getPandoraCustomEnableUserDataQueries().getValue();
      }

    public bool  hasPandoraCustomEnableWildcardMatches()
      {
        return flagHasPandoraCustomEnableWildcardMatches;
      }

    public EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableWildcardMatches()
      {
        Debug.Assert(flagHasPandoraCustomEnableWildcardMatches);
        return storePandoraCustomEnableWildcardMatches;
      }

    public bool  getPandoraCustomEnableWildcardMatchesValue()
      {
        return getPandoraCustomEnableWildcardMatches().getValue();
      }

    public bool  hasPandoraCustomEnableWildcardMatchesOnlyAsFallback()
      {
        return flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback;
      }

    public EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON   getPandoraCustomEnableWildcardMatchesOnlyAsFallback()
      {
        Debug.Assert(flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback);
        return storePandoraCustomEnableWildcardMatchesOnlyAsFallback;
      }

    public bool  getPandoraCustomEnableWildcardMatchesOnlyAsFallbackValue()
      {
        return getPandoraCustomEnableWildcardMatchesOnlyAsFallback().getValue();
      }

    public bool  hasPandoraCustomExtendedStationModeData()
      {
        return flagHasPandoraCustomExtendedStationModeData;
      }

    public ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON   getPandoraCustomExtendedStationModeData()
      {
        Debug.Assert(flagHasPandoraCustomExtendedStationModeData);
        return storePandoraCustomExtendedStationModeData;
      }

    public bool  hasPandoraCustomRapidIngestionData()
      {
        return flagHasPandoraCustomRapidIngestionData;
      }

    public RapidIngestionDataPandoraCustomRequestInfoFieldJSON   getPandoraCustomRapidIngestionData()
      {
        Debug.Assert(flagHasPandoraCustomRapidIngestionData);
        return storePandoraCustomRapidIngestionData;
      }

    public bool  hasPandoraCustomUserData()
      {
        return flagHasPandoraCustomUserData;
      }

    public UserDataPandoraCustomRequestInfoFieldJSON   getPandoraCustomUserData()
      {
        Debug.Assert(flagHasPandoraCustomUserData);
        return storePandoraCustomUserData;
      }

    public bool  hasParkingClientState()
      {
        return flagHasParkingClientState;
      }

    public ParkingClientStateJSON   getParkingClientState()
      {
        Debug.Assert(flagHasParkingClientState);
        return storeParkingClientState;
      }

    public bool  hasPepperEnabled()
      {
        return flagHasPepperEnabled;
      }

    public PepperEnabledJSON   getPepperEnabled()
      {
        Debug.Assert(flagHasPepperEnabled);
        return storePepperEnabled;
      }

    public bool  getPepperEnabledValue()
      {
        return getPepperEnabled().getValue();
      }

    public bool  hasPhoneDisambiguationOmitList()
      {
        return flagHasPhoneDisambiguationOmitList;
      }

    public PhoneDisambiguationOmitListJSON   getPhoneDisambiguationOmitList()
      {
        Debug.Assert(flagHasPhoneDisambiguationOmitList);
        return storePhoneDisambiguationOmitList;
      }

    public bool  hasRadioControlAvailableAudioSources()
      {
        return flagHasRadioControlAvailableAudioSources;
      }

    public RadioControlAvailableAudioSourcesJSON   getRadioControlAvailableAudioSources()
      {
        Debug.Assert(flagHasRadioControlAvailableAudioSources);
        return storeRadioControlAvailableAudioSources;
      }

    public bool  hasRadioControlOtherAMBands()
      {
        return flagHasRadioControlOtherAMBands;
      }

    public RadioControlOtherAMBandsJSON   getRadioControlOtherAMBands()
      {
        Debug.Assert(flagHasRadioControlOtherAMBands);
        return storeRadioControlOtherAMBands;
      }

    public bool  hasRadioControlOtherFMBands()
      {
        return flagHasRadioControlOtherFMBands;
      }

    public RadioControlOtherFMBandsJSON   getRadioControlOtherFMBands()
      {
        Debug.Assert(flagHasRadioControlOtherFMBands);
        return storeRadioControlOtherFMBands;
      }

    public bool  hasRadioControlRecognizeNorthAmericanAMBand()
      {
        return flagHasRadioControlRecognizeNorthAmericanAMBand;
      }

    public RadioControlRecognizeNorthAmericanAMBandJSON   getRadioControlRecognizeNorthAmericanAMBand()
      {
        Debug.Assert(flagHasRadioControlRecognizeNorthAmericanAMBand);
        return storeRadioControlRecognizeNorthAmericanAMBand;
      }

    public bool  getRadioControlRecognizeNorthAmericanAMBandValue()
      {
        return getRadioControlRecognizeNorthAmericanAMBand().getValue();
      }

    public bool  hasRadioControlRecognizeNorthAmericanFMBand()
      {
        return flagHasRadioControlRecognizeNorthAmericanFMBand;
      }

    public RadioControlRecognizeNorthAmericanFMBandJSON   getRadioControlRecognizeNorthAmericanFMBand()
      {
        Debug.Assert(flagHasRadioControlRecognizeNorthAmericanFMBand);
        return storeRadioControlRecognizeNorthAmericanFMBand;
      }

    public bool  getRadioControlRecognizeNorthAmericanFMBandValue()
      {
        return getRadioControlRecognizeNorthAmericanFMBand().getValue();
      }

    public bool  hasRadioControlTunableStations()
      {
        return flagHasRadioControlTunableStations;
      }

    public RadioControlTunableStationsJSON   getRadioControlTunableStations()
      {
        Debug.Assert(flagHasRadioControlTunableStations);
        return storeRadioControlTunableStations;
      }

    public bool  hasReadSpeakerVoiceParameters()
      {
        return flagHasReadSpeakerVoiceParameters;
      }

    public ReadSpeakerVoiceParametersJSON   getReadSpeakerVoiceParameters()
      {
        Debug.Assert(flagHasReadSpeakerVoiceParameters);
        return storeReadSpeakerVoiceParameters;
      }

    public bool  hasRecipeParameters()
      {
        return flagHasRecipeParameters;
      }

    public RecipeParametersJSON   getRecipeParameters()
      {
        Debug.Assert(flagHasRecipeParameters);
        return storeRecipeParameters;
      }

    public bool  hasRegionalPhoneNumberConfiguration()
      {
        return flagHasRegionalPhoneNumberConfiguration;
      }

    public RegionalPhoneNumberConfigurationJSON   getRegionalPhoneNumberConfiguration()
      {
        Debug.Assert(flagHasRegionalPhoneNumberConfiguration);
        return storeRegionalPhoneNumberConfiguration;
      }

    public bool  hasRemainingDistance()
      {
        return flagHasRemainingDistance;
      }

    public AmountJSON   getRemainingDistance()
      {
        Debug.Assert(flagHasRemainingDistance);
        return storeRemainingDistance;
      }

    public bool  hasRemainingTravelTime()
      {
        return flagHasRemainingTravelTime;
      }

    public AmountJSON   getRemainingTravelTime()
      {
        Debug.Assert(flagHasRemainingTravelTime);
        return storeRemainingTravelTime;
      }

    public bool  hasReminders()
      {
        return flagHasReminders;
      }

    public ReminderListJSON   getReminders()
      {
        Debug.Assert(flagHasReminders);
        return storeReminders;
      }

    public bool  hasRestaurantMenuMetadata()
      {
        return flagHasRestaurantMenuMetadata;
      }

    public RestaurantMenuMetadataJSON   getRestaurantMenuMetadata()
      {
        Debug.Assert(flagHasRestaurantMenuMetadata);
        return storeRestaurantMenuMetadata;
      }

    public bool  hasRestaurantMenuObject()
      {
        return flagHasRestaurantMenuObject;
      }

    public RestaurantMenuObjectJSON   getRestaurantMenuObject()
      {
        Debug.Assert(flagHasRestaurantMenuObject);
        return storeRestaurantMenuObject;
      }

    public bool  hasRestaurantOrderingMenuData()
      {
        return flagHasRestaurantOrderingMenuData;
      }

    public RestaurantOrderingMenuDataJSON   getRestaurantOrderingMenuData()
      {
        Debug.Assert(flagHasRestaurantOrderingMenuData);
        return storeRestaurantOrderingMenuData;
      }

    public bool  hasRestaurantOrderingQueriesMenuDataStoreID()
      {
        return flagHasRestaurantOrderingQueriesMenuDataStoreID;
      }

    public RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON   getRestaurantOrderingQueriesMenuDataStoreID()
      {
        Debug.Assert(flagHasRestaurantOrderingQueriesMenuDataStoreID);
        return storeRestaurantOrderingQueriesMenuDataStoreID;
      }

    public string  getRestaurantOrderingQueriesMenuDataStoreIDValue()
      {
        return getRestaurantOrderingQueriesMenuDataStoreID().getValue();
      }

    public bool  hasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent()
      {
        return flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
      }

    public RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON   getRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent()
      {
        Debug.Assert(flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent);
        return storeRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
      }

    public BigInteger  getRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentValue()
      {
        return getRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent().getValue();
      }

    public bool  hasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent()
      {
        return flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
      }

    public RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON   getRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent()
      {
        Debug.Assert(flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent);
        return storeRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
      }

    public BigInteger  getRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentValue()
      {
        return getRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent().getValue();
      }

    public bool  hasRestaurantOrderingQueriesRequestData()
      {
        return flagHasRestaurantOrderingQueriesRequestData;
      }

    public RestaurantOrderingQueriesRequestDataJSON   getRestaurantOrderingQueriesRequestData()
      {
        Debug.Assert(flagHasRestaurantOrderingQueriesRequestData);
        return storeRestaurantOrderingQueriesRequestData;
      }

    public bool  hasReturnInformationNuggetsForMusicSearch()
      {
        return flagHasReturnInformationNuggetsForMusicSearch;
      }

    public ReturnInformationNuggetsForMusicSearchJSON   getReturnInformationNuggetsForMusicSearch()
      {
        Debug.Assert(flagHasReturnInformationNuggetsForMusicSearch);
        return storeReturnInformationNuggetsForMusicSearch;
      }

    public bool  getReturnInformationNuggetsForMusicSearchValue()
      {
        return getReturnInformationNuggetsForMusicSearch().getValue();
      }

    public bool  hasRobotInfo()
      {
        return flagHasRobotInfo;
      }

    public RobotInfoJSON   getRobotInfo()
      {
        Debug.Assert(flagHasRobotInfo);
        return storeRobotInfo;
      }

    public bool  hasSendFullWeatherForecastData()
      {
        return flagHasSendFullWeatherForecastData;
      }

    public SendFullWeatherForecastDataJSON   getSendFullWeatherForecastData()
      {
        Debug.Assert(flagHasSendFullWeatherForecastData);
        return storeSendFullWeatherForecastData;
      }

    public bool  getSendFullWeatherForecastDataValue()
      {
        return getSendFullWeatherForecastData().getValue();
      }

    public bool  hasSetUserMemoryLocation()
      {
        return flagHasSetUserMemoryLocation;
      }

    public SetUserMemoryLocationJSON   getSetUserMemoryLocation()
      {
        Debug.Assert(flagHasSetUserMemoryLocation);
        return storeSetUserMemoryLocation;
      }

    public bool  hasSiriusXMEnableDomain()
      {
        return flagHasSiriusXMEnableDomain;
      }

    public SiriusXMEnableDomainJSON   getSiriusXMEnableDomain()
      {
        Debug.Assert(flagHasSiriusXMEnableDomain);
        return storeSiriusXMEnableDomain;
      }

    public bool  getSiriusXMEnableDomainValue()
      {
        return getSiriusXMEnableDomain().getValue();
      }

    public bool  hasSiriusXMEnableGenericChannelMatches()
      {
        return flagHasSiriusXMEnableGenericChannelMatches;
      }

    public SiriusXMEnableGenericChannelMatchesJSON   getSiriusXMEnableGenericChannelMatches()
      {
        Debug.Assert(flagHasSiriusXMEnableGenericChannelMatches);
        return storeSiriusXMEnableGenericChannelMatches;
      }

    public bool  getSiriusXMEnableGenericChannelMatchesValue()
      {
        return getSiriusXMEnableGenericChannelMatches().getValue();
      }

    public bool  hasSiriusXMEnableWildcardMatches()
      {
        return flagHasSiriusXMEnableWildcardMatches;
      }

    public SiriusXMEnableWildcardMatchesJSON   getSiriusXMEnableWildcardMatches()
      {
        Debug.Assert(flagHasSiriusXMEnableWildcardMatches);
        return storeSiriusXMEnableWildcardMatches;
      }

    public bool  getSiriusXMEnableWildcardMatchesValue()
      {
        return getSiriusXMEnableWildcardMatches().getValue();
      }

    public bool  hasSmartTVOnScreenItems()
      {
        return flagHasSmartTVOnScreenItems;
      }

    public SmartTVOnScreenItemsRequestInfoFieldJSON   getSmartTVOnScreenItems()
      {
        Debug.Assert(flagHasSmartTVOnScreenItems);
        return storeSmartTVOnScreenItems;
      }

    public bool  hasSmartTVUserCustomInputSource()
      {
        return flagHasSmartTVUserCustomInputSource;
      }

    public SmartTVUserCustomInputSourceRequestInfoFieldJSON   getSmartTVUserCustomInputSource()
      {
        Debug.Assert(flagHasSmartTVUserCustomInputSource);
        return storeSmartTVUserCustomInputSource;
      }

    public bool  hasSoundHoundTTSParameters()
      {
        return flagHasSoundHoundTTSParameters;
      }

    public SoundHoundTTSParametersJSON   getSoundHoundTTSParameters()
      {
        Debug.Assert(flagHasSoundHoundTTSParameters);
        return storeSoundHoundTTSParameters;
      }

    public bool  hasSpeedLimitOnThisRoad()
      {
        return flagHasSpeedLimitOnThisRoad;
      }

    public AmountJSON   getSpeedLimitOnThisRoad()
      {
        Debug.Assert(flagHasSpeedLimitOnThisRoad);
        return storeSpeedLimitOnThisRoad;
      }

    public bool  hasSportsLeagueControl()
      {
        return flagHasSportsLeagueControl;
      }

    public SportsLeagueControlJSON   getSportsLeagueControl()
      {
        Debug.Assert(flagHasSportsLeagueControl);
        return storeSportsLeagueControl;
      }

    public bool  hasSpotifyPlaylistEnableWildcardMatches()
      {
        return flagHasSpotifyPlaylistEnableWildcardMatches;
      }

    public EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON   getSpotifyPlaylistEnableWildcardMatches()
      {
        Debug.Assert(flagHasSpotifyPlaylistEnableWildcardMatches);
        return storeSpotifyPlaylistEnableWildcardMatches;
      }

    public bool  getSpotifyPlaylistEnableWildcardMatchesValue()
      {
        return getSpotifyPlaylistEnableWildcardMatches().getValue();
      }

    public bool  hasStoredAlwaysMatchReadData()
      {
        return flagHasStoredAlwaysMatchReadData;
      }

    public StoredAlwaysMatchReadDataJSON   getStoredAlwaysMatchReadData()
      {
        Debug.Assert(flagHasStoredAlwaysMatchReadData);
        return storeStoredAlwaysMatchReadData;
      }

    public bool  getStoredAlwaysMatchReadDataValue()
      {
        return getStoredAlwaysMatchReadData().getValue();
      }

    public bool  hasStoredAlwaysMatchWriteData()
      {
        return flagHasStoredAlwaysMatchWriteData;
      }

    public ClientMatchesJSON   getStoredAlwaysMatchWriteData()
      {
        Debug.Assert(flagHasStoredAlwaysMatchWriteData);
        return storeStoredAlwaysMatchWriteData;
      }

    public bool  hasStoredGlobalPagesToMatch()
      {
        return flagHasStoredGlobalPagesToMatch;
      }

    public StoredPageMatchPageListJSON   getStoredGlobalPagesToMatch()
      {
        Debug.Assert(flagHasStoredGlobalPagesToMatch);
        return storeStoredGlobalPagesToMatch;
      }

    public bool  hasStoredGlobalPagesToNotMatch()
      {
        return flagHasStoredGlobalPagesToNotMatch;
      }

    public StoredPageMatchPageListJSON   getStoredGlobalPagesToNotMatch()
      {
        Debug.Assert(flagHasStoredGlobalPagesToNotMatch);
        return storeStoredGlobalPagesToNotMatch;
      }

    public bool  hasStoredGlobalPagesToSetOffByDefault()
      {
        return flagHasStoredGlobalPagesToSetOffByDefault;
      }

    public StoredPageMatchPageListJSON   getStoredGlobalPagesToSetOffByDefault()
      {
        Debug.Assert(flagHasStoredGlobalPagesToSetOffByDefault);
        return storeStoredGlobalPagesToSetOffByDefault;
      }

    public bool  hasStoredGlobalPagesToSetOnByDefault()
      {
        return flagHasStoredGlobalPagesToSetOnByDefault;
      }

    public StoredPageMatchPageListJSON   getStoredGlobalPagesToSetOnByDefault()
      {
        Debug.Assert(flagHasStoredGlobalPagesToSetOnByDefault);
        return storeStoredGlobalPagesToSetOnByDefault;
      }

    public bool  hasStoredPageMatchPageListData()
      {
        return flagHasStoredPageMatchPageListData;
      }

    public StoredPageMatchPageListDataJSON   getStoredPageMatchPageListData()
      {
        Debug.Assert(flagHasStoredPageMatchPageListData);
        return storeStoredPageMatchPageListData;
      }

    public bool  hasStoredPageMatchReadData()
      {
        return flagHasStoredPageMatchReadData;
      }

    public StoredPageMatchReadDataJSON   getStoredPageMatchReadData()
      {
        Debug.Assert(flagHasStoredPageMatchReadData);
        return storeStoredPageMatchReadData;
      }

    public bool  hasStoredPageMatchWeight()
      {
        return flagHasStoredPageMatchWeight;
      }

    public StoredPageMatchWeightJSON   getStoredPageMatchWeight()
      {
        Debug.Assert(flagHasStoredPageMatchWeight);
        return storeStoredPageMatchWeight;
      }

    public double  getStoredPageMatchWeightValue()
      {
        return getStoredPageMatchWeight().getValue();
      }

    public bool  hasStoredPageMatchWriteData()
      {
        return flagHasStoredPageMatchWriteData;
      }

    public StoredPageMatchWriteDataJSON   getStoredPageMatchWriteData()
      {
        Debug.Assert(flagHasStoredPageMatchWriteData);
        return storeStoredPageMatchWriteData;
      }

    public bool  hasStoredPerUserPagesToMatch()
      {
        return flagHasStoredPerUserPagesToMatch;
      }

    public StoredPageMatchPageListJSON   getStoredPerUserPagesToMatch()
      {
        Debug.Assert(flagHasStoredPerUserPagesToMatch);
        return storeStoredPerUserPagesToMatch;
      }

    public bool  hasStoredPerUserPagesToNotMatch()
      {
        return flagHasStoredPerUserPagesToNotMatch;
      }

    public StoredPageMatchPageListJSON   getStoredPerUserPagesToNotMatch()
      {
        Debug.Assert(flagHasStoredPerUserPagesToNotMatch);
        return storeStoredPerUserPagesToNotMatch;
      }

    public bool  hasStoredPerUserPagesToSetOffByDefault()
      {
        return flagHasStoredPerUserPagesToSetOffByDefault;
      }

    public StoredPageMatchPageListJSON   getStoredPerUserPagesToSetOffByDefault()
      {
        Debug.Assert(flagHasStoredPerUserPagesToSetOffByDefault);
        return storeStoredPerUserPagesToSetOffByDefault;
      }

    public bool  hasStoredPerUserPagesToSetOnByDefault()
      {
        return flagHasStoredPerUserPagesToSetOnByDefault;
      }

    public StoredPageMatchPageListJSON   getStoredPerUserPagesToSetOnByDefault()
      {
        Debug.Assert(flagHasStoredPerUserPagesToSetOnByDefault);
        return storeStoredPerUserPagesToSetOnByDefault;
      }

    public bool  hasSurveyAPIRequest()
      {
        return flagHasSurveyAPIRequest;
      }

    public SurveyAPIRequestJSON   getSurveyAPIRequest()
      {
        Debug.Assert(flagHasSurveyAPIRequest);
        return storeSurveyAPIRequest;
      }

    public bool  hasTVChannelList()
      {
        return flagHasTVChannelList;
      }

    public TVChannelListJSON   getTVChannelList()
      {
        Debug.Assert(flagHasTVChannelList);
        return storeTVChannelList;
      }

    public bool  hasTerrierTableUploadReadData()
      {
        return flagHasTerrierTableUploadReadData;
      }

    public TerrierTableUploadReadDataJSON   getTerrierTableUploadReadData()
      {
        Debug.Assert(flagHasTerrierTableUploadReadData);
        return storeTerrierTableUploadReadData;
      }

    public bool  hasTerrierTableUploadWriteData()
      {
        return flagHasTerrierTableUploadWriteData;
      }

    public TerrierTableUploadWriteDataJSON   getTerrierTableUploadWriteData()
      {
        Debug.Assert(flagHasTerrierTableUploadWriteData);
        return storeTerrierTableUploadWriteData;
      }

    public bool  hasTerrierUploadDeleteProject()
      {
        return flagHasTerrierUploadDeleteProject;
      }

    public TerrierUploadDeleteProjectJSON   getTerrierUploadDeleteProject()
      {
        Debug.Assert(flagHasTerrierUploadDeleteProject);
        return storeTerrierUploadDeleteProject;
      }

    public bool  hasTerrierUploadDeleteProjectOptions()
      {
        return flagHasTerrierUploadDeleteProjectOptions;
      }

    public TerrierUploadDeleteProjectOptionsJSON   getTerrierUploadDeleteProjectOptions()
      {
        Debug.Assert(flagHasTerrierUploadDeleteProjectOptions);
        return storeTerrierUploadDeleteProjectOptions;
      }

    public bool  hasTerrierUploadGetProject()
      {
        return flagHasTerrierUploadGetProject;
      }

    public TerrierUploadGetProjectJSON   getTerrierUploadGetProject()
      {
        Debug.Assert(flagHasTerrierUploadGetProject);
        return storeTerrierUploadGetProject;
      }

    public bool  hasTerrierUploadGetProjectList()
      {
        return flagHasTerrierUploadGetProjectList;
      }

    public TerrierUploadGetProjectListJSON   getTerrierUploadGetProjectList()
      {
        Debug.Assert(flagHasTerrierUploadGetProjectList);
        return storeTerrierUploadGetProjectList;
      }

    public bool  hasTerrierUploadGetProjectListOptions()
      {
        return flagHasTerrierUploadGetProjectListOptions;
      }

    public TerrierUploadGetProjectListOptionsJSON   getTerrierUploadGetProjectListOptions()
      {
        Debug.Assert(flagHasTerrierUploadGetProjectListOptions);
        return storeTerrierUploadGetProjectListOptions;
      }

    public bool  hasTerrierUploadGetProjectOptions()
      {
        return flagHasTerrierUploadGetProjectOptions;
      }

    public TerrierUploadGetProjectOptionsJSON   getTerrierUploadGetProjectOptions()
      {
        Debug.Assert(flagHasTerrierUploadGetProjectOptions);
        return storeTerrierUploadGetProjectOptions;
      }

    public bool  hasTerrierUploadReadData()
      {
        return flagHasTerrierUploadReadData;
      }

    public TerrierUploadReadDataJSON   getTerrierUploadReadData()
      {
        Debug.Assert(flagHasTerrierUploadReadData);
        return storeTerrierUploadReadData;
      }

    public bool  hasTerrierUploadWriteData()
      {
        return flagHasTerrierUploadWriteData;
      }

    public TerrierUploadWriteDataJSON   getTerrierUploadWriteData()
      {
        Debug.Assert(flagHasTerrierUploadWriteData);
        return storeTerrierUploadWriteData;
      }

    public bool  hasTerrierUploadWriteProject()
      {
        return flagHasTerrierUploadWriteProject;
      }

    public TerrierUploadedProjectJSON   getTerrierUploadWriteProject()
      {
        Debug.Assert(flagHasTerrierUploadWriteProject);
        return storeTerrierUploadWriteProject;
      }

    public bool  hasTerrierUploadWriteProjectOptions()
      {
        return flagHasTerrierUploadWriteProjectOptions;
      }

    public TerrierUploadWriteProjectOptionsJSON   getTerrierUploadWriteProjectOptions()
      {
        Debug.Assert(flagHasTerrierUploadWriteProjectOptions);
        return storeTerrierUploadWriteProjectOptions;
      }

    public bool  hasThirdPartyCalendarService()
      {
        return flagHasThirdPartyCalendarService;
      }

    public ThirdPartyCalendarServiceJSON   getThirdPartyCalendarService()
      {
        Debug.Assert(flagHasThirdPartyCalendarService);
        return storeThirdPartyCalendarService;
      }

    public ThirdPartyCalendarServiceJSON.TypeValue  getThirdPartyCalendarServiceValue()
      {
        return getThirdPartyCalendarService().getValue();
      }

    public string  getThirdPartyCalendarServiceAsString()
      {
        return getThirdPartyCalendarService().getValueAsString();
      }

    public bool  hasCalendarMatchingLoosenessLevel()
      {
        return flagHasCalendarMatchingLoosenessLevel;
      }

    public CalendarMatchingLoosenessLevelJSON   getCalendarMatchingLoosenessLevel()
      {
        Debug.Assert(flagHasCalendarMatchingLoosenessLevel);
        return storeCalendarMatchingLoosenessLevel;
      }

    public CalendarMatchingLoosenessLevelJSON.TypeValue  getCalendarMatchingLoosenessLevelValue()
      {
        return getCalendarMatchingLoosenessLevel().getValue();
      }

    public string  getCalendarMatchingLoosenessLevelAsString()
      {
        return getCalendarMatchingLoosenessLevel().getValueAsString();
      }

    public bool  hasCalendarEvents()
      {
        return flagHasCalendarEvents;
      }

    public CalendarRequestInfoEventsListJSON   getCalendarEvents()
      {
        Debug.Assert(flagHasCalendarEvents);
        return storeCalendarEvents;
      }

    public bool  hasToshibaTTSParameters()
      {
        return flagHasToshibaTTSParameters;
      }

    public ToshibaTTSParametersJSON   getToshibaTTSParameters()
      {
        Debug.Assert(flagHasToshibaTTSParameters);
        return storeToshibaTTSParameters;
      }

    public bool  hasTravelBearing()
      {
        return flagHasTravelBearing;
      }

    public HLSHeadingJSON   getTravelBearing()
      {
        Debug.Assert(flagHasTravelBearing);
        return storeTravelBearing;
      }

    public short  getTravelBearingValue()
      {
        return getTravelBearing().getValue();
      }

    public bool  hasUDSExampleRequest()
      {
        return flagHasUDSExampleRequest;
      }

    public UDSExampleRequestJSON   getUDSExampleRequest()
      {
        Debug.Assert(flagHasUDSExampleRequest);
        return storeUDSExampleRequest;
      }

    public bool  hasUberClientId()
      {
        return flagHasUberClientId;
      }

    public UberClientIdJSON   getUberClientId()
      {
        Debug.Assert(flagHasUberClientId);
        return storeUberClientId;
      }

    public string  getUberClientIdValue()
      {
        return getUberClientId().getValue();
      }

    public bool  hasUberServerToken()
      {
        return flagHasUberServerToken;
      }

    public UberServerTokenJSON   getUberServerToken()
      {
        Debug.Assert(flagHasUberServerToken);
        return storeUberServerToken;
      }

    public string  getUberServerTokenValue()
      {
        return getUberServerToken().getValue();
      }

    public bool  hasUploadedTestConfiguration()
      {
        return flagHasUploadedTestConfiguration;
      }

    public UploadedTestConfigurationJSON   getUploadedTestConfiguration()
      {
        Debug.Assert(flagHasUploadedTestConfiguration);
        return storeUploadedTestConfiguration;
      }

    public bool  hasUploadedTestData()
      {
        return flagHasUploadedTestData;
      }

    public UploadedTestsJSON   getUploadedTestData()
      {
        Debug.Assert(flagHasUploadedTestData);
        return storeUploadedTestData;
      }

    public bool  hasUseNewStyleSMSCommands()
      {
        return flagHasUseNewStyleSMSCommands;
      }

    public RequestInfoBooleanFlagJSON   getUseNewStyleSMSCommands()
      {
        Debug.Assert(flagHasUseNewStyleSMSCommands);
        return storeUseNewStyleSMSCommands;
      }

    public bool  getUseNewStyleSMSCommandsValue()
      {
        return getUseNewStyleSMSCommands().getValue();
      }

    public bool  hasUseXAPAPI()
      {
        return flagHasUseXAPAPI;
      }

    public RequestInfoBooleanFlagJSON   getUseXAPAPI()
      {
        Debug.Assert(flagHasUseXAPAPI);
        return storeUseXAPAPI;
      }

    public bool  getUseXAPAPIValue()
      {
        return getUseXAPAPI().getValue();
      }

    public bool  hasUserContactsConfiguration()
      {
        return flagHasUserContactsConfiguration;
      }

    public UserContactsConfigurationJSON   getUserContactsConfiguration()
      {
        Debug.Assert(flagHasUserContactsConfiguration);
        return storeUserContactsConfiguration;
      }

    public bool  hasUserContactsRequests()
      {
        return flagHasUserContactsRequests;
      }

    public UserContactsRequestsJSON   getUserContactsRequests()
      {
        Debug.Assert(flagHasUserContactsRequests);
        return storeUserContactsRequests;
      }

    public bool  hasUserFeedback()
      {
        return flagHasUserFeedback;
      }

    public UserFeedbackJSON   getUserFeedback()
      {
        Debug.Assert(flagHasUserFeedback);
        return storeUserFeedback;
      }

    public bool  hasUserMusicAvailableSources()
      {
        return flagHasUserMusicAvailableSources;
      }

    public UserMusicAvailableSourcesJSON   getUserMusicAvailableSources()
      {
        Debug.Assert(flagHasUserMusicAvailableSources);
        return storeUserMusicAvailableSources;
      }

    public bool  hasUserMusicControls()
      {
        return flagHasUserMusicControls;
      }

    public UserMusicControlsJSON   getUserMusicControls()
      {
        Debug.Assert(flagHasUserMusicControls);
        return storeUserMusicControls;
      }

    public bool  hasUserMusicInfo()
      {
        return flagHasUserMusicInfo;
      }

    public UserMusicInfoJSON   getUserMusicInfo()
      {
        Debug.Assert(flagHasUserMusicInfo);
        return storeUserMusicInfo;
      }

    public bool  hasVideoSearchConfiguration()
      {
        return flagHasVideoSearchConfiguration;
      }

    public VideoSearchRequestInfoConfigurationJSON   getVideoSearchConfiguration()
      {
        Debug.Assert(flagHasVideoSearchConfiguration);
        return storeVideoSearchConfiguration;
      }

    public bool  hasVideoSearchRequestInfoProviders()
      {
        return flagHasVideoSearchRequestInfoProviders;
      }

    public VideoSearchRequestInfoProvidersJSON   getVideoSearchRequestInfoProviders()
      {
        Debug.Assert(flagHasVideoSearchRequestInfoProviders);
        return storeVideoSearchRequestInfoProviders;
      }

    public bool  hasVoiceParameters()
      {
        return flagHasVoiceParameters;
      }

    public VoiceParametersJSON   getVoiceParameters()
      {
        Debug.Assert(flagHasVoiceParameters);
        return storeVoiceParameters;
      }

    public bool  hasWebSearchConfiguration()
      {
        return flagHasWebSearchConfiguration;
      }

    public WebSearchRequestInfoConfigurationJSON   getWebSearchConfiguration()
      {
        Debug.Assert(flagHasWebSearchConfiguration);
        return storeWebSearchConfiguration;
      }

    public bool  hasWebSearchRequestInfoProviders()
      {
        return flagHasWebSearchRequestInfoProviders;
      }

    public WebSearchRequestInfoProvidersJSON   getWebSearchRequestInfoProviders()
      {
        Debug.Assert(flagHasWebSearchRequestInfoProviders);
        return storeWebSearchRequestInfoProviders;
      }

    public bool  hasWhat3WordsCluePhraseNotRequired()
      {
        return flagHasWhat3WordsCluePhraseNotRequired;
      }

    public What3WordsCluePhraseNotRequiredJSON   getWhat3WordsCluePhraseNotRequired()
      {
        Debug.Assert(flagHasWhat3WordsCluePhraseNotRequired);
        return storeWhat3WordsCluePhraseNotRequired;
      }

    public bool  getWhat3WordsCluePhraseNotRequiredValue()
      {
        return getWhat3WordsCluePhraseNotRequired().getValue();
      }

    public bool  hasWhat3WordsStandardGeofenceRadius()
      {
        return flagHasWhat3WordsStandardGeofenceRadius;
      }

    public What3WordsStandardGeofenceRadiusJSON   getWhat3WordsStandardGeofenceRadius()
      {
        Debug.Assert(flagHasWhat3WordsStandardGeofenceRadius);
        return storeWhat3WordsStandardGeofenceRadius;
      }

    public short  getWhat3WordsStandardGeofenceRadiusValue()
      {
        return getWhat3WordsStandardGeofenceRadius().getValue();
      }

    public bool  hasHereApiPlacesFallback()
      {
        return flagHasHereApiPlacesFallback;
      }

    public HereApiPlacesFallbackSettingsJSON   getHereApiPlacesFallback()
      {
        Debug.Assert(flagHasHereApiPlacesFallback);
        return storeHereApiPlacesFallback;
      }

    public bool  hasPaymentsPredeterminedSMSNumber()
      {
        return flagHasPaymentsPredeterminedSMSNumber;
      }

    public PaymentsPredeterminedSMSNumberFieldJSON   getPaymentsPredeterminedSMSNumber()
      {
        Debug.Assert(flagHasPaymentsPredeterminedSMSNumber);
        return storePaymentsPredeterminedSMSNumber;
      }

    public string  getPaymentsPredeterminedSMSNumberValue()
      {
        return getPaymentsPredeterminedSMSNumber().getValue();
      }

    public bool  hasPaymentsPredeterminedPaymentMethod()
      {
        return flagHasPaymentsPredeterminedPaymentMethod;
      }

    public PaymentsPaymentMethodTypeJSON   getPaymentsPredeterminedPaymentMethod()
      {
        Debug.Assert(flagHasPaymentsPredeterminedPaymentMethod);
        return storePaymentsPredeterminedPaymentMethod;
      }

    public PaymentsPaymentMethodTypeJSON.TypeValue  getPaymentsPredeterminedPaymentMethodValue()
      {
        return getPaymentsPredeterminedPaymentMethod().getValue();
      }

    public string  getPaymentsPredeterminedPaymentMethodAsString()
      {
        return getPaymentsPredeterminedPaymentMethod().getValueAsString();
      }

    public bool  hasOrderSource()
      {
        return flagHasOrderSource;
      }

    public PaymentsOrderSourceFieldJSON   getOrderSource()
      {
        Debug.Assert(flagHasOrderSource);
        return storeOrderSource;
      }

    public string  getOrderSourceValue()
      {
        return getOrderSource().getValue();
      }

    public bool  hasOrderPrepDuration()
      {
        return flagHasOrderPrepDuration;
      }

    public PaymentsOrderPrepDurationFieldJSON   getOrderPrepDuration()
      {
        Debug.Assert(flagHasOrderPrepDuration);
        return storeOrderPrepDuration;
      }

    public string  getOrderPrepDurationValue()
      {
        return getOrderPrepDuration().getValue();
      }

    public bool  hasSquareEnvironment()
      {
        return flagHasSquareEnvironment;
      }

    public SquareEnvironmentJSON   getSquareEnvironment()
      {
        Debug.Assert(flagHasSquareEnvironment);
        return storeSquareEnvironment;
      }

    public SquareEnvironmentJSON.TypeValue  getSquareEnvironmentValue()
      {
        return getSquareEnvironment().getValue();
      }

    public string  getSquareEnvironmentAsString()
      {
        return getSquareEnvironment().getValueAsString();
      }

    public bool  hasEnableSquareCustomerInformationPermissions()
      {
        return flagHasEnableSquareCustomerInformationPermissions;
      }

    public EnableSquareCustomerInformationPermissionsJSON   getEnableSquareCustomerInformationPermissions()
      {
        Debug.Assert(flagHasEnableSquareCustomerInformationPermissions);
        return storeEnableSquareCustomerInformationPermissions;
      }

    public bool  getEnableSquareCustomerInformationPermissionsValue()
      {
        return getEnableSquareCustomerInformationPermissions().getValue();
      }

    public bool  hasMessagingConvertPunctuation()
      {
        return flagHasMessagingConvertPunctuation;
      }

    public RequestInfoBooleanFlagJSON   getMessagingConvertPunctuation()
      {
        Debug.Assert(flagHasMessagingConvertPunctuation);
        return storeMessagingConvertPunctuation;
      }

    public bool  getMessagingConvertPunctuationValue()
      {
        return getMessagingConvertPunctuation().getValue();
      }

    public bool  hasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode()
      {
        return flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
      }

    public RequestInfoBooleanFlagJSON   getAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode()
      {
        Debug.Assert(flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode);
        return storeAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
      }

    public bool  getAutoNaviAPIPlacesWildcardPOINameUseWebQueryModeValue()
      {
        return getAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode().getValue();
      }

    public bool  hasStreamPreference()
      {
        return flagHasStreamPreference;
      }

    public StreamPreferenceJSON   getStreamPreference()
      {
        Debug.Assert(flagHasStreamPreference);
        return storeStreamPreference;
      }

    public bool  hasMusicQueriesForceInfoNuggetToPlayCommand()
      {
        return flagHasMusicQueriesForceInfoNuggetToPlayCommand;
      }

    public MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON   getMusicQueriesForceInfoNuggetToPlayCommand()
      {
        Debug.Assert(flagHasMusicQueriesForceInfoNuggetToPlayCommand);
        return storeMusicQueriesForceInfoNuggetToPlayCommand;
      }

    public bool  getMusicQueriesForceInfoNuggetToPlayCommandValue()
      {
        return getMusicQueriesForceInfoNuggetToPlayCommand().getValue();
      }

    public bool  hasMusicQueriesAllowRawTop()
      {
        return flagHasMusicQueriesAllowRawTop;
      }

    public MusicQueriesAllowRawTopRequestInfoFieldJSON   getMusicQueriesAllowRawTop()
      {
        Debug.Assert(flagHasMusicQueriesAllowRawTop);
        return storeMusicQueriesAllowRawTop;
      }

    public bool  getMusicQueriesAllowRawTopValue()
      {
        return getMusicQueriesAllowRawTop().getValue();
      }

    public bool  hasBusinessInformationUploadData()
      {
        return flagHasBusinessInformationUploadData;
      }

    public BusinessInformationUploadDataRequestJSON   getBusinessInformationUploadData()
      {
        Debug.Assert(flagHasBusinessInformationUploadData);
        return storeBusinessInformationUploadData;
      }

    public bool  hasBusinessInformationDataStoreId()
      {
        return flagHasBusinessInformationDataStoreId;
      }

    public BusinessInformationDataStoreIdJSON   getBusinessInformationDataStoreId()
      {
        Debug.Assert(flagHasBusinessInformationDataStoreId);
        return storeBusinessInformationDataStoreId;
      }

    public string  getBusinessInformationDataStoreIdValue()
      {
        return getBusinessInformationDataStoreId().getValue();
      }

    public bool  hasCustomASREnhancementWriteData()
      {
        return flagHasCustomASREnhancementWriteData;
      }

    public CustomASREnhancementDataJSON   getCustomASREnhancementWriteData()
      {
        Debug.Assert(flagHasCustomASREnhancementWriteData);
        return storeCustomASREnhancementWriteData;
      }

    public bool  hasCustomASREnhancementReadData()
      {
        return flagHasCustomASREnhancementReadData;
      }

    public CustomASREnhancementReadDataJSON   getCustomASREnhancementReadData()
      {
        Debug.Assert(flagHasCustomASREnhancementReadData);
        return storeCustomASREnhancementReadData;
      }

    public bool  hasCustomASREnhancementListData()
      {
        return flagHasCustomASREnhancementListData;
      }

    public CustomASREnhancementListDataJSON   getCustomASREnhancementListData()
      {
        Debug.Assert(flagHasCustomASREnhancementListData);
        return storeCustomASREnhancementListData;
      }

    public bool  hasEnabledCustomASREnhancementGrammars()
      {
        return flagHasEnabledCustomASREnhancementGrammars;
      }

    public CustomASREnhancementListJSON   getEnabledCustomASREnhancementGrammars()
      {
        Debug.Assert(flagHasEnabledCustomASREnhancementGrammars);
        return storeEnabledCustomASREnhancementGrammars;
      }

    public bool  hasCustomASREnhancementWeight()
      {
        return flagHasCustomASREnhancementWeight;
      }

    public CustomASREnhancementWeightJSON   getCustomASREnhancementWeight()
      {
        Debug.Assert(flagHasCustomASREnhancementWeight);
        return storeCustomASREnhancementWeight;
      }

    public double  getCustomASREnhancementWeightValue()
      {
        return getCustomASREnhancementWeight().getValue();
      }

    public bool  hasToastEnvironment()
      {
        return flagHasToastEnvironment;
      }

    public ToastEnvironmentJSON   getToastEnvironment()
      {
        Debug.Assert(flagHasToastEnvironment);
        return storeToastEnvironment;
      }

    public ToastEnvironmentJSON.TypeValue  getToastEnvironmentValue()
      {
        return getToastEnvironment().getValue();
      }

    public string  getToastEnvironmentAsString()
      {
        return getToastEnvironment().getValueAsString();
      }

    public bool  hasIntentToExecute()
      {
        return flagHasIntentToExecute;
      }

    public CommandIntentJSON   getIntentToExecute()
      {
        Debug.Assert(flagHasIntentToExecute);
        return storeIntentToExecute;
      }

    public bool  hasUniversalTranslatorSubstitutionList()
      {
        return flagHasUniversalTranslatorSubstitutionList;
      }

    public UniversalTranslatorSubstitutionListJSON   getUniversalTranslatorSubstitutionList()
      {
        Debug.Assert(flagHasUniversalTranslatorSubstitutionList);
        return storeUniversalTranslatorSubstitutionList;
      }

    public bool  hasCustomTopicIdentificationWriteData()
      {
        return flagHasCustomTopicIdentificationWriteData;
      }

    public CustomTopicIdentificationDataJSON   getCustomTopicIdentificationWriteData()
      {
        Debug.Assert(flagHasCustomTopicIdentificationWriteData);
        return storeCustomTopicIdentificationWriteData;
      }


    public virtual int extraRequestInfoComponentCount()
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        return extraKeys.Count;
      }
    public virtual string extraRequestInfoComponentKey(int component_num)
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        Debug.Assert(component_num < extraValues.Count);
        return extraKeys[component_num];
      }
    public virtual JSONValue extraRequestInfoComponentValue(int component_num)
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        Debug.Assert(component_num < extraValues.Count);
        return extraValues[component_num];
      }
    public virtual JSONValue extraRequestInfoLookup(string field_name)
      {
        JSONValue result = (extraIndex.ContainsKey(field_name) ? extraIndex[field_name] : null);
        return result;
      }

    public void setLatitude(double new_value)
      {
        flagHasLatitude = true;
        if (new_value < -90)
            throw new Exception("The value for field Latitude of RequestInfoJSON is less than the lower bound (-90) for that field.");
        if (new_value > 90)
            throw new Exception("The value for field Latitude of RequestInfoJSON is greater than the upper bound (90) for that field.");
        storeLatitude = new_value;
        textStoreLatitude = "";
      }
    public void setLatitudeText(string new_value)
      {
        flagHasLatitude = true;
        if (!(JSONWriter.is_valid_number_format(new_value)))
            throw new Exception("The text value for field Latitude of RequestInfoJSON is not a valid number.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, true, "90", "", false, "2") < 0)
            throw new Exception("The value for field Latitude of RequestInfoJSON is less than the lower bound (-90) for that field.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, false, "90", "", false, "2") > 0)
            throw new Exception("The value for field Latitude of RequestInfoJSON is greater than the upper bound (90) for that field.");
        textStoreLatitude = new_value;
      }
    public void unsetLatitude()
      {
        flagHasLatitude = false;
      }
    public void setLongitude(double new_value)
      {
        flagHasLongitude = true;
        if (new_value < -180)
            throw new Exception("The value for field Longitude of RequestInfoJSON is less than the lower bound (-180) for that field.");
        if (new_value > 180)
            throw new Exception("The value for field Longitude of RequestInfoJSON is greater than the upper bound (180) for that field.");
        storeLongitude = new_value;
        textStoreLongitude = "";
      }
    public void setLongitudeText(string new_value)
      {
        flagHasLongitude = true;
        if (!(JSONWriter.is_valid_number_format(new_value)))
            throw new Exception("The text value for field Longitude of RequestInfoJSON is not a valid number.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, true, "180", "", false, "3") < 0)
            throw new Exception("The value for field Longitude of RequestInfoJSON is less than the lower bound (-180) for that field.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, false, "180", "", false, "3") > 0)
            throw new Exception("The value for field Longitude of RequestInfoJSON is greater than the upper bound (180) for that field.");
        textStoreLongitude = new_value;
      }
    public void unsetLongitude()
      {
        flagHasLongitude = false;
      }
    public void setPositionTime(BigInteger new_value)
      {
        flagHasPositionTime = true;
        storePositionTime = new_value;
      }
    public void unsetPositionTime()
      {
        flagHasPositionTime = false;
      }
    public void setPositionHorizontalAccuracy(double new_value)
      {
        flagHasPositionHorizontalAccuracy = true;
        if (new_value < 0)
            throw new Exception("The value for field PositionHorizontalAccuracy of RequestInfoJSON is less than the lower bound (0) for that field.");
        storePositionHorizontalAccuracy = new_value;
        textStorePositionHorizontalAccuracy = "";
      }
    public void setPositionHorizontalAccuracyText(string new_value)
      {
        flagHasPositionHorizontalAccuracy = true;
        if (!(JSONWriter.is_valid_number_format(new_value)))
            throw new Exception("The text value for field PositionHorizontalAccuracy of RequestInfoJSON is not a valid number.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, false, "", "", false, "") < 0)
            throw new Exception("The value for field PositionHorizontalAccuracy of RequestInfoJSON is less than the lower bound (0) for that field.");
        textStorePositionHorizontalAccuracy = new_value;
      }
    public void unsetPositionHorizontalAccuracy()
      {
        flagHasPositionHorizontalAccuracy = false;
      }
    public void setStreet(string new_value)
      {
        flagHasStreet = true;
        storeStreet = new_value;
      }
    public void unsetStreet()
      {
        flagHasStreet = false;
      }
    public void setCity(string new_value)
      {
        flagHasCity = true;
        storeCity = new_value;
      }
    public void unsetCity()
      {
        flagHasCity = false;
      }
    public void setState(string new_value)
      {
        flagHasState = true;
        storeState = new_value;
      }
    public void unsetState()
      {
        flagHasState = false;
      }
    public void setCountry(string new_value)
      {
        flagHasCountry = true;
        storeCountry = new_value;
      }
    public void unsetCountry()
      {
        flagHasCountry = false;
      }
    public void setRoutePoints(RoutePointsJSON  new_value)
      {
        if (flagHasRoutePoints)
          {
          }
        flagHasRoutePoints = true;
        storeRoutePoints = new_value;
      }
    public void unsetRoutePoints()
      {
        if (flagHasRoutePoints)
          {
          }
        flagHasRoutePoints = false;
      }
    public void setRouteInformation(ClientRouteInformationJSON  new_value)
      {
        if (flagHasRouteInformation)
          {
          }
        flagHasRouteInformation = true;
        storeRouteInformation = new_value;
      }
    public void unsetRouteInformation()
      {
        if (flagHasRouteInformation)
          {
          }
        flagHasRouteInformation = false;
      }
    public void setControllableTrackPlaying(bool new_value)
      {
        flagHasControllableTrackPlaying = true;
        storeControllableTrackPlaying = new_value;
      }
    public void unsetControllableTrackPlaying()
      {
        flagHasControllableTrackPlaying = false;
      }
    public void setTimeStamp(BigInteger new_value)
      {
        flagHasTimeStamp = true;
        storeTimeStamp = new_value;
      }
    public void unsetTimeStamp()
      {
        flagHasTimeStamp = false;
      }
    public void setTimeZone(string new_value)
      {
        flagHasTimeZone = true;
        storeTimeZone = new_value;
      }
    public void unsetTimeZone()
      {
        flagHasTimeZone = false;
      }
    public void setConversationState(ConversationStateJSON  new_value)
      {
        if (flagHasConversationState)
          {
          }
        flagHasConversationState = true;
        storeConversationState = new_value;
      }
    public void unsetConversationState()
      {
        if (flagHasConversationState)
          {
          }
        flagHasConversationState = false;
      }
    public void setClientState(ClientStateJSON  new_value)
      {
        if (flagHasClientState)
          {
          }
        flagHasClientState = true;
        storeClientState = new_value;
      }
    public void unsetClientState()
      {
        if (flagHasClientState)
          {
          }
        flagHasClientState = false;
      }
    public void setDeviceInfo(TypeDeviceInfoJSON  new_value)
      {
        if (flagHasDeviceInfo)
          {
          }
        flagHasDeviceInfo = true;
        storeDeviceInfo = new_value;
      }
    public void unsetDeviceInfo()
      {
        if (flagHasDeviceInfo)
          {
          }
        flagHasDeviceInfo = false;
      }
    public void setSendBack(JSONValue  new_value)
      {
        if (flagHasSendBack)
          {
          }
        flagHasSendBack = true;
        storeSendBack = new_value;
      }
    public void unsetSendBack()
      {
        if (flagHasSendBack)
          {
          }
        flagHasSendBack = false;
      }
    public void initPreferredImageSize()
      {
        flagHasPreferredImageSize = true;
        storePreferredImageSize.Clear();
      }
    public void appendPreferredImageSize(BigInteger to_append)
      {
        if (!flagHasPreferredImageSize)
          {
            flagHasPreferredImageSize = true;
            storePreferredImageSize.Clear();
          }
        Debug.Assert(flagHasPreferredImageSize);
        storePreferredImageSize.Add(to_append);
      }
    public void unsetPreferredImageSize()
      {
        flagHasPreferredImageSize = false;
        storePreferredImageSize.Clear();
      }
    public void setInputLanguageEnglishName(string new_value)
      {
        flagHasInputLanguageEnglishName = true;
        storeInputLanguageEnglishName = new_value;
      }
    public void unsetInputLanguageEnglishName()
      {
        flagHasInputLanguageEnglishName = false;
      }
    public void setInputLanguageNativeName(string new_value)
      {
        flagHasInputLanguageNativeName = true;
        storeInputLanguageNativeName = new_value;
      }
    public void unsetInputLanguageNativeName()
      {
        flagHasInputLanguageNativeName = false;
      }
    public void setInputLanguageIETFTag(string new_value)
      {
        flagHasInputLanguageIETFTag = true;
        storeInputLanguageIETFTag = new_value;
      }
    public void unsetInputLanguageIETFTag()
      {
        flagHasInputLanguageIETFTag = false;
      }
    public void setOutputLanguageEnglishName(string new_value)
      {
        flagHasOutputLanguageEnglishName = true;
        storeOutputLanguageEnglishName = new_value;
      }
    public void unsetOutputLanguageEnglishName()
      {
        flagHasOutputLanguageEnglishName = false;
      }
    public void setOutputLanguageNativeName(string new_value)
      {
        flagHasOutputLanguageNativeName = true;
        storeOutputLanguageNativeName = new_value;
      }
    public void unsetOutputLanguageNativeName()
      {
        flagHasOutputLanguageNativeName = false;
      }
    public void setOutputLanguageIETFTag(string new_value)
      {
        flagHasOutputLanguageIETFTag = true;
        storeOutputLanguageIETFTag = new_value;
      }
    public void unsetOutputLanguageIETFTag()
      {
        flagHasOutputLanguageIETFTag = false;
      }
    public void setResultVersionAccepted(double new_value)
      {
        flagHasResultVersionAccepted = true;
        if (new_value < 1)
            throw new Exception("The value for field ResultVersionAccepted of RequestInfoJSON is less than the lower bound (1) for that field.");
        storeResultVersionAccepted = new_value;
        textStoreResultVersionAccepted = "";
      }
    public void setResultVersionAcceptedText(string new_value)
      {
        flagHasResultVersionAccepted = true;
        if (!(JSONWriter.is_valid_number_format(new_value)))
            throw new Exception("The text value for field ResultVersionAccepted of RequestInfoJSON is not a valid number.");
        if (JSONWriter.compare_number_text_to_repeating_fraction(new_value, false, "1", "", false, "1") < 0)
            throw new Exception("The value for field ResultVersionAccepted of RequestInfoJSON is less than the lower bound (1) for that field.");
        textStoreResultVersionAccepted = new_value;
      }
    public void unsetResultVersionAccepted()
      {
        flagHasResultVersionAccepted = false;
      }
    public void setUnitPreference(TypeUnitPreference new_value)
      {
        flagHasUnitPreference = true;
        storeUnitPreference = new_value;
      }
    public void setUnitPreference(string chars)
      {
        setUnitPreference(stringToUnitPreference(chars));
      }
    public void unsetUnitPreference()
      {
        flagHasUnitPreference = false;
      }
    public void setDefaultTimeFormat24Hours(bool new_value)
      {
        flagHasDefaultTimeFormat24Hours = true;
        storeDefaultTimeFormat24Hours = new_value;
      }
    public void unsetDefaultTimeFormat24Hours()
      {
        flagHasDefaultTimeFormat24Hours = false;
      }
    public void setClientID(string new_value)
      {
        flagHasClientID = true;
        storeClientID = new_value;
      }
    public void unsetClientID()
      {
        flagHasClientID = false;
      }
    public void setClientVersion(TypeClientVersion new_value)
      {
        flagHasClientVersion = true;
        switch (new_value.key)
          {
            case 0:
                break;
            case 1:
                if (new_value.choice1 < 0)
                    throw new Exception("The value for case 1 of field ClientVersion of RequestInfoJSON is less than the lower bound (0) for that field.");
                break;
            default:
                Debug.Assert(false);
                break;
          }
        storeClientVersion = new_value;
      }
    public void unsetClientVersion()
      {
        flagHasClientVersion = false;
      }
    public void setDeviceID(string new_value)
      {
        flagHasDeviceID = true;
        storeDeviceID = new_value;
      }
    public void unsetDeviceID()
      {
        flagHasDeviceID = false;
      }
    public void setSDK(string new_value)
      {
        flagHasSDK = true;
        storeSDK = new_value;
      }
    public void unsetSDK()
      {
        flagHasSDK = false;
      }
    public void setSDKInfo(JSONObjectValue  new_value)
      {
        if (flagHasSDKInfo)
          {
          }
        flagHasSDKInfo = true;
        storeSDKInfo = new_value;
      }
    public void unsetSDKInfo()
      {
        if (flagHasSDKInfo)
          {
          }
        flagHasSDKInfo = false;
      }
    public void setFirstPersonSelf(string new_value)
      {
        flagHasFirstPersonSelf = true;
        storeFirstPersonSelf = new_value;
      }
    public void unsetFirstPersonSelf()
      {
        flagHasFirstPersonSelf = false;
      }
    public void setFirstPersonSelfSpoken(string new_value)
      {
        flagHasFirstPersonSelfSpoken = true;
        storeFirstPersonSelfSpoken = new_value;
      }
    public void unsetFirstPersonSelfSpoken()
      {
        flagHasFirstPersonSelfSpoken = false;
      }
    public void initSecondPersonSelf()
      {
        flagHasSecondPersonSelf = true;
        storeSecondPersonSelf.Clear();
      }
    public void appendSecondPersonSelf(string to_append)
      {
        if (!flagHasSecondPersonSelf)
          {
            flagHasSecondPersonSelf = true;
            storeSecondPersonSelf.Clear();
          }
        Debug.Assert(flagHasSecondPersonSelf);
        storeSecondPersonSelf.Add(to_append);
      }
    public void unsetSecondPersonSelf()
      {
        flagHasSecondPersonSelf = false;
        storeSecondPersonSelf.Clear();
      }
    public void initSecondPersonSelfSpoken()
      {
        flagHasSecondPersonSelfSpoken = true;
        storeSecondPersonSelfSpoken.Clear();
      }
    public void appendSecondPersonSelfSpoken(string to_append)
      {
        if (!flagHasSecondPersonSelfSpoken)
          {
            flagHasSecondPersonSelfSpoken = true;
            storeSecondPersonSelfSpoken.Clear();
          }
        Debug.Assert(flagHasSecondPersonSelfSpoken);
        storeSecondPersonSelfSpoken.Add(to_append);
      }
    public void unsetSecondPersonSelfSpoken()
      {
        flagHasSecondPersonSelfSpoken = false;
        storeSecondPersonSelfSpoken.Clear();
      }
    public void setWakeUpPhraseIncludedInAudio(bool new_value)
      {
        flagHasWakeUpPhraseIncludedInAudio = true;
        storeWakeUpPhraseIncludedInAudio = new_value;
      }
    public void unsetWakeUpPhraseIncludedInAudio()
      {
        flagHasWakeUpPhraseIncludedInAudio = false;
      }
    public void setInitialSecondsOfAudioToIgnore(double new_value)
      {
        flagHasInitialSecondsOfAudioToIgnore = true;
        storeInitialSecondsOfAudioToIgnore = new_value;
        textStoreInitialSecondsOfAudioToIgnore = "";
      }
    public void setInitialSecondsOfAudioToIgnoreText(string new_value)
      {
        flagHasInitialSecondsOfAudioToIgnore = true;
        if (!(JSONWriter.is_valid_number_format(new_value)))
            throw new Exception("The text value for field InitialSecondsOfAudioToIgnore of RequestInfoJSON is not a valid number.");
        textStoreInitialSecondsOfAudioToIgnore = new_value;
      }
    public void unsetInitialSecondsOfAudioToIgnore()
      {
        flagHasInitialSecondsOfAudioToIgnore = false;
      }
    public void setWakeUpPattern(string new_value)
      {
        flagHasWakeUpPattern = true;
        storeWakeUpPattern = new_value;
      }
    public void unsetWakeUpPattern()
      {
        flagHasWakeUpPattern = false;
      }
    public void setUserID(string new_value)
      {
        flagHasUserID = true;
        storeUserID = new_value;
      }
    public void unsetUserID()
      {
        flagHasUserID = false;
      }
    public void setRequestID(string new_value)
      {
        flagHasRequestID = true;
        storeRequestID = new_value;
      }
    public void unsetRequestID()
      {
        flagHasRequestID = false;
      }
    public void setSessionID(string new_value)
      {
        flagHasSessionID = true;
        storeSessionID = new_value;
      }
    public void unsetSessionID()
      {
        flagHasSessionID = false;
      }
    public void setDomains(DomainsJSON  new_value)
      {
        if (flagHasDomains)
          {
          }
        flagHasDomains = true;
        storeDomains = new_value;
      }
    public void unsetDomains()
      {
        if (flagHasDomains)
          {
          }
        flagHasDomains = false;
      }
    public void setResultUpdateAllowed(bool new_value)
      {
        flagHasResultUpdateAllowed = true;
        storeResultUpdateAllowed = new_value;
      }
    public void unsetResultUpdateAllowed()
      {
        flagHasResultUpdateAllowed = false;
      }
    public void setPartialTranscriptsDesired(bool new_value)
      {
        flagHasPartialTranscriptsDesired = true;
        storePartialTranscriptsDesired = new_value;
      }
    public void unsetPartialTranscriptsDesired()
      {
        flagHasPartialTranscriptsDesired = false;
      }
    public void setMinResults(BigInteger new_value)
      {
        flagHasMinResults = true;
        if (new_value < 1)
            throw new Exception("The value for field MinResults of RequestInfoJSON is less than the lower bound (1) for that field.");
        storeMinResults = new_value;
      }
    public void unsetMinResults()
      {
        flagHasMinResults = false;
      }
    public void setMaxResults(BigInteger new_value)
      {
        flagHasMaxResults = true;
        if (new_value < 1)
            throw new Exception("The value for field MaxResults of RequestInfoJSON is less than the lower bound (1) for that field.");
        storeMaxResults = new_value;
      }
    public void unsetMaxResults()
      {
        flagHasMaxResults = false;
      }
    public void setObjectByteCountPrefix(bool new_value)
      {
        flagHasObjectByteCountPrefix = true;
        storeObjectByteCountPrefix = new_value;
      }
    public void unsetObjectByteCountPrefix()
      {
        flagHasObjectByteCountPrefix = false;
      }
    public void setProfanityFilter(TypeProfanityFilter new_value)
      {
        flagHasProfanityFilter = true;
        storeProfanityFilter = new_value;
      }
    public void setProfanityFilter(string chars)
      {
        setProfanityFilter(stringToProfanityFilter(chars));
      }
    public void unsetProfanityFilter()
      {
        flagHasProfanityFilter = false;
      }
    public void initClientMatches()
      {
        if (flagHasClientMatches)
          {
            for (int num1 = 0; num1 < storeClientMatches.Count; ++num1)
              {
              }
          }
        flagHasClientMatches = true;
        storeClientMatches.Clear();
      }
    public void appendClientMatches(ClientMatchJSON  to_append)
      {
        if (!flagHasClientMatches)
          {
            flagHasClientMatches = true;
            storeClientMatches.Clear();
          }
        Debug.Assert(flagHasClientMatches);
        storeClientMatches.Add(to_append);
      }
    public void unsetClientMatches()
      {
        if (flagHasClientMatches)
          {
            for (int num2 = 0; num2 < storeClientMatches.Count; ++num2)
              {
              }
          }
        flagHasClientMatches = false;
        storeClientMatches.Clear();
      }
    public void setClientMatchesOnly(bool new_value)
      {
        flagHasClientMatchesOnly = true;
        storeClientMatchesOnly = new_value;
      }
    public void unsetClientMatchesOnly()
      {
        flagHasClientMatchesOnly = false;
      }
    public void setPagination(PaginationJSON  new_value)
      {
        if (flagHasPagination)
          {
          }
        flagHasPagination = true;
        storePagination = new_value;
      }
    public void unsetPagination()
      {
        if (flagHasPagination)
          {
          }
        flagHasPagination = false;
      }
    public void setResponseAudioVoice(string new_value)
      {
        flagHasResponseAudioVoice = true;
        storeResponseAudioVoice = new_value;
      }
    public void unsetResponseAudioVoice()
      {
        flagHasResponseAudioVoice = false;
      }
    public void setResponseAudioShortOrLong(TypeResponseAudioShortOrLong new_value)
      {
        flagHasResponseAudioShortOrLong = true;
        storeResponseAudioShortOrLong = new_value;
      }
    public void setResponseAudioShortOrLong(string chars)
      {
        setResponseAudioShortOrLong(stringToResponseAudioShortOrLong(chars));
      }
    public void unsetResponseAudioShortOrLong()
      {
        flagHasResponseAudioShortOrLong = false;
      }
    public void initResponseAudioAcceptedEncodings()
      {
        flagHasResponseAudioAcceptedEncodings = true;
        storeResponseAudioAcceptedEncodings.Clear();
      }
    public void appendResponseAudioAcceptedEncodings(TypeResponseAudioAcceptedEncodings to_append)
      {
        if (!flagHasResponseAudioAcceptedEncodings)
          {
            flagHasResponseAudioAcceptedEncodings = true;
            storeResponseAudioAcceptedEncodings.Clear();
          }
        Debug.Assert(flagHasResponseAudioAcceptedEncodings);
        storeResponseAudioAcceptedEncodings.Add(to_append);
      }
    public void appendResponseAudioAcceptedEncodings(string chars)
      {
        TypeResponseAudioAcceptedEncodingsKnownValues known = stringToResponseAudioAcceptedEncodings(chars);
        TypeResponseAudioAcceptedEncodings new_value = new TypeResponseAudioAcceptedEncodings();
        if (known == TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        appendResponseAudioAcceptedEncodings(new_value);
      }
    public void appendResponseAudioAcceptedEncodings(TypeResponseAudioAcceptedEncodingsKnownValues new_value)
      {
        TypeResponseAudioAcceptedEncodings new_full_value = new TypeResponseAudioAcceptedEncodings();
        Debug.Assert(new_value != TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings__none);
        new_full_value.in_known_list = true;
        new_full_value.list_value = new_value;
        appendResponseAudioAcceptedEncodings(new_full_value);
      }
    public void unsetResponseAudioAcceptedEncodings()
      {
        flagHasResponseAudioAcceptedEncodings = false;
        storeResponseAudioAcceptedEncodings.Clear();
      }
    public void setReturnResponseAudioAsURL(bool new_value)
      {
        flagHasReturnResponseAudioAsURL = true;
        storeReturnResponseAudioAsURL = new_value;
      }
    public void unsetReturnResponseAudioAsURL()
      {
        flagHasReturnResponseAudioAsURL = false;
      }
    public void setVoiceActivityDetection(VoiceActivityDetectionJSON  new_value)
      {
        if (flagHasVoiceActivityDetection)
          {
          }
        flagHasVoiceActivityDetection = true;
        storeVoiceActivityDetection = new_value;
      }
    public void unsetVoiceActivityDetection()
      {
        if (flagHasVoiceActivityDetection)
          {
          }
        flagHasVoiceActivityDetection = false;
      }
    public void setServerDeterminesEndOfAudio(bool new_value)
      {
        flagHasServerDeterminesEndOfAudio = true;
        storeServerDeterminesEndOfAudio = new_value;
      }
    public void unsetServerDeterminesEndOfAudio()
      {
        flagHasServerDeterminesEndOfAudio = false;
      }
    public void setIntentOnly(bool new_value)
      {
        flagHasIntentOnly = true;
        storeIntentOnly = new_value;
      }
    public void unsetIntentOnly()
      {
        flagHasIntentOnly = false;
      }
    public void setDisableSpellCorrection(bool new_value)
      {
        flagHasDisableSpellCorrection = true;
        storeDisableSpellCorrection = new_value;
      }
    public void unsetDisableSpellCorrection()
      {
        flagHasDisableSpellCorrection = false;
      }
    public void setUseContactData(bool new_value)
      {
        flagHasUseContactData = true;
        storeUseContactData = new_value;
      }
    public void unsetUseContactData()
      {
        flagHasUseContactData = false;
      }
    public void setUseClientTime(bool new_value)
      {
        flagHasUseClientTime = true;
        storeUseClientTime = new_value;
      }
    public void unsetUseClientTime()
      {
        flagHasUseClientTime = false;
      }
    public void setForceConversationStateTime(BigInteger new_value)
      {
        flagHasForceConversationStateTime = true;
        storeForceConversationStateTime = new_value;
      }
    public void unsetForceConversationStateTime()
      {
        flagHasForceConversationStateTime = false;
      }
    public void setOutputLatticeSize(BigInteger new_value)
      {
        flagHasOutputLatticeSize = true;
        if (new_value < 0)
            throw new Exception("The value for field OutputLatticeSize of RequestInfoJSON is less than the lower bound (0) for that field.");
        storeOutputLatticeSize = new_value;
      }
    public void unsetOutputLatticeSize()
      {
        flagHasOutputLatticeSize = false;
      }
    public void setMatchingMutations(MatchingMutationsJSON  new_value)
      {
        if (flagHasMatchingMutations)
          {
          }
        flagHasMatchingMutations = true;
        storeMatchingMutations = new_value;
      }
    public void unsetMatchingMutations()
      {
        if (flagHasMatchingMutations)
          {
          }
        flagHasMatchingMutations = false;
      }
    public void setUseFormattedTranscriptionAsDefault(bool new_value)
      {
        flagHasUseFormattedTranscriptionAsDefault = true;
        storeUseFormattedTranscriptionAsDefault = new_value;
      }
    public void unsetUseFormattedTranscriptionAsDefault()
      {
        flagHasUseFormattedTranscriptionAsDefault = false;
      }
    public void setResponseRanking(ResponseRankingJSON  new_value)
      {
        if (flagHasResponseRanking)
          {
          }
        flagHasResponseRanking = true;
        storeResponseRanking = new_value;
      }
    public void unsetResponseRanking()
      {
        if (flagHasResponseRanking)
          {
          }
        flagHasResponseRanking = false;
      }
    public void setAcapelaVoiceParameters(AcapelaVoiceParametersJSON  new_value)
      {
        if (flagHasAcapelaVoiceParameters)
          {
          }
        flagHasAcapelaVoiceParameters = true;
        storeAcapelaVoiceParameters = new_value;
      }
    public void unsetAcapelaVoiceParameters()
      {
        if (flagHasAcapelaVoiceParameters)
          {
          }
        flagHasAcapelaVoiceParameters = false;
      }
    public void setAllowPopularNameContactMatches(AllowPopularNameContactMatchesJSON  new_value)
      {
        if (flagHasAllowPopularNameContactMatches)
          {
          }
        flagHasAllowPopularNameContactMatches = true;
        storeAllowPopularNameContactMatches = new_value;
      }
    public void setAllowPopularNameContactMatches(bool new_value)
      {
        setAllowPopularNameContactMatches(new AllowPopularNameContactMatchesJSON(new_value));
      }
    public void unsetAllowPopularNameContactMatches()
      {
        if (flagHasAllowPopularNameContactMatches)
          {
          }
        flagHasAllowPopularNameContactMatches = false;
      }
    public void setAlwaysFetchCurrentConditionsData(AlwaysFetchCurrentConditionsDataJSON  new_value)
      {
        if (flagHasAlwaysFetchCurrentConditionsData)
          {
          }
        flagHasAlwaysFetchCurrentConditionsData = true;
        storeAlwaysFetchCurrentConditionsData = new_value;
      }
    public void setAlwaysFetchCurrentConditionsData(bool new_value)
      {
        setAlwaysFetchCurrentConditionsData(new AlwaysFetchCurrentConditionsDataJSON(new_value));
      }
    public void unsetAlwaysFetchCurrentConditionsData()
      {
        if (flagHasAlwaysFetchCurrentConditionsData)
          {
          }
        flagHasAlwaysFetchCurrentConditionsData = false;
      }
    public void setAlwaysFetchHourlyForecastData(AlwaysFetchHourlyForecastDataJSON  new_value)
      {
        if (flagHasAlwaysFetchHourlyForecastData)
          {
          }
        flagHasAlwaysFetchHourlyForecastData = true;
        storeAlwaysFetchHourlyForecastData = new_value;
      }
    public void setAlwaysFetchHourlyForecastData(bool new_value)
      {
        setAlwaysFetchHourlyForecastData(new AlwaysFetchHourlyForecastDataJSON(new_value));
      }
    public void unsetAlwaysFetchHourlyForecastData()
      {
        if (flagHasAlwaysFetchHourlyForecastData)
          {
          }
        flagHasAlwaysFetchHourlyForecastData = false;
      }
    public void setArrivalTime(DateAndOrTimeJSON  new_value)
      {
        if (flagHasArrivalTime)
          {
          }
        flagHasArrivalTime = true;
        storeArrivalTime = new_value;
      }
    public void unsetArrivalTime()
      {
        if (flagHasArrivalTime)
          {
          }
        flagHasArrivalTime = false;
      }
    public void setAvantiMachineState(AvantiMachineStateJSON  new_value)
      {
        if (flagHasAvantiMachineState)
          {
          }
        flagHasAvantiMachineState = true;
        storeAvantiMachineState = new_value;
      }
    public void setAvantiMachineState(AvantiMachineStateJSON.TypeValue new_value)
      {
        setAvantiMachineState(new AvantiMachineStateJSON(new_value));
      }
    public void setAvantiMachineState(string chars)
      {
        setAvantiMachineState(new AvantiMachineStateJSON(chars));
      }
    public void unsetAvantiMachineState()
      {
        if (flagHasAvantiMachineState)
          {
          }
        flagHasAvantiMachineState = false;
      }
    public void setBingAdExtensions(BingRequestInfoAdExtensionsJSON  new_value)
      {
        if (flagHasBingAdExtensions)
          {
          }
        flagHasBingAdExtensions = true;
        storeBingAdExtensions = new_value;
      }
    public void unsetBingAdExtensions()
      {
        if (flagHasBingAdExtensions)
          {
          }
        flagHasBingAdExtensions = false;
      }
    public void setBunnIsConfirmationRequired(BunnIsConfirmationRequiredJSON  new_value)
      {
        if (flagHasBunnIsConfirmationRequired)
          {
          }
        flagHasBunnIsConfirmationRequired = true;
        storeBunnIsConfirmationRequired = new_value;
      }
    public void setBunnIsConfirmationRequired(bool new_value)
      {
        setBunnIsConfirmationRequired(new BunnIsConfirmationRequiredJSON(new_value));
      }
    public void unsetBunnIsConfirmationRequired()
      {
        if (flagHasBunnIsConfirmationRequired)
          {
          }
        flagHasBunnIsConfirmationRequired = false;
      }
    public void setBunnMachineState(BunnMachineStateJSON  new_value)
      {
        if (flagHasBunnMachineState)
          {
          }
        flagHasBunnMachineState = true;
        storeBunnMachineState = new_value;
      }
    public void unsetBunnMachineState()
      {
        if (flagHasBunnMachineState)
          {
          }
        flagHasBunnMachineState = false;
      }
    public void setCalendarDataSynchronization(CalendarDataSynchronizationRequestInfoJSON  new_value)
      {
        if (flagHasCalendarDataSynchronization)
          {
          }
        flagHasCalendarDataSynchronization = true;
        storeCalendarDataSynchronization = new_value;
      }
    public void unsetCalendarDataSynchronization()
      {
        if (flagHasCalendarDataSynchronization)
          {
          }
        flagHasCalendarDataSynchronization = false;
      }
    public void setCallPermissions(CallPermissionsJSON  new_value)
      {
        if (flagHasCallPermissions)
          {
          }
        flagHasCallPermissions = true;
        storeCallPermissions = new_value;
      }
    public void unsetCallPermissions()
      {
        if (flagHasCallPermissions)
          {
          }
        flagHasCallPermissions = false;
      }
    public void setCarControlClimateClientConfiguration(CarControlClimateClientConfigurationJSON  new_value)
      {
        if (flagHasCarControlClimateClientConfiguration)
          {
          }
        flagHasCarControlClimateClientConfiguration = true;
        storeCarControlClimateClientConfiguration = new_value;
      }
    public void unsetCarControlClimateClientConfiguration()
      {
        if (flagHasCarControlClimateClientConfiguration)
          {
          }
        flagHasCarControlClimateClientConfiguration = false;
      }
    public void setCarControlClimateTemperatureConfig(CarControlClimateTemperatureConfigJSON  new_value)
      {
        if (flagHasCarControlClimateTemperatureConfig)
          {
          }
        flagHasCarControlClimateTemperatureConfig = true;
        storeCarControlClimateTemperatureConfig = new_value;
      }
    public void unsetCarControlClimateTemperatureConfig()
      {
        if (flagHasCarControlClimateTemperatureConfig)
          {
          }
        flagHasCarControlClimateTemperatureConfig = false;
      }
    public void setCarManualModel(CarManualModelJSON  new_value)
      {
        if (flagHasCarManualModel)
          {
          }
        flagHasCarManualModel = true;
        storeCarManualModel = new_value;
      }
    public void unsetCarManualModel()
      {
        if (flagHasCarManualModel)
          {
          }
        flagHasCarManualModel = false;
      }
    public void setCarManualNormalizedQueryToSet(CarManualNormalizedQueryJSON  new_value)
      {
        if (flagHasCarManualNormalizedQueryToSet)
          {
          }
        flagHasCarManualNormalizedQueryToSet = true;
        storeCarManualNormalizedQueryToSet = new_value;
      }
    public void setCarManualNormalizedQueryToSet(string new_value)
      {
        setCarManualNormalizedQueryToSet(new CarManualNormalizedQueryJSON(new_value));
      }
    public void unsetCarManualNormalizedQueryToSet()
      {
        if (flagHasCarManualNormalizedQueryToSet)
          {
          }
        flagHasCarManualNormalizedQueryToSet = false;
      }
    public void setCarManualResponseToSet(DynamicResponseJSON  new_value)
      {
        if (flagHasCarManualResponseToSet)
          {
          }
        flagHasCarManualResponseToSet = true;
        storeCarManualResponseToSet = new_value;
      }
    public void unsetCarManualResponseToSet()
      {
        if (flagHasCarManualResponseToSet)
          {
          }
        flagHasCarManualResponseToSet = false;
      }
    public void setCarStatus(CarStatusJSON  new_value)
      {
        if (flagHasCarStatus)
          {
          }
        flagHasCarStatus = true;
        storeCarStatus = new_value;
      }
    public void unsetCarStatus()
      {
        if (flagHasCarStatus)
          {
          }
        flagHasCarStatus = false;
      }
    public void setChargingClientState(ChargingClientStateJSON  new_value)
      {
        if (flagHasChargingClientState)
          {
          }
        flagHasChargingClientState = true;
        storeChargingClientState = new_value;
      }
    public void unsetChargingClientState()
      {
        if (flagHasChargingClientState)
          {
          }
        flagHasChargingClientState = false;
      }
    public void setClientListMatches(ClientListMatchesJSON  new_value)
      {
        if (flagHasClientListMatches)
          {
          }
        flagHasClientListMatches = true;
        storeClientListMatches = new_value;
      }
    public void unsetClientListMatches()
      {
        if (flagHasClientListMatches)
          {
          }
        flagHasClientListMatches = false;
      }
    public void setCollateMusicEntities(CollateMusicEntitiesJSON  new_value)
      {
        if (flagHasCollateMusicEntities)
          {
          }
        flagHasCollateMusicEntities = true;
        storeCollateMusicEntities = new_value;
      }
    public void setCollateMusicEntities(bool new_value)
      {
        setCollateMusicEntities(new CollateMusicEntitiesJSON(new_value));
      }
    public void unsetCollateMusicEntities()
      {
        if (flagHasCollateMusicEntities)
          {
          }
        flagHasCollateMusicEntities = false;
      }
    public void setConnectedToThirdPartyMusicApp(ConnectedToThirdPartyMusicAppJSON  new_value)
      {
        if (flagHasConnectedToThirdPartyMusicApp)
          {
          }
        flagHasConnectedToThirdPartyMusicApp = true;
        storeConnectedToThirdPartyMusicApp = new_value;
      }
    public void setConnectedToThirdPartyMusicApp(bool new_value)
      {
        setConnectedToThirdPartyMusicApp(new ConnectedToThirdPartyMusicAppJSON(new_value));
      }
    public void unsetConnectedToThirdPartyMusicApp()
      {
        if (flagHasConnectedToThirdPartyMusicApp)
          {
          }
        flagHasConnectedToThirdPartyMusicApp = false;
      }
    public void setContactQueryExclusions(ContactQueryExclusionsJSON  new_value)
      {
        if (flagHasContactQueryExclusions)
          {
          }
        flagHasContactQueryExclusions = true;
        storeContactQueryExclusions = new_value;
      }
    public void unsetContactQueryExclusions()
      {
        if (flagHasContactQueryExclusions)
          {
          }
        flagHasContactQueryExclusions = false;
      }
    public void setPhoneCommandConfiguration(PhoneCommandConfigurationJSON  new_value)
      {
        if (flagHasPhoneCommandConfiguration)
          {
          }
        flagHasPhoneCommandConfiguration = true;
        storePhoneCommandConfiguration = new_value;
      }
    public void unsetPhoneCommandConfiguration()
      {
        if (flagHasPhoneCommandConfiguration)
          {
          }
        flagHasPhoneCommandConfiguration = false;
      }
    public void setConvertToNewInformationNuggets(ConvertToNewInformationNuggetsJSON  new_value)
      {
        if (flagHasConvertToNewInformationNuggets)
          {
          }
        flagHasConvertToNewInformationNuggets = true;
        storeConvertToNewInformationNuggets = new_value;
      }
    public void setConvertToNewInformationNuggets(bool new_value)
      {
        setConvertToNewInformationNuggets(new ConvertToNewInformationNuggetsJSON(new_value));
      }
    public void unsetConvertToNewInformationNuggets()
      {
        if (flagHasConvertToNewInformationNuggets)
          {
          }
        flagHasConvertToNewInformationNuggets = false;
      }
    public void setCustomSpeechRecognitionPatternsGroupListData(CustomSpeechRecognitionPatternsGroupListDataJSON  new_value)
      {
        if (flagHasCustomSpeechRecognitionPatternsGroupListData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsGroupListData = true;
        storeCustomSpeechRecognitionPatternsGroupListData = new_value;
      }
    public void unsetCustomSpeechRecognitionPatternsGroupListData()
      {
        if (flagHasCustomSpeechRecognitionPatternsGroupListData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsGroupListData = false;
      }
    public void setCustomSpeechRecognitionPatternsReadData(CustomSpeechRecognitionPatternsReadDataJSON  new_value)
      {
        if (flagHasCustomSpeechRecognitionPatternsReadData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsReadData = true;
        storeCustomSpeechRecognitionPatternsReadData = new_value;
      }
    public void unsetCustomSpeechRecognitionPatternsReadData()
      {
        if (flagHasCustomSpeechRecognitionPatternsReadData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsReadData = false;
      }
    public void setCustomSpeechRecognitionPatternsWeight(CustomSpeechRecognitionPatternsWeightJSON  new_value)
      {
        if (flagHasCustomSpeechRecognitionPatternsWeight)
          {
          }
        flagHasCustomSpeechRecognitionPatternsWeight = true;
        storeCustomSpeechRecognitionPatternsWeight = new_value;
      }
    public void setCustomSpeechRecognitionPatternsWeight(double new_value)
      {
        setCustomSpeechRecognitionPatternsWeight(new CustomSpeechRecognitionPatternsWeightJSON(new_value));
      }
    public void unsetCustomSpeechRecognitionPatternsWeight()
      {
        if (flagHasCustomSpeechRecognitionPatternsWeight)
          {
          }
        flagHasCustomSpeechRecognitionPatternsWeight = false;
      }
    public void setCustomSpeechRecognitionPatternsWriteData(CustomSpeechRecognitionPatternsDataJSON  new_value)
      {
        if (flagHasCustomSpeechRecognitionPatternsWriteData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsWriteData = true;
        storeCustomSpeechRecognitionPatternsWriteData = new_value;
      }
    public void unsetCustomSpeechRecognitionPatternsWriteData()
      {
        if (flagHasCustomSpeechRecognitionPatternsWriteData)
          {
          }
        flagHasCustomSpeechRecognitionPatternsWriteData = false;
      }
    public void setDeleteUserMemoryLocation(DeleteUserMemoryLocationJSON  new_value)
      {
        if (flagHasDeleteUserMemoryLocation)
          {
          }
        flagHasDeleteUserMemoryLocation = true;
        storeDeleteUserMemoryLocation = new_value;
      }
    public void unsetDeleteUserMemoryLocation()
      {
        if (flagHasDeleteUserMemoryLocation)
          {
          }
        flagHasDeleteUserMemoryLocation = false;
      }
    public void setDisableMusicPlayerListPositionSpecification(DisableListPositionSpecificationJSON  new_value)
      {
        if (flagHasDisableMusicPlayerListPositionSpecification)
          {
          }
        flagHasDisableMusicPlayerListPositionSpecification = true;
        storeDisableMusicPlayerListPositionSpecification = new_value;
      }
    public void setDisableMusicPlayerListPositionSpecification(bool new_value)
      {
        setDisableMusicPlayerListPositionSpecification(new DisableListPositionSpecificationJSON(new_value));
      }
    public void unsetDisableMusicPlayerListPositionSpecification()
      {
        if (flagHasDisableMusicPlayerListPositionSpecification)
          {
          }
        flagHasDisableMusicPlayerListPositionSpecification = false;
      }
    public void setDisableMusicSearchListPositionSpecification(DisableListPositionSpecificationJSON  new_value)
      {
        if (flagHasDisableMusicSearchListPositionSpecification)
          {
          }
        flagHasDisableMusicSearchListPositionSpecification = true;
        storeDisableMusicSearchListPositionSpecification = new_value;
      }
    public void setDisableMusicSearchListPositionSpecification(bool new_value)
      {
        setDisableMusicSearchListPositionSpecification(new DisableListPositionSpecificationJSON(new_value));
      }
    public void unsetDisableMusicSearchListPositionSpecification()
      {
        if (flagHasDisableMusicSearchListPositionSpecification)
          {
          }
        flagHasDisableMusicSearchListPositionSpecification = false;
      }
    public void setDisambiguateResultsBeforeAction(DisambiguateResultsBeforeActionJSON  new_value)
      {
        if (flagHasDisambiguateResultsBeforeAction)
          {
          }
        flagHasDisambiguateResultsBeforeAction = true;
        storeDisambiguateResultsBeforeAction = new_value;
      }
    public void setDisambiguateResultsBeforeAction(bool new_value)
      {
        setDisambiguateResultsBeforeAction(new DisambiguateResultsBeforeActionJSON(new_value));
      }
    public void unsetDisambiguateResultsBeforeAction()
      {
        if (flagHasDisambiguateResultsBeforeAction)
          {
          }
        flagHasDisambiguateResultsBeforeAction = false;
      }
    public void setDisplayedReminder(ReminderJSON  new_value)
      {
        if (flagHasDisplayedReminder)
          {
          }
        flagHasDisplayedReminder = true;
        storeDisplayedReminder = new_value;
      }
    public void unsetDisplayedReminder()
      {
        if (flagHasDisplayedReminder)
          {
          }
        flagHasDisplayedReminder = false;
      }
    public void setEnableClientControlInModes(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasEnableClientControlInModes)
          {
          }
        flagHasEnableClientControlInModes = true;
        storeEnableClientControlInModes = new_value;
      }
    public void setEnableClientControlInModes(bool new_value)
      {
        setEnableClientControlInModes(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetEnableClientControlInModes()
      {
        if (flagHasEnableClientControlInModes)
          {
          }
        flagHasEnableClientControlInModes = false;
      }
    public void setEnableLocalPlacesQueries(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasEnableLocalPlacesQueries)
          {
          }
        flagHasEnableLocalPlacesQueries = true;
        storeEnableLocalPlacesQueries = new_value;
      }
    public void setEnableLocalPlacesQueries(bool new_value)
      {
        setEnableLocalPlacesQueries(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetEnableLocalPlacesQueries()
      {
        if (flagHasEnableLocalPlacesQueries)
          {
          }
        flagHasEnableLocalPlacesQueries = false;
      }
    public void setLocalPlacesSettings(LocalPlacesSettingsJSON  new_value)
      {
        if (flagHasLocalPlacesSettings)
          {
          }
        flagHasLocalPlacesSettings = true;
        storeLocalPlacesSettings = new_value;
      }
    public void unsetLocalPlacesSettings()
      {
        if (flagHasLocalPlacesSettings)
          {
          }
        flagHasLocalPlacesSettings = false;
      }
    public void setEnableMusicPlayerFavorites(EnableMusicPlayerFavoritesJSON  new_value)
      {
        if (flagHasEnableMusicPlayerFavorites)
          {
          }
        flagHasEnableMusicPlayerFavorites = true;
        storeEnableMusicPlayerFavorites = new_value;
      }
    public void setEnableMusicPlayerFavorites(bool new_value)
      {
        setEnableMusicPlayerFavorites(new EnableMusicPlayerFavoritesJSON(new_value));
      }
    public void unsetEnableMusicPlayerFavorites()
      {
        if (flagHasEnableMusicPlayerFavorites)
          {
          }
        flagHasEnableMusicPlayerFavorites = false;
      }
    public void setEnabledCustomSpeechRecognitionPatternGroups(CustomSpeechRecognitionPatternsGroupListJSON  new_value)
      {
        if (flagHasEnabledCustomSpeechRecognitionPatternGroups)
          {
          }
        flagHasEnabledCustomSpeechRecognitionPatternGroups = true;
        storeEnabledCustomSpeechRecognitionPatternGroups = new_value;
      }
    public void unsetEnabledCustomSpeechRecognitionPatternGroups()
      {
        if (flagHasEnabledCustomSpeechRecognitionPatternGroups)
          {
          }
        flagHasEnabledCustomSpeechRecognitionPatternGroups = false;
      }
    public void setEntertainmentClientState(EntertainmentClientStateJSON  new_value)
      {
        if (flagHasEntertainmentClientState)
          {
          }
        flagHasEntertainmentClientState = true;
        storeEntertainmentClientState = new_value;
      }
    public void unsetEntertainmentClientState()
      {
        if (flagHasEntertainmentClientState)
          {
          }
        flagHasEntertainmentClientState = false;
      }
    public void setEntertainmentTitlesUploadData(EntertainmentTitlesUploadDataJSON  new_value)
      {
        if (flagHasEntertainmentTitlesUploadData)
          {
          }
        flagHasEntertainmentTitlesUploadData = true;
        storeEntertainmentTitlesUploadData = new_value;
      }
    public void unsetEntertainmentTitlesUploadData()
      {
        if (flagHasEntertainmentTitlesUploadData)
          {
          }
        flagHasEntertainmentTitlesUploadData = false;
      }
    public void setExcludeAllMusicResultsWithoutExplicitContext(ExcludeAllMusicResultsWithoutExplicitContextJSON  new_value)
      {
        if (flagHasExcludeAllMusicResultsWithoutExplicitContext)
          {
          }
        flagHasExcludeAllMusicResultsWithoutExplicitContext = true;
        storeExcludeAllMusicResultsWithoutExplicitContext = new_value;
      }
    public void setExcludeAllMusicResultsWithoutExplicitContext(bool new_value)
      {
        setExcludeAllMusicResultsWithoutExplicitContext(new ExcludeAllMusicResultsWithoutExplicitContextJSON(new_value));
      }
    public void unsetExcludeAllMusicResultsWithoutExplicitContext()
      {
        if (flagHasExcludeAllMusicResultsWithoutExplicitContext)
          {
          }
        flagHasExcludeAllMusicResultsWithoutExplicitContext = false;
      }
    public void setExcludeWikipediaLowConfidenceResults(ExcludeWikipediaLowConfidenceResultsJSON  new_value)
      {
        if (flagHasExcludeWikipediaLowConfidenceResults)
          {
          }
        flagHasExcludeWikipediaLowConfidenceResults = true;
        storeExcludeWikipediaLowConfidenceResults = new_value;
      }
    public void setExcludeWikipediaLowConfidenceResults(bool new_value)
      {
        setExcludeWikipediaLowConfidenceResults(new ExcludeWikipediaLowConfidenceResultsJSON(new_value));
      }
    public void unsetExcludeWikipediaLowConfidenceResults()
      {
        if (flagHasExcludeWikipediaLowConfidenceResults)
          {
          }
        flagHasExcludeWikipediaLowConfidenceResults = false;
      }
    public void setFitBitAccessToken(FitBitAccessTokenJSON  new_value)
      {
        if (flagHasFitBitAccessToken)
          {
          }
        flagHasFitBitAccessToken = true;
        storeFitBitAccessToken = new_value;
      }
    public void setFitBitAccessToken(string new_value)
      {
        setFitBitAccessToken(new FitBitAccessTokenJSON(new_value));
      }
    public void unsetFitBitAccessToken()
      {
        if (flagHasFitBitAccessToken)
          {
          }
        flagHasFitBitAccessToken = false;
      }
    public void setFitBitRefreshToken(FitBitRefreshTokenJSON  new_value)
      {
        if (flagHasFitBitRefreshToken)
          {
          }
        flagHasFitBitRefreshToken = true;
        storeFitBitRefreshToken = new_value;
      }
    public void setFitBitRefreshToken(string new_value)
      {
        setFitBitRefreshToken(new FitBitRefreshTokenJSON(new_value));
      }
    public void unsetFitBitRefreshToken()
      {
        if (flagHasFitBitRefreshToken)
          {
          }
        flagHasFitBitRefreshToken = false;
      }
    public void setGetHumaxMediaCloudURL(GetHumaxMediaCloudURLJSON  new_value)
      {
        if (flagHasGetHumaxMediaCloudURL)
          {
          }
        flagHasGetHumaxMediaCloudURL = true;
        storeGetHumaxMediaCloudURL = new_value;
      }
    public void setGetHumaxMediaCloudURL(bool new_value)
      {
        setGetHumaxMediaCloudURL(new GetHumaxMediaCloudURLJSON(new_value));
      }
    public void unsetGetHumaxMediaCloudURL()
      {
        if (flagHasGetHumaxMediaCloudURL)
          {
          }
        flagHasGetHumaxMediaCloudURL = false;
      }
    public void setGetOAuth2ClientID(GetClientIDOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasGetOAuth2ClientID)
          {
          }
        flagHasGetOAuth2ClientID = true;
        storeGetOAuth2ClientID = new_value;
      }
    public void setGetOAuth2ClientID(bool new_value)
      {
        setGetOAuth2ClientID(new GetClientIDOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetGetOAuth2ClientID()
      {
        if (flagHasGetOAuth2ClientID)
          {
          }
        flagHasGetOAuth2ClientID = false;
      }
    public void setGetOAuth2ClientSecret(GetClientSecretOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasGetOAuth2ClientSecret)
          {
          }
        flagHasGetOAuth2ClientSecret = true;
        storeGetOAuth2ClientSecret = new_value;
      }
    public void setGetOAuth2ClientSecret(bool new_value)
      {
        setGetOAuth2ClientSecret(new GetClientSecretOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetGetOAuth2ClientSecret()
      {
        if (flagHasGetOAuth2ClientSecret)
          {
          }
        flagHasGetOAuth2ClientSecret = false;
      }
    public void setSquare(GetClientSecretOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasSquare)
          {
          }
        flagHasSquare = true;
        storeSquare = new_value;
      }
    public void setSquare(bool new_value)
      {
        setSquare(new GetClientSecretOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetSquare()
      {
        if (flagHasSquare)
          {
          }
        flagHasSquare = false;
      }
    public void setGetOAuth2ClientToken(GetClientTokenOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasGetOAuth2ClientToken)
          {
          }
        flagHasGetOAuth2ClientToken = true;
        storeGetOAuth2ClientToken = new_value;
      }
    public void setGetOAuth2ClientToken(bool new_value)
      {
        setGetOAuth2ClientToken(new GetClientTokenOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetGetOAuth2ClientToken()
      {
        if (flagHasGetOAuth2ClientToken)
          {
          }
        flagHasGetOAuth2ClientToken = false;
      }
    public void setGetUberClientId(GetUberClientIdJSON  new_value)
      {
        if (flagHasGetUberClientId)
          {
          }
        flagHasGetUberClientId = true;
        storeGetUberClientId = new_value;
      }
    public void setGetUberClientId(bool new_value)
      {
        setGetUberClientId(new GetUberClientIdJSON(new_value));
      }
    public void unsetGetUberClientId()
      {
        if (flagHasGetUberClientId)
          {
          }
        flagHasGetUberClientId = false;
      }
    public void setGetUberServerToken(GetUberServerTokenJSON  new_value)
      {
        if (flagHasGetUberServerToken)
          {
          }
        flagHasGetUberServerToken = true;
        storeGetUberServerToken = new_value;
      }
    public void setGetUberServerToken(bool new_value)
      {
        setGetUberServerToken(new GetUberServerTokenJSON(new_value));
      }
    public void unsetGetUberServerToken()
      {
        if (flagHasGetUberServerToken)
          {
          }
        flagHasGetUberServerToken = false;
      }
    public void setHLSRadius(HLSRadiusJSON  new_value)
      {
        if (flagHasHLSRadius)
          {
          }
        flagHasHLSRadius = true;
        storeHLSRadius = new_value;
      }
    public void unsetHLSRadius()
      {
        if (flagHasHLSRadius)
          {
          }
        flagHasHLSRadius = false;
      }
    public void setHarmanDeviceRegistration(HarmanDeviceRegistrationJSON  new_value)
      {
        if (flagHasHarmanDeviceRegistration)
          {
          }
        flagHasHarmanDeviceRegistration = true;
        storeHarmanDeviceRegistration = new_value;
      }
    public void unsetHarmanDeviceRegistration()
      {
        if (flagHasHarmanDeviceRegistration)
          {
          }
        flagHasHarmanDeviceRegistration = false;
      }
    public void setHarmanHospitalityAmxControllerHttpRequest(HarmanAmxControllerHttpRequestJSON  new_value)
      {
        if (flagHasHarmanHospitalityAmxControllerHttpRequest)
          {
          }
        flagHasHarmanHospitalityAmxControllerHttpRequest = true;
        storeHarmanHospitalityAmxControllerHttpRequest = new_value;
      }
    public void unsetHarmanHospitalityAmxControllerHttpRequest()
      {
        if (flagHasHarmanHospitalityAmxControllerHttpRequest)
          {
          }
        flagHasHarmanHospitalityAmxControllerHttpRequest = false;
      }
    public void setHarmanHospitalityMeetingInformation(HarmanHospitalityMeetingInformationJSON  new_value)
      {
        if (flagHasHarmanHospitalityMeetingInformation)
          {
          }
        flagHasHarmanHospitalityMeetingInformation = true;
        storeHarmanHospitalityMeetingInformation = new_value;
      }
    public void unsetHarmanHospitalityMeetingInformation()
      {
        if (flagHasHarmanHospitalityMeetingInformation)
          {
          }
        flagHasHarmanHospitalityMeetingInformation = false;
      }
    public void setHarmanHospitalityPropertyInformation(HarmanHospitalityPropertyInformationJSON  new_value)
      {
        if (flagHasHarmanHospitalityPropertyInformation)
          {
          }
        flagHasHarmanHospitalityPropertyInformation = true;
        storeHarmanHospitalityPropertyInformation = new_value;
      }
    public void unsetHarmanHospitalityPropertyInformation()
      {
        if (flagHasHarmanHospitalityPropertyInformation)
          {
          }
        flagHasHarmanHospitalityPropertyInformation = false;
      }
    public void setHarmanPropertyRegistration(HarmanPropertyRegistrationJSON  new_value)
      {
        if (flagHasHarmanPropertyRegistration)
          {
          }
        flagHasHarmanPropertyRegistration = true;
        storeHarmanPropertyRegistration = new_value;
      }
    public void unsetHarmanPropertyRegistration()
      {
        if (flagHasHarmanPropertyRegistration)
          {
          }
        flagHasHarmanPropertyRegistration = false;
      }
    public void setHasTollsOnThisRoad(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasHasTollsOnThisRoad)
          {
          }
        flagHasHasTollsOnThisRoad = true;
        storeHasTollsOnThisRoad = new_value;
      }
    public void setHasTollsOnThisRoad(bool new_value)
      {
        setHasTollsOnThisRoad(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetHasTollsOnThisRoad()
      {
        if (flagHasHasTollsOnThisRoad)
          {
          }
        flagHasHasTollsOnThisRoad = false;
      }
    public void setHomeAutomationDomainSettings(HomeAutomationDomainSettingsJSON  new_value)
      {
        if (flagHasHomeAutomationDomainSettings)
          {
          }
        flagHasHomeAutomationDomainSettings = true;
        storeHomeAutomationDomainSettings = new_value;
      }
    public void unsetHomeAutomationDomainSettings()
      {
        if (flagHasHomeAutomationDomainSettings)
          {
          }
        flagHasHomeAutomationDomainSettings = false;
      }
    public void setHondaAgent20MParameters(HondaAgent20MParametersJSON  new_value)
      {
        if (flagHasHondaAgent20MParameters)
          {
          }
        flagHasHondaAgent20MParameters = true;
        storeHondaAgent20MParameters = new_value;
      }
    public void unsetHondaAgent20MParameters()
      {
        if (flagHasHondaAgent20MParameters)
          {
          }
        flagHasHondaAgent20MParameters = false;
      }
    public void setHondaAgentParameters(HondaAgentParametersJSON  new_value)
      {
        if (flagHasHondaAgentParameters)
          {
          }
        flagHasHondaAgentParameters = true;
        storeHondaAgentParameters = new_value;
      }
    public void unsetHondaAgentParameters()
      {
        if (flagHasHondaAgentParameters)
          {
          }
        flagHasHondaAgentParameters = false;
      }
    public void setHondaCarManualParameters(HondaCarManualParametersJSON  new_value)
      {
        if (flagHasHondaCarManualParameters)
          {
          }
        flagHasHondaCarManualParameters = true;
        storeHondaCarManualParameters = new_value;
      }
    public void unsetHondaCarManualParameters()
      {
        if (flagHasHondaCarManualParameters)
          {
          }
        flagHasHondaCarManualParameters = false;
      }
    public void setHueDeviceRegistration(HueDeviceRegistrationJSON  new_value)
      {
        if (flagHasHueDeviceRegistration)
          {
          }
        flagHasHueDeviceRegistration = true;
        storeHueDeviceRegistration = new_value;
      }
    public void unsetHueDeviceRegistration()
      {
        if (flagHasHueDeviceRegistration)
          {
          }
        flagHasHueDeviceRegistration = false;
      }
    public void setHumaxHomeAutomationCredentials(HumaxHomeAutomationCredentialsJSON  new_value)
      {
        if (flagHasHumaxHomeAutomationCredentials)
          {
          }
        flagHasHumaxHomeAutomationCredentials = true;
        storeHumaxHomeAutomationCredentials = new_value;
      }
    public void unsetHumaxHomeAutomationCredentials()
      {
        if (flagHasHumaxHomeAutomationCredentials)
          {
          }
        flagHasHumaxHomeAutomationCredentials = false;
      }
    public void setHumaxMediaCloudURL(HumaxMediaCloudURLJSON  new_value)
      {
        if (flagHasHumaxMediaCloudURL)
          {
          }
        flagHasHumaxMediaCloudURL = true;
        storeHumaxMediaCloudURL = new_value;
      }
    public void setHumaxMediaCloudURL(string new_value)
      {
        setHumaxMediaCloudURL(new HumaxMediaCloudURLJSON(new_value));
      }
    public void unsetHumaxMediaCloudURL()
      {
        if (flagHasHumaxMediaCloudURL)
          {
          }
        flagHasHumaxMediaCloudURL = false;
      }
    public void setHumaxSmartTVClientState(HumaxSmartTVClientStateJSON  new_value)
      {
        if (flagHasHumaxSmartTVClientState)
          {
          }
        flagHasHumaxSmartTVClientState = true;
        storeHumaxSmartTVClientState = new_value;
      }
    public void unsetHumaxSmartTVClientState()
      {
        if (flagHasHumaxSmartTVClientState)
          {
          }
        flagHasHumaxSmartTVClientState = false;
      }
    public void setIHeartMediaDeviceIdentifiers(IHeartMediaDeviceIdentifiersJSON  new_value)
      {
        if (flagHasIHeartMediaDeviceIdentifiers)
          {
          }
        flagHasIHeartMediaDeviceIdentifiers = true;
        storeIHeartMediaDeviceIdentifiers = new_value;
      }
    public void unsetIHeartMediaDeviceIdentifiers()
      {
        if (flagHasIHeartMediaDeviceIdentifiers)
          {
          }
        flagHasIHeartMediaDeviceIdentifiers = false;
      }
    public void setIHeartRadioPreferArtistStations(IHeartRadioPreferArtistStationsJSON  new_value)
      {
        if (flagHasIHeartRadioPreferArtistStations)
          {
          }
        flagHasIHeartRadioPreferArtistStations = true;
        storeIHeartRadioPreferArtistStations = new_value;
      }
    public void setIHeartRadioPreferArtistStations(bool new_value)
      {
        setIHeartRadioPreferArtistStations(new IHeartRadioPreferArtistStationsJSON(new_value));
      }
    public void unsetIHeartRadioPreferArtistStations()
      {
        if (flagHasIHeartRadioPreferArtistStations)
          {
          }
        flagHasIHeartRadioPreferArtistStations = false;
      }
    public void setIHeartRadioPreferGenericRadioMatches(IHeartRadioPreferGenericRadioMatchesJSON  new_value)
      {
        if (flagHasIHeartRadioPreferGenericRadioMatches)
          {
          }
        flagHasIHeartRadioPreferGenericRadioMatches = true;
        storeIHeartRadioPreferGenericRadioMatches = new_value;
      }
    public void setIHeartRadioPreferGenericRadioMatches(bool new_value)
      {
        setIHeartRadioPreferGenericRadioMatches(new IHeartRadioPreferGenericRadioMatchesJSON(new_value));
      }
    public void unsetIHeartRadioPreferGenericRadioMatches()
      {
        if (flagHasIHeartRadioPreferGenericRadioMatches)
          {
          }
        flagHasIHeartRadioPreferGenericRadioMatches = false;
      }
    public void setIHeartRadioPreferTerrestrialRadioMatches(IHeartRadioPreferTerrestrialRadioMatchesJSON  new_value)
      {
        if (flagHasIHeartRadioPreferTerrestrialRadioMatches)
          {
          }
        flagHasIHeartRadioPreferTerrestrialRadioMatches = true;
        storeIHeartRadioPreferTerrestrialRadioMatches = new_value;
      }
    public void setIHeartRadioPreferTerrestrialRadioMatches(bool new_value)
      {
        setIHeartRadioPreferTerrestrialRadioMatches(new IHeartRadioPreferTerrestrialRadioMatchesJSON(new_value));
      }
    public void unsetIHeartRadioPreferTerrestrialRadioMatches()
      {
        if (flagHasIHeartRadioPreferTerrestrialRadioMatches)
          {
          }
        flagHasIHeartRadioPreferTerrestrialRadioMatches = false;
      }
    public void setIftttKeyItem(IftttKeyItemJSON  new_value)
      {
        if (flagHasIftttKeyItem)
          {
          }
        flagHasIftttKeyItem = true;
        storeIftttKeyItem = new_value;
      }
    public void unsetIftttKeyItem()
      {
        if (flagHasIftttKeyItem)
          {
          }
        flagHasIftttKeyItem = false;
      }
    public void setImageSearchConfiguration(ImageSearchRequestInfoConfigurationJSON  new_value)
      {
        if (flagHasImageSearchConfiguration)
          {
          }
        flagHasImageSearchConfiguration = true;
        storeImageSearchConfiguration = new_value;
      }
    public void unsetImageSearchConfiguration()
      {
        if (flagHasImageSearchConfiguration)
          {
          }
        flagHasImageSearchConfiguration = false;
      }
    public void setImageSearchRequestInfoProviders(ImageSearchRequestInfoProvidersJSON  new_value)
      {
        if (flagHasImageSearchRequestInfoProviders)
          {
          }
        flagHasImageSearchRequestInfoProviders = true;
        storeImageSearchRequestInfoProviders = new_value;
      }
    public void unsetImageSearchRequestInfoProviders()
      {
        if (flagHasImageSearchRequestInfoProviders)
          {
          }
        flagHasImageSearchRequestInfoProviders = false;
      }
    public void setIncludeAllMusicResultsWithoutContext(IncludeAllMusicResultsWithoutContextJSON  new_value)
      {
        if (flagHasIncludeAllMusicResultsWithoutContext)
          {
          }
        flagHasIncludeAllMusicResultsWithoutContext = true;
        storeIncludeAllMusicResultsWithoutContext = new_value;
      }
    public void setIncludeAllMusicResultsWithoutContext(bool new_value)
      {
        setIncludeAllMusicResultsWithoutContext(new IncludeAllMusicResultsWithoutContextJSON(new_value));
      }
    public void unsetIncludeAllMusicResultsWithoutContext()
      {
        if (flagHasIncludeAllMusicResultsWithoutContext)
          {
          }
        flagHasIncludeAllMusicResultsWithoutContext = false;
      }
    public void setIncomingCallPending(IncomingCallPendingJSON  new_value)
      {
        if (flagHasIncomingCallPending)
          {
          }
        flagHasIncomingCallPending = true;
        storeIncomingCallPending = new_value;
      }
    public void setIncomingCallPending(bool new_value)
      {
        setIncomingCallPending(new IncomingCallPendingJSON(new_value));
      }
    public void unsetIncomingCallPending()
      {
        if (flagHasIncomingCallPending)
          {
          }
        flagHasIncomingCallPending = false;
      }
    public void setInputOverrideDeleteFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasInputOverrideDeleteFunction)
          {
          }
        flagHasInputOverrideDeleteFunction = true;
        storeInputOverrideDeleteFunction = new_value;
      }
    public void setInputOverrideDeleteFunction(bool new_value)
      {
        setInputOverrideDeleteFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetInputOverrideDeleteFunction()
      {
        if (flagHasInputOverrideDeleteFunction)
          {
          }
        flagHasInputOverrideDeleteFunction = false;
      }
    public void setInputOverrideFunction(InputOverrideFunctionJSON  new_value)
      {
        if (flagHasInputOverrideFunction)
          {
          }
        flagHasInputOverrideFunction = true;
        storeInputOverrideFunction = new_value;
      }
    public void setInputOverrideFunction(string new_value)
      {
        setInputOverrideFunction(new InputOverrideFunctionJSON(new_value));
      }
    public void unsetInputOverrideFunction()
      {
        if (flagHasInputOverrideFunction)
          {
          }
        flagHasInputOverrideFunction = false;
      }
    public void setInputOverrideFunctionLanguage(UploadedCodeFunctionLanguageJSON  new_value)
      {
        if (flagHasInputOverrideFunctionLanguage)
          {
          }
        flagHasInputOverrideFunctionLanguage = true;
        storeInputOverrideFunctionLanguage = new_value;
      }
    public void setInputOverrideFunctionLanguage(UploadedCodeFunctionLanguageJSON.TypeValue new_value)
      {
        setInputOverrideFunctionLanguage(new UploadedCodeFunctionLanguageJSON(new_value));
      }
    public void setInputOverrideFunctionLanguage(string chars)
      {
        UploadedCodeFunctionLanguageJSON.TypeValueKnownValues known = UploadedCodeFunctionLanguageJSON.stringToValue(chars);
        UploadedCodeFunctionLanguageJSON.TypeValue new_value = new UploadedCodeFunctionLanguageJSON.TypeValue();
        if (known == UploadedCodeFunctionLanguageJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setInputOverrideFunctionLanguage(new_value);
      }
    public void unsetInputOverrideFunctionLanguage()
      {
        if (flagHasInputOverrideFunctionLanguage)
          {
          }
        flagHasInputOverrideFunctionLanguage = false;
      }
    public void setInputOverrideFunctionSource(UploadedCodeSourceJSON  new_value)
      {
        if (flagHasInputOverrideFunctionSource)
          {
          }
        flagHasInputOverrideFunctionSource = true;
        storeInputOverrideFunctionSource = new_value;
      }
    public void unsetInputOverrideFunctionSource()
      {
        if (flagHasInputOverrideFunctionSource)
          {
          }
        flagHasInputOverrideFunctionSource = false;
      }
    public void setInputOverrideReadFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasInputOverrideReadFunction)
          {
          }
        flagHasInputOverrideReadFunction = true;
        storeInputOverrideReadFunction = new_value;
      }
    public void setInputOverrideReadFunction(bool new_value)
      {
        setInputOverrideReadFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetInputOverrideReadFunction()
      {
        if (flagHasInputOverrideReadFunction)
          {
          }
        flagHasInputOverrideReadFunction = false;
      }
    public void setKuriInfo(KuriInfoJSON  new_value)
      {
        if (flagHasKuriInfo)
          {
          }
        flagHasKuriInfo = true;
        storeKuriInfo = new_value;
      }
    public void unsetKuriInfo()
      {
        if (flagHasKuriInfo)
          {
          }
        flagHasKuriInfo = false;
      }
    public void setLocalSearchClientState(LocalSearchClientStateJSON  new_value)
      {
        if (flagHasLocalSearchClientState)
          {
          }
        flagHasLocalSearchClientState = true;
        storeLocalSearchClientState = new_value;
      }
    public void unsetLocalSearchClientState()
      {
        if (flagHasLocalSearchClientState)
          {
          }
        flagHasLocalSearchClientState = false;
      }
    public void setMapClientControlPageToScroll(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasMapClientControlPageToScroll)
          {
          }
        flagHasMapClientControlPageToScroll = true;
        storeMapClientControlPageToScroll = new_value;
      }
    public void setMapClientControlPageToScroll(bool new_value)
      {
        setMapClientControlPageToScroll(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetMapClientControlPageToScroll()
      {
        if (flagHasMapClientControlPageToScroll)
          {
          }
        flagHasMapClientControlPageToScroll = false;
      }
    public void setMultipleChoiceQuizAPIRequest(MultipleChoiceQuizAPIRequestJSON  new_value)
      {
        if (flagHasMultipleChoiceQuizAPIRequest)
          {
          }
        flagHasMultipleChoiceQuizAPIRequest = true;
        storeMultipleChoiceQuizAPIRequest = new_value;
      }
    public void unsetMultipleChoiceQuizAPIRequest()
      {
        if (flagHasMultipleChoiceQuizAPIRequest)
          {
          }
        flagHasMultipleChoiceQuizAPIRequest = false;
      }
    public void setMusicClientState(MusicClientStateJSON  new_value)
      {
        if (flagHasMusicClientState)
          {
          }
        flagHasMusicClientState = true;
        storeMusicClientState = new_value;
      }
    public void unsetMusicClientState()
      {
        if (flagHasMusicClientState)
          {
          }
        flagHasMusicClientState = false;
      }
    public void setNaritaAirportGuideArea(NaritaAirportGuideAreaJSON  new_value)
      {
        if (flagHasNaritaAirportGuideArea)
          {
          }
        flagHasNaritaAirportGuideArea = true;
        storeNaritaAirportGuideArea = new_value;
      }
    public void setNaritaAirportGuideArea(NaritaAirportGuideAreaJSON.TypeValue new_value)
      {
        setNaritaAirportGuideArea(new NaritaAirportGuideAreaJSON(new_value));
      }
    public void setNaritaAirportGuideArea(string chars)
      {
        NaritaAirportGuideAreaJSON.TypeValueKnownValues known = NaritaAirportGuideAreaJSON.stringToValue(chars);
        NaritaAirportGuideAreaJSON.TypeValue new_value = new NaritaAirportGuideAreaJSON.TypeValue();
        if (known == NaritaAirportGuideAreaJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setNaritaAirportGuideArea(new_value);
      }
    public void unsetNaritaAirportGuideArea()
      {
        if (flagHasNaritaAirportGuideArea)
          {
          }
        flagHasNaritaAirportGuideArea = false;
      }
    public void setNaritaAirportGuideFloor(NaritaAirportGuideFloorJSON  new_value)
      {
        if (flagHasNaritaAirportGuideFloor)
          {
          }
        flagHasNaritaAirportGuideFloor = true;
        storeNaritaAirportGuideFloor = new_value;
      }
    public void setNaritaAirportGuideFloor(NaritaAirportGuideFloorJSON.TypeValue new_value)
      {
        setNaritaAirportGuideFloor(new NaritaAirportGuideFloorJSON(new_value));
      }
    public void setNaritaAirportGuideFloor(string chars)
      {
        NaritaAirportGuideFloorJSON.TypeValueKnownValues known = NaritaAirportGuideFloorJSON.stringToValue(chars);
        NaritaAirportGuideFloorJSON.TypeValue new_value = new NaritaAirportGuideFloorJSON.TypeValue();
        if (known == NaritaAirportGuideFloorJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setNaritaAirportGuideFloor(new_value);
      }
    public void unsetNaritaAirportGuideFloor()
      {
        if (flagHasNaritaAirportGuideFloor)
          {
          }
        flagHasNaritaAirportGuideFloor = false;
      }
    public void setNaritaAirportGuideTerminal(NaritaAirportGuideTerminalJSON  new_value)
      {
        if (flagHasNaritaAirportGuideTerminal)
          {
          }
        flagHasNaritaAirportGuideTerminal = true;
        storeNaritaAirportGuideTerminal = new_value;
      }
    public void setNaritaAirportGuideTerminal(NaritaAirportGuideTerminalJSON.TypeValue new_value)
      {
        setNaritaAirportGuideTerminal(new NaritaAirportGuideTerminalJSON(new_value));
      }
    public void setNaritaAirportGuideTerminal(string chars)
      {
        NaritaAirportGuideTerminalJSON.TypeValueKnownValues known = NaritaAirportGuideTerminalJSON.stringToValue(chars);
        NaritaAirportGuideTerminalJSON.TypeValue new_value = new NaritaAirportGuideTerminalJSON.TypeValue();
        if (known == NaritaAirportGuideTerminalJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setNaritaAirportGuideTerminal(new_value);
      }
    public void unsetNaritaAirportGuideTerminal()
      {
        if (flagHasNaritaAirportGuideTerminal)
          {
          }
        flagHasNaritaAirportGuideTerminal = false;
      }
    public void setNavigationControlContext(NavigationControlContextJSON  new_value)
      {
        if (flagHasNavigationControlContext)
          {
          }
        flagHasNavigationControlContext = true;
        storeNavigationControlContext = new_value;
      }
    public void setNavigationControlContext(string new_value)
      {
        setNavigationControlContext(new NavigationControlContextJSON(new_value));
      }
    public void unsetNavigationControlContext()
      {
        if (flagHasNavigationControlContext)
          {
          }
        flagHasNavigationControlContext = false;
      }
    public void setTurnOffGuidanceMeansMute(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasTurnOffGuidanceMeansMute)
          {
          }
        flagHasTurnOffGuidanceMeansMute = true;
        storeTurnOffGuidanceMeansMute = new_value;
      }
    public void setTurnOffGuidanceMeansMute(bool new_value)
      {
        setTurnOffGuidanceMeansMute(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetTurnOffGuidanceMeansMute()
      {
        if (flagHasTurnOffGuidanceMeansMute)
          {
          }
        flagHasTurnOffGuidanceMeansMute = false;
      }
    public void setNavigationLocationDisambiguation(NavigationLocationDisambiguationConfigJSON  new_value)
      {
        if (flagHasNavigationLocationDisambiguation)
          {
          }
        flagHasNavigationLocationDisambiguation = true;
        storeNavigationLocationDisambiguation = new_value;
      }
    public void unsetNavigationLocationDisambiguation()
      {
        if (flagHasNavigationLocationDisambiguation)
          {
          }
        flagHasNavigationLocationDisambiguation = false;
      }
    public void setNewReminder(CreateReminderFullDataJSON  new_value)
      {
        if (flagHasNewReminder)
          {
          }
        flagHasNewReminder = true;
        storeNewReminder = new_value;
      }
    public void unsetNewReminder()
      {
        if (flagHasNewReminder)
          {
          }
        flagHasNewReminder = false;
      }
    public void setNumberOfVolumeLevels(NumberOfVolumeLevelsJSON  new_value)
      {
        if (flagHasNumberOfVolumeLevels)
          {
          }
        flagHasNumberOfVolumeLevels = true;
        storeNumberOfVolumeLevels = new_value;
      }
    public void setNumberOfVolumeLevels(BigInteger new_value)
      {
        setNumberOfVolumeLevels(new NumberOfVolumeLevelsJSON(new_value));
      }
    public void unsetNumberOfVolumeLevels()
      {
        if (flagHasNumberOfVolumeLevels)
          {
          }
        flagHasNumberOfVolumeLevels = false;
      }
    public void setOAuth2ClientID(ClientIDOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasOAuth2ClientID)
          {
          }
        flagHasOAuth2ClientID = true;
        storeOAuth2ClientID = new_value;
      }
    public void setOAuth2ClientID(string new_value)
      {
        setOAuth2ClientID(new ClientIDOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetOAuth2ClientID()
      {
        if (flagHasOAuth2ClientID)
          {
          }
        flagHasOAuth2ClientID = false;
      }
    public void setOAuth2ClientSecret(ClientSecretOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasOAuth2ClientSecret)
          {
          }
        flagHasOAuth2ClientSecret = true;
        storeOAuth2ClientSecret = new_value;
      }
    public void setOAuth2ClientSecret(string new_value)
      {
        setOAuth2ClientSecret(new ClientSecretOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetOAuth2ClientSecret()
      {
        if (flagHasOAuth2ClientSecret)
          {
          }
        flagHasOAuth2ClientSecret = false;
      }
    public void setOAuth2ClientToken(OAuth2ClientTokenJSON  new_value)
      {
        if (flagHasOAuth2ClientToken)
          {
          }
        flagHasOAuth2ClientToken = true;
        storeOAuth2ClientToken = new_value;
      }
    public void unsetOAuth2ClientToken()
      {
        if (flagHasOAuth2ClientToken)
          {
          }
        flagHasOAuth2ClientToken = false;
      }
    public void setOAuth2CodeData(CodeDataOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasOAuth2CodeData)
          {
          }
        flagHasOAuth2CodeData = true;
        storeOAuth2CodeData = new_value;
      }
    public void unsetOAuth2CodeData()
      {
        if (flagHasOAuth2CodeData)
          {
          }
        flagHasOAuth2CodeData = false;
      }
    public void setOAuth2RefreshToken(RefreshTokenOAuth2RequestInfoFieldJSON  new_value)
      {
        if (flagHasOAuth2RefreshToken)
          {
          }
        flagHasOAuth2RefreshToken = true;
        storeOAuth2RefreshToken = new_value;
      }
    public void setOAuth2RefreshToken(string new_value)
      {
        setOAuth2RefreshToken(new RefreshTokenOAuth2RequestInfoFieldJSON(new_value));
      }
    public void unsetOAuth2RefreshToken()
      {
        if (flagHasOAuth2RefreshToken)
          {
          }
        flagHasOAuth2RefreshToken = false;
      }
    public void setOrganizationalChartRequest(OrganizationalChartRequestJSON  new_value)
      {
        if (flagHasOrganizationalChartRequest)
          {
          }
        flagHasOrganizationalChartRequest = true;
        storeOrganizationalChartRequest = new_value;
      }
    public void unsetOrganizationalChartRequest()
      {
        if (flagHasOrganizationalChartRequest)
          {
          }
        flagHasOrganizationalChartRequest = false;
      }
    public void setOutputDeepIntegrationLattice(OutputDeepIntegrationLatticeJSON  new_value)
      {
        if (flagHasOutputDeepIntegrationLattice)
          {
          }
        flagHasOutputDeepIntegrationLattice = true;
        storeOutputDeepIntegrationLattice = new_value;
      }
    public void setOutputDeepIntegrationLattice(bool new_value)
      {
        setOutputDeepIntegrationLattice(new OutputDeepIntegrationLatticeJSON(new_value));
      }
    public void unsetOutputDeepIntegrationLattice()
      {
        if (flagHasOutputDeepIntegrationLattice)
          {
          }
        flagHasOutputDeepIntegrationLattice = false;
      }
    public void setOutputSLMLattice(OutputSLMLatticeJSON  new_value)
      {
        if (flagHasOutputSLMLattice)
          {
          }
        flagHasOutputSLMLattice = true;
        storeOutputSLMLattice = new_value;
      }
    public void setOutputSLMLattice(bool new_value)
      {
        setOutputSLMLattice(new OutputSLMLatticeJSON(new_value));
      }
    public void unsetOutputSLMLattice()
      {
        if (flagHasOutputSLMLattice)
          {
          }
        flagHasOutputSLMLattice = false;
      }
    public void setOutputOverrideKind(OutputOverrideKindJSON  new_value)
      {
        if (flagHasOutputOverrideKind)
          {
          }
        flagHasOutputOverrideKind = true;
        storeOutputOverrideKind = new_value;
      }
    public void setOutputOverrideKind(OutputOverrideKindJSON.TypeValue new_value)
      {
        setOutputOverrideKind(new OutputOverrideKindJSON(new_value));
      }
    public void setOutputOverrideKind(string chars)
      {
        OutputOverrideKindJSON.TypeValueKnownValues known = OutputOverrideKindJSON.stringToValue(chars);
        OutputOverrideKindJSON.TypeValue new_value = new OutputOverrideKindJSON.TypeValue();
        if (known == OutputOverrideKindJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setOutputOverrideKind(new_value);
      }
    public void unsetOutputOverrideKind()
      {
        if (flagHasOutputOverrideKind)
          {
          }
        flagHasOutputOverrideKind = false;
      }
    public void setOutputOverrideFunction(OutputOverrideFunctionJSON  new_value)
      {
        if (flagHasOutputOverrideFunction)
          {
          }
        flagHasOutputOverrideFunction = true;
        storeOutputOverrideFunction = new_value;
      }
    public void setOutputOverrideFunction(string new_value)
      {
        setOutputOverrideFunction(new OutputOverrideFunctionJSON(new_value));
      }
    public void unsetOutputOverrideFunction()
      {
        if (flagHasOutputOverrideFunction)
          {
          }
        flagHasOutputOverrideFunction = false;
      }
    public void setOutputOverrideFunctionLanguage(UploadedCodeFunctionLanguageJSON  new_value)
      {
        if (flagHasOutputOverrideFunctionLanguage)
          {
          }
        flagHasOutputOverrideFunctionLanguage = true;
        storeOutputOverrideFunctionLanguage = new_value;
      }
    public void setOutputOverrideFunctionLanguage(UploadedCodeFunctionLanguageJSON.TypeValue new_value)
      {
        setOutputOverrideFunctionLanguage(new UploadedCodeFunctionLanguageJSON(new_value));
      }
    public void setOutputOverrideFunctionLanguage(string chars)
      {
        UploadedCodeFunctionLanguageJSON.TypeValueKnownValues known = UploadedCodeFunctionLanguageJSON.stringToValue(chars);
        UploadedCodeFunctionLanguageJSON.TypeValue new_value = new UploadedCodeFunctionLanguageJSON.TypeValue();
        if (known == UploadedCodeFunctionLanguageJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setOutputOverrideFunctionLanguage(new_value);
      }
    public void unsetOutputOverrideFunctionLanguage()
      {
        if (flagHasOutputOverrideFunctionLanguage)
          {
          }
        flagHasOutputOverrideFunctionLanguage = false;
      }
    public void setOutputOverrideFunctionSource(UploadedCodeSourceJSON  new_value)
      {
        if (flagHasOutputOverrideFunctionSource)
          {
          }
        flagHasOutputOverrideFunctionSource = true;
        storeOutputOverrideFunctionSource = new_value;
      }
    public void unsetOutputOverrideFunctionSource()
      {
        if (flagHasOutputOverrideFunctionSource)
          {
          }
        flagHasOutputOverrideFunctionSource = false;
      }
    public void setOutputOverrideCommandIsPreAudioOut(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasOutputOverrideCommandIsPreAudioOut)
          {
          }
        flagHasOutputOverrideCommandIsPreAudioOut = true;
        storeOutputOverrideCommandIsPreAudioOut = new_value;
      }
    public void setOutputOverrideCommandIsPreAudioOut(bool new_value)
      {
        setOutputOverrideCommandIsPreAudioOut(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetOutputOverrideCommandIsPreAudioOut()
      {
        if (flagHasOutputOverrideCommandIsPreAudioOut)
          {
          }
        flagHasOutputOverrideCommandIsPreAudioOut = false;
      }
    public void setOutputOverrideDeleteCommandFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasOutputOverrideDeleteCommandFunction)
          {
          }
        flagHasOutputOverrideDeleteCommandFunction = true;
        storeOutputOverrideDeleteCommandFunction = new_value;
      }
    public void setOutputOverrideDeleteCommandFunction(bool new_value)
      {
        setOutputOverrideDeleteCommandFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetOutputOverrideDeleteCommandFunction()
      {
        if (flagHasOutputOverrideDeleteCommandFunction)
          {
          }
        flagHasOutputOverrideDeleteCommandFunction = false;
      }
    public void setOutputOverrideDeleteInformationNuggetFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasOutputOverrideDeleteInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideDeleteInformationNuggetFunction = true;
        storeOutputOverrideDeleteInformationNuggetFunction = new_value;
      }
    public void setOutputOverrideDeleteInformationNuggetFunction(bool new_value)
      {
        setOutputOverrideDeleteInformationNuggetFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetOutputOverrideDeleteInformationNuggetFunction()
      {
        if (flagHasOutputOverrideDeleteInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideDeleteInformationNuggetFunction = false;
      }
    public void setOutputOverrideInformationNuggetFunction(OutputOverrideFunctionJSON  new_value)
      {
        if (flagHasOutputOverrideInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideInformationNuggetFunction = true;
        storeOutputOverrideInformationNuggetFunction = new_value;
      }
    public void setOutputOverrideInformationNuggetFunction(string new_value)
      {
        setOutputOverrideInformationNuggetFunction(new OutputOverrideFunctionJSON(new_value));
      }
    public void unsetOutputOverrideInformationNuggetFunction()
      {
        if (flagHasOutputOverrideInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideInformationNuggetFunction = false;
      }
    public void setOutputOverrideInformationNuggetFunctionLanguage(UploadedCodeFunctionLanguageJSON  new_value)
      {
        if (flagHasOutputOverrideInformationNuggetFunctionLanguage)
          {
          }
        flagHasOutputOverrideInformationNuggetFunctionLanguage = true;
        storeOutputOverrideInformationNuggetFunctionLanguage = new_value;
      }
    public void setOutputOverrideInformationNuggetFunctionLanguage(UploadedCodeFunctionLanguageJSON.TypeValue new_value)
      {
        setOutputOverrideInformationNuggetFunctionLanguage(new UploadedCodeFunctionLanguageJSON(new_value));
      }
    public void setOutputOverrideInformationNuggetFunctionLanguage(string chars)
      {
        UploadedCodeFunctionLanguageJSON.TypeValueKnownValues known = UploadedCodeFunctionLanguageJSON.stringToValue(chars);
        UploadedCodeFunctionLanguageJSON.TypeValue new_value = new UploadedCodeFunctionLanguageJSON.TypeValue();
        if (known == UploadedCodeFunctionLanguageJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setOutputOverrideInformationNuggetFunctionLanguage(new_value);
      }
    public void unsetOutputOverrideInformationNuggetFunctionLanguage()
      {
        if (flagHasOutputOverrideInformationNuggetFunctionLanguage)
          {
          }
        flagHasOutputOverrideInformationNuggetFunctionLanguage = false;
      }
    public void setOutputOverrideInformationNuggetFunctionSource(UploadedCodeSourceJSON  new_value)
      {
        if (flagHasOutputOverrideInformationNuggetFunctionSource)
          {
          }
        flagHasOutputOverrideInformationNuggetFunctionSource = true;
        storeOutputOverrideInformationNuggetFunctionSource = new_value;
      }
    public void unsetOutputOverrideInformationNuggetFunctionSource()
      {
        if (flagHasOutputOverrideInformationNuggetFunctionSource)
          {
          }
        flagHasOutputOverrideInformationNuggetFunctionSource = false;
      }
    public void setOutputOverrideReadCommandFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasOutputOverrideReadCommandFunction)
          {
          }
        flagHasOutputOverrideReadCommandFunction = true;
        storeOutputOverrideReadCommandFunction = new_value;
      }
    public void setOutputOverrideReadCommandFunction(bool new_value)
      {
        setOutputOverrideReadCommandFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetOutputOverrideReadCommandFunction()
      {
        if (flagHasOutputOverrideReadCommandFunction)
          {
          }
        flagHasOutputOverrideReadCommandFunction = false;
      }
    public void setOutputOverrideReadInformationNuggetFunction(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasOutputOverrideReadInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideReadInformationNuggetFunction = true;
        storeOutputOverrideReadInformationNuggetFunction = new_value;
      }
    public void setOutputOverrideReadInformationNuggetFunction(bool new_value)
      {
        setOutputOverrideReadInformationNuggetFunction(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetOutputOverrideReadInformationNuggetFunction()
      {
        if (flagHasOutputOverrideReadInformationNuggetFunction)
          {
          }
        flagHasOutputOverrideReadInformationNuggetFunction = false;
      }
    public void setOutputOverrideCommandFunction(OutputOverrideFunctionJSON  new_value)
      {
        if (flagHasOutputOverrideCommandFunction)
          {
          }
        flagHasOutputOverrideCommandFunction = true;
        storeOutputOverrideCommandFunction = new_value;
      }
    public void setOutputOverrideCommandFunction(string new_value)
      {
        setOutputOverrideCommandFunction(new OutputOverrideFunctionJSON(new_value));
      }
    public void unsetOutputOverrideCommandFunction()
      {
        if (flagHasOutputOverrideCommandFunction)
          {
          }
        flagHasOutputOverrideCommandFunction = false;
      }
    public void setOutputOverrideCommandFunctionLanguage(UploadedCodeFunctionLanguageJSON  new_value)
      {
        if (flagHasOutputOverrideCommandFunctionLanguage)
          {
          }
        flagHasOutputOverrideCommandFunctionLanguage = true;
        storeOutputOverrideCommandFunctionLanguage = new_value;
      }
    public void setOutputOverrideCommandFunctionLanguage(UploadedCodeFunctionLanguageJSON.TypeValue new_value)
      {
        setOutputOverrideCommandFunctionLanguage(new UploadedCodeFunctionLanguageJSON(new_value));
      }
    public void setOutputOverrideCommandFunctionLanguage(string chars)
      {
        UploadedCodeFunctionLanguageJSON.TypeValueKnownValues known = UploadedCodeFunctionLanguageJSON.stringToValue(chars);
        UploadedCodeFunctionLanguageJSON.TypeValue new_value = new UploadedCodeFunctionLanguageJSON.TypeValue();
        if (known == UploadedCodeFunctionLanguageJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setOutputOverrideCommandFunctionLanguage(new_value);
      }
    public void unsetOutputOverrideCommandFunctionLanguage()
      {
        if (flagHasOutputOverrideCommandFunctionLanguage)
          {
          }
        flagHasOutputOverrideCommandFunctionLanguage = false;
      }
    public void setOutputOverrideCommandFunctionSource(UploadedCodeSourceJSON  new_value)
      {
        if (flagHasOutputOverrideCommandFunctionSource)
          {
          }
        flagHasOutputOverrideCommandFunctionSource = true;
        storeOutputOverrideCommandFunctionSource = new_value;
      }
    public void unsetOutputOverrideCommandFunctionSource()
      {
        if (flagHasOutputOverrideCommandFunctionSource)
          {
          }
        flagHasOutputOverrideCommandFunctionSource = false;
      }
    public void setPandoraCustomClientPrompt(ClientPromptPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomClientPrompt)
          {
          }
        flagHasPandoraCustomClientPrompt = true;
        storePandoraCustomClientPrompt = new_value;
      }
    public void setPandoraCustomClientPrompt(ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValue new_value)
      {
        setPandoraCustomClientPrompt(new ClientPromptPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void setPandoraCustomClientPrompt(string chars)
      {
        ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValueKnownValues known = ClientPromptPandoraCustomRequestInfoFieldJSON.stringToValue(chars);
        ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValue new_value = new ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValue();
        if (known == ClientPromptPandoraCustomRequestInfoFieldJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setPandoraCustomClientPrompt(new_value);
      }
    public void unsetPandoraCustomClientPrompt()
      {
        if (flagHasPandoraCustomClientPrompt)
          {
          }
        flagHasPandoraCustomClientPrompt = false;
      }
    public void setPandoraCustomEnableComponentFormat(EnableComponentFormatPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableComponentFormat)
          {
          }
        flagHasPandoraCustomEnableComponentFormat = true;
        storePandoraCustomEnableComponentFormat = new_value;
      }
    public void setPandoraCustomEnableComponentFormat(bool new_value)
      {
        setPandoraCustomEnableComponentFormat(new EnableComponentFormatPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableComponentFormat()
      {
        if (flagHasPandoraCustomEnableComponentFormat)
          {
          }
        flagHasPandoraCustomEnableComponentFormat = false;
      }
    public void setPandoraCustomEnableDomain(EnableDomainPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableDomain)
          {
          }
        flagHasPandoraCustomEnableDomain = true;
        storePandoraCustomEnableDomain = new_value;
      }
    public void setPandoraCustomEnableDomain(bool new_value)
      {
        setPandoraCustomEnableDomain(new EnableDomainPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableDomain()
      {
        if (flagHasPandoraCustomEnableDomain)
          {
          }
        flagHasPandoraCustomEnableDomain = false;
      }
    public void setPandoraCustomEnableExclusionInTarzanMode(EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableExclusionInTarzanMode)
          {
          }
        flagHasPandoraCustomEnableExclusionInTarzanMode = true;
        storePandoraCustomEnableExclusionInTarzanMode = new_value;
      }
    public void setPandoraCustomEnableExclusionInTarzanMode(bool new_value)
      {
        setPandoraCustomEnableExclusionInTarzanMode(new EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableExclusionInTarzanMode()
      {
        if (flagHasPandoraCustomEnableExclusionInTarzanMode)
          {
          }
        flagHasPandoraCustomEnableExclusionInTarzanMode = false;
      }
    public void setPandoraCustomEnableInferredPlay(EnableInferredPlayPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableInferredPlay)
          {
          }
        flagHasPandoraCustomEnableInferredPlay = true;
        storePandoraCustomEnableInferredPlay = new_value;
      }
    public void setPandoraCustomEnableInferredPlay(bool new_value)
      {
        setPandoraCustomEnableInferredPlay(new EnableInferredPlayPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableInferredPlay()
      {
        if (flagHasPandoraCustomEnableInferredPlay)
          {
          }
        flagHasPandoraCustomEnableInferredPlay = false;
      }
    public void setPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList)
          {
          }
        flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = true;
        storePandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = new_value;
      }
    public void setPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(bool new_value)
      {
        setPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(new EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList()
      {
        if (flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList)
          {
          }
        flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = false;
      }
    public void setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON  new_value)
      {
        if (flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords)
          {
          }
        flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = true;
        storePandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = new_value;
      }
    public void setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.TypeValue new_value)
      {
        setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(new EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON(new_value));
      }
    public void setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(string chars)
      {
        setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(new EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON(chars));
      }
    public void unsetPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords()
      {
        if (flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords)
          {
          }
        flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = false;
      }
    public void setPandoraCustomEnableLongJSONFallback(EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableLongJSONFallback)
          {
          }
        flagHasPandoraCustomEnableLongJSONFallback = true;
        storePandoraCustomEnableLongJSONFallback = new_value;
      }
    public void setPandoraCustomEnableLongJSONFallback(bool new_value)
      {
        setPandoraCustomEnableLongJSONFallback(new EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableLongJSONFallback()
      {
        if (flagHasPandoraCustomEnableLongJSONFallback)
          {
          }
        flagHasPandoraCustomEnableLongJSONFallback = false;
      }
    public void setPandoraCustomEnablePodcastMatches(EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnablePodcastMatches)
          {
          }
        flagHasPandoraCustomEnablePodcastMatches = true;
        storePandoraCustomEnablePodcastMatches = new_value;
      }
    public void setPandoraCustomEnablePodcastMatches(bool new_value)
      {
        setPandoraCustomEnablePodcastMatches(new EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnablePodcastMatches()
      {
        if (flagHasPandoraCustomEnablePodcastMatches)
          {
          }
        flagHasPandoraCustomEnablePodcastMatches = false;
      }
    public void setPandoraCustomEnableUserDataQueries(EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableUserDataQueries)
          {
          }
        flagHasPandoraCustomEnableUserDataQueries = true;
        storePandoraCustomEnableUserDataQueries = new_value;
      }
    public void setPandoraCustomEnableUserDataQueries(bool new_value)
      {
        setPandoraCustomEnableUserDataQueries(new EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableUserDataQueries()
      {
        if (flagHasPandoraCustomEnableUserDataQueries)
          {
          }
        flagHasPandoraCustomEnableUserDataQueries = false;
      }
    public void setPandoraCustomEnableWildcardMatches(EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableWildcardMatches)
          {
          }
        flagHasPandoraCustomEnableWildcardMatches = true;
        storePandoraCustomEnableWildcardMatches = new_value;
      }
    public void setPandoraCustomEnableWildcardMatches(bool new_value)
      {
        setPandoraCustomEnableWildcardMatches(new EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableWildcardMatches()
      {
        if (flagHasPandoraCustomEnableWildcardMatches)
          {
          }
        flagHasPandoraCustomEnableWildcardMatches = false;
      }
    public void setPandoraCustomEnableWildcardMatchesOnlyAsFallback(EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback)
          {
          }
        flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback = true;
        storePandoraCustomEnableWildcardMatchesOnlyAsFallback = new_value;
      }
    public void setPandoraCustomEnableWildcardMatchesOnlyAsFallback(bool new_value)
      {
        setPandoraCustomEnableWildcardMatchesOnlyAsFallback(new EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON(new_value));
      }
    public void unsetPandoraCustomEnableWildcardMatchesOnlyAsFallback()
      {
        if (flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback)
          {
          }
        flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback = false;
      }
    public void setPandoraCustomExtendedStationModeData(ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomExtendedStationModeData)
          {
          }
        flagHasPandoraCustomExtendedStationModeData = true;
        storePandoraCustomExtendedStationModeData = new_value;
      }
    public void unsetPandoraCustomExtendedStationModeData()
      {
        if (flagHasPandoraCustomExtendedStationModeData)
          {
          }
        flagHasPandoraCustomExtendedStationModeData = false;
      }
    public void setPandoraCustomRapidIngestionData(RapidIngestionDataPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomRapidIngestionData)
          {
          }
        flagHasPandoraCustomRapidIngestionData = true;
        storePandoraCustomRapidIngestionData = new_value;
      }
    public void unsetPandoraCustomRapidIngestionData()
      {
        if (flagHasPandoraCustomRapidIngestionData)
          {
          }
        flagHasPandoraCustomRapidIngestionData = false;
      }
    public void setPandoraCustomUserData(UserDataPandoraCustomRequestInfoFieldJSON  new_value)
      {
        if (flagHasPandoraCustomUserData)
          {
          }
        flagHasPandoraCustomUserData = true;
        storePandoraCustomUserData = new_value;
      }
    public void unsetPandoraCustomUserData()
      {
        if (flagHasPandoraCustomUserData)
          {
          }
        flagHasPandoraCustomUserData = false;
      }
    public void setParkingClientState(ParkingClientStateJSON  new_value)
      {
        if (flagHasParkingClientState)
          {
          }
        flagHasParkingClientState = true;
        storeParkingClientState = new_value;
      }
    public void unsetParkingClientState()
      {
        if (flagHasParkingClientState)
          {
          }
        flagHasParkingClientState = false;
      }
    public void setPepperEnabled(PepperEnabledJSON  new_value)
      {
        if (flagHasPepperEnabled)
          {
          }
        flagHasPepperEnabled = true;
        storePepperEnabled = new_value;
      }
    public void setPepperEnabled(bool new_value)
      {
        setPepperEnabled(new PepperEnabledJSON(new_value));
      }
    public void unsetPepperEnabled()
      {
        if (flagHasPepperEnabled)
          {
          }
        flagHasPepperEnabled = false;
      }
    public void setPhoneDisambiguationOmitList(PhoneDisambiguationOmitListJSON  new_value)
      {
        if (flagHasPhoneDisambiguationOmitList)
          {
          }
        flagHasPhoneDisambiguationOmitList = true;
        storePhoneDisambiguationOmitList = new_value;
      }
    public void unsetPhoneDisambiguationOmitList()
      {
        if (flagHasPhoneDisambiguationOmitList)
          {
          }
        flagHasPhoneDisambiguationOmitList = false;
      }
    public void setRadioControlAvailableAudioSources(RadioControlAvailableAudioSourcesJSON  new_value)
      {
        if (flagHasRadioControlAvailableAudioSources)
          {
          }
        flagHasRadioControlAvailableAudioSources = true;
        storeRadioControlAvailableAudioSources = new_value;
      }
    public void unsetRadioControlAvailableAudioSources()
      {
        if (flagHasRadioControlAvailableAudioSources)
          {
          }
        flagHasRadioControlAvailableAudioSources = false;
      }
    public void setRadioControlOtherAMBands(RadioControlOtherAMBandsJSON  new_value)
      {
        if (flagHasRadioControlOtherAMBands)
          {
          }
        flagHasRadioControlOtherAMBands = true;
        storeRadioControlOtherAMBands = new_value;
      }
    public void unsetRadioControlOtherAMBands()
      {
        if (flagHasRadioControlOtherAMBands)
          {
          }
        flagHasRadioControlOtherAMBands = false;
      }
    public void setRadioControlOtherFMBands(RadioControlOtherFMBandsJSON  new_value)
      {
        if (flagHasRadioControlOtherFMBands)
          {
          }
        flagHasRadioControlOtherFMBands = true;
        storeRadioControlOtherFMBands = new_value;
      }
    public void unsetRadioControlOtherFMBands()
      {
        if (flagHasRadioControlOtherFMBands)
          {
          }
        flagHasRadioControlOtherFMBands = false;
      }
    public void setRadioControlRecognizeNorthAmericanAMBand(RadioControlRecognizeNorthAmericanAMBandJSON  new_value)
      {
        if (flagHasRadioControlRecognizeNorthAmericanAMBand)
          {
          }
        flagHasRadioControlRecognizeNorthAmericanAMBand = true;
        storeRadioControlRecognizeNorthAmericanAMBand = new_value;
      }
    public void setRadioControlRecognizeNorthAmericanAMBand(bool new_value)
      {
        setRadioControlRecognizeNorthAmericanAMBand(new RadioControlRecognizeNorthAmericanAMBandJSON(new_value));
      }
    public void unsetRadioControlRecognizeNorthAmericanAMBand()
      {
        if (flagHasRadioControlRecognizeNorthAmericanAMBand)
          {
          }
        flagHasRadioControlRecognizeNorthAmericanAMBand = false;
      }
    public void setRadioControlRecognizeNorthAmericanFMBand(RadioControlRecognizeNorthAmericanFMBandJSON  new_value)
      {
        if (flagHasRadioControlRecognizeNorthAmericanFMBand)
          {
          }
        flagHasRadioControlRecognizeNorthAmericanFMBand = true;
        storeRadioControlRecognizeNorthAmericanFMBand = new_value;
      }
    public void setRadioControlRecognizeNorthAmericanFMBand(bool new_value)
      {
        setRadioControlRecognizeNorthAmericanFMBand(new RadioControlRecognizeNorthAmericanFMBandJSON(new_value));
      }
    public void unsetRadioControlRecognizeNorthAmericanFMBand()
      {
        if (flagHasRadioControlRecognizeNorthAmericanFMBand)
          {
          }
        flagHasRadioControlRecognizeNorthAmericanFMBand = false;
      }
    public void setRadioControlTunableStations(RadioControlTunableStationsJSON  new_value)
      {
        if (flagHasRadioControlTunableStations)
          {
          }
        flagHasRadioControlTunableStations = true;
        storeRadioControlTunableStations = new_value;
      }
    public void unsetRadioControlTunableStations()
      {
        if (flagHasRadioControlTunableStations)
          {
          }
        flagHasRadioControlTunableStations = false;
      }
    public void setReadSpeakerVoiceParameters(ReadSpeakerVoiceParametersJSON  new_value)
      {
        if (flagHasReadSpeakerVoiceParameters)
          {
          }
        flagHasReadSpeakerVoiceParameters = true;
        storeReadSpeakerVoiceParameters = new_value;
      }
    public void unsetReadSpeakerVoiceParameters()
      {
        if (flagHasReadSpeakerVoiceParameters)
          {
          }
        flagHasReadSpeakerVoiceParameters = false;
      }
    public void setRecipeParameters(RecipeParametersJSON  new_value)
      {
        if (flagHasRecipeParameters)
          {
          }
        flagHasRecipeParameters = true;
        storeRecipeParameters = new_value;
      }
    public void unsetRecipeParameters()
      {
        if (flagHasRecipeParameters)
          {
          }
        flagHasRecipeParameters = false;
      }
    public void setRegionalPhoneNumberConfiguration(RegionalPhoneNumberConfigurationJSON  new_value)
      {
        if (flagHasRegionalPhoneNumberConfiguration)
          {
          }
        flagHasRegionalPhoneNumberConfiguration = true;
        storeRegionalPhoneNumberConfiguration = new_value;
      }
    public void unsetRegionalPhoneNumberConfiguration()
      {
        if (flagHasRegionalPhoneNumberConfiguration)
          {
          }
        flagHasRegionalPhoneNumberConfiguration = false;
      }
    public void setRemainingDistance(AmountJSON  new_value)
      {
        if (flagHasRemainingDistance)
          {
          }
        flagHasRemainingDistance = true;
        storeRemainingDistance = new_value;
      }
    public void unsetRemainingDistance()
      {
        if (flagHasRemainingDistance)
          {
          }
        flagHasRemainingDistance = false;
      }
    public void setRemainingTravelTime(AmountJSON  new_value)
      {
        if (flagHasRemainingTravelTime)
          {
          }
        flagHasRemainingTravelTime = true;
        storeRemainingTravelTime = new_value;
      }
    public void unsetRemainingTravelTime()
      {
        if (flagHasRemainingTravelTime)
          {
          }
        flagHasRemainingTravelTime = false;
      }
    public void setReminders(ReminderListJSON  new_value)
      {
        if (flagHasReminders)
          {
          }
        flagHasReminders = true;
        storeReminders = new_value;
      }
    public void unsetReminders()
      {
        if (flagHasReminders)
          {
          }
        flagHasReminders = false;
      }
    public void setRestaurantMenuMetadata(RestaurantMenuMetadataJSON  new_value)
      {
        if (flagHasRestaurantMenuMetadata)
          {
          }
        flagHasRestaurantMenuMetadata = true;
        storeRestaurantMenuMetadata = new_value;
      }
    public void unsetRestaurantMenuMetadata()
      {
        if (flagHasRestaurantMenuMetadata)
          {
          }
        flagHasRestaurantMenuMetadata = false;
      }
    public void setRestaurantMenuObject(RestaurantMenuObjectJSON  new_value)
      {
        if (flagHasRestaurantMenuObject)
          {
          }
        flagHasRestaurantMenuObject = true;
        storeRestaurantMenuObject = new_value;
      }
    public void unsetRestaurantMenuObject()
      {
        if (flagHasRestaurantMenuObject)
          {
          }
        flagHasRestaurantMenuObject = false;
      }
    public void setRestaurantOrderingMenuData(RestaurantOrderingMenuDataJSON  new_value)
      {
        if (flagHasRestaurantOrderingMenuData)
          {
          }
        flagHasRestaurantOrderingMenuData = true;
        storeRestaurantOrderingMenuData = new_value;
      }
    public void unsetRestaurantOrderingMenuData()
      {
        if (flagHasRestaurantOrderingMenuData)
          {
          }
        flagHasRestaurantOrderingMenuData = false;
      }
    public void setRestaurantOrderingQueriesMenuDataStoreID(RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON  new_value)
      {
        if (flagHasRestaurantOrderingQueriesMenuDataStoreID)
          {
          }
        flagHasRestaurantOrderingQueriesMenuDataStoreID = true;
        storeRestaurantOrderingQueriesMenuDataStoreID = new_value;
      }
    public void setRestaurantOrderingQueriesMenuDataStoreID(string new_value)
      {
        setRestaurantOrderingQueriesMenuDataStoreID(new RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON(new_value));
      }
    public void unsetRestaurantOrderingQueriesMenuDataStoreID()
      {
        if (flagHasRestaurantOrderingQueriesMenuDataStoreID)
          {
          }
        flagHasRestaurantOrderingQueriesMenuDataStoreID = false;
      }
    public void setRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON  new_value)
      {
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent)
          {
          }
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = true;
        storeRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = new_value;
      }
    public void setRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(BigInteger new_value)
      {
        setRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(new RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON(new_value));
      }
    public void unsetRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent()
      {
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent)
          {
          }
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = false;
      }
    public void setRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON  new_value)
      {
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent)
          {
          }
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = true;
        storeRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = new_value;
      }
    public void setRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(BigInteger new_value)
      {
        setRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(new RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON(new_value));
      }
    public void unsetRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent()
      {
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent)
          {
          }
        flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = false;
      }
    public void setRestaurantOrderingQueriesRequestData(RestaurantOrderingQueriesRequestDataJSON  new_value)
      {
        if (flagHasRestaurantOrderingQueriesRequestData)
          {
          }
        flagHasRestaurantOrderingQueriesRequestData = true;
        storeRestaurantOrderingQueriesRequestData = new_value;
      }
    public void unsetRestaurantOrderingQueriesRequestData()
      {
        if (flagHasRestaurantOrderingQueriesRequestData)
          {
          }
        flagHasRestaurantOrderingQueriesRequestData = false;
      }
    public void setReturnInformationNuggetsForMusicSearch(ReturnInformationNuggetsForMusicSearchJSON  new_value)
      {
        if (flagHasReturnInformationNuggetsForMusicSearch)
          {
          }
        flagHasReturnInformationNuggetsForMusicSearch = true;
        storeReturnInformationNuggetsForMusicSearch = new_value;
      }
    public void setReturnInformationNuggetsForMusicSearch(bool new_value)
      {
        setReturnInformationNuggetsForMusicSearch(new ReturnInformationNuggetsForMusicSearchJSON(new_value));
      }
    public void unsetReturnInformationNuggetsForMusicSearch()
      {
        if (flagHasReturnInformationNuggetsForMusicSearch)
          {
          }
        flagHasReturnInformationNuggetsForMusicSearch = false;
      }
    public void setRobotInfo(RobotInfoJSON  new_value)
      {
        if (flagHasRobotInfo)
          {
          }
        flagHasRobotInfo = true;
        storeRobotInfo = new_value;
      }
    public void unsetRobotInfo()
      {
        if (flagHasRobotInfo)
          {
          }
        flagHasRobotInfo = false;
      }
    public void setSendFullWeatherForecastData(SendFullWeatherForecastDataJSON  new_value)
      {
        if (flagHasSendFullWeatherForecastData)
          {
          }
        flagHasSendFullWeatherForecastData = true;
        storeSendFullWeatherForecastData = new_value;
      }
    public void setSendFullWeatherForecastData(bool new_value)
      {
        setSendFullWeatherForecastData(new SendFullWeatherForecastDataJSON(new_value));
      }
    public void unsetSendFullWeatherForecastData()
      {
        if (flagHasSendFullWeatherForecastData)
          {
          }
        flagHasSendFullWeatherForecastData = false;
      }
    public void setSetUserMemoryLocation(SetUserMemoryLocationJSON  new_value)
      {
        if (flagHasSetUserMemoryLocation)
          {
          }
        flagHasSetUserMemoryLocation = true;
        storeSetUserMemoryLocation = new_value;
      }
    public void unsetSetUserMemoryLocation()
      {
        if (flagHasSetUserMemoryLocation)
          {
          }
        flagHasSetUserMemoryLocation = false;
      }
    public void setSiriusXMEnableDomain(SiriusXMEnableDomainJSON  new_value)
      {
        if (flagHasSiriusXMEnableDomain)
          {
          }
        flagHasSiriusXMEnableDomain = true;
        storeSiriusXMEnableDomain = new_value;
      }
    public void setSiriusXMEnableDomain(bool new_value)
      {
        setSiriusXMEnableDomain(new SiriusXMEnableDomainJSON(new_value));
      }
    public void unsetSiriusXMEnableDomain()
      {
        if (flagHasSiriusXMEnableDomain)
          {
          }
        flagHasSiriusXMEnableDomain = false;
      }
    public void setSiriusXMEnableGenericChannelMatches(SiriusXMEnableGenericChannelMatchesJSON  new_value)
      {
        if (flagHasSiriusXMEnableGenericChannelMatches)
          {
          }
        flagHasSiriusXMEnableGenericChannelMatches = true;
        storeSiriusXMEnableGenericChannelMatches = new_value;
      }
    public void setSiriusXMEnableGenericChannelMatches(bool new_value)
      {
        setSiriusXMEnableGenericChannelMatches(new SiriusXMEnableGenericChannelMatchesJSON(new_value));
      }
    public void unsetSiriusXMEnableGenericChannelMatches()
      {
        if (flagHasSiriusXMEnableGenericChannelMatches)
          {
          }
        flagHasSiriusXMEnableGenericChannelMatches = false;
      }
    public void setSiriusXMEnableWildcardMatches(SiriusXMEnableWildcardMatchesJSON  new_value)
      {
        if (flagHasSiriusXMEnableWildcardMatches)
          {
          }
        flagHasSiriusXMEnableWildcardMatches = true;
        storeSiriusXMEnableWildcardMatches = new_value;
      }
    public void setSiriusXMEnableWildcardMatches(bool new_value)
      {
        setSiriusXMEnableWildcardMatches(new SiriusXMEnableWildcardMatchesJSON(new_value));
      }
    public void unsetSiriusXMEnableWildcardMatches()
      {
        if (flagHasSiriusXMEnableWildcardMatches)
          {
          }
        flagHasSiriusXMEnableWildcardMatches = false;
      }
    public void setSmartTVOnScreenItems(SmartTVOnScreenItemsRequestInfoFieldJSON  new_value)
      {
        if (flagHasSmartTVOnScreenItems)
          {
          }
        flagHasSmartTVOnScreenItems = true;
        storeSmartTVOnScreenItems = new_value;
      }
    public void unsetSmartTVOnScreenItems()
      {
        if (flagHasSmartTVOnScreenItems)
          {
          }
        flagHasSmartTVOnScreenItems = false;
      }
    public void setSmartTVUserCustomInputSource(SmartTVUserCustomInputSourceRequestInfoFieldJSON  new_value)
      {
        if (flagHasSmartTVUserCustomInputSource)
          {
          }
        flagHasSmartTVUserCustomInputSource = true;
        storeSmartTVUserCustomInputSource = new_value;
      }
    public void unsetSmartTVUserCustomInputSource()
      {
        if (flagHasSmartTVUserCustomInputSource)
          {
          }
        flagHasSmartTVUserCustomInputSource = false;
      }
    public void setSoundHoundTTSParameters(SoundHoundTTSParametersJSON  new_value)
      {
        if (flagHasSoundHoundTTSParameters)
          {
          }
        flagHasSoundHoundTTSParameters = true;
        storeSoundHoundTTSParameters = new_value;
      }
    public void unsetSoundHoundTTSParameters()
      {
        if (flagHasSoundHoundTTSParameters)
          {
          }
        flagHasSoundHoundTTSParameters = false;
      }
    public void setSpeedLimitOnThisRoad(AmountJSON  new_value)
      {
        if (flagHasSpeedLimitOnThisRoad)
          {
          }
        flagHasSpeedLimitOnThisRoad = true;
        storeSpeedLimitOnThisRoad = new_value;
      }
    public void unsetSpeedLimitOnThisRoad()
      {
        if (flagHasSpeedLimitOnThisRoad)
          {
          }
        flagHasSpeedLimitOnThisRoad = false;
      }
    public void setSportsLeagueControl(SportsLeagueControlJSON  new_value)
      {
        if (flagHasSportsLeagueControl)
          {
          }
        flagHasSportsLeagueControl = true;
        storeSportsLeagueControl = new_value;
      }
    public void unsetSportsLeagueControl()
      {
        if (flagHasSportsLeagueControl)
          {
          }
        flagHasSportsLeagueControl = false;
      }
    public void setSpotifyPlaylistEnableWildcardMatches(EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON  new_value)
      {
        if (flagHasSpotifyPlaylistEnableWildcardMatches)
          {
          }
        flagHasSpotifyPlaylistEnableWildcardMatches = true;
        storeSpotifyPlaylistEnableWildcardMatches = new_value;
      }
    public void setSpotifyPlaylistEnableWildcardMatches(bool new_value)
      {
        setSpotifyPlaylistEnableWildcardMatches(new EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON(new_value));
      }
    public void unsetSpotifyPlaylistEnableWildcardMatches()
      {
        if (flagHasSpotifyPlaylistEnableWildcardMatches)
          {
          }
        flagHasSpotifyPlaylistEnableWildcardMatches = false;
      }
    public void setStoredAlwaysMatchReadData(StoredAlwaysMatchReadDataJSON  new_value)
      {
        if (flagHasStoredAlwaysMatchReadData)
          {
          }
        flagHasStoredAlwaysMatchReadData = true;
        storeStoredAlwaysMatchReadData = new_value;
      }
    public void setStoredAlwaysMatchReadData(bool new_value)
      {
        setStoredAlwaysMatchReadData(new StoredAlwaysMatchReadDataJSON(new_value));
      }
    public void unsetStoredAlwaysMatchReadData()
      {
        if (flagHasStoredAlwaysMatchReadData)
          {
          }
        flagHasStoredAlwaysMatchReadData = false;
      }
    public void setStoredAlwaysMatchWriteData(ClientMatchesJSON  new_value)
      {
        if (flagHasStoredAlwaysMatchWriteData)
          {
          }
        flagHasStoredAlwaysMatchWriteData = true;
        storeStoredAlwaysMatchWriteData = new_value;
      }
    public void unsetStoredAlwaysMatchWriteData()
      {
        if (flagHasStoredAlwaysMatchWriteData)
          {
          }
        flagHasStoredAlwaysMatchWriteData = false;
      }
    public void setStoredGlobalPagesToMatch(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredGlobalPagesToMatch)
          {
          }
        flagHasStoredGlobalPagesToMatch = true;
        storeStoredGlobalPagesToMatch = new_value;
      }
    public void unsetStoredGlobalPagesToMatch()
      {
        if (flagHasStoredGlobalPagesToMatch)
          {
          }
        flagHasStoredGlobalPagesToMatch = false;
      }
    public void setStoredGlobalPagesToNotMatch(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredGlobalPagesToNotMatch)
          {
          }
        flagHasStoredGlobalPagesToNotMatch = true;
        storeStoredGlobalPagesToNotMatch = new_value;
      }
    public void unsetStoredGlobalPagesToNotMatch()
      {
        if (flagHasStoredGlobalPagesToNotMatch)
          {
          }
        flagHasStoredGlobalPagesToNotMatch = false;
      }
    public void setStoredGlobalPagesToSetOffByDefault(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredGlobalPagesToSetOffByDefault)
          {
          }
        flagHasStoredGlobalPagesToSetOffByDefault = true;
        storeStoredGlobalPagesToSetOffByDefault = new_value;
      }
    public void unsetStoredGlobalPagesToSetOffByDefault()
      {
        if (flagHasStoredGlobalPagesToSetOffByDefault)
          {
          }
        flagHasStoredGlobalPagesToSetOffByDefault = false;
      }
    public void setStoredGlobalPagesToSetOnByDefault(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredGlobalPagesToSetOnByDefault)
          {
          }
        flagHasStoredGlobalPagesToSetOnByDefault = true;
        storeStoredGlobalPagesToSetOnByDefault = new_value;
      }
    public void unsetStoredGlobalPagesToSetOnByDefault()
      {
        if (flagHasStoredGlobalPagesToSetOnByDefault)
          {
          }
        flagHasStoredGlobalPagesToSetOnByDefault = false;
      }
    public void setStoredPageMatchPageListData(StoredPageMatchPageListDataJSON  new_value)
      {
        if (flagHasStoredPageMatchPageListData)
          {
          }
        flagHasStoredPageMatchPageListData = true;
        storeStoredPageMatchPageListData = new_value;
      }
    public void unsetStoredPageMatchPageListData()
      {
        if (flagHasStoredPageMatchPageListData)
          {
          }
        flagHasStoredPageMatchPageListData = false;
      }
    public void setStoredPageMatchReadData(StoredPageMatchReadDataJSON  new_value)
      {
        if (flagHasStoredPageMatchReadData)
          {
          }
        flagHasStoredPageMatchReadData = true;
        storeStoredPageMatchReadData = new_value;
      }
    public void unsetStoredPageMatchReadData()
      {
        if (flagHasStoredPageMatchReadData)
          {
          }
        flagHasStoredPageMatchReadData = false;
      }
    public void setStoredPageMatchWeight(StoredPageMatchWeightJSON  new_value)
      {
        if (flagHasStoredPageMatchWeight)
          {
          }
        flagHasStoredPageMatchWeight = true;
        storeStoredPageMatchWeight = new_value;
      }
    public void setStoredPageMatchWeight(double new_value)
      {
        setStoredPageMatchWeight(new StoredPageMatchWeightJSON(new_value));
      }
    public void unsetStoredPageMatchWeight()
      {
        if (flagHasStoredPageMatchWeight)
          {
          }
        flagHasStoredPageMatchWeight = false;
      }
    public void setStoredPageMatchWriteData(StoredPageMatchWriteDataJSON  new_value)
      {
        if (flagHasStoredPageMatchWriteData)
          {
          }
        flagHasStoredPageMatchWriteData = true;
        storeStoredPageMatchWriteData = new_value;
      }
    public void unsetStoredPageMatchWriteData()
      {
        if (flagHasStoredPageMatchWriteData)
          {
          }
        flagHasStoredPageMatchWriteData = false;
      }
    public void setStoredPerUserPagesToMatch(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredPerUserPagesToMatch)
          {
          }
        flagHasStoredPerUserPagesToMatch = true;
        storeStoredPerUserPagesToMatch = new_value;
      }
    public void unsetStoredPerUserPagesToMatch()
      {
        if (flagHasStoredPerUserPagesToMatch)
          {
          }
        flagHasStoredPerUserPagesToMatch = false;
      }
    public void setStoredPerUserPagesToNotMatch(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredPerUserPagesToNotMatch)
          {
          }
        flagHasStoredPerUserPagesToNotMatch = true;
        storeStoredPerUserPagesToNotMatch = new_value;
      }
    public void unsetStoredPerUserPagesToNotMatch()
      {
        if (flagHasStoredPerUserPagesToNotMatch)
          {
          }
        flagHasStoredPerUserPagesToNotMatch = false;
      }
    public void setStoredPerUserPagesToSetOffByDefault(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredPerUserPagesToSetOffByDefault)
          {
          }
        flagHasStoredPerUserPagesToSetOffByDefault = true;
        storeStoredPerUserPagesToSetOffByDefault = new_value;
      }
    public void unsetStoredPerUserPagesToSetOffByDefault()
      {
        if (flagHasStoredPerUserPagesToSetOffByDefault)
          {
          }
        flagHasStoredPerUserPagesToSetOffByDefault = false;
      }
    public void setStoredPerUserPagesToSetOnByDefault(StoredPageMatchPageListJSON  new_value)
      {
        if (flagHasStoredPerUserPagesToSetOnByDefault)
          {
          }
        flagHasStoredPerUserPagesToSetOnByDefault = true;
        storeStoredPerUserPagesToSetOnByDefault = new_value;
      }
    public void unsetStoredPerUserPagesToSetOnByDefault()
      {
        if (flagHasStoredPerUserPagesToSetOnByDefault)
          {
          }
        flagHasStoredPerUserPagesToSetOnByDefault = false;
      }
    public void setSurveyAPIRequest(SurveyAPIRequestJSON  new_value)
      {
        if (flagHasSurveyAPIRequest)
          {
          }
        flagHasSurveyAPIRequest = true;
        storeSurveyAPIRequest = new_value;
      }
    public void unsetSurveyAPIRequest()
      {
        if (flagHasSurveyAPIRequest)
          {
          }
        flagHasSurveyAPIRequest = false;
      }
    public void setTVChannelList(TVChannelListJSON  new_value)
      {
        if (flagHasTVChannelList)
          {
          }
        flagHasTVChannelList = true;
        storeTVChannelList = new_value;
      }
    public void unsetTVChannelList()
      {
        if (flagHasTVChannelList)
          {
          }
        flagHasTVChannelList = false;
      }
    public void setTerrierTableUploadReadData(TerrierTableUploadReadDataJSON  new_value)
      {
        if (flagHasTerrierTableUploadReadData)
          {
          }
        flagHasTerrierTableUploadReadData = true;
        storeTerrierTableUploadReadData = new_value;
      }
    public void unsetTerrierTableUploadReadData()
      {
        if (flagHasTerrierTableUploadReadData)
          {
          }
        flagHasTerrierTableUploadReadData = false;
      }
    public void setTerrierTableUploadWriteData(TerrierTableUploadWriteDataJSON  new_value)
      {
        if (flagHasTerrierTableUploadWriteData)
          {
          }
        flagHasTerrierTableUploadWriteData = true;
        storeTerrierTableUploadWriteData = new_value;
      }
    public void unsetTerrierTableUploadWriteData()
      {
        if (flagHasTerrierTableUploadWriteData)
          {
          }
        flagHasTerrierTableUploadWriteData = false;
      }
    public void setTerrierUploadDeleteProject(TerrierUploadDeleteProjectJSON  new_value)
      {
        if (flagHasTerrierUploadDeleteProject)
          {
          }
        flagHasTerrierUploadDeleteProject = true;
        storeTerrierUploadDeleteProject = new_value;
      }
    public void unsetTerrierUploadDeleteProject()
      {
        if (flagHasTerrierUploadDeleteProject)
          {
          }
        flagHasTerrierUploadDeleteProject = false;
      }
    public void setTerrierUploadDeleteProjectOptions(TerrierUploadDeleteProjectOptionsJSON  new_value)
      {
        if (flagHasTerrierUploadDeleteProjectOptions)
          {
          }
        flagHasTerrierUploadDeleteProjectOptions = true;
        storeTerrierUploadDeleteProjectOptions = new_value;
      }
    public void unsetTerrierUploadDeleteProjectOptions()
      {
        if (flagHasTerrierUploadDeleteProjectOptions)
          {
          }
        flagHasTerrierUploadDeleteProjectOptions = false;
      }
    public void setTerrierUploadGetProject(TerrierUploadGetProjectJSON  new_value)
      {
        if (flagHasTerrierUploadGetProject)
          {
          }
        flagHasTerrierUploadGetProject = true;
        storeTerrierUploadGetProject = new_value;
      }
    public void unsetTerrierUploadGetProject()
      {
        if (flagHasTerrierUploadGetProject)
          {
          }
        flagHasTerrierUploadGetProject = false;
      }
    public void setTerrierUploadGetProjectList(TerrierUploadGetProjectListJSON  new_value)
      {
        if (flagHasTerrierUploadGetProjectList)
          {
          }
        flagHasTerrierUploadGetProjectList = true;
        storeTerrierUploadGetProjectList = new_value;
      }
    public void unsetTerrierUploadGetProjectList()
      {
        if (flagHasTerrierUploadGetProjectList)
          {
          }
        flagHasTerrierUploadGetProjectList = false;
      }
    public void setTerrierUploadGetProjectListOptions(TerrierUploadGetProjectListOptionsJSON  new_value)
      {
        if (flagHasTerrierUploadGetProjectListOptions)
          {
          }
        flagHasTerrierUploadGetProjectListOptions = true;
        storeTerrierUploadGetProjectListOptions = new_value;
      }
    public void unsetTerrierUploadGetProjectListOptions()
      {
        if (flagHasTerrierUploadGetProjectListOptions)
          {
          }
        flagHasTerrierUploadGetProjectListOptions = false;
      }
    public void setTerrierUploadGetProjectOptions(TerrierUploadGetProjectOptionsJSON  new_value)
      {
        if (flagHasTerrierUploadGetProjectOptions)
          {
          }
        flagHasTerrierUploadGetProjectOptions = true;
        storeTerrierUploadGetProjectOptions = new_value;
      }
    public void unsetTerrierUploadGetProjectOptions()
      {
        if (flagHasTerrierUploadGetProjectOptions)
          {
          }
        flagHasTerrierUploadGetProjectOptions = false;
      }
    public void setTerrierUploadReadData(TerrierUploadReadDataJSON  new_value)
      {
        if (flagHasTerrierUploadReadData)
          {
          }
        flagHasTerrierUploadReadData = true;
        storeTerrierUploadReadData = new_value;
      }
    public void unsetTerrierUploadReadData()
      {
        if (flagHasTerrierUploadReadData)
          {
          }
        flagHasTerrierUploadReadData = false;
      }
    public void setTerrierUploadWriteData(TerrierUploadWriteDataJSON  new_value)
      {
        if (flagHasTerrierUploadWriteData)
          {
          }
        flagHasTerrierUploadWriteData = true;
        storeTerrierUploadWriteData = new_value;
      }
    public void unsetTerrierUploadWriteData()
      {
        if (flagHasTerrierUploadWriteData)
          {
          }
        flagHasTerrierUploadWriteData = false;
      }
    public void setTerrierUploadWriteProject(TerrierUploadedProjectJSON  new_value)
      {
        if (flagHasTerrierUploadWriteProject)
          {
          }
        flagHasTerrierUploadWriteProject = true;
        storeTerrierUploadWriteProject = new_value;
      }
    public void unsetTerrierUploadWriteProject()
      {
        if (flagHasTerrierUploadWriteProject)
          {
          }
        flagHasTerrierUploadWriteProject = false;
      }
    public void setTerrierUploadWriteProjectOptions(TerrierUploadWriteProjectOptionsJSON  new_value)
      {
        if (flagHasTerrierUploadWriteProjectOptions)
          {
          }
        flagHasTerrierUploadWriteProjectOptions = true;
        storeTerrierUploadWriteProjectOptions = new_value;
      }
    public void unsetTerrierUploadWriteProjectOptions()
      {
        if (flagHasTerrierUploadWriteProjectOptions)
          {
          }
        flagHasTerrierUploadWriteProjectOptions = false;
      }
    public void setThirdPartyCalendarService(ThirdPartyCalendarServiceJSON  new_value)
      {
        if (flagHasThirdPartyCalendarService)
          {
          }
        flagHasThirdPartyCalendarService = true;
        storeThirdPartyCalendarService = new_value;
      }
    public void setThirdPartyCalendarService(ThirdPartyCalendarServiceJSON.TypeValue new_value)
      {
        setThirdPartyCalendarService(new ThirdPartyCalendarServiceJSON(new_value));
      }
    public void setThirdPartyCalendarService(string chars)
      {
        setThirdPartyCalendarService(new ThirdPartyCalendarServiceJSON(chars));
      }
    public void unsetThirdPartyCalendarService()
      {
        if (flagHasThirdPartyCalendarService)
          {
          }
        flagHasThirdPartyCalendarService = false;
      }
    public void setCalendarMatchingLoosenessLevel(CalendarMatchingLoosenessLevelJSON  new_value)
      {
        if (flagHasCalendarMatchingLoosenessLevel)
          {
          }
        flagHasCalendarMatchingLoosenessLevel = true;
        storeCalendarMatchingLoosenessLevel = new_value;
      }
    public void setCalendarMatchingLoosenessLevel(CalendarMatchingLoosenessLevelJSON.TypeValue new_value)
      {
        setCalendarMatchingLoosenessLevel(new CalendarMatchingLoosenessLevelJSON(new_value));
      }
    public void setCalendarMatchingLoosenessLevel(string chars)
      {
        CalendarMatchingLoosenessLevelJSON.TypeValueKnownValues known = CalendarMatchingLoosenessLevelJSON.stringToValue(chars);
        CalendarMatchingLoosenessLevelJSON.TypeValue new_value = new CalendarMatchingLoosenessLevelJSON.TypeValue();
        if (known == CalendarMatchingLoosenessLevelJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setCalendarMatchingLoosenessLevel(new_value);
      }
    public void unsetCalendarMatchingLoosenessLevel()
      {
        if (flagHasCalendarMatchingLoosenessLevel)
          {
          }
        flagHasCalendarMatchingLoosenessLevel = false;
      }
    public void setCalendarEvents(CalendarRequestInfoEventsListJSON  new_value)
      {
        if (flagHasCalendarEvents)
          {
          }
        flagHasCalendarEvents = true;
        storeCalendarEvents = new_value;
      }
    public void unsetCalendarEvents()
      {
        if (flagHasCalendarEvents)
          {
          }
        flagHasCalendarEvents = false;
      }
    public void setToshibaTTSParameters(ToshibaTTSParametersJSON  new_value)
      {
        if (flagHasToshibaTTSParameters)
          {
          }
        flagHasToshibaTTSParameters = true;
        storeToshibaTTSParameters = new_value;
      }
    public void unsetToshibaTTSParameters()
      {
        if (flagHasToshibaTTSParameters)
          {
          }
        flagHasToshibaTTSParameters = false;
      }
    public void setTravelBearing(HLSHeadingJSON  new_value)
      {
        if (flagHasTravelBearing)
          {
          }
        flagHasTravelBearing = true;
        storeTravelBearing = new_value;
      }
    public void setTravelBearing(short new_value)
      {
        setTravelBearing(new HLSHeadingJSON(new_value));
      }
    public void unsetTravelBearing()
      {
        if (flagHasTravelBearing)
          {
          }
        flagHasTravelBearing = false;
      }
    public void setUDSExampleRequest(UDSExampleRequestJSON  new_value)
      {
        if (flagHasUDSExampleRequest)
          {
          }
        flagHasUDSExampleRequest = true;
        storeUDSExampleRequest = new_value;
      }
    public void unsetUDSExampleRequest()
      {
        if (flagHasUDSExampleRequest)
          {
          }
        flagHasUDSExampleRequest = false;
      }
    public void setUberClientId(UberClientIdJSON  new_value)
      {
        if (flagHasUberClientId)
          {
          }
        flagHasUberClientId = true;
        storeUberClientId = new_value;
      }
    public void setUberClientId(string new_value)
      {
        setUberClientId(new UberClientIdJSON(new_value));
      }
    public void unsetUberClientId()
      {
        if (flagHasUberClientId)
          {
          }
        flagHasUberClientId = false;
      }
    public void setUberServerToken(UberServerTokenJSON  new_value)
      {
        if (flagHasUberServerToken)
          {
          }
        flagHasUberServerToken = true;
        storeUberServerToken = new_value;
      }
    public void setUberServerToken(string new_value)
      {
        setUberServerToken(new UberServerTokenJSON(new_value));
      }
    public void unsetUberServerToken()
      {
        if (flagHasUberServerToken)
          {
          }
        flagHasUberServerToken = false;
      }
    public void setUploadedTestConfiguration(UploadedTestConfigurationJSON  new_value)
      {
        if (flagHasUploadedTestConfiguration)
          {
          }
        flagHasUploadedTestConfiguration = true;
        storeUploadedTestConfiguration = new_value;
      }
    public void unsetUploadedTestConfiguration()
      {
        if (flagHasUploadedTestConfiguration)
          {
          }
        flagHasUploadedTestConfiguration = false;
      }
    public void setUploadedTestData(UploadedTestsJSON  new_value)
      {
        if (flagHasUploadedTestData)
          {
          }
        flagHasUploadedTestData = true;
        storeUploadedTestData = new_value;
      }
    public void unsetUploadedTestData()
      {
        if (flagHasUploadedTestData)
          {
          }
        flagHasUploadedTestData = false;
      }
    public void setUseNewStyleSMSCommands(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasUseNewStyleSMSCommands)
          {
          }
        flagHasUseNewStyleSMSCommands = true;
        storeUseNewStyleSMSCommands = new_value;
      }
    public void setUseNewStyleSMSCommands(bool new_value)
      {
        setUseNewStyleSMSCommands(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetUseNewStyleSMSCommands()
      {
        if (flagHasUseNewStyleSMSCommands)
          {
          }
        flagHasUseNewStyleSMSCommands = false;
      }
    public void setUseXAPAPI(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasUseXAPAPI)
          {
          }
        flagHasUseXAPAPI = true;
        storeUseXAPAPI = new_value;
      }
    public void setUseXAPAPI(bool new_value)
      {
        setUseXAPAPI(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetUseXAPAPI()
      {
        if (flagHasUseXAPAPI)
          {
          }
        flagHasUseXAPAPI = false;
      }
    public void setUserContactsConfiguration(UserContactsConfigurationJSON  new_value)
      {
        if (flagHasUserContactsConfiguration)
          {
          }
        flagHasUserContactsConfiguration = true;
        storeUserContactsConfiguration = new_value;
      }
    public void unsetUserContactsConfiguration()
      {
        if (flagHasUserContactsConfiguration)
          {
          }
        flagHasUserContactsConfiguration = false;
      }
    public void setUserContactsRequests(UserContactsRequestsJSON  new_value)
      {
        if (flagHasUserContactsRequests)
          {
          }
        flagHasUserContactsRequests = true;
        storeUserContactsRequests = new_value;
      }
    public void unsetUserContactsRequests()
      {
        if (flagHasUserContactsRequests)
          {
          }
        flagHasUserContactsRequests = false;
      }
    public void setUserFeedback(UserFeedbackJSON  new_value)
      {
        if (flagHasUserFeedback)
          {
          }
        flagHasUserFeedback = true;
        storeUserFeedback = new_value;
      }
    public void unsetUserFeedback()
      {
        if (flagHasUserFeedback)
          {
          }
        flagHasUserFeedback = false;
      }
    public void setUserMusicAvailableSources(UserMusicAvailableSourcesJSON  new_value)
      {
        if (flagHasUserMusicAvailableSources)
          {
          }
        flagHasUserMusicAvailableSources = true;
        storeUserMusicAvailableSources = new_value;
      }
    public void unsetUserMusicAvailableSources()
      {
        if (flagHasUserMusicAvailableSources)
          {
          }
        flagHasUserMusicAvailableSources = false;
      }
    public void setUserMusicControls(UserMusicControlsJSON  new_value)
      {
        if (flagHasUserMusicControls)
          {
          }
        flagHasUserMusicControls = true;
        storeUserMusicControls = new_value;
      }
    public void unsetUserMusicControls()
      {
        if (flagHasUserMusicControls)
          {
          }
        flagHasUserMusicControls = false;
      }
    public void setUserMusicInfo(UserMusicInfoJSON  new_value)
      {
        if (flagHasUserMusicInfo)
          {
          }
        flagHasUserMusicInfo = true;
        storeUserMusicInfo = new_value;
      }
    public void unsetUserMusicInfo()
      {
        if (flagHasUserMusicInfo)
          {
          }
        flagHasUserMusicInfo = false;
      }
    public void setVideoSearchConfiguration(VideoSearchRequestInfoConfigurationJSON  new_value)
      {
        if (flagHasVideoSearchConfiguration)
          {
          }
        flagHasVideoSearchConfiguration = true;
        storeVideoSearchConfiguration = new_value;
      }
    public void unsetVideoSearchConfiguration()
      {
        if (flagHasVideoSearchConfiguration)
          {
          }
        flagHasVideoSearchConfiguration = false;
      }
    public void setVideoSearchRequestInfoProviders(VideoSearchRequestInfoProvidersJSON  new_value)
      {
        if (flagHasVideoSearchRequestInfoProviders)
          {
          }
        flagHasVideoSearchRequestInfoProviders = true;
        storeVideoSearchRequestInfoProviders = new_value;
      }
    public void unsetVideoSearchRequestInfoProviders()
      {
        if (flagHasVideoSearchRequestInfoProviders)
          {
          }
        flagHasVideoSearchRequestInfoProviders = false;
      }
    public void setVoiceParameters(VoiceParametersJSON  new_value)
      {
        if (flagHasVoiceParameters)
          {
          }
        flagHasVoiceParameters = true;
        storeVoiceParameters = new_value;
      }
    public void unsetVoiceParameters()
      {
        if (flagHasVoiceParameters)
          {
          }
        flagHasVoiceParameters = false;
      }
    public void setWebSearchConfiguration(WebSearchRequestInfoConfigurationJSON  new_value)
      {
        if (flagHasWebSearchConfiguration)
          {
          }
        flagHasWebSearchConfiguration = true;
        storeWebSearchConfiguration = new_value;
      }
    public void unsetWebSearchConfiguration()
      {
        if (flagHasWebSearchConfiguration)
          {
          }
        flagHasWebSearchConfiguration = false;
      }
    public void setWebSearchRequestInfoProviders(WebSearchRequestInfoProvidersJSON  new_value)
      {
        if (flagHasWebSearchRequestInfoProviders)
          {
          }
        flagHasWebSearchRequestInfoProviders = true;
        storeWebSearchRequestInfoProviders = new_value;
      }
    public void unsetWebSearchRequestInfoProviders()
      {
        if (flagHasWebSearchRequestInfoProviders)
          {
          }
        flagHasWebSearchRequestInfoProviders = false;
      }
    public void setWhat3WordsCluePhraseNotRequired(What3WordsCluePhraseNotRequiredJSON  new_value)
      {
        if (flagHasWhat3WordsCluePhraseNotRequired)
          {
          }
        flagHasWhat3WordsCluePhraseNotRequired = true;
        storeWhat3WordsCluePhraseNotRequired = new_value;
      }
    public void setWhat3WordsCluePhraseNotRequired(bool new_value)
      {
        setWhat3WordsCluePhraseNotRequired(new What3WordsCluePhraseNotRequiredJSON(new_value));
      }
    public void unsetWhat3WordsCluePhraseNotRequired()
      {
        if (flagHasWhat3WordsCluePhraseNotRequired)
          {
          }
        flagHasWhat3WordsCluePhraseNotRequired = false;
      }
    public void setWhat3WordsStandardGeofenceRadius(What3WordsStandardGeofenceRadiusJSON  new_value)
      {
        if (flagHasWhat3WordsStandardGeofenceRadius)
          {
          }
        flagHasWhat3WordsStandardGeofenceRadius = true;
        storeWhat3WordsStandardGeofenceRadius = new_value;
      }
    public void setWhat3WordsStandardGeofenceRadius(short new_value)
      {
        setWhat3WordsStandardGeofenceRadius(new What3WordsStandardGeofenceRadiusJSON(new_value));
      }
    public void unsetWhat3WordsStandardGeofenceRadius()
      {
        if (flagHasWhat3WordsStandardGeofenceRadius)
          {
          }
        flagHasWhat3WordsStandardGeofenceRadius = false;
      }
    public void setHereApiPlacesFallback(HereApiPlacesFallbackSettingsJSON  new_value)
      {
        if (flagHasHereApiPlacesFallback)
          {
          }
        flagHasHereApiPlacesFallback = true;
        storeHereApiPlacesFallback = new_value;
      }
    public void unsetHereApiPlacesFallback()
      {
        if (flagHasHereApiPlacesFallback)
          {
          }
        flagHasHereApiPlacesFallback = false;
      }
    public void setPaymentsPredeterminedSMSNumber(PaymentsPredeterminedSMSNumberFieldJSON  new_value)
      {
        if (flagHasPaymentsPredeterminedSMSNumber)
          {
          }
        flagHasPaymentsPredeterminedSMSNumber = true;
        storePaymentsPredeterminedSMSNumber = new_value;
      }
    public void setPaymentsPredeterminedSMSNumber(string new_value)
      {
        setPaymentsPredeterminedSMSNumber(new PaymentsPredeterminedSMSNumberFieldJSON(new_value));
      }
    public void unsetPaymentsPredeterminedSMSNumber()
      {
        if (flagHasPaymentsPredeterminedSMSNumber)
          {
          }
        flagHasPaymentsPredeterminedSMSNumber = false;
      }
    public void setPaymentsPredeterminedPaymentMethod(PaymentsPaymentMethodTypeJSON  new_value)
      {
        if (flagHasPaymentsPredeterminedPaymentMethod)
          {
          }
        flagHasPaymentsPredeterminedPaymentMethod = true;
        storePaymentsPredeterminedPaymentMethod = new_value;
      }
    public void setPaymentsPredeterminedPaymentMethod(PaymentsPaymentMethodTypeJSON.TypeValue new_value)
      {
        setPaymentsPredeterminedPaymentMethod(new PaymentsPaymentMethodTypeJSON(new_value));
      }
    public void setPaymentsPredeterminedPaymentMethod(string chars)
      {
        PaymentsPaymentMethodTypeJSON.TypeValueKnownValues known = PaymentsPaymentMethodTypeJSON.stringToValue(chars);
        PaymentsPaymentMethodTypeJSON.TypeValue new_value = new PaymentsPaymentMethodTypeJSON.TypeValue();
        if (known == PaymentsPaymentMethodTypeJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setPaymentsPredeterminedPaymentMethod(new_value);
      }
    public void unsetPaymentsPredeterminedPaymentMethod()
      {
        if (flagHasPaymentsPredeterminedPaymentMethod)
          {
          }
        flagHasPaymentsPredeterminedPaymentMethod = false;
      }
    public void setOrderSource(PaymentsOrderSourceFieldJSON  new_value)
      {
        if (flagHasOrderSource)
          {
          }
        flagHasOrderSource = true;
        storeOrderSource = new_value;
      }
    public void setOrderSource(string new_value)
      {
        setOrderSource(new PaymentsOrderSourceFieldJSON(new_value));
      }
    public void unsetOrderSource()
      {
        if (flagHasOrderSource)
          {
          }
        flagHasOrderSource = false;
      }
    public void setOrderPrepDuration(PaymentsOrderPrepDurationFieldJSON  new_value)
      {
        if (flagHasOrderPrepDuration)
          {
          }
        flagHasOrderPrepDuration = true;
        storeOrderPrepDuration = new_value;
      }
    public void setOrderPrepDuration(string new_value)
      {
        setOrderPrepDuration(new PaymentsOrderPrepDurationFieldJSON(new_value));
      }
    public void unsetOrderPrepDuration()
      {
        if (flagHasOrderPrepDuration)
          {
          }
        flagHasOrderPrepDuration = false;
      }
    public void setSquareEnvironment(SquareEnvironmentJSON  new_value)
      {
        if (flagHasSquareEnvironment)
          {
          }
        flagHasSquareEnvironment = true;
        storeSquareEnvironment = new_value;
      }
    public void setSquareEnvironment(SquareEnvironmentJSON.TypeValue new_value)
      {
        setSquareEnvironment(new SquareEnvironmentJSON(new_value));
      }
    public void setSquareEnvironment(string chars)
      {
        SquareEnvironmentJSON.TypeValueKnownValues known = SquareEnvironmentJSON.stringToValue(chars);
        SquareEnvironmentJSON.TypeValue new_value = new SquareEnvironmentJSON.TypeValue();
        if (known == SquareEnvironmentJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setSquareEnvironment(new_value);
      }
    public void unsetSquareEnvironment()
      {
        if (flagHasSquareEnvironment)
          {
          }
        flagHasSquareEnvironment = false;
      }
    public void setEnableSquareCustomerInformationPermissions(EnableSquareCustomerInformationPermissionsJSON  new_value)
      {
        if (flagHasEnableSquareCustomerInformationPermissions)
          {
          }
        flagHasEnableSquareCustomerInformationPermissions = true;
        storeEnableSquareCustomerInformationPermissions = new_value;
      }
    public void setEnableSquareCustomerInformationPermissions(bool new_value)
      {
        setEnableSquareCustomerInformationPermissions(new EnableSquareCustomerInformationPermissionsJSON(new_value));
      }
    public void unsetEnableSquareCustomerInformationPermissions()
      {
        if (flagHasEnableSquareCustomerInformationPermissions)
          {
          }
        flagHasEnableSquareCustomerInformationPermissions = false;
      }
    public void setMessagingConvertPunctuation(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasMessagingConvertPunctuation)
          {
          }
        flagHasMessagingConvertPunctuation = true;
        storeMessagingConvertPunctuation = new_value;
      }
    public void setMessagingConvertPunctuation(bool new_value)
      {
        setMessagingConvertPunctuation(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetMessagingConvertPunctuation()
      {
        if (flagHasMessagingConvertPunctuation)
          {
          }
        flagHasMessagingConvertPunctuation = false;
      }
    public void setAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(RequestInfoBooleanFlagJSON  new_value)
      {
        if (flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode)
          {
          }
        flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = true;
        storeAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = new_value;
      }
    public void setAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(bool new_value)
      {
        setAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(new RequestInfoBooleanFlagJSON(new_value));
      }
    public void unsetAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode()
      {
        if (flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode)
          {
          }
        flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = false;
      }
    public void setStreamPreference(StreamPreferenceJSON  new_value)
      {
        if (flagHasStreamPreference)
          {
          }
        flagHasStreamPreference = true;
        storeStreamPreference = new_value;
      }
    public void unsetStreamPreference()
      {
        if (flagHasStreamPreference)
          {
          }
        flagHasStreamPreference = false;
      }
    public void setMusicQueriesForceInfoNuggetToPlayCommand(MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON  new_value)
      {
        if (flagHasMusicQueriesForceInfoNuggetToPlayCommand)
          {
          }
        flagHasMusicQueriesForceInfoNuggetToPlayCommand = true;
        storeMusicQueriesForceInfoNuggetToPlayCommand = new_value;
      }
    public void setMusicQueriesForceInfoNuggetToPlayCommand(bool new_value)
      {
        setMusicQueriesForceInfoNuggetToPlayCommand(new MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON(new_value));
      }
    public void unsetMusicQueriesForceInfoNuggetToPlayCommand()
      {
        if (flagHasMusicQueriesForceInfoNuggetToPlayCommand)
          {
          }
        flagHasMusicQueriesForceInfoNuggetToPlayCommand = false;
      }
    public void setMusicQueriesAllowRawTop(MusicQueriesAllowRawTopRequestInfoFieldJSON  new_value)
      {
        if (flagHasMusicQueriesAllowRawTop)
          {
          }
        flagHasMusicQueriesAllowRawTop = true;
        storeMusicQueriesAllowRawTop = new_value;
      }
    public void setMusicQueriesAllowRawTop(bool new_value)
      {
        setMusicQueriesAllowRawTop(new MusicQueriesAllowRawTopRequestInfoFieldJSON(new_value));
      }
    public void unsetMusicQueriesAllowRawTop()
      {
        if (flagHasMusicQueriesAllowRawTop)
          {
          }
        flagHasMusicQueriesAllowRawTop = false;
      }
    public void setBusinessInformationUploadData(BusinessInformationUploadDataRequestJSON  new_value)
      {
        if (flagHasBusinessInformationUploadData)
          {
          }
        flagHasBusinessInformationUploadData = true;
        storeBusinessInformationUploadData = new_value;
      }
    public void unsetBusinessInformationUploadData()
      {
        if (flagHasBusinessInformationUploadData)
          {
          }
        flagHasBusinessInformationUploadData = false;
      }
    public void setBusinessInformationDataStoreId(BusinessInformationDataStoreIdJSON  new_value)
      {
        if (flagHasBusinessInformationDataStoreId)
          {
          }
        flagHasBusinessInformationDataStoreId = true;
        storeBusinessInformationDataStoreId = new_value;
      }
    public void setBusinessInformationDataStoreId(string new_value)
      {
        setBusinessInformationDataStoreId(new BusinessInformationDataStoreIdJSON(new_value));
      }
    public void unsetBusinessInformationDataStoreId()
      {
        if (flagHasBusinessInformationDataStoreId)
          {
          }
        flagHasBusinessInformationDataStoreId = false;
      }
    public void setCustomASREnhancementWriteData(CustomASREnhancementDataJSON  new_value)
      {
        if (flagHasCustomASREnhancementWriteData)
          {
          }
        flagHasCustomASREnhancementWriteData = true;
        storeCustomASREnhancementWriteData = new_value;
      }
    public void unsetCustomASREnhancementWriteData()
      {
        if (flagHasCustomASREnhancementWriteData)
          {
          }
        flagHasCustomASREnhancementWriteData = false;
      }
    public void setCustomASREnhancementReadData(CustomASREnhancementReadDataJSON  new_value)
      {
        if (flagHasCustomASREnhancementReadData)
          {
          }
        flagHasCustomASREnhancementReadData = true;
        storeCustomASREnhancementReadData = new_value;
      }
    public void unsetCustomASREnhancementReadData()
      {
        if (flagHasCustomASREnhancementReadData)
          {
          }
        flagHasCustomASREnhancementReadData = false;
      }
    public void setCustomASREnhancementListData(CustomASREnhancementListDataJSON  new_value)
      {
        if (flagHasCustomASREnhancementListData)
          {
          }
        flagHasCustomASREnhancementListData = true;
        storeCustomASREnhancementListData = new_value;
      }
    public void unsetCustomASREnhancementListData()
      {
        if (flagHasCustomASREnhancementListData)
          {
          }
        flagHasCustomASREnhancementListData = false;
      }
    public void setEnabledCustomASREnhancementGrammars(CustomASREnhancementListJSON  new_value)
      {
        if (flagHasEnabledCustomASREnhancementGrammars)
          {
          }
        flagHasEnabledCustomASREnhancementGrammars = true;
        storeEnabledCustomASREnhancementGrammars = new_value;
      }
    public void unsetEnabledCustomASREnhancementGrammars()
      {
        if (flagHasEnabledCustomASREnhancementGrammars)
          {
          }
        flagHasEnabledCustomASREnhancementGrammars = false;
      }
    public void setCustomASREnhancementWeight(CustomASREnhancementWeightJSON  new_value)
      {
        if (flagHasCustomASREnhancementWeight)
          {
          }
        flagHasCustomASREnhancementWeight = true;
        storeCustomASREnhancementWeight = new_value;
      }
    public void setCustomASREnhancementWeight(double new_value)
      {
        setCustomASREnhancementWeight(new CustomASREnhancementWeightJSON(new_value));
      }
    public void unsetCustomASREnhancementWeight()
      {
        if (flagHasCustomASREnhancementWeight)
          {
          }
        flagHasCustomASREnhancementWeight = false;
      }
    public void setToastEnvironment(ToastEnvironmentJSON  new_value)
      {
        if (flagHasToastEnvironment)
          {
          }
        flagHasToastEnvironment = true;
        storeToastEnvironment = new_value;
      }
    public void setToastEnvironment(ToastEnvironmentJSON.TypeValue new_value)
      {
        setToastEnvironment(new ToastEnvironmentJSON(new_value));
      }
    public void setToastEnvironment(string chars)
      {
        ToastEnvironmentJSON.TypeValueKnownValues known = ToastEnvironmentJSON.stringToValue(chars);
        ToastEnvironmentJSON.TypeValue new_value = new ToastEnvironmentJSON.TypeValue();
        if (known == ToastEnvironmentJSON.TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setToastEnvironment(new_value);
      }
    public void unsetToastEnvironment()
      {
        if (flagHasToastEnvironment)
          {
          }
        flagHasToastEnvironment = false;
      }
    public void setIntentToExecute(CommandIntentJSON  new_value)
      {
        if (flagHasIntentToExecute)
          {
          }
        flagHasIntentToExecute = true;
        storeIntentToExecute = new_value;
      }
    public void unsetIntentToExecute()
      {
        if (flagHasIntentToExecute)
          {
          }
        flagHasIntentToExecute = false;
      }
    public void setUniversalTranslatorSubstitutionList(UniversalTranslatorSubstitutionListJSON  new_value)
      {
        if (flagHasUniversalTranslatorSubstitutionList)
          {
          }
        flagHasUniversalTranslatorSubstitutionList = true;
        storeUniversalTranslatorSubstitutionList = new_value;
      }
    public void unsetUniversalTranslatorSubstitutionList()
      {
        if (flagHasUniversalTranslatorSubstitutionList)
          {
          }
        flagHasUniversalTranslatorSubstitutionList = false;
      }
    public void setCustomTopicIdentificationWriteData(CustomTopicIdentificationDataJSON  new_value)
      {
        if (flagHasCustomTopicIdentificationWriteData)
          {
          }
        flagHasCustomTopicIdentificationWriteData = true;
        storeCustomTopicIdentificationWriteData = new_value;
      }
    public void unsetCustomTopicIdentificationWriteData()
      {
        if (flagHasCustomTopicIdentificationWriteData)
          {
          }
        flagHasCustomTopicIdentificationWriteData = false;
      }

    public virtual void extraRequestInfoAppendPair(string key, JSONValue new_component)
      {
        Debug.Assert(key != null);
        Debug.Assert(new_component != null);

        Debug.Assert(extraKeys.Count == extraValues.Count);
        extraKeys.Add(key);
        extraValues.Add(new_component);
        extraIndex.Add(key, new_component);
      }
    public virtual void extraRequestInfoSetField(string key, JSONValue new_component)
      {
        Debug.Assert(key != null);
        Debug.Assert(new_component != null);

        JSONValue old_field = extraRequestInfoLookup(key);
        if (old_field == null)
          {
            extraRequestInfoAppendPair(key, new_component);
          }
        else
          {
            int count = extraKeys.Count;
            Debug.Assert(count == extraValues.Count);
            for (int num = 0; num < count; ++num)
              {
                if (extraKeys[num].Equals( key))
                  {
                    extraValues[num] = new_component;
                    break;
                  }
              }
            extraIndex.Add(key, new_component);
          }
      }

    public override void write_as_json(JSONHandler handler)
      {
        handler.start_object();
        write_fields_as_json(handler);
        int extra_count = extraKeys.Count;
        Debug.Assert(extra_count == extraValues.Count);
        for (int extra_num = 0; extra_num < extra_count; ++extra_num)
          {
            handler.start_pair(extraKeys[extra_num]);
            extraValues[extra_num].write(handler);
          }
        handler.finish_object();
      }

    public virtual void write_fields_as_json(JSONHandler handler)
      {
        write_fields_as_json(handler, false);
      }

    public virtual void write_fields_as_json(JSONHandler handler, bool partial_allowed)
      {
        if (flagHasLatitude)
          {
            handler.start_pair("Latitude");
            if (textStoreLatitude != "")
                handler.number_value(textStoreLatitude);
            else if (((double)(long)storeLatitude) == storeLatitude)
                handler.number_value((long)storeLatitude);
            else
                handler.number_value(storeLatitude);
          }
        if (flagHasLongitude)
          {
            handler.start_pair("Longitude");
            if (textStoreLongitude != "")
                handler.number_value(textStoreLongitude);
            else if (((double)(long)storeLongitude) == storeLongitude)
                handler.number_value((long)storeLongitude);
            else
                handler.number_value(storeLongitude);
          }
        if (flagHasPositionTime)
          {
            handler.start_pair("PositionTime");
            handler.number_value(storePositionTime);
          }
        if (flagHasPositionHorizontalAccuracy)
          {
            handler.start_pair("PositionHorizontalAccuracy");
            if (textStorePositionHorizontalAccuracy != "")
                handler.number_value(textStorePositionHorizontalAccuracy);
            else if (((double)(long)storePositionHorizontalAccuracy) == storePositionHorizontalAccuracy)
                handler.number_value((long)storePositionHorizontalAccuracy);
            else
                handler.number_value(storePositionHorizontalAccuracy);
          }
        if (flagHasStreet)
          {
            handler.start_pair("Street");
            handler.string_value(storeStreet);
          }
        if (flagHasCity)
          {
            handler.start_pair("City");
            handler.string_value(storeCity);
          }
        if (flagHasState)
          {
            handler.start_pair("State");
            handler.string_value(storeState);
          }
        if (flagHasCountry)
          {
            handler.start_pair("Country");
            handler.string_value(storeCountry);
          }
        if (flagHasRoutePoints)
          {
            handler.start_pair("RoutePoints");
            if (partial_allowed)
                storeRoutePoints.write_partial_as_json(handler);
            else
                storeRoutePoints.write_as_json(handler);
          }
        if (flagHasRouteInformation)
          {
            handler.start_pair("RouteInformation");
            if (partial_allowed)
                storeRouteInformation.write_partial_as_json(handler);
            else
                storeRouteInformation.write_as_json(handler);
          }
        if (flagHasControllableTrackPlaying)
          {
            handler.start_pair("ControllableTrackPlaying");
            handler.boolean_value(storeControllableTrackPlaying);
          }
        if (flagHasTimeStamp)
          {
            handler.start_pair("TimeStamp");
            handler.number_value(storeTimeStamp);
          }
        if (flagHasTimeZone)
          {
            handler.start_pair("TimeZone");
            handler.string_value(storeTimeZone);
          }
        if (flagHasConversationState)
          {
            handler.start_pair("ConversationState");
            if (partial_allowed)
                storeConversationState.write_partial_as_json(handler);
            else
                storeConversationState.write_as_json(handler);
          }
        if (flagHasClientState)
          {
            handler.start_pair("ClientState");
            if (partial_allowed)
                storeClientState.write_partial_as_json(handler);
            else
                storeClientState.write_as_json(handler);
          }
        if (flagHasDeviceInfo)
          {
            handler.start_pair("DeviceInfo");
            if (partial_allowed)
                storeDeviceInfo.write_partial_as_json(handler);
            else
                storeDeviceInfo.write_as_json(handler);
          }
        if (flagHasSendBack)
          {
            handler.start_pair("SendBack");
            storeSendBack.write(handler);
          }
        if (flagHasPreferredImageSize)
          {
            handler.start_pair("PreferredImageSize");
            Debug.Assert(storePreferredImageSize.Count >= 2);
            handler.start_array();
            for (int num1 = 0; num1 < storePreferredImageSize.Count; ++num1)
              {
                handler.number_value(storePreferredImageSize[num1]);
              }
            handler.finish_array();
          }
        if (flagHasInputLanguageEnglishName)
          {
            handler.start_pair("InputLanguageEnglishName");
            handler.string_value(storeInputLanguageEnglishName);
          }
        if (flagHasInputLanguageNativeName)
          {
            handler.start_pair("InputLanguageNativeName");
            handler.string_value(storeInputLanguageNativeName);
          }
        if (flagHasInputLanguageIETFTag)
          {
            handler.start_pair("InputLanguageIETFTag");
            handler.string_value(storeInputLanguageIETFTag);
          }
        if (flagHasOutputLanguageEnglishName)
          {
            handler.start_pair("OutputLanguageEnglishName");
            handler.string_value(storeOutputLanguageEnglishName);
          }
        if (flagHasOutputLanguageNativeName)
          {
            handler.start_pair("OutputLanguageNativeName");
            handler.string_value(storeOutputLanguageNativeName);
          }
        if (flagHasOutputLanguageIETFTag)
          {
            handler.start_pair("OutputLanguageIETFTag");
            handler.string_value(storeOutputLanguageIETFTag);
          }
        if (flagHasResultVersionAccepted)
          {
            handler.start_pair("ResultVersionAccepted");
            if (textStoreResultVersionAccepted != "")
                handler.number_value(textStoreResultVersionAccepted);
            else if (((double)(long)storeResultVersionAccepted) == storeResultVersionAccepted)
                handler.number_value((long)storeResultVersionAccepted);
            else
                handler.number_value(storeResultVersionAccepted);
          }
        if (flagHasUnitPreference)
          {
            handler.start_pair("UnitPreference");
            switch (storeUnitPreference)
              {
                case TypeUnitPreference.UnitPreference_US:
                    handler.string_value("US");
                    break;
                case TypeUnitPreference.UnitPreference_METRIC:
                    handler.string_value("METRIC");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        if (flagHasDefaultTimeFormat24Hours)
          {
            handler.start_pair("DefaultTimeFormat24Hours");
            handler.boolean_value(storeDefaultTimeFormat24Hours);
          }
        if (flagHasClientID)
          {
            handler.start_pair("ClientID");
            handler.string_value(storeClientID);
          }
        if (flagHasClientVersion)
          {
            handler.start_pair("ClientVersion");
            switch (storeClientVersion.key)
              {
                case 0:
                    handler.string_value(storeClientVersion.choice0);
                    break;
                case 1:
                    handler.number_value(storeClientVersion.choice1);
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        if (flagHasDeviceID)
          {
            handler.start_pair("DeviceID");
            handler.string_value(storeDeviceID);
          }
        if (flagHasSDK)
          {
            handler.start_pair("SDK");
            handler.string_value(storeSDK);
          }
        if (flagHasSDKInfo)
          {
            handler.start_pair("SDKInfo");
            storeSDKInfo.write(handler);
          }
        if (flagHasFirstPersonSelf)
          {
            handler.start_pair("FirstPersonSelf");
            handler.string_value(storeFirstPersonSelf);
          }
        if (flagHasFirstPersonSelfSpoken)
          {
            handler.start_pair("FirstPersonSelfSpoken");
            handler.string_value(storeFirstPersonSelfSpoken);
          }
        if (flagHasSecondPersonSelf)
          {
            handler.start_pair("SecondPersonSelf");
            handler.start_array();
            for (int num2 = 0; num2 < storeSecondPersonSelf.Count; ++num2)
              {
                handler.string_value(storeSecondPersonSelf[num2]);
              }
            handler.finish_array();
          }
        if (flagHasSecondPersonSelfSpoken)
          {
            handler.start_pair("SecondPersonSelfSpoken");
            handler.start_array();
            for (int num3 = 0; num3 < storeSecondPersonSelfSpoken.Count; ++num3)
              {
                handler.string_value(storeSecondPersonSelfSpoken[num3]);
              }
            handler.finish_array();
          }
        if (flagHasWakeUpPhraseIncludedInAudio)
          {
            handler.start_pair("WakeUpPhraseIncludedInAudio");
            handler.boolean_value(storeWakeUpPhraseIncludedInAudio);
          }
        if (flagHasInitialSecondsOfAudioToIgnore)
          {
            handler.start_pair("InitialSecondsOfAudioToIgnore");
            if (textStoreInitialSecondsOfAudioToIgnore != "")
                handler.number_value(textStoreInitialSecondsOfAudioToIgnore);
            else if (((double)(long)storeInitialSecondsOfAudioToIgnore) == storeInitialSecondsOfAudioToIgnore)
                handler.number_value((long)storeInitialSecondsOfAudioToIgnore);
            else
                handler.number_value(storeInitialSecondsOfAudioToIgnore);
          }
        if (flagHasWakeUpPattern)
          {
            handler.start_pair("WakeUpPattern");
            handler.string_value(storeWakeUpPattern);
          }
        if (flagHasUserID)
          {
            handler.start_pair("UserID");
            handler.string_value(storeUserID);
          }
        if (flagHasRequestID)
          {
            handler.start_pair("RequestID");
            handler.string_value(storeRequestID);
          }
        if (flagHasSessionID)
          {
            handler.start_pair("SessionID");
            handler.string_value(storeSessionID);
          }
        if (flagHasDomains)
          {
            handler.start_pair("Domains");
            if (partial_allowed)
                storeDomains.write_partial_as_json(handler);
            else
                storeDomains.write_as_json(handler);
          }
        if (flagHasResultUpdateAllowed)
          {
            handler.start_pair("ResultUpdateAllowed");
            handler.boolean_value(storeResultUpdateAllowed);
          }
        if (flagHasPartialTranscriptsDesired)
          {
            handler.start_pair("PartialTranscriptsDesired");
            handler.boolean_value(storePartialTranscriptsDesired);
          }
        if (flagHasMinResults)
          {
            handler.start_pair("MinResults");
            handler.number_value(storeMinResults);
          }
        if (flagHasMaxResults)
          {
            handler.start_pair("MaxResults");
            handler.number_value(storeMaxResults);
          }
        if (flagHasObjectByteCountPrefix)
          {
            handler.start_pair("ObjectByteCountPrefix");
            handler.boolean_value(storeObjectByteCountPrefix);
          }
        if (flagHasProfanityFilter)
          {
            handler.start_pair("ProfanityFilter");
            switch (storeProfanityFilter)
              {
                case TypeProfanityFilter.ProfanityFilter_AllowAll:
                    handler.string_value("AllowAll");
                    break;
                case TypeProfanityFilter.ProfanityFilter_StarAllButFirst:
                    handler.string_value("StarAllButFirst");
                    break;
                case TypeProfanityFilter.ProfanityFilter_StarAll:
                    handler.string_value("StarAll");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        if (flagHasClientMatches)
          {
            handler.start_pair("ClientMatches");
            Debug.Assert(storeClientMatches.Count >= 1);
            handler.start_array();
            for (int num4 = 0; num4 < storeClientMatches.Count; ++num4)
              {
                if (partial_allowed)
                    storeClientMatches[num4].write_partial_as_json(handler);
                else
                    storeClientMatches[num4].write_as_json(handler);
              }
            handler.finish_array();
          }
        if (flagHasClientMatchesOnly)
          {
            handler.start_pair("ClientMatchesOnly");
            handler.boolean_value(storeClientMatchesOnly);
          }
        if (flagHasPagination)
          {
            handler.start_pair("Pagination");
            if (partial_allowed)
                storePagination.write_partial_as_json(handler);
            else
                storePagination.write_as_json(handler);
          }
        if (flagHasResponseAudioVoice)
          {
            handler.start_pair("ResponseAudioVoice");
            handler.string_value(storeResponseAudioVoice);
          }
        if (flagHasResponseAudioShortOrLong)
          {
            handler.start_pair("ResponseAudioShortOrLong");
            switch (storeResponseAudioShortOrLong)
              {
                case TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Short:
                    handler.string_value("Short");
                    break;
                case TypeResponseAudioShortOrLong.ResponseAudioShortOrLong_Long:
                    handler.string_value("Long");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        if (flagHasResponseAudioAcceptedEncodings)
          {
            handler.start_pair("ResponseAudioAcceptedEncodings");
            Debug.Assert(storeResponseAudioAcceptedEncodings.Count >= 1);
            handler.start_array();
            for (int num5 = 0; num5 < storeResponseAudioAcceptedEncodings.Count; ++num5)
              {
                if (storeResponseAudioAcceptedEncodings[num5].in_known_list)
                  {
                    switch (storeResponseAudioAcceptedEncodings[num5].list_value)
                      {
                        case TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_WAV:
                            handler.string_value("WAV");
                            break;
                        case TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings_Speex:
                            handler.string_value("Speex");
                            break;
                        default:
                            Debug.Assert(false);
                            break;
                      }
                  }
                else
                  {
                            handler.string_value(storeResponseAudioAcceptedEncodings[num5].string_value);
                  }
              }
            handler.finish_array();
          }
        if (flagHasReturnResponseAudioAsURL)
          {
            handler.start_pair("ReturnResponseAudioAsURL");
            handler.boolean_value(storeReturnResponseAudioAsURL);
          }
        if (flagHasVoiceActivityDetection)
          {
            handler.start_pair("VoiceActivityDetection");
            if (partial_allowed)
                storeVoiceActivityDetection.write_partial_as_json(handler);
            else
                storeVoiceActivityDetection.write_as_json(handler);
          }
        if (flagHasServerDeterminesEndOfAudio)
          {
            handler.start_pair("ServerDeterminesEndOfAudio");
            handler.boolean_value(storeServerDeterminesEndOfAudio);
          }
        if (flagHasIntentOnly)
          {
            handler.start_pair("IntentOnly");
            handler.boolean_value(storeIntentOnly);
          }
        if (flagHasDisableSpellCorrection)
          {
            handler.start_pair("DisableSpellCorrection");
            handler.boolean_value(storeDisableSpellCorrection);
          }
        if (flagHasUseContactData)
          {
            handler.start_pair("UseContactData");
            handler.boolean_value(storeUseContactData);
          }
        if (flagHasUseClientTime)
          {
            handler.start_pair("UseClientTime");
            handler.boolean_value(storeUseClientTime);
          }
        if (flagHasForceConversationStateTime)
          {
            handler.start_pair("ForceConversationStateTime");
            handler.number_value(storeForceConversationStateTime);
          }
        if (flagHasOutputLatticeSize)
          {
            handler.start_pair("OutputLatticeSize");
            handler.number_value(storeOutputLatticeSize);
          }
        if (flagHasMatchingMutations)
          {
            handler.start_pair("MatchingMutations");
            if (partial_allowed)
                storeMatchingMutations.write_partial_as_json(handler);
            else
                storeMatchingMutations.write_as_json(handler);
          }
        if (flagHasUseFormattedTranscriptionAsDefault)
          {
            handler.start_pair("UseFormattedTranscriptionAsDefault");
            handler.boolean_value(storeUseFormattedTranscriptionAsDefault);
          }
        if (flagHasResponseRanking)
          {
            handler.start_pair("ResponseRanking");
            if (partial_allowed)
                storeResponseRanking.write_partial_as_json(handler);
            else
                storeResponseRanking.write_as_json(handler);
          }
        if (flagHasAcapelaVoiceParameters)
          {
            handler.start_pair("AcapelaVoiceParameters");
            if (partial_allowed)
                storeAcapelaVoiceParameters.write_partial_as_json(handler);
            else
                storeAcapelaVoiceParameters.write_as_json(handler);
          }
        if (flagHasAllowPopularNameContactMatches)
          {
            handler.start_pair("AllowPopularNameContactMatches");
            if (partial_allowed)
                storeAllowPopularNameContactMatches.write_partial_as_json(handler);
            else
                storeAllowPopularNameContactMatches.write_as_json(handler);
          }
        if (flagHasAlwaysFetchCurrentConditionsData)
          {
            handler.start_pair("AlwaysFetchCurrentConditionsData");
            if (partial_allowed)
                storeAlwaysFetchCurrentConditionsData.write_partial_as_json(handler);
            else
                storeAlwaysFetchCurrentConditionsData.write_as_json(handler);
          }
        if (flagHasAlwaysFetchHourlyForecastData)
          {
            handler.start_pair("AlwaysFetchHourlyForecastData");
            if (partial_allowed)
                storeAlwaysFetchHourlyForecastData.write_partial_as_json(handler);
            else
                storeAlwaysFetchHourlyForecastData.write_as_json(handler);
          }
        if (flagHasArrivalTime)
          {
            handler.start_pair("ArrivalTime");
            if (partial_allowed)
                storeArrivalTime.write_partial_as_json(handler);
            else
                storeArrivalTime.write_as_json(handler);
          }
        if (flagHasAvantiMachineState)
          {
            handler.start_pair("AvantiMachineState");
            if (partial_allowed)
                storeAvantiMachineState.write_partial_as_json(handler);
            else
                storeAvantiMachineState.write_as_json(handler);
          }
        if (flagHasBingAdExtensions)
          {
            handler.start_pair("BingAdExtensions");
            if (partial_allowed)
                storeBingAdExtensions.write_partial_as_json(handler);
            else
                storeBingAdExtensions.write_as_json(handler);
          }
        if (flagHasBunnIsConfirmationRequired)
          {
            handler.start_pair("BunnIsConfirmationRequired");
            if (partial_allowed)
                storeBunnIsConfirmationRequired.write_partial_as_json(handler);
            else
                storeBunnIsConfirmationRequired.write_as_json(handler);
          }
        if (flagHasBunnMachineState)
          {
            handler.start_pair("BunnMachineState");
            if (partial_allowed)
                storeBunnMachineState.write_partial_as_json(handler);
            else
                storeBunnMachineState.write_as_json(handler);
          }
        if (flagHasCalendarDataSynchronization)
          {
            handler.start_pair("CalendarDataSynchronization");
            if (partial_allowed)
                storeCalendarDataSynchronization.write_partial_as_json(handler);
            else
                storeCalendarDataSynchronization.write_as_json(handler);
          }
        if (flagHasCallPermissions)
          {
            handler.start_pair("CallPermissions");
            if (partial_allowed)
                storeCallPermissions.write_partial_as_json(handler);
            else
                storeCallPermissions.write_as_json(handler);
          }
        if (flagHasCarControlClimateClientConfiguration)
          {
            handler.start_pair("CarControlClimateClientConfiguration");
            if (partial_allowed)
                storeCarControlClimateClientConfiguration.write_partial_as_json(handler);
            else
                storeCarControlClimateClientConfiguration.write_as_json(handler);
          }
        if (flagHasCarControlClimateTemperatureConfig)
          {
            handler.start_pair("CarControlClimateTemperatureConfig");
            if (partial_allowed)
                storeCarControlClimateTemperatureConfig.write_partial_as_json(handler);
            else
                storeCarControlClimateTemperatureConfig.write_as_json(handler);
          }
        if (flagHasCarManualModel)
          {
            handler.start_pair("CarManualModel");
            if (partial_allowed)
                storeCarManualModel.write_partial_as_json(handler);
            else
                storeCarManualModel.write_as_json(handler);
          }
        if (flagHasCarManualNormalizedQueryToSet)
          {
            handler.start_pair("CarManualNormalizedQueryToSet");
            if (partial_allowed)
                storeCarManualNormalizedQueryToSet.write_partial_as_json(handler);
            else
                storeCarManualNormalizedQueryToSet.write_as_json(handler);
          }
        if (flagHasCarManualResponseToSet)
          {
            handler.start_pair("CarManualResponseToSet");
            if (partial_allowed)
                storeCarManualResponseToSet.write_partial_as_json(handler);
            else
                storeCarManualResponseToSet.write_as_json(handler);
          }
        if (flagHasCarStatus)
          {
            handler.start_pair("CarStatus");
            if (partial_allowed)
                storeCarStatus.write_partial_as_json(handler);
            else
                storeCarStatus.write_as_json(handler);
          }
        if (flagHasChargingClientState)
          {
            handler.start_pair("ChargingClientState");
            if (partial_allowed)
                storeChargingClientState.write_partial_as_json(handler);
            else
                storeChargingClientState.write_as_json(handler);
          }
        if (flagHasClientListMatches)
          {
            handler.start_pair("ClientListMatches");
            if (partial_allowed)
                storeClientListMatches.write_partial_as_json(handler);
            else
                storeClientListMatches.write_as_json(handler);
          }
        if (flagHasCollateMusicEntities)
          {
            handler.start_pair("CollateMusicEntities");
            if (partial_allowed)
                storeCollateMusicEntities.write_partial_as_json(handler);
            else
                storeCollateMusicEntities.write_as_json(handler);
          }
        if (flagHasConnectedToThirdPartyMusicApp)
          {
            handler.start_pair("ConnectedToThirdPartyMusicApp");
            if (partial_allowed)
                storeConnectedToThirdPartyMusicApp.write_partial_as_json(handler);
            else
                storeConnectedToThirdPartyMusicApp.write_as_json(handler);
          }
        if (flagHasContactQueryExclusions)
          {
            handler.start_pair("ContactQueryExclusions");
            if (partial_allowed)
                storeContactQueryExclusions.write_partial_as_json(handler);
            else
                storeContactQueryExclusions.write_as_json(handler);
          }
        if (flagHasPhoneCommandConfiguration)
          {
            handler.start_pair("PhoneCommandConfiguration");
            if (partial_allowed)
                storePhoneCommandConfiguration.write_partial_as_json(handler);
            else
                storePhoneCommandConfiguration.write_as_json(handler);
          }
        if (flagHasConvertToNewInformationNuggets)
          {
            handler.start_pair("ConvertToNewInformationNuggets");
            if (partial_allowed)
                storeConvertToNewInformationNuggets.write_partial_as_json(handler);
            else
                storeConvertToNewInformationNuggets.write_as_json(handler);
          }
        if (flagHasCustomSpeechRecognitionPatternsGroupListData)
          {
            handler.start_pair("CustomSpeechRecognitionPatternsGroupListData");
            if (partial_allowed)
                storeCustomSpeechRecognitionPatternsGroupListData.write_partial_as_json(handler);
            else
                storeCustomSpeechRecognitionPatternsGroupListData.write_as_json(handler);
          }
        if (flagHasCustomSpeechRecognitionPatternsReadData)
          {
            handler.start_pair("CustomSpeechRecognitionPatternsReadData");
            if (partial_allowed)
                storeCustomSpeechRecognitionPatternsReadData.write_partial_as_json(handler);
            else
                storeCustomSpeechRecognitionPatternsReadData.write_as_json(handler);
          }
        if (flagHasCustomSpeechRecognitionPatternsWeight)
          {
            handler.start_pair("CustomSpeechRecognitionPatternsWeight");
            if (partial_allowed)
                storeCustomSpeechRecognitionPatternsWeight.write_partial_as_json(handler);
            else
                storeCustomSpeechRecognitionPatternsWeight.write_as_json(handler);
          }
        if (flagHasCustomSpeechRecognitionPatternsWriteData)
          {
            handler.start_pair("CustomSpeechRecognitionPatternsWriteData");
            if (partial_allowed)
                storeCustomSpeechRecognitionPatternsWriteData.write_partial_as_json(handler);
            else
                storeCustomSpeechRecognitionPatternsWriteData.write_as_json(handler);
          }
        if (flagHasDeleteUserMemoryLocation)
          {
            handler.start_pair("DeleteUserMemoryLocation");
            if (partial_allowed)
                storeDeleteUserMemoryLocation.write_partial_as_json(handler);
            else
                storeDeleteUserMemoryLocation.write_as_json(handler);
          }
        if (flagHasDisableMusicPlayerListPositionSpecification)
          {
            handler.start_pair("DisableMusicPlayerListPositionSpecification");
            if (partial_allowed)
                storeDisableMusicPlayerListPositionSpecification.write_partial_as_json(handler);
            else
                storeDisableMusicPlayerListPositionSpecification.write_as_json(handler);
          }
        if (flagHasDisableMusicSearchListPositionSpecification)
          {
            handler.start_pair("DisableMusicSearchListPositionSpecification");
            if (partial_allowed)
                storeDisableMusicSearchListPositionSpecification.write_partial_as_json(handler);
            else
                storeDisableMusicSearchListPositionSpecification.write_as_json(handler);
          }
        if (flagHasDisambiguateResultsBeforeAction)
          {
            handler.start_pair("DisambiguateResultsBeforeAction");
            if (partial_allowed)
                storeDisambiguateResultsBeforeAction.write_partial_as_json(handler);
            else
                storeDisambiguateResultsBeforeAction.write_as_json(handler);
          }
        if (flagHasDisplayedReminder)
          {
            handler.start_pair("DisplayedReminder");
            if (partial_allowed)
                storeDisplayedReminder.write_partial_as_json(handler);
            else
                storeDisplayedReminder.write_as_json(handler);
          }
        if (flagHasEnableClientControlInModes)
          {
            handler.start_pair("EnableClientControlInModes");
            if (partial_allowed)
                storeEnableClientControlInModes.write_partial_as_json(handler);
            else
                storeEnableClientControlInModes.write_as_json(handler);
          }
        if (flagHasEnableLocalPlacesQueries)
          {
            handler.start_pair("EnableLocalPlacesQueries");
            if (partial_allowed)
                storeEnableLocalPlacesQueries.write_partial_as_json(handler);
            else
                storeEnableLocalPlacesQueries.write_as_json(handler);
          }
        if (flagHasLocalPlacesSettings)
          {
            handler.start_pair("LocalPlacesSettings");
            if (partial_allowed)
                storeLocalPlacesSettings.write_partial_as_json(handler);
            else
                storeLocalPlacesSettings.write_as_json(handler);
          }
        if (flagHasEnableMusicPlayerFavorites)
          {
            handler.start_pair("EnableMusicPlayerFavorites");
            if (partial_allowed)
                storeEnableMusicPlayerFavorites.write_partial_as_json(handler);
            else
                storeEnableMusicPlayerFavorites.write_as_json(handler);
          }
        if (flagHasEnabledCustomSpeechRecognitionPatternGroups)
          {
            handler.start_pair("EnabledCustomSpeechRecognitionPatternGroups");
            if (partial_allowed)
                storeEnabledCustomSpeechRecognitionPatternGroups.write_partial_as_json(handler);
            else
                storeEnabledCustomSpeechRecognitionPatternGroups.write_as_json(handler);
          }
        if (flagHasEntertainmentClientState)
          {
            handler.start_pair("EntertainmentClientState");
            if (partial_allowed)
                storeEntertainmentClientState.write_partial_as_json(handler);
            else
                storeEntertainmentClientState.write_as_json(handler);
          }
        if (flagHasEntertainmentTitlesUploadData)
          {
            handler.start_pair("EntertainmentTitlesUploadData");
            if (partial_allowed)
                storeEntertainmentTitlesUploadData.write_partial_as_json(handler);
            else
                storeEntertainmentTitlesUploadData.write_as_json(handler);
          }
        if (flagHasExcludeAllMusicResultsWithoutExplicitContext)
          {
            handler.start_pair("ExcludeAllMusicResultsWithoutExplicitContext");
            if (partial_allowed)
                storeExcludeAllMusicResultsWithoutExplicitContext.write_partial_as_json(handler);
            else
                storeExcludeAllMusicResultsWithoutExplicitContext.write_as_json(handler);
          }
        if (flagHasExcludeWikipediaLowConfidenceResults)
          {
            handler.start_pair("ExcludeWikipediaLowConfidenceResults");
            if (partial_allowed)
                storeExcludeWikipediaLowConfidenceResults.write_partial_as_json(handler);
            else
                storeExcludeWikipediaLowConfidenceResults.write_as_json(handler);
          }
        if (flagHasFitBitAccessToken)
          {
            handler.start_pair("FitBitAccessToken");
            if (partial_allowed)
                storeFitBitAccessToken.write_partial_as_json(handler);
            else
                storeFitBitAccessToken.write_as_json(handler);
          }
        if (flagHasFitBitRefreshToken)
          {
            handler.start_pair("FitBitRefreshToken");
            if (partial_allowed)
                storeFitBitRefreshToken.write_partial_as_json(handler);
            else
                storeFitBitRefreshToken.write_as_json(handler);
          }
        if (flagHasGetHumaxMediaCloudURL)
          {
            handler.start_pair("GetHumaxMediaCloudURL");
            if (partial_allowed)
                storeGetHumaxMediaCloudURL.write_partial_as_json(handler);
            else
                storeGetHumaxMediaCloudURL.write_as_json(handler);
          }
        if (flagHasGetOAuth2ClientID)
          {
            handler.start_pair("GetOAuth2ClientID");
            if (partial_allowed)
                storeGetOAuth2ClientID.write_partial_as_json(handler);
            else
                storeGetOAuth2ClientID.write_as_json(handler);
          }
        if (flagHasGetOAuth2ClientSecret)
          {
            handler.start_pair("GetOAuth2ClientSecret");
            if (partial_allowed)
                storeGetOAuth2ClientSecret.write_partial_as_json(handler);
            else
                storeGetOAuth2ClientSecret.write_as_json(handler);
          }
        if (flagHasSquare)
          {
            handler.start_pair("Square");
            if (partial_allowed)
                storeSquare.write_partial_as_json(handler);
            else
                storeSquare.write_as_json(handler);
          }
        if (flagHasGetOAuth2ClientToken)
          {
            handler.start_pair("GetOAuth2ClientToken");
            if (partial_allowed)
                storeGetOAuth2ClientToken.write_partial_as_json(handler);
            else
                storeGetOAuth2ClientToken.write_as_json(handler);
          }
        if (flagHasGetUberClientId)
          {
            handler.start_pair("GetUberClientId");
            if (partial_allowed)
                storeGetUberClientId.write_partial_as_json(handler);
            else
                storeGetUberClientId.write_as_json(handler);
          }
        if (flagHasGetUberServerToken)
          {
            handler.start_pair("GetUberServerToken");
            if (partial_allowed)
                storeGetUberServerToken.write_partial_as_json(handler);
            else
                storeGetUberServerToken.write_as_json(handler);
          }
        if (flagHasHLSRadius)
          {
            handler.start_pair("HLSRadius");
            if (partial_allowed)
                storeHLSRadius.write_partial_as_json(handler);
            else
                storeHLSRadius.write_as_json(handler);
          }
        if (flagHasHarmanDeviceRegistration)
          {
            handler.start_pair("HarmanDeviceRegistration");
            if (partial_allowed)
                storeHarmanDeviceRegistration.write_partial_as_json(handler);
            else
                storeHarmanDeviceRegistration.write_as_json(handler);
          }
        if (flagHasHarmanHospitalityAmxControllerHttpRequest)
          {
            handler.start_pair("HarmanHospitalityAmxControllerHttpRequest");
            if (partial_allowed)
                storeHarmanHospitalityAmxControllerHttpRequest.write_partial_as_json(handler);
            else
                storeHarmanHospitalityAmxControllerHttpRequest.write_as_json(handler);
          }
        if (flagHasHarmanHospitalityMeetingInformation)
          {
            handler.start_pair("HarmanHospitalityMeetingInformation");
            if (partial_allowed)
                storeHarmanHospitalityMeetingInformation.write_partial_as_json(handler);
            else
                storeHarmanHospitalityMeetingInformation.write_as_json(handler);
          }
        if (flagHasHarmanHospitalityPropertyInformation)
          {
            handler.start_pair("HarmanHospitalityPropertyInformation");
            if (partial_allowed)
                storeHarmanHospitalityPropertyInformation.write_partial_as_json(handler);
            else
                storeHarmanHospitalityPropertyInformation.write_as_json(handler);
          }
        if (flagHasHarmanPropertyRegistration)
          {
            handler.start_pair("HarmanPropertyRegistration");
            if (partial_allowed)
                storeHarmanPropertyRegistration.write_partial_as_json(handler);
            else
                storeHarmanPropertyRegistration.write_as_json(handler);
          }
        if (flagHasHasTollsOnThisRoad)
          {
            handler.start_pair("HasTollsOnThisRoad");
            if (partial_allowed)
                storeHasTollsOnThisRoad.write_partial_as_json(handler);
            else
                storeHasTollsOnThisRoad.write_as_json(handler);
          }
        if (flagHasHomeAutomationDomainSettings)
          {
            handler.start_pair("HomeAutomationDomainSettings");
            if (partial_allowed)
                storeHomeAutomationDomainSettings.write_partial_as_json(handler);
            else
                storeHomeAutomationDomainSettings.write_as_json(handler);
          }
        if (flagHasHondaAgent20MParameters)
          {
            handler.start_pair("HondaAgent20MParameters");
            if (partial_allowed)
                storeHondaAgent20MParameters.write_partial_as_json(handler);
            else
                storeHondaAgent20MParameters.write_as_json(handler);
          }
        if (flagHasHondaAgentParameters)
          {
            handler.start_pair("HondaAgentParameters");
            if (partial_allowed)
                storeHondaAgentParameters.write_partial_as_json(handler);
            else
                storeHondaAgentParameters.write_as_json(handler);
          }
        if (flagHasHondaCarManualParameters)
          {
            handler.start_pair("HondaCarManualParameters");
            if (partial_allowed)
                storeHondaCarManualParameters.write_partial_as_json(handler);
            else
                storeHondaCarManualParameters.write_as_json(handler);
          }
        if (flagHasHueDeviceRegistration)
          {
            handler.start_pair("HueDeviceRegistration");
            if (partial_allowed)
                storeHueDeviceRegistration.write_partial_as_json(handler);
            else
                storeHueDeviceRegistration.write_as_json(handler);
          }
        if (flagHasHumaxHomeAutomationCredentials)
          {
            handler.start_pair("HumaxHomeAutomationCredentials");
            if (partial_allowed)
                storeHumaxHomeAutomationCredentials.write_partial_as_json(handler);
            else
                storeHumaxHomeAutomationCredentials.write_as_json(handler);
          }
        if (flagHasHumaxMediaCloudURL)
          {
            handler.start_pair("HumaxMediaCloudURL");
            if (partial_allowed)
                storeHumaxMediaCloudURL.write_partial_as_json(handler);
            else
                storeHumaxMediaCloudURL.write_as_json(handler);
          }
        if (flagHasHumaxSmartTVClientState)
          {
            handler.start_pair("HumaxSmartTVClientState");
            if (partial_allowed)
                storeHumaxSmartTVClientState.write_partial_as_json(handler);
            else
                storeHumaxSmartTVClientState.write_as_json(handler);
          }
        if (flagHasIHeartMediaDeviceIdentifiers)
          {
            handler.start_pair("IHeartMediaDeviceIdentifiers");
            if (partial_allowed)
                storeIHeartMediaDeviceIdentifiers.write_partial_as_json(handler);
            else
                storeIHeartMediaDeviceIdentifiers.write_as_json(handler);
          }
        if (flagHasIHeartRadioPreferArtistStations)
          {
            handler.start_pair("IHeartRadioPreferArtistStations");
            if (partial_allowed)
                storeIHeartRadioPreferArtistStations.write_partial_as_json(handler);
            else
                storeIHeartRadioPreferArtistStations.write_as_json(handler);
          }
        if (flagHasIHeartRadioPreferGenericRadioMatches)
          {
            handler.start_pair("IHeartRadioPreferGenericRadioMatches");
            if (partial_allowed)
                storeIHeartRadioPreferGenericRadioMatches.write_partial_as_json(handler);
            else
                storeIHeartRadioPreferGenericRadioMatches.write_as_json(handler);
          }
        if (flagHasIHeartRadioPreferTerrestrialRadioMatches)
          {
            handler.start_pair("IHeartRadioPreferTerrestrialRadioMatches");
            if (partial_allowed)
                storeIHeartRadioPreferTerrestrialRadioMatches.write_partial_as_json(handler);
            else
                storeIHeartRadioPreferTerrestrialRadioMatches.write_as_json(handler);
          }
        if (flagHasIftttKeyItem)
          {
            handler.start_pair("IftttKeyItem");
            if (partial_allowed)
                storeIftttKeyItem.write_partial_as_json(handler);
            else
                storeIftttKeyItem.write_as_json(handler);
          }
        if (flagHasImageSearchConfiguration)
          {
            handler.start_pair("ImageSearchConfiguration");
            if (partial_allowed)
                storeImageSearchConfiguration.write_partial_as_json(handler);
            else
                storeImageSearchConfiguration.write_as_json(handler);
          }
        if (flagHasImageSearchRequestInfoProviders)
          {
            handler.start_pair("ImageSearchRequestInfoProviders");
            if (partial_allowed)
                storeImageSearchRequestInfoProviders.write_partial_as_json(handler);
            else
                storeImageSearchRequestInfoProviders.write_as_json(handler);
          }
        if (flagHasIncludeAllMusicResultsWithoutContext)
          {
            handler.start_pair("IncludeAllMusicResultsWithoutContext");
            if (partial_allowed)
                storeIncludeAllMusicResultsWithoutContext.write_partial_as_json(handler);
            else
                storeIncludeAllMusicResultsWithoutContext.write_as_json(handler);
          }
        if (flagHasIncomingCallPending)
          {
            handler.start_pair("IncomingCallPending");
            if (partial_allowed)
                storeIncomingCallPending.write_partial_as_json(handler);
            else
                storeIncomingCallPending.write_as_json(handler);
          }
        if (flagHasInputOverrideDeleteFunction)
          {
            handler.start_pair("InputOverrideDeleteFunction");
            if (partial_allowed)
                storeInputOverrideDeleteFunction.write_partial_as_json(handler);
            else
                storeInputOverrideDeleteFunction.write_as_json(handler);
          }
        if (flagHasInputOverrideFunction)
          {
            handler.start_pair("InputOverrideFunction");
            if (partial_allowed)
                storeInputOverrideFunction.write_partial_as_json(handler);
            else
                storeInputOverrideFunction.write_as_json(handler);
          }
        if (flagHasInputOverrideFunctionLanguage)
          {
            handler.start_pair("InputOverrideFunctionLanguage");
            if (partial_allowed)
                storeInputOverrideFunctionLanguage.write_partial_as_json(handler);
            else
                storeInputOverrideFunctionLanguage.write_as_json(handler);
          }
        if (flagHasInputOverrideFunctionSource)
          {
            handler.start_pair("InputOverrideFunctionSource");
            if (partial_allowed)
                storeInputOverrideFunctionSource.write_partial_as_json(handler);
            else
                storeInputOverrideFunctionSource.write_as_json(handler);
          }
        if (flagHasInputOverrideReadFunction)
          {
            handler.start_pair("InputOverrideReadFunction");
            if (partial_allowed)
                storeInputOverrideReadFunction.write_partial_as_json(handler);
            else
                storeInputOverrideReadFunction.write_as_json(handler);
          }
        if (flagHasKuriInfo)
          {
            handler.start_pair("KuriInfo");
            if (partial_allowed)
                storeKuriInfo.write_partial_as_json(handler);
            else
                storeKuriInfo.write_as_json(handler);
          }
        if (flagHasLocalSearchClientState)
          {
            handler.start_pair("LocalSearchClientState");
            if (partial_allowed)
                storeLocalSearchClientState.write_partial_as_json(handler);
            else
                storeLocalSearchClientState.write_as_json(handler);
          }
        if (flagHasMapClientControlPageToScroll)
          {
            handler.start_pair("MapClientControlPageToScroll");
            if (partial_allowed)
                storeMapClientControlPageToScroll.write_partial_as_json(handler);
            else
                storeMapClientControlPageToScroll.write_as_json(handler);
          }
        if (flagHasMultipleChoiceQuizAPIRequest)
          {
            handler.start_pair("MultipleChoiceQuizAPIRequest");
            if (partial_allowed)
                storeMultipleChoiceQuizAPIRequest.write_partial_as_json(handler);
            else
                storeMultipleChoiceQuizAPIRequest.write_as_json(handler);
          }
        if (flagHasMusicClientState)
          {
            handler.start_pair("MusicClientState");
            if (partial_allowed)
                storeMusicClientState.write_partial_as_json(handler);
            else
                storeMusicClientState.write_as_json(handler);
          }
        if (flagHasNaritaAirportGuideArea)
          {
            handler.start_pair("NaritaAirportGuideArea");
            if (partial_allowed)
                storeNaritaAirportGuideArea.write_partial_as_json(handler);
            else
                storeNaritaAirportGuideArea.write_as_json(handler);
          }
        if (flagHasNaritaAirportGuideFloor)
          {
            handler.start_pair("NaritaAirportGuideFloor");
            if (partial_allowed)
                storeNaritaAirportGuideFloor.write_partial_as_json(handler);
            else
                storeNaritaAirportGuideFloor.write_as_json(handler);
          }
        if (flagHasNaritaAirportGuideTerminal)
          {
            handler.start_pair("NaritaAirportGuideTerminal");
            if (partial_allowed)
                storeNaritaAirportGuideTerminal.write_partial_as_json(handler);
            else
                storeNaritaAirportGuideTerminal.write_as_json(handler);
          }
        if (flagHasNavigationControlContext)
          {
            handler.start_pair("NavigationControlContext");
            if (partial_allowed)
                storeNavigationControlContext.write_partial_as_json(handler);
            else
                storeNavigationControlContext.write_as_json(handler);
          }
        if (flagHasTurnOffGuidanceMeansMute)
          {
            handler.start_pair("TurnOffGuidanceMeansMute");
            if (partial_allowed)
                storeTurnOffGuidanceMeansMute.write_partial_as_json(handler);
            else
                storeTurnOffGuidanceMeansMute.write_as_json(handler);
          }
        if (flagHasNavigationLocationDisambiguation)
          {
            handler.start_pair("NavigationLocationDisambiguation");
            if (partial_allowed)
                storeNavigationLocationDisambiguation.write_partial_as_json(handler);
            else
                storeNavigationLocationDisambiguation.write_as_json(handler);
          }
        if (flagHasNewReminder)
          {
            handler.start_pair("NewReminder");
            if (partial_allowed)
                storeNewReminder.write_partial_as_json(handler);
            else
                storeNewReminder.write_as_json(handler);
          }
        if (flagHasNumberOfVolumeLevels)
          {
            handler.start_pair("NumberOfVolumeLevels");
            if (partial_allowed)
                storeNumberOfVolumeLevels.write_partial_as_json(handler);
            else
                storeNumberOfVolumeLevels.write_as_json(handler);
          }
        if (flagHasOAuth2ClientID)
          {
            handler.start_pair("OAuth2ClientID");
            if (partial_allowed)
                storeOAuth2ClientID.write_partial_as_json(handler);
            else
                storeOAuth2ClientID.write_as_json(handler);
          }
        if (flagHasOAuth2ClientSecret)
          {
            handler.start_pair("OAuth2ClientSecret");
            if (partial_allowed)
                storeOAuth2ClientSecret.write_partial_as_json(handler);
            else
                storeOAuth2ClientSecret.write_as_json(handler);
          }
        if (flagHasOAuth2ClientToken)
          {
            handler.start_pair("OAuth2ClientToken");
            if (partial_allowed)
                storeOAuth2ClientToken.write_partial_as_json(handler);
            else
                storeOAuth2ClientToken.write_as_json(handler);
          }
        if (flagHasOAuth2CodeData)
          {
            handler.start_pair("OAuth2CodeData");
            if (partial_allowed)
                storeOAuth2CodeData.write_partial_as_json(handler);
            else
                storeOAuth2CodeData.write_as_json(handler);
          }
        if (flagHasOAuth2RefreshToken)
          {
            handler.start_pair("OAuth2RefreshToken");
            if (partial_allowed)
                storeOAuth2RefreshToken.write_partial_as_json(handler);
            else
                storeOAuth2RefreshToken.write_as_json(handler);
          }
        if (flagHasOrganizationalChartRequest)
          {
            handler.start_pair("OrganizationalChartRequest");
            if (partial_allowed)
                storeOrganizationalChartRequest.write_partial_as_json(handler);
            else
                storeOrganizationalChartRequest.write_as_json(handler);
          }
        if (flagHasOutputDeepIntegrationLattice)
          {
            handler.start_pair("OutputDeepIntegrationLattice");
            if (partial_allowed)
                storeOutputDeepIntegrationLattice.write_partial_as_json(handler);
            else
                storeOutputDeepIntegrationLattice.write_as_json(handler);
          }
        if (flagHasOutputSLMLattice)
          {
            handler.start_pair("OutputSLMLattice");
            if (partial_allowed)
                storeOutputSLMLattice.write_partial_as_json(handler);
            else
                storeOutputSLMLattice.write_as_json(handler);
          }
        if (flagHasOutputOverrideKind)
          {
            handler.start_pair("OutputOverrideKind");
            if (partial_allowed)
                storeOutputOverrideKind.write_partial_as_json(handler);
            else
                storeOutputOverrideKind.write_as_json(handler);
          }
        if (flagHasOutputOverrideFunction)
          {
            handler.start_pair("OutputOverrideFunction");
            if (partial_allowed)
                storeOutputOverrideFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideFunctionLanguage)
          {
            handler.start_pair("OutputOverrideFunctionLanguage");
            if (partial_allowed)
                storeOutputOverrideFunctionLanguage.write_partial_as_json(handler);
            else
                storeOutputOverrideFunctionLanguage.write_as_json(handler);
          }
        if (flagHasOutputOverrideFunctionSource)
          {
            handler.start_pair("OutputOverrideFunctionSource");
            if (partial_allowed)
                storeOutputOverrideFunctionSource.write_partial_as_json(handler);
            else
                storeOutputOverrideFunctionSource.write_as_json(handler);
          }
        if (flagHasOutputOverrideCommandIsPreAudioOut)
          {
            handler.start_pair("OutputOverrideCommandIsPreAudioOut");
            if (partial_allowed)
                storeOutputOverrideCommandIsPreAudioOut.write_partial_as_json(handler);
            else
                storeOutputOverrideCommandIsPreAudioOut.write_as_json(handler);
          }
        if (flagHasOutputOverrideDeleteCommandFunction)
          {
            handler.start_pair("OutputOverrideDeleteCommandFunction");
            if (partial_allowed)
                storeOutputOverrideDeleteCommandFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideDeleteCommandFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideDeleteInformationNuggetFunction)
          {
            handler.start_pair("OutputOverrideDeleteInformationNuggetFunction");
            if (partial_allowed)
                storeOutputOverrideDeleteInformationNuggetFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideDeleteInformationNuggetFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideInformationNuggetFunction)
          {
            handler.start_pair("OutputOverrideInformationNuggetFunction");
            if (partial_allowed)
                storeOutputOverrideInformationNuggetFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideInformationNuggetFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideInformationNuggetFunctionLanguage)
          {
            handler.start_pair("OutputOverrideInformationNuggetFunctionLanguage");
            if (partial_allowed)
                storeOutputOverrideInformationNuggetFunctionLanguage.write_partial_as_json(handler);
            else
                storeOutputOverrideInformationNuggetFunctionLanguage.write_as_json(handler);
          }
        if (flagHasOutputOverrideInformationNuggetFunctionSource)
          {
            handler.start_pair("OutputOverrideInformationNuggetFunctionSource");
            if (partial_allowed)
                storeOutputOverrideInformationNuggetFunctionSource.write_partial_as_json(handler);
            else
                storeOutputOverrideInformationNuggetFunctionSource.write_as_json(handler);
          }
        if (flagHasOutputOverrideReadCommandFunction)
          {
            handler.start_pair("OutputOverrideReadCommandFunction");
            if (partial_allowed)
                storeOutputOverrideReadCommandFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideReadCommandFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideReadInformationNuggetFunction)
          {
            handler.start_pair("OutputOverrideReadInformationNuggetFunction");
            if (partial_allowed)
                storeOutputOverrideReadInformationNuggetFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideReadInformationNuggetFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideCommandFunction)
          {
            handler.start_pair("OutputOverrideCommandFunction");
            if (partial_allowed)
                storeOutputOverrideCommandFunction.write_partial_as_json(handler);
            else
                storeOutputOverrideCommandFunction.write_as_json(handler);
          }
        if (flagHasOutputOverrideCommandFunctionLanguage)
          {
            handler.start_pair("OutputOverrideCommandFunctionLanguage");
            if (partial_allowed)
                storeOutputOverrideCommandFunctionLanguage.write_partial_as_json(handler);
            else
                storeOutputOverrideCommandFunctionLanguage.write_as_json(handler);
          }
        if (flagHasOutputOverrideCommandFunctionSource)
          {
            handler.start_pair("OutputOverrideCommandFunctionSource");
            if (partial_allowed)
                storeOutputOverrideCommandFunctionSource.write_partial_as_json(handler);
            else
                storeOutputOverrideCommandFunctionSource.write_as_json(handler);
          }
        if (flagHasPandoraCustomClientPrompt)
          {
            handler.start_pair("PandoraCustomClientPrompt");
            if (partial_allowed)
                storePandoraCustomClientPrompt.write_partial_as_json(handler);
            else
                storePandoraCustomClientPrompt.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableComponentFormat)
          {
            handler.start_pair("PandoraCustomEnableComponentFormat");
            if (partial_allowed)
                storePandoraCustomEnableComponentFormat.write_partial_as_json(handler);
            else
                storePandoraCustomEnableComponentFormat.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableDomain)
          {
            handler.start_pair("PandoraCustomEnableDomain");
            if (partial_allowed)
                storePandoraCustomEnableDomain.write_partial_as_json(handler);
            else
                storePandoraCustomEnableDomain.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableExclusionInTarzanMode)
          {
            handler.start_pair("PandoraCustomEnableExclusionInTarzanMode");
            if (partial_allowed)
                storePandoraCustomEnableExclusionInTarzanMode.write_partial_as_json(handler);
            else
                storePandoraCustomEnableExclusionInTarzanMode.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableInferredPlay)
          {
            handler.start_pair("PandoraCustomEnableInferredPlay");
            if (partial_allowed)
                storePandoraCustomEnableInferredPlay.write_partial_as_json(handler);
            else
                storePandoraCustomEnableInferredPlay.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList)
          {
            handler.start_pair("PandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList");
            if (partial_allowed)
                storePandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.write_partial_as_json(handler);
            else
                storePandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords)
          {
            handler.start_pair("PandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords");
            if (partial_allowed)
                storePandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.write_partial_as_json(handler);
            else
                storePandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableLongJSONFallback)
          {
            handler.start_pair("PandoraCustomEnableLongJSONFallback");
            if (partial_allowed)
                storePandoraCustomEnableLongJSONFallback.write_partial_as_json(handler);
            else
                storePandoraCustomEnableLongJSONFallback.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnablePodcastMatches)
          {
            handler.start_pair("PandoraCustomEnablePodcastMatches");
            if (partial_allowed)
                storePandoraCustomEnablePodcastMatches.write_partial_as_json(handler);
            else
                storePandoraCustomEnablePodcastMatches.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableUserDataQueries)
          {
            handler.start_pair("PandoraCustomEnableUserDataQueries");
            if (partial_allowed)
                storePandoraCustomEnableUserDataQueries.write_partial_as_json(handler);
            else
                storePandoraCustomEnableUserDataQueries.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableWildcardMatches)
          {
            handler.start_pair("PandoraCustomEnableWildcardMatches");
            if (partial_allowed)
                storePandoraCustomEnableWildcardMatches.write_partial_as_json(handler);
            else
                storePandoraCustomEnableWildcardMatches.write_as_json(handler);
          }
        if (flagHasPandoraCustomEnableWildcardMatchesOnlyAsFallback)
          {
            handler.start_pair("PandoraCustomEnableWildcardMatchesOnlyAsFallback");
            if (partial_allowed)
                storePandoraCustomEnableWildcardMatchesOnlyAsFallback.write_partial_as_json(handler);
            else
                storePandoraCustomEnableWildcardMatchesOnlyAsFallback.write_as_json(handler);
          }
        if (flagHasPandoraCustomExtendedStationModeData)
          {
            handler.start_pair("PandoraCustomExtendedStationModeData");
            if (partial_allowed)
                storePandoraCustomExtendedStationModeData.write_partial_as_json(handler);
            else
                storePandoraCustomExtendedStationModeData.write_as_json(handler);
          }
        if (flagHasPandoraCustomRapidIngestionData)
          {
            handler.start_pair("PandoraCustomRapidIngestionData");
            if (partial_allowed)
                storePandoraCustomRapidIngestionData.write_partial_as_json(handler);
            else
                storePandoraCustomRapidIngestionData.write_as_json(handler);
          }
        if (flagHasPandoraCustomUserData)
          {
            handler.start_pair("PandoraCustomUserData");
            if (partial_allowed)
                storePandoraCustomUserData.write_partial_as_json(handler);
            else
                storePandoraCustomUserData.write_as_json(handler);
          }
        if (flagHasParkingClientState)
          {
            handler.start_pair("ParkingClientState");
            if (partial_allowed)
                storeParkingClientState.write_partial_as_json(handler);
            else
                storeParkingClientState.write_as_json(handler);
          }
        if (flagHasPepperEnabled)
          {
            handler.start_pair("PepperEnabled");
            if (partial_allowed)
                storePepperEnabled.write_partial_as_json(handler);
            else
                storePepperEnabled.write_as_json(handler);
          }
        if (flagHasPhoneDisambiguationOmitList)
          {
            handler.start_pair("PhoneDisambiguationOmitList");
            if (partial_allowed)
                storePhoneDisambiguationOmitList.write_partial_as_json(handler);
            else
                storePhoneDisambiguationOmitList.write_as_json(handler);
          }
        if (flagHasRadioControlAvailableAudioSources)
          {
            handler.start_pair("RadioControlAvailableAudioSources");
            if (partial_allowed)
                storeRadioControlAvailableAudioSources.write_partial_as_json(handler);
            else
                storeRadioControlAvailableAudioSources.write_as_json(handler);
          }
        if (flagHasRadioControlOtherAMBands)
          {
            handler.start_pair("RadioControlOtherAMBands");
            if (partial_allowed)
                storeRadioControlOtherAMBands.write_partial_as_json(handler);
            else
                storeRadioControlOtherAMBands.write_as_json(handler);
          }
        if (flagHasRadioControlOtherFMBands)
          {
            handler.start_pair("RadioControlOtherFMBands");
            if (partial_allowed)
                storeRadioControlOtherFMBands.write_partial_as_json(handler);
            else
                storeRadioControlOtherFMBands.write_as_json(handler);
          }
        if (flagHasRadioControlRecognizeNorthAmericanAMBand)
          {
            handler.start_pair("RadioControlRecognizeNorthAmericanAMBand");
            if (partial_allowed)
                storeRadioControlRecognizeNorthAmericanAMBand.write_partial_as_json(handler);
            else
                storeRadioControlRecognizeNorthAmericanAMBand.write_as_json(handler);
          }
        if (flagHasRadioControlRecognizeNorthAmericanFMBand)
          {
            handler.start_pair("RadioControlRecognizeNorthAmericanFMBand");
            if (partial_allowed)
                storeRadioControlRecognizeNorthAmericanFMBand.write_partial_as_json(handler);
            else
                storeRadioControlRecognizeNorthAmericanFMBand.write_as_json(handler);
          }
        if (flagHasRadioControlTunableStations)
          {
            handler.start_pair("RadioControlTunableStations");
            if (partial_allowed)
                storeRadioControlTunableStations.write_partial_as_json(handler);
            else
                storeRadioControlTunableStations.write_as_json(handler);
          }
        if (flagHasReadSpeakerVoiceParameters)
          {
            handler.start_pair("ReadSpeakerVoiceParameters");
            if (partial_allowed)
                storeReadSpeakerVoiceParameters.write_partial_as_json(handler);
            else
                storeReadSpeakerVoiceParameters.write_as_json(handler);
          }
        if (flagHasRecipeParameters)
          {
            handler.start_pair("RecipeParameters");
            if (partial_allowed)
                storeRecipeParameters.write_partial_as_json(handler);
            else
                storeRecipeParameters.write_as_json(handler);
          }
        if (flagHasRegionalPhoneNumberConfiguration)
          {
            handler.start_pair("RegionalPhoneNumberConfiguration");
            if (partial_allowed)
                storeRegionalPhoneNumberConfiguration.write_partial_as_json(handler);
            else
                storeRegionalPhoneNumberConfiguration.write_as_json(handler);
          }
        if (flagHasRemainingDistance)
          {
            handler.start_pair("RemainingDistance");
            if (partial_allowed)
                storeRemainingDistance.write_partial_as_json(handler);
            else
                storeRemainingDistance.write_as_json(handler);
          }
        if (flagHasRemainingTravelTime)
          {
            handler.start_pair("RemainingTravelTime");
            if (partial_allowed)
                storeRemainingTravelTime.write_partial_as_json(handler);
            else
                storeRemainingTravelTime.write_as_json(handler);
          }
        if (flagHasReminders)
          {
            handler.start_pair("Reminders");
            if (partial_allowed)
                storeReminders.write_partial_as_json(handler);
            else
                storeReminders.write_as_json(handler);
          }
        if (flagHasRestaurantMenuMetadata)
          {
            handler.start_pair("RestaurantMenuMetadata");
            if (partial_allowed)
                storeRestaurantMenuMetadata.write_partial_as_json(handler);
            else
                storeRestaurantMenuMetadata.write_as_json(handler);
          }
        if (flagHasRestaurantMenuObject)
          {
            handler.start_pair("RestaurantMenuObject");
            if (partial_allowed)
                storeRestaurantMenuObject.write_partial_as_json(handler);
            else
                storeRestaurantMenuObject.write_as_json(handler);
          }
        if (flagHasRestaurantOrderingMenuData)
          {
            handler.start_pair("RestaurantOrderingMenuData");
            if (partial_allowed)
                storeRestaurantOrderingMenuData.write_partial_as_json(handler);
            else
                storeRestaurantOrderingMenuData.write_as_json(handler);
          }
        if (flagHasRestaurantOrderingQueriesMenuDataStoreID)
          {
            handler.start_pair("RestaurantOrderingQueriesMenuDataStoreID");
            if (partial_allowed)
                storeRestaurantOrderingQueriesMenuDataStoreID.write_partial_as_json(handler);
            else
                storeRestaurantOrderingQueriesMenuDataStoreID.write_as_json(handler);
          }
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent)
          {
            handler.start_pair("RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent");
            if (partial_allowed)
                storeRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.write_partial_as_json(handler);
            else
                storeRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.write_as_json(handler);
          }
        if (flagHasRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent)
          {
            handler.start_pair("RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent");
            if (partial_allowed)
                storeRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.write_partial_as_json(handler);
            else
                storeRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.write_as_json(handler);
          }
        if (flagHasRestaurantOrderingQueriesRequestData)
          {
            handler.start_pair("RestaurantOrderingQueriesRequestData");
            if (partial_allowed)
                storeRestaurantOrderingQueriesRequestData.write_partial_as_json(handler);
            else
                storeRestaurantOrderingQueriesRequestData.write_as_json(handler);
          }
        if (flagHasReturnInformationNuggetsForMusicSearch)
          {
            handler.start_pair("ReturnInformationNuggetsForMusicSearch");
            if (partial_allowed)
                storeReturnInformationNuggetsForMusicSearch.write_partial_as_json(handler);
            else
                storeReturnInformationNuggetsForMusicSearch.write_as_json(handler);
          }
        if (flagHasRobotInfo)
          {
            handler.start_pair("RobotInfo");
            if (partial_allowed)
                storeRobotInfo.write_partial_as_json(handler);
            else
                storeRobotInfo.write_as_json(handler);
          }
        if (flagHasSendFullWeatherForecastData)
          {
            handler.start_pair("SendFullWeatherForecastData");
            if (partial_allowed)
                storeSendFullWeatherForecastData.write_partial_as_json(handler);
            else
                storeSendFullWeatherForecastData.write_as_json(handler);
          }
        if (flagHasSetUserMemoryLocation)
          {
            handler.start_pair("SetUserMemoryLocation");
            if (partial_allowed)
                storeSetUserMemoryLocation.write_partial_as_json(handler);
            else
                storeSetUserMemoryLocation.write_as_json(handler);
          }
        if (flagHasSiriusXMEnableDomain)
          {
            handler.start_pair("SiriusXMEnableDomain");
            if (partial_allowed)
                storeSiriusXMEnableDomain.write_partial_as_json(handler);
            else
                storeSiriusXMEnableDomain.write_as_json(handler);
          }
        if (flagHasSiriusXMEnableGenericChannelMatches)
          {
            handler.start_pair("SiriusXMEnableGenericChannelMatches");
            if (partial_allowed)
                storeSiriusXMEnableGenericChannelMatches.write_partial_as_json(handler);
            else
                storeSiriusXMEnableGenericChannelMatches.write_as_json(handler);
          }
        if (flagHasSiriusXMEnableWildcardMatches)
          {
            handler.start_pair("SiriusXMEnableWildcardMatches");
            if (partial_allowed)
                storeSiriusXMEnableWildcardMatches.write_partial_as_json(handler);
            else
                storeSiriusXMEnableWildcardMatches.write_as_json(handler);
          }
        if (flagHasSmartTVOnScreenItems)
          {
            handler.start_pair("SmartTVOnScreenItems");
            if (partial_allowed)
                storeSmartTVOnScreenItems.write_partial_as_json(handler);
            else
                storeSmartTVOnScreenItems.write_as_json(handler);
          }
        if (flagHasSmartTVUserCustomInputSource)
          {
            handler.start_pair("SmartTVUserCustomInputSource");
            if (partial_allowed)
                storeSmartTVUserCustomInputSource.write_partial_as_json(handler);
            else
                storeSmartTVUserCustomInputSource.write_as_json(handler);
          }
        if (flagHasSoundHoundTTSParameters)
          {
            handler.start_pair("SoundHoundTTSParameters");
            if (partial_allowed)
                storeSoundHoundTTSParameters.write_partial_as_json(handler);
            else
                storeSoundHoundTTSParameters.write_as_json(handler);
          }
        if (flagHasSpeedLimitOnThisRoad)
          {
            handler.start_pair("SpeedLimitOnThisRoad");
            if (partial_allowed)
                storeSpeedLimitOnThisRoad.write_partial_as_json(handler);
            else
                storeSpeedLimitOnThisRoad.write_as_json(handler);
          }
        if (flagHasSportsLeagueControl)
          {
            handler.start_pair("SportsLeagueControl");
            if (partial_allowed)
                storeSportsLeagueControl.write_partial_as_json(handler);
            else
                storeSportsLeagueControl.write_as_json(handler);
          }
        if (flagHasSpotifyPlaylistEnableWildcardMatches)
          {
            handler.start_pair("SpotifyPlaylistEnableWildcardMatches");
            if (partial_allowed)
                storeSpotifyPlaylistEnableWildcardMatches.write_partial_as_json(handler);
            else
                storeSpotifyPlaylistEnableWildcardMatches.write_as_json(handler);
          }
        if (flagHasStoredAlwaysMatchReadData)
          {
            handler.start_pair("StoredAlwaysMatchReadData");
            if (partial_allowed)
                storeStoredAlwaysMatchReadData.write_partial_as_json(handler);
            else
                storeStoredAlwaysMatchReadData.write_as_json(handler);
          }
        if (flagHasStoredAlwaysMatchWriteData)
          {
            handler.start_pair("StoredAlwaysMatchWriteData");
            if (partial_allowed)
                storeStoredAlwaysMatchWriteData.write_partial_as_json(handler);
            else
                storeStoredAlwaysMatchWriteData.write_as_json(handler);
          }
        if (flagHasStoredGlobalPagesToMatch)
          {
            handler.start_pair("StoredGlobalPagesToMatch");
            if (partial_allowed)
                storeStoredGlobalPagesToMatch.write_partial_as_json(handler);
            else
                storeStoredGlobalPagesToMatch.write_as_json(handler);
          }
        if (flagHasStoredGlobalPagesToNotMatch)
          {
            handler.start_pair("StoredGlobalPagesToNotMatch");
            if (partial_allowed)
                storeStoredGlobalPagesToNotMatch.write_partial_as_json(handler);
            else
                storeStoredGlobalPagesToNotMatch.write_as_json(handler);
          }
        if (flagHasStoredGlobalPagesToSetOffByDefault)
          {
            handler.start_pair("StoredGlobalPagesToSetOffByDefault");
            if (partial_allowed)
                storeStoredGlobalPagesToSetOffByDefault.write_partial_as_json(handler);
            else
                storeStoredGlobalPagesToSetOffByDefault.write_as_json(handler);
          }
        if (flagHasStoredGlobalPagesToSetOnByDefault)
          {
            handler.start_pair("StoredGlobalPagesToSetOnByDefault");
            if (partial_allowed)
                storeStoredGlobalPagesToSetOnByDefault.write_partial_as_json(handler);
            else
                storeStoredGlobalPagesToSetOnByDefault.write_as_json(handler);
          }
        if (flagHasStoredPageMatchPageListData)
          {
            handler.start_pair("StoredPageMatchPageListData");
            if (partial_allowed)
                storeStoredPageMatchPageListData.write_partial_as_json(handler);
            else
                storeStoredPageMatchPageListData.write_as_json(handler);
          }
        if (flagHasStoredPageMatchReadData)
          {
            handler.start_pair("StoredPageMatchReadData");
            if (partial_allowed)
                storeStoredPageMatchReadData.write_partial_as_json(handler);
            else
                storeStoredPageMatchReadData.write_as_json(handler);
          }
        if (flagHasStoredPageMatchWeight)
          {
            handler.start_pair("StoredPageMatchWeight");
            if (partial_allowed)
                storeStoredPageMatchWeight.write_partial_as_json(handler);
            else
                storeStoredPageMatchWeight.write_as_json(handler);
          }
        if (flagHasStoredPageMatchWriteData)
          {
            handler.start_pair("StoredPageMatchWriteData");
            if (partial_allowed)
                storeStoredPageMatchWriteData.write_partial_as_json(handler);
            else
                storeStoredPageMatchWriteData.write_as_json(handler);
          }
        if (flagHasStoredPerUserPagesToMatch)
          {
            handler.start_pair("StoredPerUserPagesToMatch");
            if (partial_allowed)
                storeStoredPerUserPagesToMatch.write_partial_as_json(handler);
            else
                storeStoredPerUserPagesToMatch.write_as_json(handler);
          }
        if (flagHasStoredPerUserPagesToNotMatch)
          {
            handler.start_pair("StoredPerUserPagesToNotMatch");
            if (partial_allowed)
                storeStoredPerUserPagesToNotMatch.write_partial_as_json(handler);
            else
                storeStoredPerUserPagesToNotMatch.write_as_json(handler);
          }
        if (flagHasStoredPerUserPagesToSetOffByDefault)
          {
            handler.start_pair("StoredPerUserPagesToSetOffByDefault");
            if (partial_allowed)
                storeStoredPerUserPagesToSetOffByDefault.write_partial_as_json(handler);
            else
                storeStoredPerUserPagesToSetOffByDefault.write_as_json(handler);
          }
        if (flagHasStoredPerUserPagesToSetOnByDefault)
          {
            handler.start_pair("StoredPerUserPagesToSetOnByDefault");
            if (partial_allowed)
                storeStoredPerUserPagesToSetOnByDefault.write_partial_as_json(handler);
            else
                storeStoredPerUserPagesToSetOnByDefault.write_as_json(handler);
          }
        if (flagHasSurveyAPIRequest)
          {
            handler.start_pair("SurveyAPIRequest");
            if (partial_allowed)
                storeSurveyAPIRequest.write_partial_as_json(handler);
            else
                storeSurveyAPIRequest.write_as_json(handler);
          }
        if (flagHasTVChannelList)
          {
            handler.start_pair("TVChannelList");
            if (partial_allowed)
                storeTVChannelList.write_partial_as_json(handler);
            else
                storeTVChannelList.write_as_json(handler);
          }
        if (flagHasTerrierTableUploadReadData)
          {
            handler.start_pair("TerrierTableUploadReadData");
            if (partial_allowed)
                storeTerrierTableUploadReadData.write_partial_as_json(handler);
            else
                storeTerrierTableUploadReadData.write_as_json(handler);
          }
        if (flagHasTerrierTableUploadWriteData)
          {
            handler.start_pair("TerrierTableUploadWriteData");
            if (partial_allowed)
                storeTerrierTableUploadWriteData.write_partial_as_json(handler);
            else
                storeTerrierTableUploadWriteData.write_as_json(handler);
          }
        if (flagHasTerrierUploadDeleteProject)
          {
            handler.start_pair("TerrierUploadDeleteProject");
            if (partial_allowed)
                storeTerrierUploadDeleteProject.write_partial_as_json(handler);
            else
                storeTerrierUploadDeleteProject.write_as_json(handler);
          }
        if (flagHasTerrierUploadDeleteProjectOptions)
          {
            handler.start_pair("TerrierUploadDeleteProjectOptions");
            if (partial_allowed)
                storeTerrierUploadDeleteProjectOptions.write_partial_as_json(handler);
            else
                storeTerrierUploadDeleteProjectOptions.write_as_json(handler);
          }
        if (flagHasTerrierUploadGetProject)
          {
            handler.start_pair("TerrierUploadGetProject");
            if (partial_allowed)
                storeTerrierUploadGetProject.write_partial_as_json(handler);
            else
                storeTerrierUploadGetProject.write_as_json(handler);
          }
        if (flagHasTerrierUploadGetProjectList)
          {
            handler.start_pair("TerrierUploadGetProjectList");
            if (partial_allowed)
                storeTerrierUploadGetProjectList.write_partial_as_json(handler);
            else
                storeTerrierUploadGetProjectList.write_as_json(handler);
          }
        if (flagHasTerrierUploadGetProjectListOptions)
          {
            handler.start_pair("TerrierUploadGetProjectListOptions");
            if (partial_allowed)
                storeTerrierUploadGetProjectListOptions.write_partial_as_json(handler);
            else
                storeTerrierUploadGetProjectListOptions.write_as_json(handler);
          }
        if (flagHasTerrierUploadGetProjectOptions)
          {
            handler.start_pair("TerrierUploadGetProjectOptions");
            if (partial_allowed)
                storeTerrierUploadGetProjectOptions.write_partial_as_json(handler);
            else
                storeTerrierUploadGetProjectOptions.write_as_json(handler);
          }
        if (flagHasTerrierUploadReadData)
          {
            handler.start_pair("TerrierUploadReadData");
            if (partial_allowed)
                storeTerrierUploadReadData.write_partial_as_json(handler);
            else
                storeTerrierUploadReadData.write_as_json(handler);
          }
        if (flagHasTerrierUploadWriteData)
          {
            handler.start_pair("TerrierUploadWriteData");
            if (partial_allowed)
                storeTerrierUploadWriteData.write_partial_as_json(handler);
            else
                storeTerrierUploadWriteData.write_as_json(handler);
          }
        if (flagHasTerrierUploadWriteProject)
          {
            handler.start_pair("TerrierUploadWriteProject");
            if (partial_allowed)
                storeTerrierUploadWriteProject.write_partial_as_json(handler);
            else
                storeTerrierUploadWriteProject.write_as_json(handler);
          }
        if (flagHasTerrierUploadWriteProjectOptions)
          {
            handler.start_pair("TerrierUploadWriteProjectOptions");
            if (partial_allowed)
                storeTerrierUploadWriteProjectOptions.write_partial_as_json(handler);
            else
                storeTerrierUploadWriteProjectOptions.write_as_json(handler);
          }
        if (flagHasThirdPartyCalendarService)
          {
            handler.start_pair("ThirdPartyCalendarService");
            if (partial_allowed)
                storeThirdPartyCalendarService.write_partial_as_json(handler);
            else
                storeThirdPartyCalendarService.write_as_json(handler);
          }
        if (flagHasCalendarMatchingLoosenessLevel)
          {
            handler.start_pair("CalendarMatchingLoosenessLevel");
            if (partial_allowed)
                storeCalendarMatchingLoosenessLevel.write_partial_as_json(handler);
            else
                storeCalendarMatchingLoosenessLevel.write_as_json(handler);
          }
        if (flagHasCalendarEvents)
          {
            handler.start_pair("CalendarEvents");
            if (partial_allowed)
                storeCalendarEvents.write_partial_as_json(handler);
            else
                storeCalendarEvents.write_as_json(handler);
          }
        if (flagHasToshibaTTSParameters)
          {
            handler.start_pair("ToshibaTTSParameters");
            if (partial_allowed)
                storeToshibaTTSParameters.write_partial_as_json(handler);
            else
                storeToshibaTTSParameters.write_as_json(handler);
          }
        if (flagHasTravelBearing)
          {
            handler.start_pair("TravelBearing");
            if (partial_allowed)
                storeTravelBearing.write_partial_as_json(handler);
            else
                storeTravelBearing.write_as_json(handler);
          }
        if (flagHasUDSExampleRequest)
          {
            handler.start_pair("UDSExampleRequest");
            if (partial_allowed)
                storeUDSExampleRequest.write_partial_as_json(handler);
            else
                storeUDSExampleRequest.write_as_json(handler);
          }
        if (flagHasUberClientId)
          {
            handler.start_pair("UberClientId");
            if (partial_allowed)
                storeUberClientId.write_partial_as_json(handler);
            else
                storeUberClientId.write_as_json(handler);
          }
        if (flagHasUberServerToken)
          {
            handler.start_pair("UberServerToken");
            if (partial_allowed)
                storeUberServerToken.write_partial_as_json(handler);
            else
                storeUberServerToken.write_as_json(handler);
          }
        if (flagHasUploadedTestConfiguration)
          {
            handler.start_pair("UploadedTestConfiguration");
            if (partial_allowed)
                storeUploadedTestConfiguration.write_partial_as_json(handler);
            else
                storeUploadedTestConfiguration.write_as_json(handler);
          }
        if (flagHasUploadedTestData)
          {
            handler.start_pair("UploadedTestData");
            if (partial_allowed)
                storeUploadedTestData.write_partial_as_json(handler);
            else
                storeUploadedTestData.write_as_json(handler);
          }
        if (flagHasUseNewStyleSMSCommands)
          {
            handler.start_pair("UseNewStyleSMSCommands");
            if (partial_allowed)
                storeUseNewStyleSMSCommands.write_partial_as_json(handler);
            else
                storeUseNewStyleSMSCommands.write_as_json(handler);
          }
        if (flagHasUseXAPAPI)
          {
            handler.start_pair("UseXAPAPI");
            if (partial_allowed)
                storeUseXAPAPI.write_partial_as_json(handler);
            else
                storeUseXAPAPI.write_as_json(handler);
          }
        if (flagHasUserContactsConfiguration)
          {
            handler.start_pair("UserContactsConfiguration");
            if (partial_allowed)
                storeUserContactsConfiguration.write_partial_as_json(handler);
            else
                storeUserContactsConfiguration.write_as_json(handler);
          }
        if (flagHasUserContactsRequests)
          {
            handler.start_pair("UserContactsRequests");
            if (partial_allowed)
                storeUserContactsRequests.write_partial_as_json(handler);
            else
                storeUserContactsRequests.write_as_json(handler);
          }
        if (flagHasUserFeedback)
          {
            handler.start_pair("UserFeedback");
            if (partial_allowed)
                storeUserFeedback.write_partial_as_json(handler);
            else
                storeUserFeedback.write_as_json(handler);
          }
        if (flagHasUserMusicAvailableSources)
          {
            handler.start_pair("UserMusicAvailableSources");
            if (partial_allowed)
                storeUserMusicAvailableSources.write_partial_as_json(handler);
            else
                storeUserMusicAvailableSources.write_as_json(handler);
          }
        if (flagHasUserMusicControls)
          {
            handler.start_pair("UserMusicControls");
            if (partial_allowed)
                storeUserMusicControls.write_partial_as_json(handler);
            else
                storeUserMusicControls.write_as_json(handler);
          }
        if (flagHasUserMusicInfo)
          {
            handler.start_pair("UserMusicInfo");
            if (partial_allowed)
                storeUserMusicInfo.write_partial_as_json(handler);
            else
                storeUserMusicInfo.write_as_json(handler);
          }
        if (flagHasVideoSearchConfiguration)
          {
            handler.start_pair("VideoSearchConfiguration");
            if (partial_allowed)
                storeVideoSearchConfiguration.write_partial_as_json(handler);
            else
                storeVideoSearchConfiguration.write_as_json(handler);
          }
        if (flagHasVideoSearchRequestInfoProviders)
          {
            handler.start_pair("VideoSearchRequestInfoProviders");
            if (partial_allowed)
                storeVideoSearchRequestInfoProviders.write_partial_as_json(handler);
            else
                storeVideoSearchRequestInfoProviders.write_as_json(handler);
          }
        if (flagHasVoiceParameters)
          {
            handler.start_pair("VoiceParameters");
            if (partial_allowed)
                storeVoiceParameters.write_partial_as_json(handler);
            else
                storeVoiceParameters.write_as_json(handler);
          }
        if (flagHasWebSearchConfiguration)
          {
            handler.start_pair("WebSearchConfiguration");
            if (partial_allowed)
                storeWebSearchConfiguration.write_partial_as_json(handler);
            else
                storeWebSearchConfiguration.write_as_json(handler);
          }
        if (flagHasWebSearchRequestInfoProviders)
          {
            handler.start_pair("WebSearchRequestInfoProviders");
            if (partial_allowed)
                storeWebSearchRequestInfoProviders.write_partial_as_json(handler);
            else
                storeWebSearchRequestInfoProviders.write_as_json(handler);
          }
        if (flagHasWhat3WordsCluePhraseNotRequired)
          {
            handler.start_pair("What3WordsCluePhraseNotRequired");
            if (partial_allowed)
                storeWhat3WordsCluePhraseNotRequired.write_partial_as_json(handler);
            else
                storeWhat3WordsCluePhraseNotRequired.write_as_json(handler);
          }
        if (flagHasWhat3WordsStandardGeofenceRadius)
          {
            handler.start_pair("What3WordsStandardGeofenceRadius");
            if (partial_allowed)
                storeWhat3WordsStandardGeofenceRadius.write_partial_as_json(handler);
            else
                storeWhat3WordsStandardGeofenceRadius.write_as_json(handler);
          }
        if (flagHasHereApiPlacesFallback)
          {
            handler.start_pair("HereApiPlacesFallback");
            if (partial_allowed)
                storeHereApiPlacesFallback.write_partial_as_json(handler);
            else
                storeHereApiPlacesFallback.write_as_json(handler);
          }
        if (flagHasPaymentsPredeterminedSMSNumber)
          {
            handler.start_pair("PaymentsPredeterminedSMSNumber");
            if (partial_allowed)
                storePaymentsPredeterminedSMSNumber.write_partial_as_json(handler);
            else
                storePaymentsPredeterminedSMSNumber.write_as_json(handler);
          }
        if (flagHasPaymentsPredeterminedPaymentMethod)
          {
            handler.start_pair("PaymentsPredeterminedPaymentMethod");
            if (partial_allowed)
                storePaymentsPredeterminedPaymentMethod.write_partial_as_json(handler);
            else
                storePaymentsPredeterminedPaymentMethod.write_as_json(handler);
          }
        if (flagHasOrderSource)
          {
            handler.start_pair("OrderSource");
            if (partial_allowed)
                storeOrderSource.write_partial_as_json(handler);
            else
                storeOrderSource.write_as_json(handler);
          }
        if (flagHasOrderPrepDuration)
          {
            handler.start_pair("OrderPrepDuration");
            if (partial_allowed)
                storeOrderPrepDuration.write_partial_as_json(handler);
            else
                storeOrderPrepDuration.write_as_json(handler);
          }
        if (flagHasSquareEnvironment)
          {
            handler.start_pair("SquareEnvironment");
            if (partial_allowed)
                storeSquareEnvironment.write_partial_as_json(handler);
            else
                storeSquareEnvironment.write_as_json(handler);
          }
        if (flagHasEnableSquareCustomerInformationPermissions)
          {
            handler.start_pair("EnableSquareCustomerInformationPermissions");
            if (partial_allowed)
                storeEnableSquareCustomerInformationPermissions.write_partial_as_json(handler);
            else
                storeEnableSquareCustomerInformationPermissions.write_as_json(handler);
          }
        if (flagHasMessagingConvertPunctuation)
          {
            handler.start_pair("MessagingConvertPunctuation");
            if (partial_allowed)
                storeMessagingConvertPunctuation.write_partial_as_json(handler);
            else
                storeMessagingConvertPunctuation.write_as_json(handler);
          }
        if (flagHasAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode)
          {
            handler.start_pair("AutoNaviAPIPlacesWildcardPOINameUseWebQueryMode");
            if (partial_allowed)
                storeAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.write_partial_as_json(handler);
            else
                storeAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.write_as_json(handler);
          }
        if (flagHasStreamPreference)
          {
            handler.start_pair("StreamPreference");
            if (partial_allowed)
                storeStreamPreference.write_partial_as_json(handler);
            else
                storeStreamPreference.write_as_json(handler);
          }
        if (flagHasMusicQueriesForceInfoNuggetToPlayCommand)
          {
            handler.start_pair("MusicQueriesForceInfoNuggetToPlayCommand");
            if (partial_allowed)
                storeMusicQueriesForceInfoNuggetToPlayCommand.write_partial_as_json(handler);
            else
                storeMusicQueriesForceInfoNuggetToPlayCommand.write_as_json(handler);
          }
        if (flagHasMusicQueriesAllowRawTop)
          {
            handler.start_pair("MusicQueriesAllowRawTop");
            if (partial_allowed)
                storeMusicQueriesAllowRawTop.write_partial_as_json(handler);
            else
                storeMusicQueriesAllowRawTop.write_as_json(handler);
          }
        if (flagHasBusinessInformationUploadData)
          {
            handler.start_pair("BusinessInformationUploadData");
            if (partial_allowed)
                storeBusinessInformationUploadData.write_partial_as_json(handler);
            else
                storeBusinessInformationUploadData.write_as_json(handler);
          }
        if (flagHasBusinessInformationDataStoreId)
          {
            handler.start_pair("BusinessInformationDataStoreId");
            if (partial_allowed)
                storeBusinessInformationDataStoreId.write_partial_as_json(handler);
            else
                storeBusinessInformationDataStoreId.write_as_json(handler);
          }
        if (flagHasCustomASREnhancementWriteData)
          {
            handler.start_pair("CustomASREnhancementWriteData");
            if (partial_allowed)
                storeCustomASREnhancementWriteData.write_partial_as_json(handler);
            else
                storeCustomASREnhancementWriteData.write_as_json(handler);
          }
        if (flagHasCustomASREnhancementReadData)
          {
            handler.start_pair("CustomASREnhancementReadData");
            if (partial_allowed)
                storeCustomASREnhancementReadData.write_partial_as_json(handler);
            else
                storeCustomASREnhancementReadData.write_as_json(handler);
          }
        if (flagHasCustomASREnhancementListData)
          {
            handler.start_pair("CustomASREnhancementListData");
            if (partial_allowed)
                storeCustomASREnhancementListData.write_partial_as_json(handler);
            else
                storeCustomASREnhancementListData.write_as_json(handler);
          }
        if (flagHasEnabledCustomASREnhancementGrammars)
          {
            handler.start_pair("EnabledCustomASREnhancementGrammars");
            if (partial_allowed)
                storeEnabledCustomASREnhancementGrammars.write_partial_as_json(handler);
            else
                storeEnabledCustomASREnhancementGrammars.write_as_json(handler);
          }
        if (flagHasCustomASREnhancementWeight)
          {
            handler.start_pair("CustomASREnhancementWeight");
            if (partial_allowed)
                storeCustomASREnhancementWeight.write_partial_as_json(handler);
            else
                storeCustomASREnhancementWeight.write_as_json(handler);
          }
        if (flagHasToastEnvironment)
          {
            handler.start_pair("ToastEnvironment");
            if (partial_allowed)
                storeToastEnvironment.write_partial_as_json(handler);
            else
                storeToastEnvironment.write_as_json(handler);
          }
        if (flagHasIntentToExecute)
          {
            handler.start_pair("IntentToExecute");
            if (partial_allowed)
                storeIntentToExecute.write_partial_as_json(handler);
            else
                storeIntentToExecute.write_as_json(handler);
          }
        if (flagHasUniversalTranslatorSubstitutionList)
          {
            handler.start_pair("UniversalTranslatorSubstitutionList");
            if (partial_allowed)
                storeUniversalTranslatorSubstitutionList.write_partial_as_json(handler);
            else
                storeUniversalTranslatorSubstitutionList.write_as_json(handler);
          }
        if (flagHasCustomTopicIdentificationWriteData)
          {
            handler.start_pair("CustomTopicIdentificationWriteData");
            if (partial_allowed)
                storeCustomTopicIdentificationWriteData.write_partial_as_json(handler);
            else
                storeCustomTopicIdentificationWriteData.write_as_json(handler);
          }
      }
    public override void write_partial_as_json(JSONHandler handler)
      {
        handler.start_object();
        write_fields_as_json(handler, true);
        int extra_count = extraKeys.Count;
        Debug.Assert(extra_count == extraValues.Count);
        for (int extra_num = 0; extra_num < extra_count; ++extra_num)
          {
            handler.start_pair(extraKeys[extra_num]);
            extraValues[extra_num].write(handler);
          }
        handler.finish_object();
      }
    public virtual string missing_field_error(bool allow_unpolished)
      {
        return null;
      }

    public static RequestInfoJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        RequestInfoJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type RequestInfo", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write(generator);
            else
                json_value.write(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static RequestInfoJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static RequestInfoJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        RequestInfoJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type RequestInfo", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write_partial_as_json(generator);
            else
                json_value.write_as_json(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static RequestInfoJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static RequestInfoJSON from_text(string text, bool ignore_extras)
      {
        RequestInfoJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type RequestInfo", ignore_extras);
            JSONParse.parse_json_value(text, "Text for RequestInfoJSON", generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static RequestInfoJSON from_file(TextReader fp, string file_name, bool ignore_extras)
      {
        RequestInfoJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type RequestInfo", ignore_extras);
            JSONParse.parse_json_value(fp, file_name, generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public abstract class Generator : JSONObjectGenerator
      {
        private JSONHoldingNumberTextGenerator fieldGeneratorLatitude;
        private JSONHoldingNumberTextGenerator fieldGeneratorLongitude;
    private class FieldHoldingGeneratorPositionTime : JSONHoldingIntegerUnboundRangeGenerator
          {
            public FieldHoldingGeneratorPositionTime(String what) : base(what)
              {
              }
          };
    private class FieldHoldingArrayGeneratorPositionTime : JSONHoldingIntegerUnboundRangeArrayGenerator
          {
            public FieldHoldingArrayGeneratorPositionTime(String what) : base(what)
              {
              }
          };
        private FieldHoldingGeneratorPositionTime fieldGeneratorPositionTime;
        private JSONHoldingNumberTextGenerator fieldGeneratorPositionHorizontalAccuracy;
        private JSONHoldingStringGenerator fieldGeneratorStreet;
        private JSONHoldingStringGenerator fieldGeneratorCity;
        private JSONHoldingStringGenerator fieldGeneratorState;
        private JSONHoldingStringGenerator fieldGeneratorCountry;
        private RoutePointsJSON.HoldingGenerator fieldGeneratorRoutePoints;
        private ClientRouteInformationJSON.HoldingGenerator fieldGeneratorRouteInformation;
        private JSONHoldingBooleanGenerator fieldGeneratorControllableTrackPlaying;
    private class FieldHoldingGeneratorTimeStamp : JSONHoldingIntegerUnboundRangeGenerator
          {
            public FieldHoldingGeneratorTimeStamp(String what) : base(what)
              {
              }
          };
    private class FieldHoldingArrayGeneratorTimeStamp : JSONHoldingIntegerUnboundRangeArrayGenerator
          {
            public FieldHoldingArrayGeneratorTimeStamp(String what) : base(what)
              {
              }
          };
        private FieldHoldingGeneratorTimeStamp fieldGeneratorTimeStamp;
        private JSONHoldingStringGenerator fieldGeneratorTimeZone;
        private ConversationStateJSON.HoldingGenerator fieldGeneratorConversationState;
        private ClientStateJSON.HoldingGenerator fieldGeneratorClientState;
        private TypeDeviceInfoJSON.HoldingGenerator fieldGeneratorDeviceInfo;
        private JSONHoldingValueGenerator fieldGeneratorSendBack;
    private class FieldHoldingGeneratorPreferredImageSize : JSONHoldingIntegerLowerBoundOnlyGenerator
          {
            public FieldHoldingGeneratorPreferredImageSize(String what) : base(what, (BigInteger)(1))
              {
              }
          };
    private class FieldHoldingArrayGeneratorPreferredImageSize : JSONHoldingIntegerLowerBoundOnlyArrayGenerator
          {
            public FieldHoldingArrayGeneratorPreferredImageSize(String what) : base(what, (BigInteger)(1))
              {
              }
          };
        private FieldHoldingArrayGeneratorPreferredImageSize fieldGeneratorPreferredImageSize;
        private JSONHoldingStringGenerator fieldGeneratorInputLanguageEnglishName;
        private JSONHoldingStringGenerator fieldGeneratorInputLanguageNativeName;
        private JSONHoldingStringGenerator fieldGeneratorInputLanguageIETFTag;
        private JSONHoldingStringGenerator fieldGeneratorOutputLanguageEnglishName;
        private JSONHoldingStringGenerator fieldGeneratorOutputLanguageNativeName;
        private JSONHoldingStringGenerator fieldGeneratorOutputLanguageIETFTag;
        private JSONHoldingNumberTextGenerator fieldGeneratorResultVersionAccepted;
    private abstract class FieldGeneratorUnitPreference : JSONStringGenerator
          {
            protected FieldGeneratorUnitPreference(string what)
              {
                set_what(what);
              }
            protected FieldGeneratorUnitPreference()
              {
              }
            protected override void handle_result(string result)
              {
                handle_result(stringToUnitPreference(result));
              }
            protected abstract void handle_result(TypeUnitPreference result);
          };
    private class FieldHoldingGeneratorUnitPreference : FieldGeneratorUnitPreference
  {
    protected override void handle_result(TypeUnitPreference result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorUnitPreference(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeUnitPreference value;
  };
    private class FieldHoldingArrayGeneratorUnitPreference : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorUnitPreference
      {
        private FieldHoldingArrayGeneratorUnitPreference top;

        protected override void handle_result(TypeUnitPreference result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorUnitPreference init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeUnitPreference> result)
      {
      }

    public FieldHoldingArrayGeneratorUnitPreference(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeUnitPreference>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorUnitPreference()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeUnitPreference>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeUnitPreference> value;
  };
        private FieldHoldingGeneratorUnitPreference fieldGeneratorUnitPreference;
        private JSONHoldingBooleanGenerator fieldGeneratorDefaultTimeFormat24Hours;
        private JSONHoldingStringGenerator fieldGeneratorClientID;
    private class FieldHoldingGeneratorClientVersion_1 : JSONHoldingIntegerLowerBoundOnlyGenerator
          {
            public FieldHoldingGeneratorClientVersion_1(String what) : base(what, (BigInteger)(0))
              {
              }
          };
    private class FieldHoldingArrayGeneratorClientVersion_1 : JSONHoldingIntegerLowerBoundOnlyArrayGenerator
          {
            public FieldHoldingArrayGeneratorClientVersion_1(String what) : base(what, (BigInteger)(0))
              {
              }
          };
    private abstract class FieldGeneratorClientVersion : JSONParallelGenerator
          {
            private JSONHoldingStringGenerator field0;
            private FieldHoldingGeneratorClientVersion_1 field1;
            private JSONHandler [] all_handlers = new JSONHandler [2];
            protected override JSONHandler[] start()
              {
                return all_handlers;
              }
            protected override void finish(int winning_index)
              {
                TypeClientVersion result = new TypeClientVersion();
                result.key = winning_index;
                switch (winning_index)
                  {
                    case 0:
                      {
                        Debug.Assert(field0.have_value);
                        result.choice0 = field0.value;
                        break;
                      }
                    case 1:
                      {
                        Debug.Assert(field1.have_value);
                        result.choice1 = field1.value;
                        break;
                      }
                    default:
                      {
                        Debug.Assert(false);
                        break;
                      }
                  }
                handle_result(result);
              }
            protected abstract void handle_result(TypeClientVersion result);
            public FieldGeneratorClientVersion(bool ignore_extras)
              {
                    field0 = new JSONHoldingStringGenerator("option 0 of field \"ClientVersion\"");
                    field1 = new FieldHoldingGeneratorClientVersion_1("option 1 of field \"ClientVersion\"");
                all_handlers[0] = field0;
                all_handlers[1] = field1;
              }
            public FieldGeneratorClientVersion(string what, bool ignore_extras)
              {
                    field0 = new JSONHoldingStringGenerator("option 0 of field \"ClientVersion\"");
                    field1 = new FieldHoldingGeneratorClientVersion_1("option 1 of field \"ClientVersion\"");
                all_handlers[0] = field0;
                all_handlers[1] = field1;
              }

            public override void reset()
              {
                field0.reset();
                field1.reset();
                base.reset();
              }
          };
        private class HolderClientVersion
          {
            private bool have_data;
            private TypeClientVersion data;
            public HolderClientVersion()  { have_data = false; }
            public HolderClientVersion(TypeClientVersion init_data)
              {
                have_data = true;
                data = init_data;
                if (have_data)
                  {
                  }
              }
            public HolderClientVersion(HolderClientVersion other)
              {
                have_data = other.haveData();
                data = other.referenced();
                if (have_data)
                  {
                  }
              }

            public bool haveData()
              {
                return have_data;
              }
            public TypeClientVersion referenced()
              {
                return data;
              }
          };
    private class FieldHoldingGeneratorClientVersion : FieldGeneratorClientVersion
          {
            protected override void handle_result(TypeClientVersion result)
              {
        //@@@        Debug.Assert(!have_value);
                have_value = true;
                value = new HolderClientVersion(result);
              }

            public FieldHoldingGeneratorClientVersion(String what, bool ignore_extras) : base(ignore_extras)
              {
                have_value = false;
                base.set_what(what);
              }

            public override void reset()
              {
                have_value = false;
                base.reset();
              }

            public bool have_value;
            public HolderClientVersion value;
          };
    private class FieldHoldingArrayGeneratorClientVersion : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorClientVersion
      {
        private FieldHoldingArrayGeneratorClientVersion top;

        protected override void handle_result(TypeClientVersion result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorClientVersion init_top, bool ignore_extras) : base(ignore_extras)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeClientVersion> result)
      {
      }

    public FieldHoldingArrayGeneratorClientVersion(string what, bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<TypeClientVersion>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorClientVersion(bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<TypeClientVersion>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeClientVersion> value;
  };
        private FieldHoldingGeneratorClientVersion fieldGeneratorClientVersion;
        private JSONHoldingStringGenerator fieldGeneratorDeviceID;
        private JSONHoldingStringGenerator fieldGeneratorSDK;
        private JSONHoldingObjectValueGenerator fieldGeneratorSDKInfo;
        private JSONHoldingStringGenerator fieldGeneratorFirstPersonSelf;
        private JSONHoldingStringGenerator fieldGeneratorFirstPersonSelfSpoken;
        private JSONHoldingStringArrayGenerator fieldGeneratorSecondPersonSelf;
        private JSONHoldingStringArrayGenerator fieldGeneratorSecondPersonSelfSpoken;
        private JSONHoldingBooleanGenerator fieldGeneratorWakeUpPhraseIncludedInAudio;
        private JSONHoldingNumberTextGenerator fieldGeneratorInitialSecondsOfAudioToIgnore;
        private JSONHoldingStringGenerator fieldGeneratorWakeUpPattern;
        private JSONHoldingStringGenerator fieldGeneratorUserID;
        private JSONHoldingStringGenerator fieldGeneratorRequestID;
        private JSONHoldingStringGenerator fieldGeneratorSessionID;
        private DomainsJSON.HoldingGenerator fieldGeneratorDomains;
        private JSONHoldingBooleanGenerator fieldGeneratorResultUpdateAllowed;
        private JSONHoldingBooleanGenerator fieldGeneratorPartialTranscriptsDesired;
    private class FieldHoldingGeneratorMinResults : JSONHoldingIntegerLowerBoundOnlyGenerator
          {
            public FieldHoldingGeneratorMinResults(String what) : base(what, (BigInteger)(1))
              {
              }
          };
    private class FieldHoldingArrayGeneratorMinResults : JSONHoldingIntegerLowerBoundOnlyArrayGenerator
          {
            public FieldHoldingArrayGeneratorMinResults(String what) : base(what, (BigInteger)(1))
              {
              }
          };
        private FieldHoldingGeneratorMinResults fieldGeneratorMinResults;
    private class FieldHoldingGeneratorMaxResults : JSONHoldingIntegerLowerBoundOnlyGenerator
          {
            public FieldHoldingGeneratorMaxResults(String what) : base(what, (BigInteger)(1))
              {
              }
          };
    private class FieldHoldingArrayGeneratorMaxResults : JSONHoldingIntegerLowerBoundOnlyArrayGenerator
          {
            public FieldHoldingArrayGeneratorMaxResults(String what) : base(what, (BigInteger)(1))
              {
              }
          };
        private FieldHoldingGeneratorMaxResults fieldGeneratorMaxResults;
        private JSONHoldingBooleanGenerator fieldGeneratorObjectByteCountPrefix;
    private abstract class FieldGeneratorProfanityFilter : JSONStringGenerator
          {
            protected FieldGeneratorProfanityFilter(string what)
              {
                set_what(what);
              }
            protected FieldGeneratorProfanityFilter()
              {
              }
            protected override void handle_result(string result)
              {
                handle_result(stringToProfanityFilter(result));
              }
            protected abstract void handle_result(TypeProfanityFilter result);
          };
    private class FieldHoldingGeneratorProfanityFilter : FieldGeneratorProfanityFilter
  {
    protected override void handle_result(TypeProfanityFilter result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorProfanityFilter(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeProfanityFilter value;
  };
    private class FieldHoldingArrayGeneratorProfanityFilter : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorProfanityFilter
      {
        private FieldHoldingArrayGeneratorProfanityFilter top;

        protected override void handle_result(TypeProfanityFilter result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorProfanityFilter init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeProfanityFilter> result)
      {
      }

    public FieldHoldingArrayGeneratorProfanityFilter(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeProfanityFilter>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorProfanityFilter()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeProfanityFilter>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeProfanityFilter> value;
  };
        private FieldHoldingGeneratorProfanityFilter fieldGeneratorProfanityFilter;
        private ClientMatchJSON.HoldingArrayGenerator fieldGeneratorClientMatches;
        private JSONHoldingBooleanGenerator fieldGeneratorClientMatchesOnly;
        private PaginationJSON.HoldingGenerator fieldGeneratorPagination;
        private JSONHoldingStringGenerator fieldGeneratorResponseAudioVoice;
    private abstract class FieldGeneratorResponseAudioShortOrLong : JSONStringGenerator
          {
            protected FieldGeneratorResponseAudioShortOrLong(string what)
              {
                set_what(what);
              }
            protected FieldGeneratorResponseAudioShortOrLong()
              {
              }
            protected override void handle_result(string result)
              {
                handle_result(stringToResponseAudioShortOrLong(result));
              }
            protected abstract void handle_result(TypeResponseAudioShortOrLong result);
          };
    private class FieldHoldingGeneratorResponseAudioShortOrLong : FieldGeneratorResponseAudioShortOrLong
  {
    protected override void handle_result(TypeResponseAudioShortOrLong result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorResponseAudioShortOrLong(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeResponseAudioShortOrLong value;
  };
    private class FieldHoldingArrayGeneratorResponseAudioShortOrLong : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorResponseAudioShortOrLong
      {
        private FieldHoldingArrayGeneratorResponseAudioShortOrLong top;

        protected override void handle_result(TypeResponseAudioShortOrLong result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorResponseAudioShortOrLong init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeResponseAudioShortOrLong> result)
      {
      }

    public FieldHoldingArrayGeneratorResponseAudioShortOrLong(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeResponseAudioShortOrLong>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorResponseAudioShortOrLong()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeResponseAudioShortOrLong>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeResponseAudioShortOrLong> value;
  };
        private FieldHoldingGeneratorResponseAudioShortOrLong fieldGeneratorResponseAudioShortOrLong;
    private abstract class FieldGeneratorResponseAudioAcceptedEncodings : JSONStringGenerator
          {
            protected FieldGeneratorResponseAudioAcceptedEncodings(string what)
              {
                set_what(what);
              }
            protected FieldGeneratorResponseAudioAcceptedEncodings()
              {
              }
            protected override void handle_result(string result)
              {
                TypeResponseAudioAcceptedEncodingsKnownValues known = stringToResponseAudioAcceptedEncodings(result);
                TypeResponseAudioAcceptedEncodings new_value = new TypeResponseAudioAcceptedEncodings();
                if (known == TypeResponseAudioAcceptedEncodingsKnownValues.ResponseAudioAcceptedEncodings__none)
                  {
                    new_value.in_known_list = false;
                    new_value.string_value = result;
                  }
                else
                  {
                    new_value.in_known_list = true;
                    new_value.list_value = known;
                  }
                handle_result(new_value);
              }
            protected abstract void handle_result(TypeResponseAudioAcceptedEncodings result);
          };
    private class FieldHoldingGeneratorResponseAudioAcceptedEncodings : FieldGeneratorResponseAudioAcceptedEncodings
  {
    protected override void handle_result(TypeResponseAudioAcceptedEncodings result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorResponseAudioAcceptedEncodings(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeResponseAudioAcceptedEncodings value;
  };
    private class FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorResponseAudioAcceptedEncodings
      {
        private FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings top;

        protected override void handle_result(TypeResponseAudioAcceptedEncodings result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeResponseAudioAcceptedEncodings> result)
      {
      }

    public FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeResponseAudioAcceptedEncodings>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeResponseAudioAcceptedEncodings>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeResponseAudioAcceptedEncodings> value;
  };
        private FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings fieldGeneratorResponseAudioAcceptedEncodings;
        private JSONHoldingBooleanGenerator fieldGeneratorReturnResponseAudioAsURL;
        private VoiceActivityDetectionJSON.HoldingGenerator fieldGeneratorVoiceActivityDetection;
        private JSONHoldingBooleanGenerator fieldGeneratorServerDeterminesEndOfAudio;
        private JSONHoldingBooleanGenerator fieldGeneratorIntentOnly;
        private JSONHoldingBooleanGenerator fieldGeneratorDisableSpellCorrection;
        private JSONHoldingBooleanGenerator fieldGeneratorUseContactData;
        private JSONHoldingBooleanGenerator fieldGeneratorUseClientTime;
    private class FieldHoldingGeneratorForceConversationStateTime : JSONHoldingIntegerUnboundRangeGenerator
          {
            public FieldHoldingGeneratorForceConversationStateTime(String what) : base(what)
              {
              }
          };
    private class FieldHoldingArrayGeneratorForceConversationStateTime : JSONHoldingIntegerUnboundRangeArrayGenerator
          {
            public FieldHoldingArrayGeneratorForceConversationStateTime(String what) : base(what)
              {
              }
          };
        private FieldHoldingGeneratorForceConversationStateTime fieldGeneratorForceConversationStateTime;
    private class FieldHoldingGeneratorOutputLatticeSize : JSONHoldingIntegerLowerBoundOnlyGenerator
          {
            public FieldHoldingGeneratorOutputLatticeSize(String what) : base(what, (BigInteger)(0))
              {
              }
          };
    private class FieldHoldingArrayGeneratorOutputLatticeSize : JSONHoldingIntegerLowerBoundOnlyArrayGenerator
          {
            public FieldHoldingArrayGeneratorOutputLatticeSize(String what) : base(what, (BigInteger)(0))
              {
              }
          };
        private FieldHoldingGeneratorOutputLatticeSize fieldGeneratorOutputLatticeSize;
        private MatchingMutationsJSON.HoldingGenerator fieldGeneratorMatchingMutations;
        private JSONHoldingBooleanGenerator fieldGeneratorUseFormattedTranscriptionAsDefault;
        private ResponseRankingJSON.HoldingGenerator fieldGeneratorResponseRanking;
        private AcapelaVoiceParametersJSON.HoldingGenerator fieldGeneratorAcapelaVoiceParameters;
        private AllowPopularNameContactMatchesJSON.HoldingGenerator fieldGeneratorAllowPopularNameContactMatches;
        private AlwaysFetchCurrentConditionsDataJSON.HoldingGenerator fieldGeneratorAlwaysFetchCurrentConditionsData;
        private AlwaysFetchHourlyForecastDataJSON.HoldingGenerator fieldGeneratorAlwaysFetchHourlyForecastData;
        private DateAndOrTimeJSON.HoldingGenerator fieldGeneratorArrivalTime;
        private AvantiMachineStateJSON.HoldingGenerator fieldGeneratorAvantiMachineState;
        private BingRequestInfoAdExtensionsJSON.HoldingGenerator fieldGeneratorBingAdExtensions;
        private BunnIsConfirmationRequiredJSON.HoldingGenerator fieldGeneratorBunnIsConfirmationRequired;
        private BunnMachineStateJSON.HoldingGenerator fieldGeneratorBunnMachineState;
        private CalendarDataSynchronizationRequestInfoJSON.HoldingGenerator fieldGeneratorCalendarDataSynchronization;
        private CallPermissionsJSON.HoldingGenerator fieldGeneratorCallPermissions;
        private CarControlClimateClientConfigurationJSON.HoldingGenerator fieldGeneratorCarControlClimateClientConfiguration;
        private CarControlClimateTemperatureConfigJSON.HoldingGenerator fieldGeneratorCarControlClimateTemperatureConfig;
        private CarManualModelJSON.HoldingGenerator fieldGeneratorCarManualModel;
        private CarManualNormalizedQueryJSON.HoldingGenerator fieldGeneratorCarManualNormalizedQueryToSet;
        private DynamicResponseJSON.HoldingGenerator fieldGeneratorCarManualResponseToSet;
        private CarStatusJSON.HoldingGenerator fieldGeneratorCarStatus;
        private ChargingClientStateJSON.HoldingGenerator fieldGeneratorChargingClientState;
        private ClientListMatchesJSON.HoldingGenerator fieldGeneratorClientListMatches;
        private CollateMusicEntitiesJSON.HoldingGenerator fieldGeneratorCollateMusicEntities;
        private ConnectedToThirdPartyMusicAppJSON.HoldingGenerator fieldGeneratorConnectedToThirdPartyMusicApp;
        private ContactQueryExclusionsJSON.HoldingGenerator fieldGeneratorContactQueryExclusions;
        private PhoneCommandConfigurationJSON.HoldingGenerator fieldGeneratorPhoneCommandConfiguration;
        private ConvertToNewInformationNuggetsJSON.HoldingGenerator fieldGeneratorConvertToNewInformationNuggets;
        private CustomSpeechRecognitionPatternsGroupListDataJSON.HoldingGenerator fieldGeneratorCustomSpeechRecognitionPatternsGroupListData;
        private CustomSpeechRecognitionPatternsReadDataJSON.HoldingGenerator fieldGeneratorCustomSpeechRecognitionPatternsReadData;
        private CustomSpeechRecognitionPatternsWeightJSON.HoldingGenerator fieldGeneratorCustomSpeechRecognitionPatternsWeight;
        private CustomSpeechRecognitionPatternsDataJSON.HoldingGenerator fieldGeneratorCustomSpeechRecognitionPatternsWriteData;
        private DeleteUserMemoryLocationJSON.HoldingGenerator fieldGeneratorDeleteUserMemoryLocation;
        private DisableListPositionSpecificationJSON.HoldingGenerator fieldGeneratorDisableMusicPlayerListPositionSpecification;
        private DisableListPositionSpecificationJSON.HoldingGenerator fieldGeneratorDisableMusicSearchListPositionSpecification;
        private DisambiguateResultsBeforeActionJSON.HoldingGenerator fieldGeneratorDisambiguateResultsBeforeAction;
        private ReminderJSON.HoldingGenerator fieldGeneratorDisplayedReminder;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorEnableClientControlInModes;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorEnableLocalPlacesQueries;
        private LocalPlacesSettingsJSON.HoldingGenerator fieldGeneratorLocalPlacesSettings;
        private EnableMusicPlayerFavoritesJSON.HoldingGenerator fieldGeneratorEnableMusicPlayerFavorites;
        private CustomSpeechRecognitionPatternsGroupListJSON.HoldingGenerator fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups;
        private EntertainmentClientStateJSON.HoldingGenerator fieldGeneratorEntertainmentClientState;
        private EntertainmentTitlesUploadDataJSON.HoldingGenerator fieldGeneratorEntertainmentTitlesUploadData;
        private ExcludeAllMusicResultsWithoutExplicitContextJSON.HoldingGenerator fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext;
        private ExcludeWikipediaLowConfidenceResultsJSON.HoldingGenerator fieldGeneratorExcludeWikipediaLowConfidenceResults;
        private FitBitAccessTokenJSON.HoldingGenerator fieldGeneratorFitBitAccessToken;
        private FitBitRefreshTokenJSON.HoldingGenerator fieldGeneratorFitBitRefreshToken;
        private GetHumaxMediaCloudURLJSON.HoldingGenerator fieldGeneratorGetHumaxMediaCloudURL;
        private GetClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorGetOAuth2ClientID;
        private GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorGetOAuth2ClientSecret;
        private GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorSquare;
        private GetClientTokenOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorGetOAuth2ClientToken;
        private GetUberClientIdJSON.HoldingGenerator fieldGeneratorGetUberClientId;
        private GetUberServerTokenJSON.HoldingGenerator fieldGeneratorGetUberServerToken;
        private HLSRadiusJSON.HoldingGenerator fieldGeneratorHLSRadius;
        private HarmanDeviceRegistrationJSON.HoldingGenerator fieldGeneratorHarmanDeviceRegistration;
        private HarmanAmxControllerHttpRequestJSON.HoldingGenerator fieldGeneratorHarmanHospitalityAmxControllerHttpRequest;
        private HarmanHospitalityMeetingInformationJSON.HoldingGenerator fieldGeneratorHarmanHospitalityMeetingInformation;
        private HarmanHospitalityPropertyInformationJSON.HoldingGenerator fieldGeneratorHarmanHospitalityPropertyInformation;
        private HarmanPropertyRegistrationJSON.HoldingGenerator fieldGeneratorHarmanPropertyRegistration;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorHasTollsOnThisRoad;
        private HomeAutomationDomainSettingsJSON.HoldingGenerator fieldGeneratorHomeAutomationDomainSettings;
        private HondaAgent20MParametersJSON.HoldingGenerator fieldGeneratorHondaAgent20MParameters;
        private HondaAgentParametersJSON.HoldingGenerator fieldGeneratorHondaAgentParameters;
        private HondaCarManualParametersJSON.HoldingGenerator fieldGeneratorHondaCarManualParameters;
        private HueDeviceRegistrationJSON.HoldingGenerator fieldGeneratorHueDeviceRegistration;
        private HumaxHomeAutomationCredentialsJSON.HoldingGenerator fieldGeneratorHumaxHomeAutomationCredentials;
        private HumaxMediaCloudURLJSON.HoldingGenerator fieldGeneratorHumaxMediaCloudURL;
        private HumaxSmartTVClientStateJSON.HoldingGenerator fieldGeneratorHumaxSmartTVClientState;
        private IHeartMediaDeviceIdentifiersJSON.HoldingGenerator fieldGeneratorIHeartMediaDeviceIdentifiers;
        private IHeartRadioPreferArtistStationsJSON.HoldingGenerator fieldGeneratorIHeartRadioPreferArtistStations;
        private IHeartRadioPreferGenericRadioMatchesJSON.HoldingGenerator fieldGeneratorIHeartRadioPreferGenericRadioMatches;
        private IHeartRadioPreferTerrestrialRadioMatchesJSON.HoldingGenerator fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches;
        private IftttKeyItemJSON.HoldingGenerator fieldGeneratorIftttKeyItem;
        private ImageSearchRequestInfoConfigurationJSON.HoldingGenerator fieldGeneratorImageSearchConfiguration;
        private ImageSearchRequestInfoProvidersJSON.HoldingGenerator fieldGeneratorImageSearchRequestInfoProviders;
        private IncludeAllMusicResultsWithoutContextJSON.HoldingGenerator fieldGeneratorIncludeAllMusicResultsWithoutContext;
        private IncomingCallPendingJSON.HoldingGenerator fieldGeneratorIncomingCallPending;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorInputOverrideDeleteFunction;
        private InputOverrideFunctionJSON.HoldingGenerator fieldGeneratorInputOverrideFunction;
        private UploadedCodeFunctionLanguageJSON.HoldingGenerator fieldGeneratorInputOverrideFunctionLanguage;
        private UploadedCodeSourceJSON.HoldingGenerator fieldGeneratorInputOverrideFunctionSource;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorInputOverrideReadFunction;
        private KuriInfoJSON.HoldingGenerator fieldGeneratorKuriInfo;
        private LocalSearchClientStateJSON.HoldingGenerator fieldGeneratorLocalSearchClientState;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorMapClientControlPageToScroll;
        private MultipleChoiceQuizAPIRequestJSON.HoldingGenerator fieldGeneratorMultipleChoiceQuizAPIRequest;
        private MusicClientStateJSON.HoldingGenerator fieldGeneratorMusicClientState;
        private NaritaAirportGuideAreaJSON.HoldingGenerator fieldGeneratorNaritaAirportGuideArea;
        private NaritaAirportGuideFloorJSON.HoldingGenerator fieldGeneratorNaritaAirportGuideFloor;
        private NaritaAirportGuideTerminalJSON.HoldingGenerator fieldGeneratorNaritaAirportGuideTerminal;
        private NavigationControlContextJSON.HoldingGenerator fieldGeneratorNavigationControlContext;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorTurnOffGuidanceMeansMute;
        private NavigationLocationDisambiguationConfigJSON.HoldingGenerator fieldGeneratorNavigationLocationDisambiguation;
        private CreateReminderFullDataJSON.HoldingGenerator fieldGeneratorNewReminder;
        private NumberOfVolumeLevelsJSON.HoldingGenerator fieldGeneratorNumberOfVolumeLevels;
        private ClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorOAuth2ClientID;
        private ClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorOAuth2ClientSecret;
        private OAuth2ClientTokenJSON.HoldingGenerator fieldGeneratorOAuth2ClientToken;
        private CodeDataOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorOAuth2CodeData;
        private RefreshTokenOAuth2RequestInfoFieldJSON.HoldingGenerator fieldGeneratorOAuth2RefreshToken;
        private OrganizationalChartRequestJSON.HoldingGenerator fieldGeneratorOrganizationalChartRequest;
        private OutputDeepIntegrationLatticeJSON.HoldingGenerator fieldGeneratorOutputDeepIntegrationLattice;
        private OutputSLMLatticeJSON.HoldingGenerator fieldGeneratorOutputSLMLattice;
        private OutputOverrideKindJSON.HoldingGenerator fieldGeneratorOutputOverrideKind;
        private OutputOverrideFunctionJSON.HoldingGenerator fieldGeneratorOutputOverrideFunction;
        private UploadedCodeFunctionLanguageJSON.HoldingGenerator fieldGeneratorOutputOverrideFunctionLanguage;
        private UploadedCodeSourceJSON.HoldingGenerator fieldGeneratorOutputOverrideFunctionSource;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorOutputOverrideCommandIsPreAudioOut;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorOutputOverrideDeleteCommandFunction;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorOutputOverrideDeleteInformationNuggetFunction;
        private OutputOverrideFunctionJSON.HoldingGenerator fieldGeneratorOutputOverrideInformationNuggetFunction;
        private UploadedCodeFunctionLanguageJSON.HoldingGenerator fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage;
        private UploadedCodeSourceJSON.HoldingGenerator fieldGeneratorOutputOverrideInformationNuggetFunctionSource;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorOutputOverrideReadCommandFunction;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorOutputOverrideReadInformationNuggetFunction;
        private OutputOverrideFunctionJSON.HoldingGenerator fieldGeneratorOutputOverrideCommandFunction;
        private UploadedCodeFunctionLanguageJSON.HoldingGenerator fieldGeneratorOutputOverrideCommandFunctionLanguage;
        private UploadedCodeSourceJSON.HoldingGenerator fieldGeneratorOutputOverrideCommandFunctionSource;
        private ClientPromptPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomClientPrompt;
        private EnableComponentFormatPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableComponentFormat;
        private EnableDomainPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableDomain;
        private EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableExclusionInTarzanMode;
        private EnableInferredPlayPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableInferredPlay;
        private EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
        private EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
        private EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableLongJSONFallback;
        private EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnablePodcastMatches;
        private EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableUserDataQueries;
        private EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableWildcardMatches;
        private EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback;
        private ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomExtendedStationModeData;
        private RapidIngestionDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomRapidIngestionData;
        private UserDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator fieldGeneratorPandoraCustomUserData;
        private ParkingClientStateJSON.HoldingGenerator fieldGeneratorParkingClientState;
        private PepperEnabledJSON.HoldingGenerator fieldGeneratorPepperEnabled;
        private PhoneDisambiguationOmitListJSON.HoldingGenerator fieldGeneratorPhoneDisambiguationOmitList;
        private RadioControlAvailableAudioSourcesJSON.HoldingGenerator fieldGeneratorRadioControlAvailableAudioSources;
        private RadioControlOtherAMBandsJSON.HoldingGenerator fieldGeneratorRadioControlOtherAMBands;
        private RadioControlOtherFMBandsJSON.HoldingGenerator fieldGeneratorRadioControlOtherFMBands;
        private RadioControlRecognizeNorthAmericanAMBandJSON.HoldingGenerator fieldGeneratorRadioControlRecognizeNorthAmericanAMBand;
        private RadioControlRecognizeNorthAmericanFMBandJSON.HoldingGenerator fieldGeneratorRadioControlRecognizeNorthAmericanFMBand;
        private RadioControlTunableStationsJSON.HoldingGenerator fieldGeneratorRadioControlTunableStations;
        private ReadSpeakerVoiceParametersJSON.HoldingGenerator fieldGeneratorReadSpeakerVoiceParameters;
        private RecipeParametersJSON.HoldingGenerator fieldGeneratorRecipeParameters;
        private RegionalPhoneNumberConfigurationJSON.HoldingGenerator fieldGeneratorRegionalPhoneNumberConfiguration;
        private AmountJSON.HoldingGenerator fieldGeneratorRemainingDistance;
        private AmountJSON.HoldingGenerator fieldGeneratorRemainingTravelTime;
        private ReminderListJSON.HoldingGenerator fieldGeneratorReminders;
        private RestaurantMenuMetadataJSON.HoldingGenerator fieldGeneratorRestaurantMenuMetadata;
        private RestaurantMenuObjectJSON.HoldingGenerator fieldGeneratorRestaurantMenuObject;
        private RestaurantOrderingMenuDataJSON.HoldingGenerator fieldGeneratorRestaurantOrderingMenuData;
        private RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON.HoldingGenerator fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID;
        private RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON.HoldingGenerator fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
        private RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON.HoldingGenerator fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
        private RestaurantOrderingQueriesRequestDataJSON.HoldingGenerator fieldGeneratorRestaurantOrderingQueriesRequestData;
        private ReturnInformationNuggetsForMusicSearchJSON.HoldingGenerator fieldGeneratorReturnInformationNuggetsForMusicSearch;
        private RobotInfoJSON.HoldingGenerator fieldGeneratorRobotInfo;
        private SendFullWeatherForecastDataJSON.HoldingGenerator fieldGeneratorSendFullWeatherForecastData;
        private SetUserMemoryLocationJSON.HoldingGenerator fieldGeneratorSetUserMemoryLocation;
        private SiriusXMEnableDomainJSON.HoldingGenerator fieldGeneratorSiriusXMEnableDomain;
        private SiriusXMEnableGenericChannelMatchesJSON.HoldingGenerator fieldGeneratorSiriusXMEnableGenericChannelMatches;
        private SiriusXMEnableWildcardMatchesJSON.HoldingGenerator fieldGeneratorSiriusXMEnableWildcardMatches;
        private SmartTVOnScreenItemsRequestInfoFieldJSON.HoldingGenerator fieldGeneratorSmartTVOnScreenItems;
        private SmartTVUserCustomInputSourceRequestInfoFieldJSON.HoldingGenerator fieldGeneratorSmartTVUserCustomInputSource;
        private SoundHoundTTSParametersJSON.HoldingGenerator fieldGeneratorSoundHoundTTSParameters;
        private AmountJSON.HoldingGenerator fieldGeneratorSpeedLimitOnThisRoad;
        private SportsLeagueControlJSON.HoldingGenerator fieldGeneratorSportsLeagueControl;
        private EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON.HoldingGenerator fieldGeneratorSpotifyPlaylistEnableWildcardMatches;
        private StoredAlwaysMatchReadDataJSON.HoldingGenerator fieldGeneratorStoredAlwaysMatchReadData;
        private ClientMatchesJSON.HoldingGenerator fieldGeneratorStoredAlwaysMatchWriteData;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredGlobalPagesToMatch;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredGlobalPagesToNotMatch;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredGlobalPagesToSetOffByDefault;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredGlobalPagesToSetOnByDefault;
        private StoredPageMatchPageListDataJSON.HoldingGenerator fieldGeneratorStoredPageMatchPageListData;
        private StoredPageMatchReadDataJSON.HoldingGenerator fieldGeneratorStoredPageMatchReadData;
        private StoredPageMatchWeightJSON.HoldingGenerator fieldGeneratorStoredPageMatchWeight;
        private StoredPageMatchWriteDataJSON.HoldingGenerator fieldGeneratorStoredPageMatchWriteData;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredPerUserPagesToMatch;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredPerUserPagesToNotMatch;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredPerUserPagesToSetOffByDefault;
        private StoredPageMatchPageListJSON.HoldingGenerator fieldGeneratorStoredPerUserPagesToSetOnByDefault;
        private SurveyAPIRequestJSON.HoldingGenerator fieldGeneratorSurveyAPIRequest;
        private TVChannelListJSON.HoldingGenerator fieldGeneratorTVChannelList;
        private TerrierTableUploadReadDataJSON.HoldingGenerator fieldGeneratorTerrierTableUploadReadData;
        private TerrierTableUploadWriteDataJSON.HoldingGenerator fieldGeneratorTerrierTableUploadWriteData;
        private TerrierUploadDeleteProjectJSON.HoldingGenerator fieldGeneratorTerrierUploadDeleteProject;
        private TerrierUploadDeleteProjectOptionsJSON.HoldingGenerator fieldGeneratorTerrierUploadDeleteProjectOptions;
        private TerrierUploadGetProjectJSON.HoldingGenerator fieldGeneratorTerrierUploadGetProject;
        private TerrierUploadGetProjectListJSON.HoldingGenerator fieldGeneratorTerrierUploadGetProjectList;
        private TerrierUploadGetProjectListOptionsJSON.HoldingGenerator fieldGeneratorTerrierUploadGetProjectListOptions;
        private TerrierUploadGetProjectOptionsJSON.HoldingGenerator fieldGeneratorTerrierUploadGetProjectOptions;
        private TerrierUploadReadDataJSON.HoldingGenerator fieldGeneratorTerrierUploadReadData;
        private TerrierUploadWriteDataJSON.HoldingGenerator fieldGeneratorTerrierUploadWriteData;
        private TerrierUploadedProjectJSON.HoldingGenerator fieldGeneratorTerrierUploadWriteProject;
        private TerrierUploadWriteProjectOptionsJSON.HoldingGenerator fieldGeneratorTerrierUploadWriteProjectOptions;
        private ThirdPartyCalendarServiceJSON.HoldingGenerator fieldGeneratorThirdPartyCalendarService;
        private CalendarMatchingLoosenessLevelJSON.HoldingGenerator fieldGeneratorCalendarMatchingLoosenessLevel;
        private CalendarRequestInfoEventsListJSON.HoldingGenerator fieldGeneratorCalendarEvents;
        private ToshibaTTSParametersJSON.HoldingGenerator fieldGeneratorToshibaTTSParameters;
        private HLSHeadingJSON.HoldingGenerator fieldGeneratorTravelBearing;
        private UDSExampleRequestJSON.HoldingGenerator fieldGeneratorUDSExampleRequest;
        private UberClientIdJSON.HoldingGenerator fieldGeneratorUberClientId;
        private UberServerTokenJSON.HoldingGenerator fieldGeneratorUberServerToken;
        private UploadedTestConfigurationJSON.HoldingGenerator fieldGeneratorUploadedTestConfiguration;
        private UploadedTestsJSON.HoldingGenerator fieldGeneratorUploadedTestData;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorUseNewStyleSMSCommands;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorUseXAPAPI;
        private UserContactsConfigurationJSON.HoldingGenerator fieldGeneratorUserContactsConfiguration;
        private UserContactsRequestsJSON.HoldingGenerator fieldGeneratorUserContactsRequests;
        private UserFeedbackJSON.HoldingGenerator fieldGeneratorUserFeedback;
        private UserMusicAvailableSourcesJSON.HoldingGenerator fieldGeneratorUserMusicAvailableSources;
        private UserMusicControlsJSON.HoldingGenerator fieldGeneratorUserMusicControls;
        private UserMusicInfoJSON.HoldingGenerator fieldGeneratorUserMusicInfo;
        private VideoSearchRequestInfoConfigurationJSON.HoldingGenerator fieldGeneratorVideoSearchConfiguration;
        private VideoSearchRequestInfoProvidersJSON.HoldingGenerator fieldGeneratorVideoSearchRequestInfoProviders;
        private VoiceParametersJSON.HoldingGenerator fieldGeneratorVoiceParameters;
        private WebSearchRequestInfoConfigurationJSON.HoldingGenerator fieldGeneratorWebSearchConfiguration;
        private WebSearchRequestInfoProvidersJSON.HoldingGenerator fieldGeneratorWebSearchRequestInfoProviders;
        private What3WordsCluePhraseNotRequiredJSON.HoldingGenerator fieldGeneratorWhat3WordsCluePhraseNotRequired;
        private What3WordsStandardGeofenceRadiusJSON.HoldingGenerator fieldGeneratorWhat3WordsStandardGeofenceRadius;
        private HereApiPlacesFallbackSettingsJSON.HoldingGenerator fieldGeneratorHereApiPlacesFallback;
        private PaymentsPredeterminedSMSNumberFieldJSON.HoldingGenerator fieldGeneratorPaymentsPredeterminedSMSNumber;
        private PaymentsPaymentMethodTypeJSON.HoldingGenerator fieldGeneratorPaymentsPredeterminedPaymentMethod;
        private PaymentsOrderSourceFieldJSON.HoldingGenerator fieldGeneratorOrderSource;
        private PaymentsOrderPrepDurationFieldJSON.HoldingGenerator fieldGeneratorOrderPrepDuration;
        private SquareEnvironmentJSON.HoldingGenerator fieldGeneratorSquareEnvironment;
        private EnableSquareCustomerInformationPermissionsJSON.HoldingGenerator fieldGeneratorEnableSquareCustomerInformationPermissions;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorMessagingConvertPunctuation;
        private RequestInfoBooleanFlagJSON.HoldingGenerator fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
        private StreamPreferenceJSON.HoldingGenerator fieldGeneratorStreamPreference;
        private MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON.HoldingGenerator fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand;
        private MusicQueriesAllowRawTopRequestInfoFieldJSON.HoldingGenerator fieldGeneratorMusicQueriesAllowRawTop;
        private BusinessInformationUploadDataRequestJSON.HoldingGenerator fieldGeneratorBusinessInformationUploadData;
        private BusinessInformationDataStoreIdJSON.HoldingGenerator fieldGeneratorBusinessInformationDataStoreId;
        private CustomASREnhancementDataJSON.HoldingGenerator fieldGeneratorCustomASREnhancementWriteData;
        private CustomASREnhancementReadDataJSON.HoldingGenerator fieldGeneratorCustomASREnhancementReadData;
        private CustomASREnhancementListDataJSON.HoldingGenerator fieldGeneratorCustomASREnhancementListData;
        private CustomASREnhancementListJSON.HoldingGenerator fieldGeneratorEnabledCustomASREnhancementGrammars;
        private CustomASREnhancementWeightJSON.HoldingGenerator fieldGeneratorCustomASREnhancementWeight;
        private ToastEnvironmentJSON.HoldingGenerator fieldGeneratorToastEnvironment;
        private CommandIntentJSON.HoldingGenerator fieldGeneratorIntentToExecute;
        private UniversalTranslatorSubstitutionListJSON.HoldingGenerator fieldGeneratorUniversalTranslatorSubstitutionList;
        private CustomTopicIdentificationDataJSON.HoldingGenerator fieldGeneratorCustomTopicIdentificationWriteData;
        private class UnknownFieldGenerator : JSONValueHandler
          {
            public bool ignore;
            public List<string> field_names;
            public List<JSONValue > field_values;
            public Dictionary<string, JSONValue > index;
            public UnknownFieldGenerator(bool init_ignore)
              {
                ignore = init_ignore;
                field_names = new List<string>();
                field_values = new List<JSONValue >();
            index = new Dictionary<string, JSONValue >();
              }

            protected override void new_value(JSONValue item)
              {
                if (ignore)
                    return;
                Debug.Assert(field_names.Count == (field_values.Count + 1));
                index.Add(field_names[field_values.Count], item);
                field_values.Add(item);
              }
            public override void reset()
              {
                field_names.Clear();
                field_values.Clear();
            index = new Dictionary<string, JSONValue >();
              }
          };
        private UnknownFieldGenerator unknownFieldGenerator;

        protected bool allow_incomplete;

        protected bool allow_unpolished;

        protected override void start()
          {
          }
        protected override JSONHandler start_field(string field_name)
          {
            JSONHandler result = start_known_field(field_name);
            if (result != null)
                return result;
            Debug.Assert(unknownFieldGenerator.field_names.Count ==
                   unknownFieldGenerator.field_values.Count);
            if (unknownFieldGenerator.ignore)
              {
                Debug.Assert(unknownFieldGenerator.field_names.Count == 0);
              }
            else
              {
                unknownFieldGenerator.field_names.Add(field_name);
              }
            return unknownFieldGenerator;
          }
        protected override void finish_field(string field_name, JSONHandler field_handler)
          {
          }
        protected override void finish()
          {
            RequestInfoJSON result = new RequestInfoJSON();
            Debug.Assert(result != null);
            finish(result);
            int extra_count = unknownFieldGenerator.field_names.Count;
            Debug.Assert(extra_count == unknownFieldGenerator.field_values.Count);
            for (int extra_num = 0; extra_num < extra_count; ++extra_num)
              {
                result.extraRequestInfoAppendPair(unknownFieldGenerator.field_names[extra_num], unknownFieldGenerator.field_values[extra_num]);
              }
            unknownFieldGenerator.field_names.Clear();
            unknownFieldGenerator.field_values.Clear();
            unknownFieldGenerator.index = new Dictionary<string, JSONValue >();
            handle_result(result);
          }
        protected void finish(RequestInfoJSON result)
          {
            if (fieldGeneratorLatitude.have_value)
              {
                result.setLatitudeText(fieldGeneratorLatitude.value);
                fieldGeneratorLatitude.have_value = false;
              }
            if (fieldGeneratorLongitude.have_value)
              {
                result.setLongitudeText(fieldGeneratorLongitude.value);
                fieldGeneratorLongitude.have_value = false;
              }
            if (fieldGeneratorPositionTime.have_value)
              {
                result.setPositionTime(fieldGeneratorPositionTime.value);
                fieldGeneratorPositionTime.have_value = false;
              }
            if (fieldGeneratorPositionHorizontalAccuracy.have_value)
              {
                result.setPositionHorizontalAccuracyText(fieldGeneratorPositionHorizontalAccuracy.value);
                fieldGeneratorPositionHorizontalAccuracy.have_value = false;
              }
            if (fieldGeneratorStreet.have_value)
              {
                result.setStreet(fieldGeneratorStreet.value);
                fieldGeneratorStreet.have_value = false;
              }
            if (fieldGeneratorCity.have_value)
              {
                result.setCity(fieldGeneratorCity.value);
                fieldGeneratorCity.have_value = false;
              }
            if (fieldGeneratorState.have_value)
              {
                result.setState(fieldGeneratorState.value);
                fieldGeneratorState.have_value = false;
              }
            if (fieldGeneratorCountry.have_value)
              {
                result.setCountry(fieldGeneratorCountry.value);
                fieldGeneratorCountry.have_value = false;
              }
            if (fieldGeneratorRoutePoints.have_value)
              {
                result.setRoutePoints(fieldGeneratorRoutePoints.value);
                fieldGeneratorRoutePoints.have_value = false;
              }
            if (fieldGeneratorRouteInformation.have_value)
              {
                result.setRouteInformation(fieldGeneratorRouteInformation.value);
                fieldGeneratorRouteInformation.have_value = false;
              }
            if (fieldGeneratorControllableTrackPlaying.have_value)
              {
                result.setControllableTrackPlaying(fieldGeneratorControllableTrackPlaying.value);
                fieldGeneratorControllableTrackPlaying.have_value = false;
              }
            if (fieldGeneratorTimeStamp.have_value)
              {
                result.setTimeStamp(fieldGeneratorTimeStamp.value);
                fieldGeneratorTimeStamp.have_value = false;
              }
            if (fieldGeneratorTimeZone.have_value)
              {
                result.setTimeZone(fieldGeneratorTimeZone.value);
                fieldGeneratorTimeZone.have_value = false;
              }
            if (fieldGeneratorConversationState.have_value)
              {
                result.setConversationState(fieldGeneratorConversationState.value);
                fieldGeneratorConversationState.have_value = false;
              }
            if (fieldGeneratorClientState.have_value)
              {
                result.setClientState(fieldGeneratorClientState.value);
                fieldGeneratorClientState.have_value = false;
              }
            if (fieldGeneratorDeviceInfo.have_value)
              {
                result.setDeviceInfo(fieldGeneratorDeviceInfo.value);
                fieldGeneratorDeviceInfo.have_value = false;
              }
            if (fieldGeneratorSendBack.have_value)
              {
                result.setSendBack(fieldGeneratorSendBack.value);
                fieldGeneratorSendBack.have_value = false;
              }
            if (fieldGeneratorPreferredImageSize.have_value)
              {
                result.initPreferredImageSize();
                int count = fieldGeneratorPreferredImageSize.value.Count;
                for (int num = 0; num < count; ++num)
                  {
                    result.appendPreferredImageSize(fieldGeneratorPreferredImageSize.value[num]);
                  }
                fieldGeneratorPreferredImageSize.value.Clear();
                fieldGeneratorPreferredImageSize.have_value = false;
              }
            if (fieldGeneratorInputLanguageEnglishName.have_value)
              {
                result.setInputLanguageEnglishName(fieldGeneratorInputLanguageEnglishName.value);
                fieldGeneratorInputLanguageEnglishName.have_value = false;
              }
            if (fieldGeneratorInputLanguageNativeName.have_value)
              {
                result.setInputLanguageNativeName(fieldGeneratorInputLanguageNativeName.value);
                fieldGeneratorInputLanguageNativeName.have_value = false;
              }
            if (fieldGeneratorInputLanguageIETFTag.have_value)
              {
                result.setInputLanguageIETFTag(fieldGeneratorInputLanguageIETFTag.value);
                fieldGeneratorInputLanguageIETFTag.have_value = false;
              }
            if (fieldGeneratorOutputLanguageEnglishName.have_value)
              {
                result.setOutputLanguageEnglishName(fieldGeneratorOutputLanguageEnglishName.value);
                fieldGeneratorOutputLanguageEnglishName.have_value = false;
              }
            if (fieldGeneratorOutputLanguageNativeName.have_value)
              {
                result.setOutputLanguageNativeName(fieldGeneratorOutputLanguageNativeName.value);
                fieldGeneratorOutputLanguageNativeName.have_value = false;
              }
            if (fieldGeneratorOutputLanguageIETFTag.have_value)
              {
                result.setOutputLanguageIETFTag(fieldGeneratorOutputLanguageIETFTag.value);
                fieldGeneratorOutputLanguageIETFTag.have_value = false;
              }
            if (fieldGeneratorResultVersionAccepted.have_value)
              {
                result.setResultVersionAcceptedText(fieldGeneratorResultVersionAccepted.value);
                fieldGeneratorResultVersionAccepted.have_value = false;
              }
            if (fieldGeneratorUnitPreference.have_value)
              {
                result.setUnitPreference(fieldGeneratorUnitPreference.value);
                fieldGeneratorUnitPreference.have_value = false;
              }
            if (fieldGeneratorDefaultTimeFormat24Hours.have_value)
              {
                result.setDefaultTimeFormat24Hours(fieldGeneratorDefaultTimeFormat24Hours.value);
                fieldGeneratorDefaultTimeFormat24Hours.have_value = false;
              }
            if (fieldGeneratorClientID.have_value)
              {
                result.setClientID(fieldGeneratorClientID.value);
                fieldGeneratorClientID.have_value = false;
              }
            if (fieldGeneratorClientVersion.have_value)
              {
                result.setClientVersion(fieldGeneratorClientVersion.value.referenced());
                fieldGeneratorClientVersion.have_value = false;
              }
            if (fieldGeneratorDeviceID.have_value)
              {
                result.setDeviceID(fieldGeneratorDeviceID.value);
                fieldGeneratorDeviceID.have_value = false;
              }
            if (fieldGeneratorSDK.have_value)
              {
                result.setSDK(fieldGeneratorSDK.value);
                fieldGeneratorSDK.have_value = false;
              }
            if (fieldGeneratorSDKInfo.have_value)
              {
                result.setSDKInfo(fieldGeneratorSDKInfo.value);
                fieldGeneratorSDKInfo.have_value = false;
              }
            if (fieldGeneratorFirstPersonSelf.have_value)
              {
                result.setFirstPersonSelf(fieldGeneratorFirstPersonSelf.value);
                fieldGeneratorFirstPersonSelf.have_value = false;
              }
            if (fieldGeneratorFirstPersonSelfSpoken.have_value)
              {
                result.setFirstPersonSelfSpoken(fieldGeneratorFirstPersonSelfSpoken.value);
                fieldGeneratorFirstPersonSelfSpoken.have_value = false;
              }
            if (fieldGeneratorSecondPersonSelf.have_value)
              {
                result.initSecondPersonSelf();
                int count = fieldGeneratorSecondPersonSelf.value.Count;
                for (int num = 0; num < count; ++num)
                  {
                    result.appendSecondPersonSelf(fieldGeneratorSecondPersonSelf.value[num]);
                  }
                fieldGeneratorSecondPersonSelf.value.Clear();
                fieldGeneratorSecondPersonSelf.have_value = false;
              }
            if (fieldGeneratorSecondPersonSelfSpoken.have_value)
              {
                result.initSecondPersonSelfSpoken();
                int count = fieldGeneratorSecondPersonSelfSpoken.value.Count;
                for (int num = 0; num < count; ++num)
                  {
                    result.appendSecondPersonSelfSpoken(fieldGeneratorSecondPersonSelfSpoken.value[num]);
                  }
                fieldGeneratorSecondPersonSelfSpoken.value.Clear();
                fieldGeneratorSecondPersonSelfSpoken.have_value = false;
              }
            if (fieldGeneratorWakeUpPhraseIncludedInAudio.have_value)
              {
                result.setWakeUpPhraseIncludedInAudio(fieldGeneratorWakeUpPhraseIncludedInAudio.value);
                fieldGeneratorWakeUpPhraseIncludedInAudio.have_value = false;
              }
            if (fieldGeneratorInitialSecondsOfAudioToIgnore.have_value)
              {
                result.setInitialSecondsOfAudioToIgnoreText(fieldGeneratorInitialSecondsOfAudioToIgnore.value);
                fieldGeneratorInitialSecondsOfAudioToIgnore.have_value = false;
              }
            if (fieldGeneratorWakeUpPattern.have_value)
              {
                result.setWakeUpPattern(fieldGeneratorWakeUpPattern.value);
                fieldGeneratorWakeUpPattern.have_value = false;
              }
            if (fieldGeneratorUserID.have_value)
              {
                result.setUserID(fieldGeneratorUserID.value);
                fieldGeneratorUserID.have_value = false;
              }
            if (fieldGeneratorRequestID.have_value)
              {
                result.setRequestID(fieldGeneratorRequestID.value);
                fieldGeneratorRequestID.have_value = false;
              }
            if (fieldGeneratorSessionID.have_value)
              {
                result.setSessionID(fieldGeneratorSessionID.value);
                fieldGeneratorSessionID.have_value = false;
              }
            if (fieldGeneratorDomains.have_value)
              {
                result.setDomains(fieldGeneratorDomains.value);
                fieldGeneratorDomains.have_value = false;
              }
            if (fieldGeneratorResultUpdateAllowed.have_value)
              {
                result.setResultUpdateAllowed(fieldGeneratorResultUpdateAllowed.value);
                fieldGeneratorResultUpdateAllowed.have_value = false;
              }
            if (fieldGeneratorPartialTranscriptsDesired.have_value)
              {
                result.setPartialTranscriptsDesired(fieldGeneratorPartialTranscriptsDesired.value);
                fieldGeneratorPartialTranscriptsDesired.have_value = false;
              }
            if (fieldGeneratorMinResults.have_value)
              {
                result.setMinResults(fieldGeneratorMinResults.value);
                fieldGeneratorMinResults.have_value = false;
              }
            if (fieldGeneratorMaxResults.have_value)
              {
                result.setMaxResults(fieldGeneratorMaxResults.value);
                fieldGeneratorMaxResults.have_value = false;
              }
            if (fieldGeneratorObjectByteCountPrefix.have_value)
              {
                result.setObjectByteCountPrefix(fieldGeneratorObjectByteCountPrefix.value);
                fieldGeneratorObjectByteCountPrefix.have_value = false;
              }
            if (fieldGeneratorProfanityFilter.have_value)
              {
                result.setProfanityFilter(fieldGeneratorProfanityFilter.value);
                fieldGeneratorProfanityFilter.have_value = false;
              }
            if (fieldGeneratorClientMatches.have_value)
              {
                result.initClientMatches();
                int count = fieldGeneratorClientMatches.value.Count;
                for (int num = 0; num < count; ++num)
                  {
                    result.appendClientMatches(fieldGeneratorClientMatches.value[num]);
                  }
                fieldGeneratorClientMatches.value.Clear();
                fieldGeneratorClientMatches.have_value = false;
              }
            if (fieldGeneratorClientMatchesOnly.have_value)
              {
                result.setClientMatchesOnly(fieldGeneratorClientMatchesOnly.value);
                fieldGeneratorClientMatchesOnly.have_value = false;
              }
            if (fieldGeneratorPagination.have_value)
              {
                result.setPagination(fieldGeneratorPagination.value);
                fieldGeneratorPagination.have_value = false;
              }
            if (fieldGeneratorResponseAudioVoice.have_value)
              {
                result.setResponseAudioVoice(fieldGeneratorResponseAudioVoice.value);
                fieldGeneratorResponseAudioVoice.have_value = false;
              }
            if (fieldGeneratorResponseAudioShortOrLong.have_value)
              {
                result.setResponseAudioShortOrLong(fieldGeneratorResponseAudioShortOrLong.value);
                fieldGeneratorResponseAudioShortOrLong.have_value = false;
              }
            if (fieldGeneratorResponseAudioAcceptedEncodings.have_value)
              {
                result.initResponseAudioAcceptedEncodings();
                int count = fieldGeneratorResponseAudioAcceptedEncodings.value.Count;
                for (int num = 0; num < count; ++num)
                  {
                    result.appendResponseAudioAcceptedEncodings(fieldGeneratorResponseAudioAcceptedEncodings.value[num]);
                  }
                fieldGeneratorResponseAudioAcceptedEncodings.value.Clear();
                fieldGeneratorResponseAudioAcceptedEncodings.have_value = false;
              }
            if (fieldGeneratorReturnResponseAudioAsURL.have_value)
              {
                result.setReturnResponseAudioAsURL(fieldGeneratorReturnResponseAudioAsURL.value);
                fieldGeneratorReturnResponseAudioAsURL.have_value = false;
              }
            if (fieldGeneratorVoiceActivityDetection.have_value)
              {
                result.setVoiceActivityDetection(fieldGeneratorVoiceActivityDetection.value);
                fieldGeneratorVoiceActivityDetection.have_value = false;
              }
            if (fieldGeneratorServerDeterminesEndOfAudio.have_value)
              {
                result.setServerDeterminesEndOfAudio(fieldGeneratorServerDeterminesEndOfAudio.value);
                fieldGeneratorServerDeterminesEndOfAudio.have_value = false;
              }
            if (fieldGeneratorIntentOnly.have_value)
              {
                result.setIntentOnly(fieldGeneratorIntentOnly.value);
                fieldGeneratorIntentOnly.have_value = false;
              }
            if (fieldGeneratorDisableSpellCorrection.have_value)
              {
                result.setDisableSpellCorrection(fieldGeneratorDisableSpellCorrection.value);
                fieldGeneratorDisableSpellCorrection.have_value = false;
              }
            if (fieldGeneratorUseContactData.have_value)
              {
                result.setUseContactData(fieldGeneratorUseContactData.value);
                fieldGeneratorUseContactData.have_value = false;
              }
            if (fieldGeneratorUseClientTime.have_value)
              {
                result.setUseClientTime(fieldGeneratorUseClientTime.value);
                fieldGeneratorUseClientTime.have_value = false;
              }
            if (fieldGeneratorForceConversationStateTime.have_value)
              {
                result.setForceConversationStateTime(fieldGeneratorForceConversationStateTime.value);
                fieldGeneratorForceConversationStateTime.have_value = false;
              }
            if (fieldGeneratorOutputLatticeSize.have_value)
              {
                result.setOutputLatticeSize(fieldGeneratorOutputLatticeSize.value);
                fieldGeneratorOutputLatticeSize.have_value = false;
              }
            if (fieldGeneratorMatchingMutations.have_value)
              {
                result.setMatchingMutations(fieldGeneratorMatchingMutations.value);
                fieldGeneratorMatchingMutations.have_value = false;
              }
            if (fieldGeneratorUseFormattedTranscriptionAsDefault.have_value)
              {
                result.setUseFormattedTranscriptionAsDefault(fieldGeneratorUseFormattedTranscriptionAsDefault.value);
                fieldGeneratorUseFormattedTranscriptionAsDefault.have_value = false;
              }
            if (fieldGeneratorResponseRanking.have_value)
              {
                result.setResponseRanking(fieldGeneratorResponseRanking.value);
                fieldGeneratorResponseRanking.have_value = false;
              }
            if (fieldGeneratorAcapelaVoiceParameters.have_value)
              {
                result.setAcapelaVoiceParameters(fieldGeneratorAcapelaVoiceParameters.value);
                fieldGeneratorAcapelaVoiceParameters.have_value = false;
              }
            if (fieldGeneratorAllowPopularNameContactMatches.have_value)
              {
                result.setAllowPopularNameContactMatches(fieldGeneratorAllowPopularNameContactMatches.value);
                fieldGeneratorAllowPopularNameContactMatches.have_value = false;
              }
            if (fieldGeneratorAlwaysFetchCurrentConditionsData.have_value)
              {
                result.setAlwaysFetchCurrentConditionsData(fieldGeneratorAlwaysFetchCurrentConditionsData.value);
                fieldGeneratorAlwaysFetchCurrentConditionsData.have_value = false;
              }
            if (fieldGeneratorAlwaysFetchHourlyForecastData.have_value)
              {
                result.setAlwaysFetchHourlyForecastData(fieldGeneratorAlwaysFetchHourlyForecastData.value);
                fieldGeneratorAlwaysFetchHourlyForecastData.have_value = false;
              }
            if (fieldGeneratorArrivalTime.have_value)
              {
                result.setArrivalTime(fieldGeneratorArrivalTime.value);
                fieldGeneratorArrivalTime.have_value = false;
              }
            if (fieldGeneratorAvantiMachineState.have_value)
              {
                result.setAvantiMachineState(fieldGeneratorAvantiMachineState.value);
                fieldGeneratorAvantiMachineState.have_value = false;
              }
            if (fieldGeneratorBingAdExtensions.have_value)
              {
                result.setBingAdExtensions(fieldGeneratorBingAdExtensions.value);
                fieldGeneratorBingAdExtensions.have_value = false;
              }
            if (fieldGeneratorBunnIsConfirmationRequired.have_value)
              {
                result.setBunnIsConfirmationRequired(fieldGeneratorBunnIsConfirmationRequired.value);
                fieldGeneratorBunnIsConfirmationRequired.have_value = false;
              }
            if (fieldGeneratorBunnMachineState.have_value)
              {
                result.setBunnMachineState(fieldGeneratorBunnMachineState.value);
                fieldGeneratorBunnMachineState.have_value = false;
              }
            if (fieldGeneratorCalendarDataSynchronization.have_value)
              {
                result.setCalendarDataSynchronization(fieldGeneratorCalendarDataSynchronization.value);
                fieldGeneratorCalendarDataSynchronization.have_value = false;
              }
            if (fieldGeneratorCallPermissions.have_value)
              {
                result.setCallPermissions(fieldGeneratorCallPermissions.value);
                fieldGeneratorCallPermissions.have_value = false;
              }
            if (fieldGeneratorCarControlClimateClientConfiguration.have_value)
              {
                result.setCarControlClimateClientConfiguration(fieldGeneratorCarControlClimateClientConfiguration.value);
                fieldGeneratorCarControlClimateClientConfiguration.have_value = false;
              }
            if (fieldGeneratorCarControlClimateTemperatureConfig.have_value)
              {
                result.setCarControlClimateTemperatureConfig(fieldGeneratorCarControlClimateTemperatureConfig.value);
                fieldGeneratorCarControlClimateTemperatureConfig.have_value = false;
              }
            if (fieldGeneratorCarManualModel.have_value)
              {
                result.setCarManualModel(fieldGeneratorCarManualModel.value);
                fieldGeneratorCarManualModel.have_value = false;
              }
            if (fieldGeneratorCarManualNormalizedQueryToSet.have_value)
              {
                result.setCarManualNormalizedQueryToSet(fieldGeneratorCarManualNormalizedQueryToSet.value);
                fieldGeneratorCarManualNormalizedQueryToSet.have_value = false;
              }
            if (fieldGeneratorCarManualResponseToSet.have_value)
              {
                result.setCarManualResponseToSet(fieldGeneratorCarManualResponseToSet.value);
                fieldGeneratorCarManualResponseToSet.have_value = false;
              }
            if (fieldGeneratorCarStatus.have_value)
              {
                result.setCarStatus(fieldGeneratorCarStatus.value);
                fieldGeneratorCarStatus.have_value = false;
              }
            if (fieldGeneratorChargingClientState.have_value)
              {
                result.setChargingClientState(fieldGeneratorChargingClientState.value);
                fieldGeneratorChargingClientState.have_value = false;
              }
            if (fieldGeneratorClientListMatches.have_value)
              {
                result.setClientListMatches(fieldGeneratorClientListMatches.value);
                fieldGeneratorClientListMatches.have_value = false;
              }
            if (fieldGeneratorCollateMusicEntities.have_value)
              {
                result.setCollateMusicEntities(fieldGeneratorCollateMusicEntities.value);
                fieldGeneratorCollateMusicEntities.have_value = false;
              }
            if (fieldGeneratorConnectedToThirdPartyMusicApp.have_value)
              {
                result.setConnectedToThirdPartyMusicApp(fieldGeneratorConnectedToThirdPartyMusicApp.value);
                fieldGeneratorConnectedToThirdPartyMusicApp.have_value = false;
              }
            if (fieldGeneratorContactQueryExclusions.have_value)
              {
                result.setContactQueryExclusions(fieldGeneratorContactQueryExclusions.value);
                fieldGeneratorContactQueryExclusions.have_value = false;
              }
            if (fieldGeneratorPhoneCommandConfiguration.have_value)
              {
                result.setPhoneCommandConfiguration(fieldGeneratorPhoneCommandConfiguration.value);
                fieldGeneratorPhoneCommandConfiguration.have_value = false;
              }
            if (fieldGeneratorConvertToNewInformationNuggets.have_value)
              {
                result.setConvertToNewInformationNuggets(fieldGeneratorConvertToNewInformationNuggets.value);
                fieldGeneratorConvertToNewInformationNuggets.have_value = false;
              }
            if (fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.have_value)
              {
                result.setCustomSpeechRecognitionPatternsGroupListData(fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.value);
                fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.have_value = false;
              }
            if (fieldGeneratorCustomSpeechRecognitionPatternsReadData.have_value)
              {
                result.setCustomSpeechRecognitionPatternsReadData(fieldGeneratorCustomSpeechRecognitionPatternsReadData.value);
                fieldGeneratorCustomSpeechRecognitionPatternsReadData.have_value = false;
              }
            if (fieldGeneratorCustomSpeechRecognitionPatternsWeight.have_value)
              {
                result.setCustomSpeechRecognitionPatternsWeight(fieldGeneratorCustomSpeechRecognitionPatternsWeight.value);
                fieldGeneratorCustomSpeechRecognitionPatternsWeight.have_value = false;
              }
            if (fieldGeneratorCustomSpeechRecognitionPatternsWriteData.have_value)
              {
                result.setCustomSpeechRecognitionPatternsWriteData(fieldGeneratorCustomSpeechRecognitionPatternsWriteData.value);
                fieldGeneratorCustomSpeechRecognitionPatternsWriteData.have_value = false;
              }
            if (fieldGeneratorDeleteUserMemoryLocation.have_value)
              {
                result.setDeleteUserMemoryLocation(fieldGeneratorDeleteUserMemoryLocation.value);
                fieldGeneratorDeleteUserMemoryLocation.have_value = false;
              }
            if (fieldGeneratorDisableMusicPlayerListPositionSpecification.have_value)
              {
                result.setDisableMusicPlayerListPositionSpecification(fieldGeneratorDisableMusicPlayerListPositionSpecification.value);
                fieldGeneratorDisableMusicPlayerListPositionSpecification.have_value = false;
              }
            if (fieldGeneratorDisableMusicSearchListPositionSpecification.have_value)
              {
                result.setDisableMusicSearchListPositionSpecification(fieldGeneratorDisableMusicSearchListPositionSpecification.value);
                fieldGeneratorDisableMusicSearchListPositionSpecification.have_value = false;
              }
            if (fieldGeneratorDisambiguateResultsBeforeAction.have_value)
              {
                result.setDisambiguateResultsBeforeAction(fieldGeneratorDisambiguateResultsBeforeAction.value);
                fieldGeneratorDisambiguateResultsBeforeAction.have_value = false;
              }
            if (fieldGeneratorDisplayedReminder.have_value)
              {
                result.setDisplayedReminder(fieldGeneratorDisplayedReminder.value);
                fieldGeneratorDisplayedReminder.have_value = false;
              }
            if (fieldGeneratorEnableClientControlInModes.have_value)
              {
                result.setEnableClientControlInModes(fieldGeneratorEnableClientControlInModes.value);
                fieldGeneratorEnableClientControlInModes.have_value = false;
              }
            if (fieldGeneratorEnableLocalPlacesQueries.have_value)
              {
                result.setEnableLocalPlacesQueries(fieldGeneratorEnableLocalPlacesQueries.value);
                fieldGeneratorEnableLocalPlacesQueries.have_value = false;
              }
            if (fieldGeneratorLocalPlacesSettings.have_value)
              {
                result.setLocalPlacesSettings(fieldGeneratorLocalPlacesSettings.value);
                fieldGeneratorLocalPlacesSettings.have_value = false;
              }
            if (fieldGeneratorEnableMusicPlayerFavorites.have_value)
              {
                result.setEnableMusicPlayerFavorites(fieldGeneratorEnableMusicPlayerFavorites.value);
                fieldGeneratorEnableMusicPlayerFavorites.have_value = false;
              }
            if (fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.have_value)
              {
                result.setEnabledCustomSpeechRecognitionPatternGroups(fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.value);
                fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.have_value = false;
              }
            if (fieldGeneratorEntertainmentClientState.have_value)
              {
                result.setEntertainmentClientState(fieldGeneratorEntertainmentClientState.value);
                fieldGeneratorEntertainmentClientState.have_value = false;
              }
            if (fieldGeneratorEntertainmentTitlesUploadData.have_value)
              {
                result.setEntertainmentTitlesUploadData(fieldGeneratorEntertainmentTitlesUploadData.value);
                fieldGeneratorEntertainmentTitlesUploadData.have_value = false;
              }
            if (fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.have_value)
              {
                result.setExcludeAllMusicResultsWithoutExplicitContext(fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.value);
                fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.have_value = false;
              }
            if (fieldGeneratorExcludeWikipediaLowConfidenceResults.have_value)
              {
                result.setExcludeWikipediaLowConfidenceResults(fieldGeneratorExcludeWikipediaLowConfidenceResults.value);
                fieldGeneratorExcludeWikipediaLowConfidenceResults.have_value = false;
              }
            if (fieldGeneratorFitBitAccessToken.have_value)
              {
                result.setFitBitAccessToken(fieldGeneratorFitBitAccessToken.value);
                fieldGeneratorFitBitAccessToken.have_value = false;
              }
            if (fieldGeneratorFitBitRefreshToken.have_value)
              {
                result.setFitBitRefreshToken(fieldGeneratorFitBitRefreshToken.value);
                fieldGeneratorFitBitRefreshToken.have_value = false;
              }
            if (fieldGeneratorGetHumaxMediaCloudURL.have_value)
              {
                result.setGetHumaxMediaCloudURL(fieldGeneratorGetHumaxMediaCloudURL.value);
                fieldGeneratorGetHumaxMediaCloudURL.have_value = false;
              }
            if (fieldGeneratorGetOAuth2ClientID.have_value)
              {
                result.setGetOAuth2ClientID(fieldGeneratorGetOAuth2ClientID.value);
                fieldGeneratorGetOAuth2ClientID.have_value = false;
              }
            if (fieldGeneratorGetOAuth2ClientSecret.have_value)
              {
                result.setGetOAuth2ClientSecret(fieldGeneratorGetOAuth2ClientSecret.value);
                fieldGeneratorGetOAuth2ClientSecret.have_value = false;
              }
            if (fieldGeneratorSquare.have_value)
              {
                result.setSquare(fieldGeneratorSquare.value);
                fieldGeneratorSquare.have_value = false;
              }
            if (fieldGeneratorGetOAuth2ClientToken.have_value)
              {
                result.setGetOAuth2ClientToken(fieldGeneratorGetOAuth2ClientToken.value);
                fieldGeneratorGetOAuth2ClientToken.have_value = false;
              }
            if (fieldGeneratorGetUberClientId.have_value)
              {
                result.setGetUberClientId(fieldGeneratorGetUberClientId.value);
                fieldGeneratorGetUberClientId.have_value = false;
              }
            if (fieldGeneratorGetUberServerToken.have_value)
              {
                result.setGetUberServerToken(fieldGeneratorGetUberServerToken.value);
                fieldGeneratorGetUberServerToken.have_value = false;
              }
            if (fieldGeneratorHLSRadius.have_value)
              {
                result.setHLSRadius(fieldGeneratorHLSRadius.value);
                fieldGeneratorHLSRadius.have_value = false;
              }
            if (fieldGeneratorHarmanDeviceRegistration.have_value)
              {
                result.setHarmanDeviceRegistration(fieldGeneratorHarmanDeviceRegistration.value);
                fieldGeneratorHarmanDeviceRegistration.have_value = false;
              }
            if (fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.have_value)
              {
                result.setHarmanHospitalityAmxControllerHttpRequest(fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.value);
                fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.have_value = false;
              }
            if (fieldGeneratorHarmanHospitalityMeetingInformation.have_value)
              {
                result.setHarmanHospitalityMeetingInformation(fieldGeneratorHarmanHospitalityMeetingInformation.value);
                fieldGeneratorHarmanHospitalityMeetingInformation.have_value = false;
              }
            if (fieldGeneratorHarmanHospitalityPropertyInformation.have_value)
              {
                result.setHarmanHospitalityPropertyInformation(fieldGeneratorHarmanHospitalityPropertyInformation.value);
                fieldGeneratorHarmanHospitalityPropertyInformation.have_value = false;
              }
            if (fieldGeneratorHarmanPropertyRegistration.have_value)
              {
                result.setHarmanPropertyRegistration(fieldGeneratorHarmanPropertyRegistration.value);
                fieldGeneratorHarmanPropertyRegistration.have_value = false;
              }
            if (fieldGeneratorHasTollsOnThisRoad.have_value)
              {
                result.setHasTollsOnThisRoad(fieldGeneratorHasTollsOnThisRoad.value);
                fieldGeneratorHasTollsOnThisRoad.have_value = false;
              }
            if (fieldGeneratorHomeAutomationDomainSettings.have_value)
              {
                result.setHomeAutomationDomainSettings(fieldGeneratorHomeAutomationDomainSettings.value);
                fieldGeneratorHomeAutomationDomainSettings.have_value = false;
              }
            if (fieldGeneratorHondaAgent20MParameters.have_value)
              {
                result.setHondaAgent20MParameters(fieldGeneratorHondaAgent20MParameters.value);
                fieldGeneratorHondaAgent20MParameters.have_value = false;
              }
            if (fieldGeneratorHondaAgentParameters.have_value)
              {
                result.setHondaAgentParameters(fieldGeneratorHondaAgentParameters.value);
                fieldGeneratorHondaAgentParameters.have_value = false;
              }
            if (fieldGeneratorHondaCarManualParameters.have_value)
              {
                result.setHondaCarManualParameters(fieldGeneratorHondaCarManualParameters.value);
                fieldGeneratorHondaCarManualParameters.have_value = false;
              }
            if (fieldGeneratorHueDeviceRegistration.have_value)
              {
                result.setHueDeviceRegistration(fieldGeneratorHueDeviceRegistration.value);
                fieldGeneratorHueDeviceRegistration.have_value = false;
              }
            if (fieldGeneratorHumaxHomeAutomationCredentials.have_value)
              {
                result.setHumaxHomeAutomationCredentials(fieldGeneratorHumaxHomeAutomationCredentials.value);
                fieldGeneratorHumaxHomeAutomationCredentials.have_value = false;
              }
            if (fieldGeneratorHumaxMediaCloudURL.have_value)
              {
                result.setHumaxMediaCloudURL(fieldGeneratorHumaxMediaCloudURL.value);
                fieldGeneratorHumaxMediaCloudURL.have_value = false;
              }
            if (fieldGeneratorHumaxSmartTVClientState.have_value)
              {
                result.setHumaxSmartTVClientState(fieldGeneratorHumaxSmartTVClientState.value);
                fieldGeneratorHumaxSmartTVClientState.have_value = false;
              }
            if (fieldGeneratorIHeartMediaDeviceIdentifiers.have_value)
              {
                result.setIHeartMediaDeviceIdentifiers(fieldGeneratorIHeartMediaDeviceIdentifiers.value);
                fieldGeneratorIHeartMediaDeviceIdentifiers.have_value = false;
              }
            if (fieldGeneratorIHeartRadioPreferArtistStations.have_value)
              {
                result.setIHeartRadioPreferArtistStations(fieldGeneratorIHeartRadioPreferArtistStations.value);
                fieldGeneratorIHeartRadioPreferArtistStations.have_value = false;
              }
            if (fieldGeneratorIHeartRadioPreferGenericRadioMatches.have_value)
              {
                result.setIHeartRadioPreferGenericRadioMatches(fieldGeneratorIHeartRadioPreferGenericRadioMatches.value);
                fieldGeneratorIHeartRadioPreferGenericRadioMatches.have_value = false;
              }
            if (fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.have_value)
              {
                result.setIHeartRadioPreferTerrestrialRadioMatches(fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.value);
                fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.have_value = false;
              }
            if (fieldGeneratorIftttKeyItem.have_value)
              {
                result.setIftttKeyItem(fieldGeneratorIftttKeyItem.value);
                fieldGeneratorIftttKeyItem.have_value = false;
              }
            if (fieldGeneratorImageSearchConfiguration.have_value)
              {
                result.setImageSearchConfiguration(fieldGeneratorImageSearchConfiguration.value);
                fieldGeneratorImageSearchConfiguration.have_value = false;
              }
            if (fieldGeneratorImageSearchRequestInfoProviders.have_value)
              {
                result.setImageSearchRequestInfoProviders(fieldGeneratorImageSearchRequestInfoProviders.value);
                fieldGeneratorImageSearchRequestInfoProviders.have_value = false;
              }
            if (fieldGeneratorIncludeAllMusicResultsWithoutContext.have_value)
              {
                result.setIncludeAllMusicResultsWithoutContext(fieldGeneratorIncludeAllMusicResultsWithoutContext.value);
                fieldGeneratorIncludeAllMusicResultsWithoutContext.have_value = false;
              }
            if (fieldGeneratorIncomingCallPending.have_value)
              {
                result.setIncomingCallPending(fieldGeneratorIncomingCallPending.value);
                fieldGeneratorIncomingCallPending.have_value = false;
              }
            if (fieldGeneratorInputOverrideDeleteFunction.have_value)
              {
                result.setInputOverrideDeleteFunction(fieldGeneratorInputOverrideDeleteFunction.value);
                fieldGeneratorInputOverrideDeleteFunction.have_value = false;
              }
            if (fieldGeneratorInputOverrideFunction.have_value)
              {
                result.setInputOverrideFunction(fieldGeneratorInputOverrideFunction.value);
                fieldGeneratorInputOverrideFunction.have_value = false;
              }
            if (fieldGeneratorInputOverrideFunctionLanguage.have_value)
              {
                result.setInputOverrideFunctionLanguage(fieldGeneratorInputOverrideFunctionLanguage.value);
                fieldGeneratorInputOverrideFunctionLanguage.have_value = false;
              }
            if (fieldGeneratorInputOverrideFunctionSource.have_value)
              {
                result.setInputOverrideFunctionSource(fieldGeneratorInputOverrideFunctionSource.value);
                fieldGeneratorInputOverrideFunctionSource.have_value = false;
              }
            if (fieldGeneratorInputOverrideReadFunction.have_value)
              {
                result.setInputOverrideReadFunction(fieldGeneratorInputOverrideReadFunction.value);
                fieldGeneratorInputOverrideReadFunction.have_value = false;
              }
            if (fieldGeneratorKuriInfo.have_value)
              {
                result.setKuriInfo(fieldGeneratorKuriInfo.value);
                fieldGeneratorKuriInfo.have_value = false;
              }
            if (fieldGeneratorLocalSearchClientState.have_value)
              {
                result.setLocalSearchClientState(fieldGeneratorLocalSearchClientState.value);
                fieldGeneratorLocalSearchClientState.have_value = false;
              }
            if (fieldGeneratorMapClientControlPageToScroll.have_value)
              {
                result.setMapClientControlPageToScroll(fieldGeneratorMapClientControlPageToScroll.value);
                fieldGeneratorMapClientControlPageToScroll.have_value = false;
              }
            if (fieldGeneratorMultipleChoiceQuizAPIRequest.have_value)
              {
                result.setMultipleChoiceQuizAPIRequest(fieldGeneratorMultipleChoiceQuizAPIRequest.value);
                fieldGeneratorMultipleChoiceQuizAPIRequest.have_value = false;
              }
            if (fieldGeneratorMusicClientState.have_value)
              {
                result.setMusicClientState(fieldGeneratorMusicClientState.value);
                fieldGeneratorMusicClientState.have_value = false;
              }
            if (fieldGeneratorNaritaAirportGuideArea.have_value)
              {
                result.setNaritaAirportGuideArea(fieldGeneratorNaritaAirportGuideArea.value);
                fieldGeneratorNaritaAirportGuideArea.have_value = false;
              }
            if (fieldGeneratorNaritaAirportGuideFloor.have_value)
              {
                result.setNaritaAirportGuideFloor(fieldGeneratorNaritaAirportGuideFloor.value);
                fieldGeneratorNaritaAirportGuideFloor.have_value = false;
              }
            if (fieldGeneratorNaritaAirportGuideTerminal.have_value)
              {
                result.setNaritaAirportGuideTerminal(fieldGeneratorNaritaAirportGuideTerminal.value);
                fieldGeneratorNaritaAirportGuideTerminal.have_value = false;
              }
            if (fieldGeneratorNavigationControlContext.have_value)
              {
                result.setNavigationControlContext(fieldGeneratorNavigationControlContext.value);
                fieldGeneratorNavigationControlContext.have_value = false;
              }
            if (fieldGeneratorTurnOffGuidanceMeansMute.have_value)
              {
                result.setTurnOffGuidanceMeansMute(fieldGeneratorTurnOffGuidanceMeansMute.value);
                fieldGeneratorTurnOffGuidanceMeansMute.have_value = false;
              }
            if (fieldGeneratorNavigationLocationDisambiguation.have_value)
              {
                result.setNavigationLocationDisambiguation(fieldGeneratorNavigationLocationDisambiguation.value);
                fieldGeneratorNavigationLocationDisambiguation.have_value = false;
              }
            if (fieldGeneratorNewReminder.have_value)
              {
                result.setNewReminder(fieldGeneratorNewReminder.value);
                fieldGeneratorNewReminder.have_value = false;
              }
            if (fieldGeneratorNumberOfVolumeLevels.have_value)
              {
                result.setNumberOfVolumeLevels(fieldGeneratorNumberOfVolumeLevels.value);
                fieldGeneratorNumberOfVolumeLevels.have_value = false;
              }
            if (fieldGeneratorOAuth2ClientID.have_value)
              {
                result.setOAuth2ClientID(fieldGeneratorOAuth2ClientID.value);
                fieldGeneratorOAuth2ClientID.have_value = false;
              }
            if (fieldGeneratorOAuth2ClientSecret.have_value)
              {
                result.setOAuth2ClientSecret(fieldGeneratorOAuth2ClientSecret.value);
                fieldGeneratorOAuth2ClientSecret.have_value = false;
              }
            if (fieldGeneratorOAuth2ClientToken.have_value)
              {
                result.setOAuth2ClientToken(fieldGeneratorOAuth2ClientToken.value);
                fieldGeneratorOAuth2ClientToken.have_value = false;
              }
            if (fieldGeneratorOAuth2CodeData.have_value)
              {
                result.setOAuth2CodeData(fieldGeneratorOAuth2CodeData.value);
                fieldGeneratorOAuth2CodeData.have_value = false;
              }
            if (fieldGeneratorOAuth2RefreshToken.have_value)
              {
                result.setOAuth2RefreshToken(fieldGeneratorOAuth2RefreshToken.value);
                fieldGeneratorOAuth2RefreshToken.have_value = false;
              }
            if (fieldGeneratorOrganizationalChartRequest.have_value)
              {
                result.setOrganizationalChartRequest(fieldGeneratorOrganizationalChartRequest.value);
                fieldGeneratorOrganizationalChartRequest.have_value = false;
              }
            if (fieldGeneratorOutputDeepIntegrationLattice.have_value)
              {
                result.setOutputDeepIntegrationLattice(fieldGeneratorOutputDeepIntegrationLattice.value);
                fieldGeneratorOutputDeepIntegrationLattice.have_value = false;
              }
            if (fieldGeneratorOutputSLMLattice.have_value)
              {
                result.setOutputSLMLattice(fieldGeneratorOutputSLMLattice.value);
                fieldGeneratorOutputSLMLattice.have_value = false;
              }
            if (fieldGeneratorOutputOverrideKind.have_value)
              {
                result.setOutputOverrideKind(fieldGeneratorOutputOverrideKind.value);
                fieldGeneratorOutputOverrideKind.have_value = false;
              }
            if (fieldGeneratorOutputOverrideFunction.have_value)
              {
                result.setOutputOverrideFunction(fieldGeneratorOutputOverrideFunction.value);
                fieldGeneratorOutputOverrideFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideFunctionLanguage.have_value)
              {
                result.setOutputOverrideFunctionLanguage(fieldGeneratorOutputOverrideFunctionLanguage.value);
                fieldGeneratorOutputOverrideFunctionLanguage.have_value = false;
              }
            if (fieldGeneratorOutputOverrideFunctionSource.have_value)
              {
                result.setOutputOverrideFunctionSource(fieldGeneratorOutputOverrideFunctionSource.value);
                fieldGeneratorOutputOverrideFunctionSource.have_value = false;
              }
            if (fieldGeneratorOutputOverrideCommandIsPreAudioOut.have_value)
              {
                result.setOutputOverrideCommandIsPreAudioOut(fieldGeneratorOutputOverrideCommandIsPreAudioOut.value);
                fieldGeneratorOutputOverrideCommandIsPreAudioOut.have_value = false;
              }
            if (fieldGeneratorOutputOverrideDeleteCommandFunction.have_value)
              {
                result.setOutputOverrideDeleteCommandFunction(fieldGeneratorOutputOverrideDeleteCommandFunction.value);
                fieldGeneratorOutputOverrideDeleteCommandFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.have_value)
              {
                result.setOutputOverrideDeleteInformationNuggetFunction(fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.value);
                fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideInformationNuggetFunction.have_value)
              {
                result.setOutputOverrideInformationNuggetFunction(fieldGeneratorOutputOverrideInformationNuggetFunction.value);
                fieldGeneratorOutputOverrideInformationNuggetFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.have_value)
              {
                result.setOutputOverrideInformationNuggetFunctionLanguage(fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.value);
                fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.have_value = false;
              }
            if (fieldGeneratorOutputOverrideInformationNuggetFunctionSource.have_value)
              {
                result.setOutputOverrideInformationNuggetFunctionSource(fieldGeneratorOutputOverrideInformationNuggetFunctionSource.value);
                fieldGeneratorOutputOverrideInformationNuggetFunctionSource.have_value = false;
              }
            if (fieldGeneratorOutputOverrideReadCommandFunction.have_value)
              {
                result.setOutputOverrideReadCommandFunction(fieldGeneratorOutputOverrideReadCommandFunction.value);
                fieldGeneratorOutputOverrideReadCommandFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideReadInformationNuggetFunction.have_value)
              {
                result.setOutputOverrideReadInformationNuggetFunction(fieldGeneratorOutputOverrideReadInformationNuggetFunction.value);
                fieldGeneratorOutputOverrideReadInformationNuggetFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideCommandFunction.have_value)
              {
                result.setOutputOverrideCommandFunction(fieldGeneratorOutputOverrideCommandFunction.value);
                fieldGeneratorOutputOverrideCommandFunction.have_value = false;
              }
            if (fieldGeneratorOutputOverrideCommandFunctionLanguage.have_value)
              {
                result.setOutputOverrideCommandFunctionLanguage(fieldGeneratorOutputOverrideCommandFunctionLanguage.value);
                fieldGeneratorOutputOverrideCommandFunctionLanguage.have_value = false;
              }
            if (fieldGeneratorOutputOverrideCommandFunctionSource.have_value)
              {
                result.setOutputOverrideCommandFunctionSource(fieldGeneratorOutputOverrideCommandFunctionSource.value);
                fieldGeneratorOutputOverrideCommandFunctionSource.have_value = false;
              }
            if (fieldGeneratorPandoraCustomClientPrompt.have_value)
              {
                result.setPandoraCustomClientPrompt(fieldGeneratorPandoraCustomClientPrompt.value);
                fieldGeneratorPandoraCustomClientPrompt.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableComponentFormat.have_value)
              {
                result.setPandoraCustomEnableComponentFormat(fieldGeneratorPandoraCustomEnableComponentFormat.value);
                fieldGeneratorPandoraCustomEnableComponentFormat.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableDomain.have_value)
              {
                result.setPandoraCustomEnableDomain(fieldGeneratorPandoraCustomEnableDomain.value);
                fieldGeneratorPandoraCustomEnableDomain.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.have_value)
              {
                result.setPandoraCustomEnableExclusionInTarzanMode(fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.value);
                fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableInferredPlay.have_value)
              {
                result.setPandoraCustomEnableInferredPlay(fieldGeneratorPandoraCustomEnableInferredPlay.value);
                fieldGeneratorPandoraCustomEnableInferredPlay.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.have_value)
              {
                result.setPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList(fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.value);
                fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.have_value)
              {
                result.setPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords(fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.value);
                fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableLongJSONFallback.have_value)
              {
                result.setPandoraCustomEnableLongJSONFallback(fieldGeneratorPandoraCustomEnableLongJSONFallback.value);
                fieldGeneratorPandoraCustomEnableLongJSONFallback.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnablePodcastMatches.have_value)
              {
                result.setPandoraCustomEnablePodcastMatches(fieldGeneratorPandoraCustomEnablePodcastMatches.value);
                fieldGeneratorPandoraCustomEnablePodcastMatches.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableUserDataQueries.have_value)
              {
                result.setPandoraCustomEnableUserDataQueries(fieldGeneratorPandoraCustomEnableUserDataQueries.value);
                fieldGeneratorPandoraCustomEnableUserDataQueries.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableWildcardMatches.have_value)
              {
                result.setPandoraCustomEnableWildcardMatches(fieldGeneratorPandoraCustomEnableWildcardMatches.value);
                fieldGeneratorPandoraCustomEnableWildcardMatches.have_value = false;
              }
            if (fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.have_value)
              {
                result.setPandoraCustomEnableWildcardMatchesOnlyAsFallback(fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.value);
                fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.have_value = false;
              }
            if (fieldGeneratorPandoraCustomExtendedStationModeData.have_value)
              {
                result.setPandoraCustomExtendedStationModeData(fieldGeneratorPandoraCustomExtendedStationModeData.value);
                fieldGeneratorPandoraCustomExtendedStationModeData.have_value = false;
              }
            if (fieldGeneratorPandoraCustomRapidIngestionData.have_value)
              {
                result.setPandoraCustomRapidIngestionData(fieldGeneratorPandoraCustomRapidIngestionData.value);
                fieldGeneratorPandoraCustomRapidIngestionData.have_value = false;
              }
            if (fieldGeneratorPandoraCustomUserData.have_value)
              {
                result.setPandoraCustomUserData(fieldGeneratorPandoraCustomUserData.value);
                fieldGeneratorPandoraCustomUserData.have_value = false;
              }
            if (fieldGeneratorParkingClientState.have_value)
              {
                result.setParkingClientState(fieldGeneratorParkingClientState.value);
                fieldGeneratorParkingClientState.have_value = false;
              }
            if (fieldGeneratorPepperEnabled.have_value)
              {
                result.setPepperEnabled(fieldGeneratorPepperEnabled.value);
                fieldGeneratorPepperEnabled.have_value = false;
              }
            if (fieldGeneratorPhoneDisambiguationOmitList.have_value)
              {
                result.setPhoneDisambiguationOmitList(fieldGeneratorPhoneDisambiguationOmitList.value);
                fieldGeneratorPhoneDisambiguationOmitList.have_value = false;
              }
            if (fieldGeneratorRadioControlAvailableAudioSources.have_value)
              {
                result.setRadioControlAvailableAudioSources(fieldGeneratorRadioControlAvailableAudioSources.value);
                fieldGeneratorRadioControlAvailableAudioSources.have_value = false;
              }
            if (fieldGeneratorRadioControlOtherAMBands.have_value)
              {
                result.setRadioControlOtherAMBands(fieldGeneratorRadioControlOtherAMBands.value);
                fieldGeneratorRadioControlOtherAMBands.have_value = false;
              }
            if (fieldGeneratorRadioControlOtherFMBands.have_value)
              {
                result.setRadioControlOtherFMBands(fieldGeneratorRadioControlOtherFMBands.value);
                fieldGeneratorRadioControlOtherFMBands.have_value = false;
              }
            if (fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.have_value)
              {
                result.setRadioControlRecognizeNorthAmericanAMBand(fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.value);
                fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.have_value = false;
              }
            if (fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.have_value)
              {
                result.setRadioControlRecognizeNorthAmericanFMBand(fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.value);
                fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.have_value = false;
              }
            if (fieldGeneratorRadioControlTunableStations.have_value)
              {
                result.setRadioControlTunableStations(fieldGeneratorRadioControlTunableStations.value);
                fieldGeneratorRadioControlTunableStations.have_value = false;
              }
            if (fieldGeneratorReadSpeakerVoiceParameters.have_value)
              {
                result.setReadSpeakerVoiceParameters(fieldGeneratorReadSpeakerVoiceParameters.value);
                fieldGeneratorReadSpeakerVoiceParameters.have_value = false;
              }
            if (fieldGeneratorRecipeParameters.have_value)
              {
                result.setRecipeParameters(fieldGeneratorRecipeParameters.value);
                fieldGeneratorRecipeParameters.have_value = false;
              }
            if (fieldGeneratorRegionalPhoneNumberConfiguration.have_value)
              {
                result.setRegionalPhoneNumberConfiguration(fieldGeneratorRegionalPhoneNumberConfiguration.value);
                fieldGeneratorRegionalPhoneNumberConfiguration.have_value = false;
              }
            if (fieldGeneratorRemainingDistance.have_value)
              {
                result.setRemainingDistance(fieldGeneratorRemainingDistance.value);
                fieldGeneratorRemainingDistance.have_value = false;
              }
            if (fieldGeneratorRemainingTravelTime.have_value)
              {
                result.setRemainingTravelTime(fieldGeneratorRemainingTravelTime.value);
                fieldGeneratorRemainingTravelTime.have_value = false;
              }
            if (fieldGeneratorReminders.have_value)
              {
                result.setReminders(fieldGeneratorReminders.value);
                fieldGeneratorReminders.have_value = false;
              }
            if (fieldGeneratorRestaurantMenuMetadata.have_value)
              {
                result.setRestaurantMenuMetadata(fieldGeneratorRestaurantMenuMetadata.value);
                fieldGeneratorRestaurantMenuMetadata.have_value = false;
              }
            if (fieldGeneratorRestaurantMenuObject.have_value)
              {
                result.setRestaurantMenuObject(fieldGeneratorRestaurantMenuObject.value);
                fieldGeneratorRestaurantMenuObject.have_value = false;
              }
            if (fieldGeneratorRestaurantOrderingMenuData.have_value)
              {
                result.setRestaurantOrderingMenuData(fieldGeneratorRestaurantOrderingMenuData.value);
                fieldGeneratorRestaurantOrderingMenuData.have_value = false;
              }
            if (fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.have_value)
              {
                result.setRestaurantOrderingQueriesMenuDataStoreID(fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.value);
                fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.have_value = false;
              }
            if (fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.have_value)
              {
                result.setRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent(fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.value);
                fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.have_value = false;
              }
            if (fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.have_value)
              {
                result.setRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent(fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.value);
                fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.have_value = false;
              }
            if (fieldGeneratorRestaurantOrderingQueriesRequestData.have_value)
              {
                result.setRestaurantOrderingQueriesRequestData(fieldGeneratorRestaurantOrderingQueriesRequestData.value);
                fieldGeneratorRestaurantOrderingQueriesRequestData.have_value = false;
              }
            if (fieldGeneratorReturnInformationNuggetsForMusicSearch.have_value)
              {
                result.setReturnInformationNuggetsForMusicSearch(fieldGeneratorReturnInformationNuggetsForMusicSearch.value);
                fieldGeneratorReturnInformationNuggetsForMusicSearch.have_value = false;
              }
            if (fieldGeneratorRobotInfo.have_value)
              {
                result.setRobotInfo(fieldGeneratorRobotInfo.value);
                fieldGeneratorRobotInfo.have_value = false;
              }
            if (fieldGeneratorSendFullWeatherForecastData.have_value)
              {
                result.setSendFullWeatherForecastData(fieldGeneratorSendFullWeatherForecastData.value);
                fieldGeneratorSendFullWeatherForecastData.have_value = false;
              }
            if (fieldGeneratorSetUserMemoryLocation.have_value)
              {
                result.setSetUserMemoryLocation(fieldGeneratorSetUserMemoryLocation.value);
                fieldGeneratorSetUserMemoryLocation.have_value = false;
              }
            if (fieldGeneratorSiriusXMEnableDomain.have_value)
              {
                result.setSiriusXMEnableDomain(fieldGeneratorSiriusXMEnableDomain.value);
                fieldGeneratorSiriusXMEnableDomain.have_value = false;
              }
            if (fieldGeneratorSiriusXMEnableGenericChannelMatches.have_value)
              {
                result.setSiriusXMEnableGenericChannelMatches(fieldGeneratorSiriusXMEnableGenericChannelMatches.value);
                fieldGeneratorSiriusXMEnableGenericChannelMatches.have_value = false;
              }
            if (fieldGeneratorSiriusXMEnableWildcardMatches.have_value)
              {
                result.setSiriusXMEnableWildcardMatches(fieldGeneratorSiriusXMEnableWildcardMatches.value);
                fieldGeneratorSiriusXMEnableWildcardMatches.have_value = false;
              }
            if (fieldGeneratorSmartTVOnScreenItems.have_value)
              {
                result.setSmartTVOnScreenItems(fieldGeneratorSmartTVOnScreenItems.value);
                fieldGeneratorSmartTVOnScreenItems.have_value = false;
              }
            if (fieldGeneratorSmartTVUserCustomInputSource.have_value)
              {
                result.setSmartTVUserCustomInputSource(fieldGeneratorSmartTVUserCustomInputSource.value);
                fieldGeneratorSmartTVUserCustomInputSource.have_value = false;
              }
            if (fieldGeneratorSoundHoundTTSParameters.have_value)
              {
                result.setSoundHoundTTSParameters(fieldGeneratorSoundHoundTTSParameters.value);
                fieldGeneratorSoundHoundTTSParameters.have_value = false;
              }
            if (fieldGeneratorSpeedLimitOnThisRoad.have_value)
              {
                result.setSpeedLimitOnThisRoad(fieldGeneratorSpeedLimitOnThisRoad.value);
                fieldGeneratorSpeedLimitOnThisRoad.have_value = false;
              }
            if (fieldGeneratorSportsLeagueControl.have_value)
              {
                result.setSportsLeagueControl(fieldGeneratorSportsLeagueControl.value);
                fieldGeneratorSportsLeagueControl.have_value = false;
              }
            if (fieldGeneratorSpotifyPlaylistEnableWildcardMatches.have_value)
              {
                result.setSpotifyPlaylistEnableWildcardMatches(fieldGeneratorSpotifyPlaylistEnableWildcardMatches.value);
                fieldGeneratorSpotifyPlaylistEnableWildcardMatches.have_value = false;
              }
            if (fieldGeneratorStoredAlwaysMatchReadData.have_value)
              {
                result.setStoredAlwaysMatchReadData(fieldGeneratorStoredAlwaysMatchReadData.value);
                fieldGeneratorStoredAlwaysMatchReadData.have_value = false;
              }
            if (fieldGeneratorStoredAlwaysMatchWriteData.have_value)
              {
                result.setStoredAlwaysMatchWriteData(fieldGeneratorStoredAlwaysMatchWriteData.value);
                fieldGeneratorStoredAlwaysMatchWriteData.have_value = false;
              }
            if (fieldGeneratorStoredGlobalPagesToMatch.have_value)
              {
                result.setStoredGlobalPagesToMatch(fieldGeneratorStoredGlobalPagesToMatch.value);
                fieldGeneratorStoredGlobalPagesToMatch.have_value = false;
              }
            if (fieldGeneratorStoredGlobalPagesToNotMatch.have_value)
              {
                result.setStoredGlobalPagesToNotMatch(fieldGeneratorStoredGlobalPagesToNotMatch.value);
                fieldGeneratorStoredGlobalPagesToNotMatch.have_value = false;
              }
            if (fieldGeneratorStoredGlobalPagesToSetOffByDefault.have_value)
              {
                result.setStoredGlobalPagesToSetOffByDefault(fieldGeneratorStoredGlobalPagesToSetOffByDefault.value);
                fieldGeneratorStoredGlobalPagesToSetOffByDefault.have_value = false;
              }
            if (fieldGeneratorStoredGlobalPagesToSetOnByDefault.have_value)
              {
                result.setStoredGlobalPagesToSetOnByDefault(fieldGeneratorStoredGlobalPagesToSetOnByDefault.value);
                fieldGeneratorStoredGlobalPagesToSetOnByDefault.have_value = false;
              }
            if (fieldGeneratorStoredPageMatchPageListData.have_value)
              {
                result.setStoredPageMatchPageListData(fieldGeneratorStoredPageMatchPageListData.value);
                fieldGeneratorStoredPageMatchPageListData.have_value = false;
              }
            if (fieldGeneratorStoredPageMatchReadData.have_value)
              {
                result.setStoredPageMatchReadData(fieldGeneratorStoredPageMatchReadData.value);
                fieldGeneratorStoredPageMatchReadData.have_value = false;
              }
            if (fieldGeneratorStoredPageMatchWeight.have_value)
              {
                result.setStoredPageMatchWeight(fieldGeneratorStoredPageMatchWeight.value);
                fieldGeneratorStoredPageMatchWeight.have_value = false;
              }
            if (fieldGeneratorStoredPageMatchWriteData.have_value)
              {
                result.setStoredPageMatchWriteData(fieldGeneratorStoredPageMatchWriteData.value);
                fieldGeneratorStoredPageMatchWriteData.have_value = false;
              }
            if (fieldGeneratorStoredPerUserPagesToMatch.have_value)
              {
                result.setStoredPerUserPagesToMatch(fieldGeneratorStoredPerUserPagesToMatch.value);
                fieldGeneratorStoredPerUserPagesToMatch.have_value = false;
              }
            if (fieldGeneratorStoredPerUserPagesToNotMatch.have_value)
              {
                result.setStoredPerUserPagesToNotMatch(fieldGeneratorStoredPerUserPagesToNotMatch.value);
                fieldGeneratorStoredPerUserPagesToNotMatch.have_value = false;
              }
            if (fieldGeneratorStoredPerUserPagesToSetOffByDefault.have_value)
              {
                result.setStoredPerUserPagesToSetOffByDefault(fieldGeneratorStoredPerUserPagesToSetOffByDefault.value);
                fieldGeneratorStoredPerUserPagesToSetOffByDefault.have_value = false;
              }
            if (fieldGeneratorStoredPerUserPagesToSetOnByDefault.have_value)
              {
                result.setStoredPerUserPagesToSetOnByDefault(fieldGeneratorStoredPerUserPagesToSetOnByDefault.value);
                fieldGeneratorStoredPerUserPagesToSetOnByDefault.have_value = false;
              }
            if (fieldGeneratorSurveyAPIRequest.have_value)
              {
                result.setSurveyAPIRequest(fieldGeneratorSurveyAPIRequest.value);
                fieldGeneratorSurveyAPIRequest.have_value = false;
              }
            if (fieldGeneratorTVChannelList.have_value)
              {
                result.setTVChannelList(fieldGeneratorTVChannelList.value);
                fieldGeneratorTVChannelList.have_value = false;
              }
            if (fieldGeneratorTerrierTableUploadReadData.have_value)
              {
                result.setTerrierTableUploadReadData(fieldGeneratorTerrierTableUploadReadData.value);
                fieldGeneratorTerrierTableUploadReadData.have_value = false;
              }
            if (fieldGeneratorTerrierTableUploadWriteData.have_value)
              {
                result.setTerrierTableUploadWriteData(fieldGeneratorTerrierTableUploadWriteData.value);
                fieldGeneratorTerrierTableUploadWriteData.have_value = false;
              }
            if (fieldGeneratorTerrierUploadDeleteProject.have_value)
              {
                result.setTerrierUploadDeleteProject(fieldGeneratorTerrierUploadDeleteProject.value);
                fieldGeneratorTerrierUploadDeleteProject.have_value = false;
              }
            if (fieldGeneratorTerrierUploadDeleteProjectOptions.have_value)
              {
                result.setTerrierUploadDeleteProjectOptions(fieldGeneratorTerrierUploadDeleteProjectOptions.value);
                fieldGeneratorTerrierUploadDeleteProjectOptions.have_value = false;
              }
            if (fieldGeneratorTerrierUploadGetProject.have_value)
              {
                result.setTerrierUploadGetProject(fieldGeneratorTerrierUploadGetProject.value);
                fieldGeneratorTerrierUploadGetProject.have_value = false;
              }
            if (fieldGeneratorTerrierUploadGetProjectList.have_value)
              {
                result.setTerrierUploadGetProjectList(fieldGeneratorTerrierUploadGetProjectList.value);
                fieldGeneratorTerrierUploadGetProjectList.have_value = false;
              }
            if (fieldGeneratorTerrierUploadGetProjectListOptions.have_value)
              {
                result.setTerrierUploadGetProjectListOptions(fieldGeneratorTerrierUploadGetProjectListOptions.value);
                fieldGeneratorTerrierUploadGetProjectListOptions.have_value = false;
              }
            if (fieldGeneratorTerrierUploadGetProjectOptions.have_value)
              {
                result.setTerrierUploadGetProjectOptions(fieldGeneratorTerrierUploadGetProjectOptions.value);
                fieldGeneratorTerrierUploadGetProjectOptions.have_value = false;
              }
            if (fieldGeneratorTerrierUploadReadData.have_value)
              {
                result.setTerrierUploadReadData(fieldGeneratorTerrierUploadReadData.value);
                fieldGeneratorTerrierUploadReadData.have_value = false;
              }
            if (fieldGeneratorTerrierUploadWriteData.have_value)
              {
                result.setTerrierUploadWriteData(fieldGeneratorTerrierUploadWriteData.value);
                fieldGeneratorTerrierUploadWriteData.have_value = false;
              }
            if (fieldGeneratorTerrierUploadWriteProject.have_value)
              {
                result.setTerrierUploadWriteProject(fieldGeneratorTerrierUploadWriteProject.value);
                fieldGeneratorTerrierUploadWriteProject.have_value = false;
              }
            if (fieldGeneratorTerrierUploadWriteProjectOptions.have_value)
              {
                result.setTerrierUploadWriteProjectOptions(fieldGeneratorTerrierUploadWriteProjectOptions.value);
                fieldGeneratorTerrierUploadWriteProjectOptions.have_value = false;
              }
            if (fieldGeneratorThirdPartyCalendarService.have_value)
              {
                result.setThirdPartyCalendarService(fieldGeneratorThirdPartyCalendarService.value);
                fieldGeneratorThirdPartyCalendarService.have_value = false;
              }
            if (fieldGeneratorCalendarMatchingLoosenessLevel.have_value)
              {
                result.setCalendarMatchingLoosenessLevel(fieldGeneratorCalendarMatchingLoosenessLevel.value);
                fieldGeneratorCalendarMatchingLoosenessLevel.have_value = false;
              }
            if (fieldGeneratorCalendarEvents.have_value)
              {
                result.setCalendarEvents(fieldGeneratorCalendarEvents.value);
                fieldGeneratorCalendarEvents.have_value = false;
              }
            if (fieldGeneratorToshibaTTSParameters.have_value)
              {
                result.setToshibaTTSParameters(fieldGeneratorToshibaTTSParameters.value);
                fieldGeneratorToshibaTTSParameters.have_value = false;
              }
            if (fieldGeneratorTravelBearing.have_value)
              {
                result.setTravelBearing(fieldGeneratorTravelBearing.value);
                fieldGeneratorTravelBearing.have_value = false;
              }
            if (fieldGeneratorUDSExampleRequest.have_value)
              {
                result.setUDSExampleRequest(fieldGeneratorUDSExampleRequest.value);
                fieldGeneratorUDSExampleRequest.have_value = false;
              }
            if (fieldGeneratorUberClientId.have_value)
              {
                result.setUberClientId(fieldGeneratorUberClientId.value);
                fieldGeneratorUberClientId.have_value = false;
              }
            if (fieldGeneratorUberServerToken.have_value)
              {
                result.setUberServerToken(fieldGeneratorUberServerToken.value);
                fieldGeneratorUberServerToken.have_value = false;
              }
            if (fieldGeneratorUploadedTestConfiguration.have_value)
              {
                result.setUploadedTestConfiguration(fieldGeneratorUploadedTestConfiguration.value);
                fieldGeneratorUploadedTestConfiguration.have_value = false;
              }
            if (fieldGeneratorUploadedTestData.have_value)
              {
                result.setUploadedTestData(fieldGeneratorUploadedTestData.value);
                fieldGeneratorUploadedTestData.have_value = false;
              }
            if (fieldGeneratorUseNewStyleSMSCommands.have_value)
              {
                result.setUseNewStyleSMSCommands(fieldGeneratorUseNewStyleSMSCommands.value);
                fieldGeneratorUseNewStyleSMSCommands.have_value = false;
              }
            if (fieldGeneratorUseXAPAPI.have_value)
              {
                result.setUseXAPAPI(fieldGeneratorUseXAPAPI.value);
                fieldGeneratorUseXAPAPI.have_value = false;
              }
            if (fieldGeneratorUserContactsConfiguration.have_value)
              {
                result.setUserContactsConfiguration(fieldGeneratorUserContactsConfiguration.value);
                fieldGeneratorUserContactsConfiguration.have_value = false;
              }
            if (fieldGeneratorUserContactsRequests.have_value)
              {
                result.setUserContactsRequests(fieldGeneratorUserContactsRequests.value);
                fieldGeneratorUserContactsRequests.have_value = false;
              }
            if (fieldGeneratorUserFeedback.have_value)
              {
                result.setUserFeedback(fieldGeneratorUserFeedback.value);
                fieldGeneratorUserFeedback.have_value = false;
              }
            if (fieldGeneratorUserMusicAvailableSources.have_value)
              {
                result.setUserMusicAvailableSources(fieldGeneratorUserMusicAvailableSources.value);
                fieldGeneratorUserMusicAvailableSources.have_value = false;
              }
            if (fieldGeneratorUserMusicControls.have_value)
              {
                result.setUserMusicControls(fieldGeneratorUserMusicControls.value);
                fieldGeneratorUserMusicControls.have_value = false;
              }
            if (fieldGeneratorUserMusicInfo.have_value)
              {
                result.setUserMusicInfo(fieldGeneratorUserMusicInfo.value);
                fieldGeneratorUserMusicInfo.have_value = false;
              }
            if (fieldGeneratorVideoSearchConfiguration.have_value)
              {
                result.setVideoSearchConfiguration(fieldGeneratorVideoSearchConfiguration.value);
                fieldGeneratorVideoSearchConfiguration.have_value = false;
              }
            if (fieldGeneratorVideoSearchRequestInfoProviders.have_value)
              {
                result.setVideoSearchRequestInfoProviders(fieldGeneratorVideoSearchRequestInfoProviders.value);
                fieldGeneratorVideoSearchRequestInfoProviders.have_value = false;
              }
            if (fieldGeneratorVoiceParameters.have_value)
              {
                result.setVoiceParameters(fieldGeneratorVoiceParameters.value);
                fieldGeneratorVoiceParameters.have_value = false;
              }
            if (fieldGeneratorWebSearchConfiguration.have_value)
              {
                result.setWebSearchConfiguration(fieldGeneratorWebSearchConfiguration.value);
                fieldGeneratorWebSearchConfiguration.have_value = false;
              }
            if (fieldGeneratorWebSearchRequestInfoProviders.have_value)
              {
                result.setWebSearchRequestInfoProviders(fieldGeneratorWebSearchRequestInfoProviders.value);
                fieldGeneratorWebSearchRequestInfoProviders.have_value = false;
              }
            if (fieldGeneratorWhat3WordsCluePhraseNotRequired.have_value)
              {
                result.setWhat3WordsCluePhraseNotRequired(fieldGeneratorWhat3WordsCluePhraseNotRequired.value);
                fieldGeneratorWhat3WordsCluePhraseNotRequired.have_value = false;
              }
            if (fieldGeneratorWhat3WordsStandardGeofenceRadius.have_value)
              {
                result.setWhat3WordsStandardGeofenceRadius(fieldGeneratorWhat3WordsStandardGeofenceRadius.value);
                fieldGeneratorWhat3WordsStandardGeofenceRadius.have_value = false;
              }
            if (fieldGeneratorHereApiPlacesFallback.have_value)
              {
                result.setHereApiPlacesFallback(fieldGeneratorHereApiPlacesFallback.value);
                fieldGeneratorHereApiPlacesFallback.have_value = false;
              }
            if (fieldGeneratorPaymentsPredeterminedSMSNumber.have_value)
              {
                result.setPaymentsPredeterminedSMSNumber(fieldGeneratorPaymentsPredeterminedSMSNumber.value);
                fieldGeneratorPaymentsPredeterminedSMSNumber.have_value = false;
              }
            if (fieldGeneratorPaymentsPredeterminedPaymentMethod.have_value)
              {
                result.setPaymentsPredeterminedPaymentMethod(fieldGeneratorPaymentsPredeterminedPaymentMethod.value);
                fieldGeneratorPaymentsPredeterminedPaymentMethod.have_value = false;
              }
            if (fieldGeneratorOrderSource.have_value)
              {
                result.setOrderSource(fieldGeneratorOrderSource.value);
                fieldGeneratorOrderSource.have_value = false;
              }
            if (fieldGeneratorOrderPrepDuration.have_value)
              {
                result.setOrderPrepDuration(fieldGeneratorOrderPrepDuration.value);
                fieldGeneratorOrderPrepDuration.have_value = false;
              }
            if (fieldGeneratorSquareEnvironment.have_value)
              {
                result.setSquareEnvironment(fieldGeneratorSquareEnvironment.value);
                fieldGeneratorSquareEnvironment.have_value = false;
              }
            if (fieldGeneratorEnableSquareCustomerInformationPermissions.have_value)
              {
                result.setEnableSquareCustomerInformationPermissions(fieldGeneratorEnableSquareCustomerInformationPermissions.value);
                fieldGeneratorEnableSquareCustomerInformationPermissions.have_value = false;
              }
            if (fieldGeneratorMessagingConvertPunctuation.have_value)
              {
                result.setMessagingConvertPunctuation(fieldGeneratorMessagingConvertPunctuation.value);
                fieldGeneratorMessagingConvertPunctuation.have_value = false;
              }
            if (fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.have_value)
              {
                result.setAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode(fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.value);
                fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.have_value = false;
              }
            if (fieldGeneratorStreamPreference.have_value)
              {
                result.setStreamPreference(fieldGeneratorStreamPreference.value);
                fieldGeneratorStreamPreference.have_value = false;
              }
            if (fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.have_value)
              {
                result.setMusicQueriesForceInfoNuggetToPlayCommand(fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.value);
                fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.have_value = false;
              }
            if (fieldGeneratorMusicQueriesAllowRawTop.have_value)
              {
                result.setMusicQueriesAllowRawTop(fieldGeneratorMusicQueriesAllowRawTop.value);
                fieldGeneratorMusicQueriesAllowRawTop.have_value = false;
              }
            if (fieldGeneratorBusinessInformationUploadData.have_value)
              {
                result.setBusinessInformationUploadData(fieldGeneratorBusinessInformationUploadData.value);
                fieldGeneratorBusinessInformationUploadData.have_value = false;
              }
            if (fieldGeneratorBusinessInformationDataStoreId.have_value)
              {
                result.setBusinessInformationDataStoreId(fieldGeneratorBusinessInformationDataStoreId.value);
                fieldGeneratorBusinessInformationDataStoreId.have_value = false;
              }
            if (fieldGeneratorCustomASREnhancementWriteData.have_value)
              {
                result.setCustomASREnhancementWriteData(fieldGeneratorCustomASREnhancementWriteData.value);
                fieldGeneratorCustomASREnhancementWriteData.have_value = false;
              }
            if (fieldGeneratorCustomASREnhancementReadData.have_value)
              {
                result.setCustomASREnhancementReadData(fieldGeneratorCustomASREnhancementReadData.value);
                fieldGeneratorCustomASREnhancementReadData.have_value = false;
              }
            if (fieldGeneratorCustomASREnhancementListData.have_value)
              {
                result.setCustomASREnhancementListData(fieldGeneratorCustomASREnhancementListData.value);
                fieldGeneratorCustomASREnhancementListData.have_value = false;
              }
            if (fieldGeneratorEnabledCustomASREnhancementGrammars.have_value)
              {
                result.setEnabledCustomASREnhancementGrammars(fieldGeneratorEnabledCustomASREnhancementGrammars.value);
                fieldGeneratorEnabledCustomASREnhancementGrammars.have_value = false;
              }
            if (fieldGeneratorCustomASREnhancementWeight.have_value)
              {
                result.setCustomASREnhancementWeight(fieldGeneratorCustomASREnhancementWeight.value);
                fieldGeneratorCustomASREnhancementWeight.have_value = false;
              }
            if (fieldGeneratorToastEnvironment.have_value)
              {
                result.setToastEnvironment(fieldGeneratorToastEnvironment.value);
                fieldGeneratorToastEnvironment.have_value = false;
              }
            if (fieldGeneratorIntentToExecute.have_value)
              {
                result.setIntentToExecute(fieldGeneratorIntentToExecute.value);
                fieldGeneratorIntentToExecute.have_value = false;
              }
            if (fieldGeneratorUniversalTranslatorSubstitutionList.have_value)
              {
                result.setUniversalTranslatorSubstitutionList(fieldGeneratorUniversalTranslatorSubstitutionList.value);
                fieldGeneratorUniversalTranslatorSubstitutionList.have_value = false;
              }
            if (fieldGeneratorCustomTopicIdentificationWriteData.have_value)
              {
                result.setCustomTopicIdentificationWriteData(fieldGeneratorCustomTopicIdentificationWriteData.value);
                fieldGeneratorCustomTopicIdentificationWriteData.have_value = false;
              }
          }
        protected abstract void handle_result(RequestInfoJSON new_result);
        protected virtual JSONHandler start_known_field(string field_name)
          {
            switch (field_name[0])
              {
                case 'A':
                    switch (field_name[1])
                      {
                        case 'c':
                            if ((String.Compare(field_name, 2, "apelaVoiceParameters", 0, 20, false) == 0) && (field_name.Length == 22))
                                return fieldGeneratorAcapelaVoiceParameters;
                            break;
                        case 'l':
                            switch (field_name[2])
                              {
                                case 'l':
                                    if ((String.Compare(field_name, 3, "owPopularNameContactMatches", 0, 27, false) == 0) && (field_name.Length == 30))
                                        return fieldGeneratorAllowPopularNameContactMatches;
                                    break;
                                case 'w':
                                    if (String.Compare(field_name, 3, "aysFetch", 0, 8, false) == 0)
                                      {
                                        switch (field_name[11])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 12, "urrentConditionsData", 0, 20, false) == 0) && (field_name.Length == 32))
                                                    return fieldGeneratorAlwaysFetchCurrentConditionsData;
                                                break;
                                            case 'H':
                                                if ((String.Compare(field_name, 12, "ourlyForecastData", 0, 17, false) == 0) && (field_name.Length == 29))
                                                    return fieldGeneratorAlwaysFetchHourlyForecastData;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'r':
                            if ((String.Compare(field_name, 2, "rivalTime", 0, 9, false) == 0) && (field_name.Length == 11))
                                return fieldGeneratorArrivalTime;
                            break;
                        case 'u':
                            if ((String.Compare(field_name, 2, "toNaviAPIPlacesWildcardPOINameUseWebQueryMode", 0, 45, false) == 0) && (field_name.Length == 47))
                                return fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode;
                            break;
                        case 'v':
                            if ((String.Compare(field_name, 2, "antiMachineState", 0, 16, false) == 0) && (field_name.Length == 18))
                                return fieldGeneratorAvantiMachineState;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'B':
                    switch (field_name[1])
                      {
                        case 'i':
                            if ((String.Compare(field_name, 2, "ngAdExtensions", 0, 14, false) == 0) && (field_name.Length == 16))
                                return fieldGeneratorBingAdExtensions;
                            break;
                        case 'u':
                            switch (field_name[2])
                              {
                                case 'n':
                                    if (String.Compare(field_name, 3, "n", 0, 1, false) == 0)
                                      {
                                        switch (field_name[4])
                                          {
                                            case 'I':
                                                if ((String.Compare(field_name, 5, "sConfirmationRequired", 0, 21, false) == 0) && (field_name.Length == 26))
                                                    return fieldGeneratorBunnIsConfirmationRequired;
                                                break;
                                            case 'M':
                                                if ((String.Compare(field_name, 5, "achineState", 0, 11, false) == 0) && (field_name.Length == 16))
                                                    return fieldGeneratorBunnMachineState;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 's':
                                    if (String.Compare(field_name, 3, "inessInformation", 0, 16, false) == 0)
                                      {
                                        switch (field_name[19])
                                          {
                                            case 'D':
                                                if ((String.Compare(field_name, 20, "ataStoreId", 0, 10, false) == 0) && (field_name.Length == 30))
                                                    return fieldGeneratorBusinessInformationDataStoreId;
                                                break;
                                            case 'U':
                                                if ((String.Compare(field_name, 20, "ploadData", 0, 9, false) == 0) && (field_name.Length == 29))
                                                    return fieldGeneratorBusinessInformationUploadData;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'C':
                    switch (field_name[1])
                      {
                        case 'a':
                            switch (field_name[2])
                              {
                                case 'l':
                                    switch (field_name[3])
                                      {
                                        case 'e':
                                            if (String.Compare(field_name, 4, "ndar", 0, 4, false) == 0)
                                              {
                                                switch (field_name[8])
                                                  {
                                                    case 'D':
                                                        if ((String.Compare(field_name, 9, "ataSynchronization", 0, 18, false) == 0) && (field_name.Length == 27))
                                                            return fieldGeneratorCalendarDataSynchronization;
                                                        break;
                                                    case 'E':
                                                        if ((String.Compare(field_name, 9, "vents", 0, 5, false) == 0) && (field_name.Length == 14))
                                                            return fieldGeneratorCalendarEvents;
                                                        break;
                                                    case 'M':
                                                        if ((String.Compare(field_name, 9, "atchingLoosenessLevel", 0, 21, false) == 0) && (field_name.Length == 30))
                                                            return fieldGeneratorCalendarMatchingLoosenessLevel;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if ((String.Compare(field_name, 4, "Permissions", 0, 11, false) == 0) && (field_name.Length == 15))
                                                return fieldGeneratorCallPermissions;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'r':
                                    switch (field_name[3])
                                      {
                                        case 'C':
                                            if (String.Compare(field_name, 4, "ontrolClimate", 0, 13, false) == 0)
                                              {
                                                switch (field_name[17])
                                                  {
                                                    case 'C':
                                                        if ((String.Compare(field_name, 18, "lientConfiguration", 0, 18, false) == 0) && (field_name.Length == 36))
                                                            return fieldGeneratorCarControlClimateClientConfiguration;
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(field_name, 18, "emperatureConfig", 0, 16, false) == 0) && (field_name.Length == 34))
                                                            return fieldGeneratorCarControlClimateTemperatureConfig;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'M':
                                            if (String.Compare(field_name, 4, "anual", 0, 5, false) == 0)
                                              {
                                                switch (field_name[9])
                                                  {
                                                    case 'M':
                                                        if ((String.Compare(field_name, 10, "odel", 0, 4, false) == 0) && (field_name.Length == 14))
                                                            return fieldGeneratorCarManualModel;
                                                        break;
                                                    case 'N':
                                                        if ((String.Compare(field_name, 10, "ormalizedQueryToSet", 0, 19, false) == 0) && (field_name.Length == 29))
                                                            return fieldGeneratorCarManualNormalizedQueryToSet;
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(field_name, 10, "esponseToSet", 0, 12, false) == 0) && (field_name.Length == 22))
                                                            return fieldGeneratorCarManualResponseToSet;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'S':
                                            if ((String.Compare(field_name, 4, "tatus", 0, 5, false) == 0) && (field_name.Length == 9))
                                                return fieldGeneratorCarStatus;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'h':
                            if ((String.Compare(field_name, 2, "argingClientState", 0, 17, false) == 0) && (field_name.Length == 19))
                                return fieldGeneratorChargingClientState;
                            break;
                        case 'i':
                            if ((String.Compare(field_name, 2, "ty", 0, 2, false) == 0) && (field_name.Length == 4))
                                return fieldGeneratorCity;
                            break;
                        case 'l':
                            if (String.Compare(field_name, 2, "ient", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'I':
                                        if ((String.Compare(field_name, 7, "D", 0, 1, false) == 0) && (field_name.Length == 8))
                                            return fieldGeneratorClientID;
                                        break;
                                    case 'L':
                                        if ((String.Compare(field_name, 7, "istMatches", 0, 10, false) == 0) && (field_name.Length == 17))
                                            return fieldGeneratorClientListMatches;
                                        break;
                                    case 'M':
                                        if (String.Compare(field_name, 7, "atches", 0, 6, false) == 0)
                                          {
                                            if (field_name.Length == 13)
                                              {
                                                return fieldGeneratorClientMatches;
                                              }
                                            switch (field_name[13])
                                              {
                                                case 'O':
                                                    if ((String.Compare(field_name, 14, "nly", 0, 3, false) == 0) && (field_name.Length == 17))
                                                        return fieldGeneratorClientMatchesOnly;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        if ((String.Compare(field_name, 7, "tate", 0, 4, false) == 0) && (field_name.Length == 11))
                                            return fieldGeneratorClientState;
                                        break;
                                    case 'V':
                                        if ((String.Compare(field_name, 7, "ersion", 0, 6, false) == 0) && (field_name.Length == 13))
                                            return fieldGeneratorClientVersion;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            switch (field_name[2])
                              {
                                case 'l':
                                    if ((String.Compare(field_name, 3, "lateMusicEntities", 0, 17, false) == 0) && (field_name.Length == 20))
                                        return fieldGeneratorCollateMusicEntities;
                                    break;
                                case 'n':
                                    switch (field_name[3])
                                      {
                                        case 'n':
                                            if ((String.Compare(field_name, 4, "ectedToThirdPartyMusicApp", 0, 25, false) == 0) && (field_name.Length == 29))
                                                return fieldGeneratorConnectedToThirdPartyMusicApp;
                                            break;
                                        case 't':
                                            switch (field_name[4])
                                              {
                                                case 'a':
                                                    if ((String.Compare(field_name, 5, "ctQueryExclusions", 0, 17, false) == 0) && (field_name.Length == 22))
                                                        return fieldGeneratorContactQueryExclusions;
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(field_name, 5, "ollableTrackPlaying", 0, 19, false) == 0) && (field_name.Length == 24))
                                                        return fieldGeneratorControllableTrackPlaying;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if (String.Compare(field_name, 4, "er", 0, 2, false) == 0)
                                              {
                                                switch (field_name[6])
                                                  {
                                                    case 's':
                                                        if ((String.Compare(field_name, 7, "ationState", 0, 10, false) == 0) && (field_name.Length == 17))
                                                            return fieldGeneratorConversationState;
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(field_name, 7, "ToNewInformationNuggets", 0, 23, false) == 0) && (field_name.Length == 30))
                                                            return fieldGeneratorConvertToNewInformationNuggets;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'u':
                                    if ((String.Compare(field_name, 3, "ntry", 0, 4, false) == 0) && (field_name.Length == 7))
                                        return fieldGeneratorCountry;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'u':
                            if (String.Compare(field_name, 2, "stom", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'A':
                                        if (String.Compare(field_name, 7, "SREnhancement", 0, 13, false) == 0)
                                          {
                                            switch (field_name[20])
                                              {
                                                case 'L':
                                                    if ((String.Compare(field_name, 21, "istData", 0, 7, false) == 0) && (field_name.Length == 28))
                                                        return fieldGeneratorCustomASREnhancementListData;
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(field_name, 21, "eadData", 0, 7, false) == 0) && (field_name.Length == 28))
                                                        return fieldGeneratorCustomASREnhancementReadData;
                                                    break;
                                                case 'W':
                                                    switch (field_name[21])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(field_name, 22, "ight", 0, 4, false) == 0) && (field_name.Length == 26))
                                                                return fieldGeneratorCustomASREnhancementWeight;
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(field_name, 22, "iteData", 0, 7, false) == 0) && (field_name.Length == 29))
                                                                return fieldGeneratorCustomASREnhancementWriteData;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        if (String.Compare(field_name, 7, "peechRecognitionPatterns", 0, 24, false) == 0)
                                          {
                                            switch (field_name[31])
                                              {
                                                case 'G':
                                                    if ((String.Compare(field_name, 32, "roupListData", 0, 12, false) == 0) && (field_name.Length == 44))
                                                        return fieldGeneratorCustomSpeechRecognitionPatternsGroupListData;
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(field_name, 32, "eadData", 0, 7, false) == 0) && (field_name.Length == 39))
                                                        return fieldGeneratorCustomSpeechRecognitionPatternsReadData;
                                                    break;
                                                case 'W':
                                                    switch (field_name[32])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(field_name, 33, "ight", 0, 4, false) == 0) && (field_name.Length == 37))
                                                                return fieldGeneratorCustomSpeechRecognitionPatternsWeight;
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(field_name, 33, "iteData", 0, 7, false) == 0) && (field_name.Length == 40))
                                                                return fieldGeneratorCustomSpeechRecognitionPatternsWriteData;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'T':
                                        if ((String.Compare(field_name, 7, "opicIdentificationWriteData", 0, 27, false) == 0) && (field_name.Length == 34))
                                            return fieldGeneratorCustomTopicIdentificationWriteData;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'D':
                    switch (field_name[1])
                      {
                        case 'e':
                            switch (field_name[2])
                              {
                                case 'f':
                                    if ((String.Compare(field_name, 3, "aultTimeFormat24Hours", 0, 21, false) == 0) && (field_name.Length == 24))
                                        return fieldGeneratorDefaultTimeFormat24Hours;
                                    break;
                                case 'l':
                                    if ((String.Compare(field_name, 3, "eteUserMemoryLocation", 0, 21, false) == 0) && (field_name.Length == 24))
                                        return fieldGeneratorDeleteUserMemoryLocation;
                                    break;
                                case 'v':
                                    if (String.Compare(field_name, 3, "iceI", 0, 4, false) == 0)
                                      {
                                        switch (field_name[7])
                                          {
                                            case 'D':
                                                if (field_name.Length == 8)
                                                    return fieldGeneratorDeviceID;
                                                break;
                                            case 'n':
                                                if ((String.Compare(field_name, 8, "fo", 0, 2, false) == 0) && (field_name.Length == 10))
                                                    return fieldGeneratorDeviceInfo;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'i':
                            if (String.Compare(field_name, 2, "s", 0, 1, false) == 0)
                              {
                                switch (field_name[3])
                                  {
                                    case 'a':
                                        switch (field_name[4])
                                          {
                                            case 'b':
                                                if (String.Compare(field_name, 5, "le", 0, 2, false) == 0)
                                                  {
                                                    switch (field_name[7])
                                                      {
                                                        case 'M':
                                                            if (String.Compare(field_name, 8, "usic", 0, 4, false) == 0)
                                                              {
                                                                switch (field_name[12])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(field_name, 13, "layerListPositionSpecification", 0, 30, false) == 0) && (field_name.Length == 43))
                                                                            return fieldGeneratorDisableMusicPlayerListPositionSpecification;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(field_name, 13, "earchListPositionSpecification", 0, 30, false) == 0) && (field_name.Length == 43))
                                                                            return fieldGeneratorDisableMusicSearchListPositionSpecification;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(field_name, 8, "pellCorrection", 0, 14, false) == 0) && (field_name.Length == 22))
                                                                return fieldGeneratorDisableSpellCorrection;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'm':
                                                if ((String.Compare(field_name, 5, "biguateResultsBeforeAction", 0, 26, false) == 0) && (field_name.Length == 31))
                                                    return fieldGeneratorDisambiguateResultsBeforeAction;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'p':
                                        if ((String.Compare(field_name, 4, "layedReminder", 0, 13, false) == 0) && (field_name.Length == 17))
                                            return fieldGeneratorDisplayedReminder;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            if ((String.Compare(field_name, 2, "mains", 0, 5, false) == 0) && (field_name.Length == 7))
                                return fieldGeneratorDomains;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'E':
                    switch (field_name[1])
                      {
                        case 'n':
                            switch (field_name[2])
                              {
                                case 'a':
                                    if (String.Compare(field_name, 3, "ble", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 7, "lientControlInModes", 0, 19, false) == 0) && (field_name.Length == 26))
                                                    return fieldGeneratorEnableClientControlInModes;
                                                break;
                                            case 'L':
                                                if ((String.Compare(field_name, 7, "ocalPlacesQueries", 0, 17, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorEnableLocalPlacesQueries;
                                                break;
                                            case 'M':
                                                if ((String.Compare(field_name, 7, "usicPlayerFavorites", 0, 19, false) == 0) && (field_name.Length == 26))
                                                    return fieldGeneratorEnableMusicPlayerFavorites;
                                                break;
                                            case 'S':
                                                if ((String.Compare(field_name, 7, "quareCustomerInformationPermissions", 0, 35, false) == 0) && (field_name.Length == 42))
                                                    return fieldGeneratorEnableSquareCustomerInformationPermissions;
                                                break;
                                            case 'd':
                                                if (String.Compare(field_name, 7, "Custom", 0, 6, false) == 0)
                                                  {
                                                    switch (field_name[13])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(field_name, 14, "SREnhancementGrammars", 0, 21, false) == 0) && (field_name.Length == 35))
                                                                return fieldGeneratorEnabledCustomASREnhancementGrammars;
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(field_name, 14, "peechRecognitionPatternGroups", 0, 29, false) == 0) && (field_name.Length == 43))
                                                                return fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 't':
                                    if (String.Compare(field_name, 3, "ertainment", 0, 10, false) == 0)
                                      {
                                        switch (field_name[13])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 14, "lientState", 0, 10, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorEntertainmentClientState;
                                                break;
                                            case 'T':
                                                if ((String.Compare(field_name, 14, "itlesUploadData", 0, 15, false) == 0) && (field_name.Length == 29))
                                                    return fieldGeneratorEntertainmentTitlesUploadData;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'x':
                            if (String.Compare(field_name, 2, "clude", 0, 5, false) == 0)
                              {
                                switch (field_name[7])
                                  {
                                    case 'A':
                                        if ((String.Compare(field_name, 8, "llMusicResultsWithoutExplicitContext", 0, 36, false) == 0) && (field_name.Length == 44))
                                            return fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext;
                                        break;
                                    case 'W':
                                        if ((String.Compare(field_name, 8, "ikipediaLowConfidenceResults", 0, 28, false) == 0) && (field_name.Length == 36))
                                            return fieldGeneratorExcludeWikipediaLowConfidenceResults;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'F':
                    switch (field_name[1])
                      {
                        case 'i':
                            switch (field_name[2])
                              {
                                case 'r':
                                    if (String.Compare(field_name, 3, "stPersonSelf", 0, 12, false) == 0)
                                      {
                                        if (field_name.Length == 15)
                                          {
                                            return fieldGeneratorFirstPersonSelf;
                                          }
                                        switch (field_name[15])
                                          {
                                            case 'S':
                                                if ((String.Compare(field_name, 16, "poken", 0, 5, false) == 0) && (field_name.Length == 21))
                                                    return fieldGeneratorFirstPersonSelfSpoken;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 't':
                                    if (String.Compare(field_name, 3, "Bit", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'A':
                                                if ((String.Compare(field_name, 7, "ccessToken", 0, 10, false) == 0) && (field_name.Length == 17))
                                                    return fieldGeneratorFitBitAccessToken;
                                                break;
                                            case 'R':
                                                if ((String.Compare(field_name, 7, "efreshToken", 0, 11, false) == 0) && (field_name.Length == 18))
                                                    return fieldGeneratorFitBitRefreshToken;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'o':
                            if ((String.Compare(field_name, 2, "rceConversationStateTime", 0, 24, false) == 0) && (field_name.Length == 26))
                                return fieldGeneratorForceConversationStateTime;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'G':
                    if (String.Compare(field_name, 1, "et", 0, 2, false) == 0)
                      {
                        switch (field_name[3])
                          {
                            case 'H':
                                if ((String.Compare(field_name, 4, "umaxMediaCloudURL", 0, 17, false) == 0) && (field_name.Length == 21))
                                    return fieldGeneratorGetHumaxMediaCloudURL;
                                break;
                            case 'O':
                                if (String.Compare(field_name, 4, "Auth2Client", 0, 11, false) == 0)
                                  {
                                    switch (field_name[15])
                                      {
                                        case 'I':
                                            if ((String.Compare(field_name, 16, "D", 0, 1, false) == 0) && (field_name.Length == 17))
                                                return fieldGeneratorGetOAuth2ClientID;
                                            break;
                                        case 'S':
                                            if ((String.Compare(field_name, 16, "ecret", 0, 5, false) == 0) && (field_name.Length == 21))
                                                return fieldGeneratorGetOAuth2ClientSecret;
                                            break;
                                        case 'T':
                                            if ((String.Compare(field_name, 16, "oken", 0, 4, false) == 0) && (field_name.Length == 20))
                                                return fieldGeneratorGetOAuth2ClientToken;
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'U':
                                if (String.Compare(field_name, 4, "ber", 0, 3, false) == 0)
                                  {
                                    switch (field_name[7])
                                      {
                                        case 'C':
                                            if ((String.Compare(field_name, 8, "lientId", 0, 7, false) == 0) && (field_name.Length == 15))
                                                return fieldGeneratorGetUberClientId;
                                            break;
                                        case 'S':
                                            if ((String.Compare(field_name, 8, "erverToken", 0, 10, false) == 0) && (field_name.Length == 18))
                                                return fieldGeneratorGetUberServerToken;
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                      }
                    break;
                case 'H':
                    switch (field_name[1])
                      {
                        case 'L':
                            if ((String.Compare(field_name, 2, "SRadius", 0, 7, false) == 0) && (field_name.Length == 9))
                                return fieldGeneratorHLSRadius;
                            break;
                        case 'a':
                            switch (field_name[2])
                              {
                                case 'r':
                                    if (String.Compare(field_name, 3, "man", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'D':
                                                if ((String.Compare(field_name, 7, "eviceRegistration", 0, 17, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorHarmanDeviceRegistration;
                                                break;
                                            case 'H':
                                                if (String.Compare(field_name, 7, "ospitality", 0, 10, false) == 0)
                                                  {
                                                    switch (field_name[17])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(field_name, 18, "mxControllerHttpRequest", 0, 23, false) == 0) && (field_name.Length == 41))
                                                                return fieldGeneratorHarmanHospitalityAmxControllerHttpRequest;
                                                            break;
                                                        case 'M':
                                                            if ((String.Compare(field_name, 18, "eetingInformation", 0, 17, false) == 0) && (field_name.Length == 35))
                                                                return fieldGeneratorHarmanHospitalityMeetingInformation;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(field_name, 18, "ropertyInformation", 0, 18, false) == 0) && (field_name.Length == 36))
                                                                return fieldGeneratorHarmanHospitalityPropertyInformation;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                if ((String.Compare(field_name, 7, "ropertyRegistration", 0, 19, false) == 0) && (field_name.Length == 26))
                                                    return fieldGeneratorHarmanPropertyRegistration;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 's':
                                    if ((String.Compare(field_name, 3, "TollsOnThisRoad", 0, 15, false) == 0) && (field_name.Length == 18))
                                        return fieldGeneratorHasTollsOnThisRoad;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'e':
                            if ((String.Compare(field_name, 2, "reApiPlacesFallback", 0, 19, false) == 0) && (field_name.Length == 21))
                                return fieldGeneratorHereApiPlacesFallback;
                            break;
                        case 'o':
                            switch (field_name[2])
                              {
                                case 'm':
                                    if ((String.Compare(field_name, 3, "eAutomationDomainSettings", 0, 25, false) == 0) && (field_name.Length == 28))
                                        return fieldGeneratorHomeAutomationDomainSettings;
                                    break;
                                case 'n':
                                    if (String.Compare(field_name, 3, "da", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'A':
                                                if (String.Compare(field_name, 6, "gent", 0, 4, false) == 0)
                                                  {
                                                    switch (field_name[10])
                                                      {
                                                        case '2':
                                                            if ((String.Compare(field_name, 11, "0MParameters", 0, 12, false) == 0) && (field_name.Length == 23))
                                                                return fieldGeneratorHondaAgent20MParameters;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(field_name, 11, "arameters", 0, 9, false) == 0) && (field_name.Length == 20))
                                                                return fieldGeneratorHondaAgentParameters;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if ((String.Compare(field_name, 6, "arManualParameters", 0, 18, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorHondaCarManualParameters;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'u':
                            switch (field_name[2])
                              {
                                case 'e':
                                    if ((String.Compare(field_name, 3, "DeviceRegistration", 0, 18, false) == 0) && (field_name.Length == 21))
                                        return fieldGeneratorHueDeviceRegistration;
                                    break;
                                case 'm':
                                    if (String.Compare(field_name, 3, "ax", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'H':
                                                if ((String.Compare(field_name, 6, "omeAutomationCredentials", 0, 24, false) == 0) && (field_name.Length == 30))
                                                    return fieldGeneratorHumaxHomeAutomationCredentials;
                                                break;
                                            case 'M':
                                                if ((String.Compare(field_name, 6, "ediaCloudURL", 0, 12, false) == 0) && (field_name.Length == 18))
                                                    return fieldGeneratorHumaxMediaCloudURL;
                                                break;
                                            case 'S':
                                                if ((String.Compare(field_name, 6, "martTVClientState", 0, 17, false) == 0) && (field_name.Length == 23))
                                                    return fieldGeneratorHumaxSmartTVClientState;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'I':
                    switch (field_name[1])
                      {
                        case 'H':
                            if (String.Compare(field_name, 2, "eart", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'M':
                                        if ((String.Compare(field_name, 7, "ediaDeviceIdentifiers", 0, 21, false) == 0) && (field_name.Length == 28))
                                            return fieldGeneratorIHeartMediaDeviceIdentifiers;
                                        break;
                                    case 'R':
                                        if (String.Compare(field_name, 7, "adioPrefer", 0, 10, false) == 0)
                                          {
                                            switch (field_name[17])
                                              {
                                                case 'A':
                                                    if ((String.Compare(field_name, 18, "rtistStations", 0, 13, false) == 0) && (field_name.Length == 31))
                                                        return fieldGeneratorIHeartRadioPreferArtistStations;
                                                    break;
                                                case 'G':
                                                    if ((String.Compare(field_name, 18, "enericRadioMatches", 0, 18, false) == 0) && (field_name.Length == 36))
                                                        return fieldGeneratorIHeartRadioPreferGenericRadioMatches;
                                                    break;
                                                case 'T':
                                                    if ((String.Compare(field_name, 18, "errestrialRadioMatches", 0, 22, false) == 0) && (field_name.Length == 40))
                                                        return fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'f':
                            if ((String.Compare(field_name, 2, "tttKeyItem", 0, 10, false) == 0) && (field_name.Length == 12))
                                return fieldGeneratorIftttKeyItem;
                            break;
                        case 'm':
                            if (String.Compare(field_name, 2, "ageSearch", 0, 9, false) == 0)
                              {
                                switch (field_name[11])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 12, "onfiguration", 0, 12, false) == 0) && (field_name.Length == 24))
                                            return fieldGeneratorImageSearchConfiguration;
                                        break;
                                    case 'R':
                                        if ((String.Compare(field_name, 12, "equestInfoProviders", 0, 19, false) == 0) && (field_name.Length == 31))
                                            return fieldGeneratorImageSearchRequestInfoProviders;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'n':
                            switch (field_name[2])
                              {
                                case 'c':
                                    switch (field_name[3])
                                      {
                                        case 'l':
                                            if ((String.Compare(field_name, 4, "udeAllMusicResultsWithoutContext", 0, 32, false) == 0) && (field_name.Length == 36))
                                                return fieldGeneratorIncludeAllMusicResultsWithoutContext;
                                            break;
                                        case 'o':
                                            if ((String.Compare(field_name, 4, "mingCallPending", 0, 15, false) == 0) && (field_name.Length == 19))
                                                return fieldGeneratorIncomingCallPending;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'i':
                                    if ((String.Compare(field_name, 3, "tialSecondsOfAudioToIgnore", 0, 26, false) == 0) && (field_name.Length == 29))
                                        return fieldGeneratorInitialSecondsOfAudioToIgnore;
                                    break;
                                case 'p':
                                    if (String.Compare(field_name, 3, "ut", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'L':
                                                if (String.Compare(field_name, 6, "anguage", 0, 7, false) == 0)
                                                  {
                                                    switch (field_name[13])
                                                      {
                                                        case 'E':
                                                            if ((String.Compare(field_name, 14, "nglishName", 0, 10, false) == 0) && (field_name.Length == 24))
                                                                return fieldGeneratorInputLanguageEnglishName;
                                                            break;
                                                        case 'I':
                                                            if ((String.Compare(field_name, 14, "ETFTag", 0, 6, false) == 0) && (field_name.Length == 20))
                                                                return fieldGeneratorInputLanguageIETFTag;
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(field_name, 14, "ativeName", 0, 9, false) == 0) && (field_name.Length == 23))
                                                                return fieldGeneratorInputLanguageNativeName;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'O':
                                                if (String.Compare(field_name, 6, "verride", 0, 7, false) == 0)
                                                  {
                                                    switch (field_name[13])
                                                      {
                                                        case 'D':
                                                            if ((String.Compare(field_name, 14, "eleteFunction", 0, 13, false) == 0) && (field_name.Length == 27))
                                                                return fieldGeneratorInputOverrideDeleteFunction;
                                                            break;
                                                        case 'F':
                                                            if (String.Compare(field_name, 14, "unction", 0, 7, false) == 0)
                                                              {
                                                                if (field_name.Length == 21)
                                                                  {
                                                                    return fieldGeneratorInputOverrideFunction;
                                                                  }
                                                                switch (field_name[21])
                                                                  {
                                                                    case 'L':
                                                                        if ((String.Compare(field_name, 22, "anguage", 0, 7, false) == 0) && (field_name.Length == 29))
                                                                            return fieldGeneratorInputOverrideFunctionLanguage;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(field_name, 22, "ource", 0, 5, false) == 0) && (field_name.Length == 27))
                                                                            return fieldGeneratorInputOverrideFunctionSource;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(field_name, 14, "eadFunction", 0, 11, false) == 0) && (field_name.Length == 25))
                                                                return fieldGeneratorInputOverrideReadFunction;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 't':
                                    if (String.Compare(field_name, 3, "ent", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'O':
                                                if ((String.Compare(field_name, 7, "nly", 0, 3, false) == 0) && (field_name.Length == 10))
                                                    return fieldGeneratorIntentOnly;
                                                break;
                                            case 'T':
                                                if ((String.Compare(field_name, 7, "oExecute", 0, 8, false) == 0) && (field_name.Length == 15))
                                                    return fieldGeneratorIntentToExecute;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'K':
                    if ((String.Compare(field_name, 1, "uriInfo", 0, 7, false) == 0) && (field_name.Length == 8))
                        return fieldGeneratorKuriInfo;
                    break;
                case 'L':
                    switch (field_name[1])
                      {
                        case 'a':
                            if ((String.Compare(field_name, 2, "titude", 0, 6, false) == 0) && (field_name.Length == 8))
                                return fieldGeneratorLatitude;
                            break;
                        case 'o':
                            switch (field_name[2])
                              {
                                case 'c':
                                    if (String.Compare(field_name, 3, "al", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'P':
                                                if ((String.Compare(field_name, 6, "lacesSettings", 0, 13, false) == 0) && (field_name.Length == 19))
                                                    return fieldGeneratorLocalPlacesSettings;
                                                break;
                                            case 'S':
                                                if ((String.Compare(field_name, 6, "earchClientState", 0, 16, false) == 0) && (field_name.Length == 22))
                                                    return fieldGeneratorLocalSearchClientState;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(field_name, 3, "gitude", 0, 6, false) == 0) && (field_name.Length == 9))
                                        return fieldGeneratorLongitude;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'M':
                    switch (field_name[1])
                      {
                        case 'a':
                            switch (field_name[2])
                              {
                                case 'p':
                                    if ((String.Compare(field_name, 3, "ClientControlPageToScroll", 0, 25, false) == 0) && (field_name.Length == 28))
                                        return fieldGeneratorMapClientControlPageToScroll;
                                    break;
                                case 't':
                                    if ((String.Compare(field_name, 3, "chingMutations", 0, 14, false) == 0) && (field_name.Length == 17))
                                        return fieldGeneratorMatchingMutations;
                                    break;
                                case 'x':
                                    if ((String.Compare(field_name, 3, "Results", 0, 7, false) == 0) && (field_name.Length == 10))
                                        return fieldGeneratorMaxResults;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'e':
                            if ((String.Compare(field_name, 2, "ssagingConvertPunctuation", 0, 25, false) == 0) && (field_name.Length == 27))
                                return fieldGeneratorMessagingConvertPunctuation;
                            break;
                        case 'i':
                            if ((String.Compare(field_name, 2, "nResults", 0, 8, false) == 0) && (field_name.Length == 10))
                                return fieldGeneratorMinResults;
                            break;
                        case 'u':
                            switch (field_name[2])
                              {
                                case 'l':
                                    if ((String.Compare(field_name, 3, "tipleChoiceQuizAPIRequest", 0, 25, false) == 0) && (field_name.Length == 28))
                                        return fieldGeneratorMultipleChoiceQuizAPIRequest;
                                    break;
                                case 's':
                                    if (String.Compare(field_name, 3, "ic", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 6, "lientState", 0, 10, false) == 0) && (field_name.Length == 16))
                                                    return fieldGeneratorMusicClientState;
                                                break;
                                            case 'Q':
                                                if (String.Compare(field_name, 6, "ueries", 0, 6, false) == 0)
                                                  {
                                                    switch (field_name[12])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(field_name, 13, "llowRawTop", 0, 10, false) == 0) && (field_name.Length == 23))
                                                                return fieldGeneratorMusicQueriesAllowRawTop;
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(field_name, 13, "orceInfoNuggetToPlayCommand", 0, 27, false) == 0) && (field_name.Length == 40))
                                                                return fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'N':
                    switch (field_name[1])
                      {
                        case 'a':
                            switch (field_name[2])
                              {
                                case 'r':
                                    if (String.Compare(field_name, 3, "itaAirportGuide", 0, 15, false) == 0)
                                      {
                                        switch (field_name[18])
                                          {
                                            case 'A':
                                                if ((String.Compare(field_name, 19, "rea", 0, 3, false) == 0) && (field_name.Length == 22))
                                                    return fieldGeneratorNaritaAirportGuideArea;
                                                break;
                                            case 'F':
                                                if ((String.Compare(field_name, 19, "loor", 0, 4, false) == 0) && (field_name.Length == 23))
                                                    return fieldGeneratorNaritaAirportGuideFloor;
                                                break;
                                            case 'T':
                                                if ((String.Compare(field_name, 19, "erminal", 0, 7, false) == 0) && (field_name.Length == 26))
                                                    return fieldGeneratorNaritaAirportGuideTerminal;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'v':
                                    if (String.Compare(field_name, 3, "igation", 0, 7, false) == 0)
                                      {
                                        switch (field_name[10])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 11, "ontrolContext", 0, 13, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorNavigationControlContext;
                                                break;
                                            case 'L':
                                                if ((String.Compare(field_name, 11, "ocationDisambiguation", 0, 21, false) == 0) && (field_name.Length == 32))
                                                    return fieldGeneratorNavigationLocationDisambiguation;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'e':
                            if ((String.Compare(field_name, 2, "wReminder", 0, 9, false) == 0) && (field_name.Length == 11))
                                return fieldGeneratorNewReminder;
                            break;
                        case 'u':
                            if ((String.Compare(field_name, 2, "mberOfVolumeLevels", 0, 18, false) == 0) && (field_name.Length == 20))
                                return fieldGeneratorNumberOfVolumeLevels;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'O':
                    switch (field_name[1])
                      {
                        case 'A':
                            if (String.Compare(field_name, 2, "uth2", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'C':
                                        switch (field_name[7])
                                          {
                                            case 'l':
                                                if (String.Compare(field_name, 8, "ient", 0, 4, false) == 0)
                                                  {
                                                    switch (field_name[12])
                                                      {
                                                        case 'I':
                                                            if ((String.Compare(field_name, 13, "D", 0, 1, false) == 0) && (field_name.Length == 14))
                                                                return fieldGeneratorOAuth2ClientID;
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(field_name, 13, "ecret", 0, 5, false) == 0) && (field_name.Length == 18))
                                                                return fieldGeneratorOAuth2ClientSecret;
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(field_name, 13, "oken", 0, 4, false) == 0) && (field_name.Length == 17))
                                                                return fieldGeneratorOAuth2ClientToken;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(field_name, 8, "deData", 0, 6, false) == 0) && (field_name.Length == 14))
                                                    return fieldGeneratorOAuth2CodeData;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        if ((String.Compare(field_name, 7, "efreshToken", 0, 11, false) == 0) && (field_name.Length == 18))
                                            return fieldGeneratorOAuth2RefreshToken;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'b':
                            if ((String.Compare(field_name, 2, "jectByteCountPrefix", 0, 19, false) == 0) && (field_name.Length == 21))
                                return fieldGeneratorObjectByteCountPrefix;
                            break;
                        case 'r':
                            switch (field_name[2])
                              {
                                case 'd':
                                    if (String.Compare(field_name, 3, "er", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'P':
                                                if ((String.Compare(field_name, 6, "repDuration", 0, 11, false) == 0) && (field_name.Length == 17))
                                                    return fieldGeneratorOrderPrepDuration;
                                                break;
                                            case 'S':
                                                if ((String.Compare(field_name, 6, "ource", 0, 5, false) == 0) && (field_name.Length == 11))
                                                    return fieldGeneratorOrderSource;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'g':
                                    if ((String.Compare(field_name, 3, "anizationalChartRequest", 0, 23, false) == 0) && (field_name.Length == 26))
                                        return fieldGeneratorOrganizationalChartRequest;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'u':
                            if (String.Compare(field_name, 2, "tput", 0, 4, false) == 0)
                              {
                                switch (field_name[6])
                                  {
                                    case 'D':
                                        if ((String.Compare(field_name, 7, "eepIntegrationLattice", 0, 21, false) == 0) && (field_name.Length == 28))
                                            return fieldGeneratorOutputDeepIntegrationLattice;
                                        break;
                                    case 'L':
                                        if (String.Compare(field_name, 7, "a", 0, 1, false) == 0)
                                          {
                                            switch (field_name[8])
                                              {
                                                case 'n':
                                                    if (String.Compare(field_name, 9, "guage", 0, 5, false) == 0)
                                                      {
                                                        switch (field_name[14])
                                                          {
                                                            case 'E':
                                                                if ((String.Compare(field_name, 15, "nglishName", 0, 10, false) == 0) && (field_name.Length == 25))
                                                                    return fieldGeneratorOutputLanguageEnglishName;
                                                                break;
                                                            case 'I':
                                                                if ((String.Compare(field_name, 15, "ETFTag", 0, 6, false) == 0) && (field_name.Length == 21))
                                                                    return fieldGeneratorOutputLanguageIETFTag;
                                                                break;
                                                            case 'N':
                                                                if ((String.Compare(field_name, 15, "ativeName", 0, 9, false) == 0) && (field_name.Length == 24))
                                                                    return fieldGeneratorOutputLanguageNativeName;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(field_name, 9, "ticeSize", 0, 8, false) == 0) && (field_name.Length == 17))
                                                        return fieldGeneratorOutputLatticeSize;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(field_name, 7, "verride", 0, 7, false) == 0)
                                          {
                                            switch (field_name[14])
                                              {
                                                case 'C':
                                                    if (String.Compare(field_name, 15, "ommand", 0, 6, false) == 0)
                                                      {
                                                        switch (field_name[21])
                                                          {
                                                            case 'F':
                                                                if (String.Compare(field_name, 22, "unction", 0, 7, false) == 0)
                                                                  {
                                                                    if (field_name.Length == 29)
                                                                      {
                                                                        return fieldGeneratorOutputOverrideCommandFunction;
                                                                      }
                                                                    switch (field_name[29])
                                                                      {
                                                                        case 'L':
                                                                            if ((String.Compare(field_name, 30, "anguage", 0, 7, false) == 0) && (field_name.Length == 37))
                                                                                return fieldGeneratorOutputOverrideCommandFunctionLanguage;
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(field_name, 30, "ource", 0, 5, false) == 0) && (field_name.Length == 35))
                                                                                return fieldGeneratorOutputOverrideCommandFunctionSource;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'I':
                                                                if ((String.Compare(field_name, 22, "sPreAudioOut", 0, 12, false) == 0) && (field_name.Length == 34))
                                                                    return fieldGeneratorOutputOverrideCommandIsPreAudioOut;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'D':
                                                    if (String.Compare(field_name, 15, "elete", 0, 5, false) == 0)
                                                      {
                                                        switch (field_name[20])
                                                          {
                                                            case 'C':
                                                                if ((String.Compare(field_name, 21, "ommandFunction", 0, 14, false) == 0) && (field_name.Length == 35))
                                                                    return fieldGeneratorOutputOverrideDeleteCommandFunction;
                                                                break;
                                                            case 'I':
                                                                if ((String.Compare(field_name, 21, "nformationNuggetFunction", 0, 24, false) == 0) && (field_name.Length == 45))
                                                                    return fieldGeneratorOutputOverrideDeleteInformationNuggetFunction;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'F':
                                                    if (String.Compare(field_name, 15, "unction", 0, 7, false) == 0)
                                                      {
                                                        if (field_name.Length == 22)
                                                          {
                                                            return fieldGeneratorOutputOverrideFunction;
                                                          }
                                                        switch (field_name[22])
                                                          {
                                                            case 'L':
                                                                if ((String.Compare(field_name, 23, "anguage", 0, 7, false) == 0) && (field_name.Length == 30))
                                                                    return fieldGeneratorOutputOverrideFunctionLanguage;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(field_name, 23, "ource", 0, 5, false) == 0) && (field_name.Length == 28))
                                                                    return fieldGeneratorOutputOverrideFunctionSource;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'I':
                                                    if (String.Compare(field_name, 15, "nformationNuggetFunction", 0, 24, false) == 0)
                                                      {
                                                        if (field_name.Length == 39)
                                                          {
                                                            return fieldGeneratorOutputOverrideInformationNuggetFunction;
                                                          }
                                                        switch (field_name[39])
                                                          {
                                                            case 'L':
                                                                if ((String.Compare(field_name, 40, "anguage", 0, 7, false) == 0) && (field_name.Length == 47))
                                                                    return fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(field_name, 40, "ource", 0, 5, false) == 0) && (field_name.Length == 45))
                                                                    return fieldGeneratorOutputOverrideInformationNuggetFunctionSource;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'K':
                                                    if ((String.Compare(field_name, 15, "ind", 0, 3, false) == 0) && (field_name.Length == 18))
                                                        return fieldGeneratorOutputOverrideKind;
                                                    break;
                                                case 'R':
                                                    if (String.Compare(field_name, 15, "ead", 0, 3, false) == 0)
                                                      {
                                                        switch (field_name[18])
                                                          {
                                                            case 'C':
                                                                if ((String.Compare(field_name, 19, "ommandFunction", 0, 14, false) == 0) && (field_name.Length == 33))
                                                                    return fieldGeneratorOutputOverrideReadCommandFunction;
                                                                break;
                                                            case 'I':
                                                                if ((String.Compare(field_name, 19, "nformationNuggetFunction", 0, 24, false) == 0) && (field_name.Length == 43))
                                                                    return fieldGeneratorOutputOverrideReadInformationNuggetFunction;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        if ((String.Compare(field_name, 7, "LMLattice", 0, 9, false) == 0) && (field_name.Length == 16))
                                            return fieldGeneratorOutputSLMLattice;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'P':
                    switch (field_name[1])
                      {
                        case 'a':
                            switch (field_name[2])
                              {
                                case 'g':
                                    if ((String.Compare(field_name, 3, "ination", 0, 7, false) == 0) && (field_name.Length == 10))
                                        return fieldGeneratorPagination;
                                    break;
                                case 'n':
                                    if (String.Compare(field_name, 3, "doraCustom", 0, 10, false) == 0)
                                      {
                                        switch (field_name[13])
                                          {
                                            case 'C':
                                                if ((String.Compare(field_name, 14, "lientPrompt", 0, 11, false) == 0) && (field_name.Length == 25))
                                                    return fieldGeneratorPandoraCustomClientPrompt;
                                                break;
                                            case 'E':
                                                switch (field_name[14])
                                                  {
                                                    case 'n':
                                                        if (String.Compare(field_name, 15, "able", 0, 4, false) == 0)
                                                          {
                                                            switch (field_name[19])
                                                              {
                                                                case 'C':
                                                                    if ((String.Compare(field_name, 20, "omponentFormat", 0, 14, false) == 0) && (field_name.Length == 34))
                                                                        return fieldGeneratorPandoraCustomEnableComponentFormat;
                                                                    break;
                                                                case 'D':
                                                                    if ((String.Compare(field_name, 20, "omain", 0, 5, false) == 0) && (field_name.Length == 25))
                                                                        return fieldGeneratorPandoraCustomEnableDomain;
                                                                    break;
                                                                case 'E':
                                                                    if ((String.Compare(field_name, 20, "xclusionInTarzanMode", 0, 20, false) == 0) && (field_name.Length == 40))
                                                                        return fieldGeneratorPandoraCustomEnableExclusionInTarzanMode;
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(field_name, 20, "nferredPlay", 0, 11, false) == 0)
                                                                      {
                                                                        if (field_name.Length == 31)
                                                                          {
                                                                            return fieldGeneratorPandoraCustomEnableInferredPlay;
                                                                          }
                                                                        switch (field_name[31])
                                                                          {
                                                                            case 'F':
                                                                                if (String.Compare(field_name, 32, "or", 0, 2, false) == 0)
                                                                                  {
                                                                                    switch (field_name[34])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(field_name, 35, "opularEntitiesInExclusionList", 0, 29, false) == 0) && (field_name.Length == 64))
                                                                                                return fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList;
                                                                                            break;
                                                                                        case 'U':
                                                                                            if ((String.Compare(field_name, 35, "npopularEntitiesWithoutKeywords", 0, 31, false) == 0) && (field_name.Length == 66))
                                                                                                return fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(field_name, 20, "ongJSONFallback", 0, 15, false) == 0) && (field_name.Length == 35))
                                                                        return fieldGeneratorPandoraCustomEnableLongJSONFallback;
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(field_name, 20, "odcastMatches", 0, 13, false) == 0) && (field_name.Length == 33))
                                                                        return fieldGeneratorPandoraCustomEnablePodcastMatches;
                                                                    break;
                                                                case 'U':
                                                                    if ((String.Compare(field_name, 20, "serDataQueries", 0, 14, false) == 0) && (field_name.Length == 34))
                                                                        return fieldGeneratorPandoraCustomEnableUserDataQueries;
                                                                    break;
                                                                case 'W':
                                                                    if (String.Compare(field_name, 20, "ildcardMatches", 0, 14, false) == 0)
                                                                      {
                                                                        if (field_name.Length == 34)
                                                                          {
                                                                            return fieldGeneratorPandoraCustomEnableWildcardMatches;
                                                                          }
                                                                        switch (field_name[34])
                                                                          {
                                                                            case 'O':
                                                                                if ((String.Compare(field_name, 35, "nlyAsFallback", 0, 13, false) == 0) && (field_name.Length == 48))
                                                                                    return fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'x':
                                                        if ((String.Compare(field_name, 15, "tendedStationModeData", 0, 21, false) == 0) && (field_name.Length == 36))
                                                            return fieldGeneratorPandoraCustomExtendedStationModeData;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'R':
                                                if ((String.Compare(field_name, 14, "apidIngestionData", 0, 17, false) == 0) && (field_name.Length == 31))
                                                    return fieldGeneratorPandoraCustomRapidIngestionData;
                                                break;
                                            case 'U':
                                                if ((String.Compare(field_name, 14, "serData", 0, 7, false) == 0) && (field_name.Length == 21))
                                                    return fieldGeneratorPandoraCustomUserData;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'r':
                                    switch (field_name[3])
                                      {
                                        case 'k':
                                            if ((String.Compare(field_name, 4, "ingClientState", 0, 14, false) == 0) && (field_name.Length == 18))
                                                return fieldGeneratorParkingClientState;
                                            break;
                                        case 't':
                                            if ((String.Compare(field_name, 4, "ialTranscriptsDesired", 0, 21, false) == 0) && (field_name.Length == 25))
                                                return fieldGeneratorPartialTranscriptsDesired;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'y':
                                    if (String.Compare(field_name, 3, "mentsPredetermined", 0, 18, false) == 0)
                                      {
                                        switch (field_name[21])
                                          {
                                            case 'P':
                                                if ((String.Compare(field_name, 22, "aymentMethod", 0, 12, false) == 0) && (field_name.Length == 34))
                                                    return fieldGeneratorPaymentsPredeterminedPaymentMethod;
                                                break;
                                            case 'S':
                                                if ((String.Compare(field_name, 22, "MSNumber", 0, 8, false) == 0) && (field_name.Length == 30))
                                                    return fieldGeneratorPaymentsPredeterminedSMSNumber;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'e':
                            if ((String.Compare(field_name, 2, "pperEnabled", 0, 11, false) == 0) && (field_name.Length == 13))
                                return fieldGeneratorPepperEnabled;
                            break;
                        case 'h':
                            if (String.Compare(field_name, 2, "one", 0, 3, false) == 0)
                              {
                                switch (field_name[5])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 6, "ommandConfiguration", 0, 19, false) == 0) && (field_name.Length == 25))
                                            return fieldGeneratorPhoneCommandConfiguration;
                                        break;
                                    case 'D':
                                        if ((String.Compare(field_name, 6, "isambiguationOmitList", 0, 21, false) == 0) && (field_name.Length == 27))
                                            return fieldGeneratorPhoneDisambiguationOmitList;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            if (String.Compare(field_name, 2, "sition", 0, 6, false) == 0)
                              {
                                switch (field_name[8])
                                  {
                                    case 'H':
                                        if ((String.Compare(field_name, 9, "orizontalAccuracy", 0, 17, false) == 0) && (field_name.Length == 26))
                                            return fieldGeneratorPositionHorizontalAccuracy;
                                        break;
                                    case 'T':
                                        if ((String.Compare(field_name, 9, "ime", 0, 3, false) == 0) && (field_name.Length == 12))
                                            return fieldGeneratorPositionTime;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'r':
                            switch (field_name[2])
                              {
                                case 'e':
                                    if ((String.Compare(field_name, 3, "ferredImageSize", 0, 15, false) == 0) && (field_name.Length == 18))
                                        return fieldGeneratorPreferredImageSize;
                                    break;
                                case 'o':
                                    if ((String.Compare(field_name, 3, "fanityFilter", 0, 12, false) == 0) && (field_name.Length == 15))
                                        return fieldGeneratorProfanityFilter;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'R':
                    switch (field_name[1])
                      {
                        case 'a':
                            if (String.Compare(field_name, 2, "dioControl", 0, 10, false) == 0)
                              {
                                switch (field_name[12])
                                  {
                                    case 'A':
                                        if ((String.Compare(field_name, 13, "vailableAudioSources", 0, 20, false) == 0) && (field_name.Length == 33))
                                            return fieldGeneratorRadioControlAvailableAudioSources;
                                        break;
                                    case 'O':
                                        if (String.Compare(field_name, 13, "ther", 0, 4, false) == 0)
                                          {
                                            switch (field_name[17])
                                              {
                                                case 'A':
                                                    if ((String.Compare(field_name, 18, "MBands", 0, 6, false) == 0) && (field_name.Length == 24))
                                                        return fieldGeneratorRadioControlOtherAMBands;
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(field_name, 18, "MBands", 0, 6, false) == 0) && (field_name.Length == 24))
                                                        return fieldGeneratorRadioControlOtherFMBands;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'R':
                                        if (String.Compare(field_name, 13, "ecognizeNorthAmerican", 0, 21, false) == 0)
                                          {
                                            switch (field_name[34])
                                              {
                                                case 'A':
                                                    if ((String.Compare(field_name, 35, "MBand", 0, 5, false) == 0) && (field_name.Length == 40))
                                                        return fieldGeneratorRadioControlRecognizeNorthAmericanAMBand;
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(field_name, 35, "MBand", 0, 5, false) == 0) && (field_name.Length == 40))
                                                        return fieldGeneratorRadioControlRecognizeNorthAmericanFMBand;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'T':
                                        if ((String.Compare(field_name, 13, "unableStations", 0, 14, false) == 0) && (field_name.Length == 27))
                                            return fieldGeneratorRadioControlTunableStations;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'e':
                            switch (field_name[2])
                              {
                                case 'a':
                                    if ((String.Compare(field_name, 3, "dSpeakerVoiceParameters", 0, 23, false) == 0) && (field_name.Length == 26))
                                        return fieldGeneratorReadSpeakerVoiceParameters;
                                    break;
                                case 'c':
                                    if ((String.Compare(field_name, 3, "ipeParameters", 0, 13, false) == 0) && (field_name.Length == 16))
                                        return fieldGeneratorRecipeParameters;
                                    break;
                                case 'g':
                                    if ((String.Compare(field_name, 3, "ionalPhoneNumberConfiguration", 0, 29, false) == 0) && (field_name.Length == 32))
                                        return fieldGeneratorRegionalPhoneNumberConfiguration;
                                    break;
                                case 'm':
                                    switch (field_name[3])
                                      {
                                        case 'a':
                                            if (String.Compare(field_name, 4, "ining", 0, 5, false) == 0)
                                              {
                                                switch (field_name[9])
                                                  {
                                                    case 'D':
                                                        if ((String.Compare(field_name, 10, "istance", 0, 7, false) == 0) && (field_name.Length == 17))
                                                            return fieldGeneratorRemainingDistance;
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(field_name, 10, "ravelTime", 0, 9, false) == 0) && (field_name.Length == 19))
                                                            return fieldGeneratorRemainingTravelTime;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'i':
                                            if ((String.Compare(field_name, 4, "nders", 0, 5, false) == 0) && (field_name.Length == 9))
                                                return fieldGeneratorReminders;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'q':
                                    if ((String.Compare(field_name, 3, "uestID", 0, 6, false) == 0) && (field_name.Length == 9))
                                        return fieldGeneratorRequestID;
                                    break;
                                case 's':
                                    switch (field_name[3])
                                      {
                                        case 'p':
                                            if (String.Compare(field_name, 4, "onse", 0, 4, false) == 0)
                                              {
                                                switch (field_name[8])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(field_name, 9, "udio", 0, 4, false) == 0)
                                                          {
                                                            switch (field_name[13])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(field_name, 14, "cceptedEncodings", 0, 16, false) == 0) && (field_name.Length == 30))
                                                                        return fieldGeneratorResponseAudioAcceptedEncodings;
                                                                    break;
                                                                case 'S':
                                                                    if ((String.Compare(field_name, 14, "hortOrLong", 0, 10, false) == 0) && (field_name.Length == 24))
                                                                        return fieldGeneratorResponseAudioShortOrLong;
                                                                    break;
                                                                case 'V':
                                                                    if ((String.Compare(field_name, 14, "oice", 0, 4, false) == 0) && (field_name.Length == 18))
                                                                        return fieldGeneratorResponseAudioVoice;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(field_name, 9, "anking", 0, 6, false) == 0) && (field_name.Length == 15))
                                                            return fieldGeneratorResponseRanking;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if (String.Compare(field_name, 4, "aurant", 0, 6, false) == 0)
                                              {
                                                switch (field_name[10])
                                                  {
                                                    case 'M':
                                                        if (String.Compare(field_name, 11, "enu", 0, 3, false) == 0)
                                                          {
                                                            switch (field_name[14])
                                                              {
                                                                case 'M':
                                                                    if ((String.Compare(field_name, 15, "etadata", 0, 7, false) == 0) && (field_name.Length == 22))
                                                                        return fieldGeneratorRestaurantMenuMetadata;
                                                                    break;
                                                                case 'O':
                                                                    if ((String.Compare(field_name, 15, "bject", 0, 5, false) == 0) && (field_name.Length == 20))
                                                                        return fieldGeneratorRestaurantMenuObject;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'O':
                                                        if (String.Compare(field_name, 11, "rdering", 0, 7, false) == 0)
                                                          {
                                                            switch (field_name[18])
                                                              {
                                                                case 'M':
                                                                    if ((String.Compare(field_name, 19, "enuData", 0, 7, false) == 0) && (field_name.Length == 26))
                                                                        return fieldGeneratorRestaurantOrderingMenuData;
                                                                    break;
                                                                case 'Q':
                                                                    if (String.Compare(field_name, 19, "ueries", 0, 6, false) == 0)
                                                                      {
                                                                        switch (field_name[25])
                                                                          {
                                                                            case 'M':
                                                                                switch (field_name[26])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(field_name, 27, "ximumPromptRepetitionUn", 0, 23, false) == 0)
                                                                                          {
                                                                                            switch (field_name[50])
                                                                                              {
                                                                                                case 'k':
                                                                                                    if ((String.Compare(field_name, 51, "nownIntent", 0, 10, false) == 0) && (field_name.Length == 61))
                                                                                                        return fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent;
                                                                                                    break;
                                                                                                case 'r':
                                                                                                    if ((String.Compare(field_name, 51, "elatedIntent", 0, 12, false) == 0) && (field_name.Length == 63))
                                                                                                        return fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(field_name, 27, "nuDataStoreID", 0, 13, false) == 0) && (field_name.Length == 40))
                                                                                            return fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(field_name, 26, "equestData", 0, 10, false) == 0) && (field_name.Length == 36))
                                                                                    return fieldGeneratorRestaurantOrderingQueriesRequestData;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(field_name, 4, "lt", 0, 2, false) == 0)
                                              {
                                                switch (field_name[6])
                                                  {
                                                    case 'U':
                                                        if ((String.Compare(field_name, 7, "pdateAllowed", 0, 12, false) == 0) && (field_name.Length == 19))
                                                            return fieldGeneratorResultUpdateAllowed;
                                                        break;
                                                    case 'V':
                                                        if ((String.Compare(field_name, 7, "ersionAccepted", 0, 14, false) == 0) && (field_name.Length == 21))
                                                            return fieldGeneratorResultVersionAccepted;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    if (String.Compare(field_name, 3, "urn", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'I':
                                                if ((String.Compare(field_name, 7, "nformationNuggetsForMusicSearch", 0, 31, false) == 0) && (field_name.Length == 38))
                                                    return fieldGeneratorReturnInformationNuggetsForMusicSearch;
                                                break;
                                            case 'R':
                                                if ((String.Compare(field_name, 7, "esponseAudioAsURL", 0, 17, false) == 0) && (field_name.Length == 24))
                                                    return fieldGeneratorReturnResponseAudioAsURL;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'o':
                            switch (field_name[2])
                              {
                                case 'b':
                                    if ((String.Compare(field_name, 3, "otInfo", 0, 6, false) == 0) && (field_name.Length == 9))
                                        return fieldGeneratorRobotInfo;
                                    break;
                                case 'u':
                                    if (String.Compare(field_name, 3, "te", 0, 2, false) == 0)
                                      {
                                        switch (field_name[5])
                                          {
                                            case 'I':
                                                if ((String.Compare(field_name, 6, "nformation", 0, 10, false) == 0) && (field_name.Length == 16))
                                                    return fieldGeneratorRouteInformation;
                                                break;
                                            case 'P':
                                                if ((String.Compare(field_name, 6, "oints", 0, 5, false) == 0) && (field_name.Length == 11))
                                                    return fieldGeneratorRoutePoints;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'S':
                    switch (field_name[1])
                      {
                        case 'D':
                            if (String.Compare(field_name, 2, "K", 0, 1, false) == 0)
                              {
                                if (field_name.Length == 3)
                                  {
                                    return fieldGeneratorSDK;
                                  }
                                switch (field_name[3])
                                  {
                                    case 'I':
                                        if ((String.Compare(field_name, 4, "nfo", 0, 3, false) == 0) && (field_name.Length == 7))
                                            return fieldGeneratorSDKInfo;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'e':
                            switch (field_name[2])
                              {
                                case 'c':
                                    if (String.Compare(field_name, 3, "ondPersonSelf", 0, 13, false) == 0)
                                      {
                                        if (field_name.Length == 16)
                                          {
                                            return fieldGeneratorSecondPersonSelf;
                                          }
                                        switch (field_name[16])
                                          {
                                            case 'S':
                                                if ((String.Compare(field_name, 17, "poken", 0, 5, false) == 0) && (field_name.Length == 22))
                                                    return fieldGeneratorSecondPersonSelfSpoken;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'n':
                                    if (String.Compare(field_name, 3, "d", 0, 1, false) == 0)
                                      {
                                        switch (field_name[4])
                                          {
                                            case 'B':
                                                if ((String.Compare(field_name, 5, "ack", 0, 3, false) == 0) && (field_name.Length == 8))
                                                    return fieldGeneratorSendBack;
                                                break;
                                            case 'F':
                                                if ((String.Compare(field_name, 5, "ullWeatherForecastData", 0, 22, false) == 0) && (field_name.Length == 27))
                                                    return fieldGeneratorSendFullWeatherForecastData;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'r':
                                    if ((String.Compare(field_name, 3, "verDeterminesEndOfAudio", 0, 23, false) == 0) && (field_name.Length == 26))
                                        return fieldGeneratorServerDeterminesEndOfAudio;
                                    break;
                                case 's':
                                    if ((String.Compare(field_name, 3, "sionID", 0, 6, false) == 0) && (field_name.Length == 9))
                                        return fieldGeneratorSessionID;
                                    break;
                                case 't':
                                    if ((String.Compare(field_name, 3, "UserMemoryLocation", 0, 18, false) == 0) && (field_name.Length == 21))
                                        return fieldGeneratorSetUserMemoryLocation;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'i':
                            if (String.Compare(field_name, 2, "riusXMEnable", 0, 12, false) == 0)
                              {
                                switch (field_name[14])
                                  {
                                    case 'D':
                                        if ((String.Compare(field_name, 15, "omain", 0, 5, false) == 0) && (field_name.Length == 20))
                                            return fieldGeneratorSiriusXMEnableDomain;
                                        break;
                                    case 'G':
                                        if ((String.Compare(field_name, 15, "enericChannelMatches", 0, 20, false) == 0) && (field_name.Length == 35))
                                            return fieldGeneratorSiriusXMEnableGenericChannelMatches;
                                        break;
                                    case 'W':
                                        if ((String.Compare(field_name, 15, "ildcardMatches", 0, 14, false) == 0) && (field_name.Length == 29))
                                            return fieldGeneratorSiriusXMEnableWildcardMatches;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'm':
                            if (String.Compare(field_name, 2, "artTV", 0, 5, false) == 0)
                              {
                                switch (field_name[7])
                                  {
                                    case 'O':
                                        if ((String.Compare(field_name, 8, "nScreenItems", 0, 12, false) == 0) && (field_name.Length == 20))
                                            return fieldGeneratorSmartTVOnScreenItems;
                                        break;
                                    case 'U':
                                        if ((String.Compare(field_name, 8, "serCustomInputSource", 0, 20, false) == 0) && (field_name.Length == 28))
                                            return fieldGeneratorSmartTVUserCustomInputSource;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            if ((String.Compare(field_name, 2, "undHoundTTSParameters", 0, 21, false) == 0) && (field_name.Length == 23))
                                return fieldGeneratorSoundHoundTTSParameters;
                            break;
                        case 'p':
                            switch (field_name[2])
                              {
                                case 'e':
                                    if ((String.Compare(field_name, 3, "edLimitOnThisRoad", 0, 17, false) == 0) && (field_name.Length == 20))
                                        return fieldGeneratorSpeedLimitOnThisRoad;
                                    break;
                                case 'o':
                                    switch (field_name[3])
                                      {
                                        case 'r':
                                            if ((String.Compare(field_name, 4, "tsLeagueControl", 0, 15, false) == 0) && (field_name.Length == 19))
                                                return fieldGeneratorSportsLeagueControl;
                                            break;
                                        case 't':
                                            if ((String.Compare(field_name, 4, "ifyPlaylistEnableWildcardMatches", 0, 32, false) == 0) && (field_name.Length == 36))
                                                return fieldGeneratorSpotifyPlaylistEnableWildcardMatches;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'q':
                            if (String.Compare(field_name, 2, "uare", 0, 4, false) == 0)
                              {
                                if (field_name.Length == 6)
                                  {
                                    return fieldGeneratorSquare;
                                  }
                                switch (field_name[6])
                                  {
                                    case 'E':
                                        if ((String.Compare(field_name, 7, "nvironment", 0, 10, false) == 0) && (field_name.Length == 17))
                                            return fieldGeneratorSquareEnvironment;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 't':
                            switch (field_name[2])
                              {
                                case 'a':
                                    if ((String.Compare(field_name, 3, "te", 0, 2, false) == 0) && (field_name.Length == 5))
                                        return fieldGeneratorState;
                                    break;
                                case 'o':
                                    if (String.Compare(field_name, 3, "red", 0, 3, false) == 0)
                                      {
                                        switch (field_name[6])
                                          {
                                            case 'A':
                                                if (String.Compare(field_name, 7, "lwaysMatch", 0, 10, false) == 0)
                                                  {
                                                    switch (field_name[17])
                                                      {
                                                        case 'R':
                                                            if ((String.Compare(field_name, 18, "eadData", 0, 7, false) == 0) && (field_name.Length == 25))
                                                                return fieldGeneratorStoredAlwaysMatchReadData;
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(field_name, 18, "riteData", 0, 8, false) == 0) && (field_name.Length == 26))
                                                                return fieldGeneratorStoredAlwaysMatchWriteData;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'G':
                                                if (String.Compare(field_name, 7, "lobalPagesTo", 0, 12, false) == 0)
                                                  {
                                                    switch (field_name[19])
                                                      {
                                                        case 'M':
                                                            if ((String.Compare(field_name, 20, "atch", 0, 4, false) == 0) && (field_name.Length == 24))
                                                                return fieldGeneratorStoredGlobalPagesToMatch;
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(field_name, 20, "otMatch", 0, 7, false) == 0) && (field_name.Length == 27))
                                                                return fieldGeneratorStoredGlobalPagesToNotMatch;
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(field_name, 20, "etO", 0, 3, false) == 0)
                                                              {
                                                                switch (field_name[23])
                                                                  {
                                                                    case 'f':
                                                                        if ((String.Compare(field_name, 24, "fByDefault", 0, 10, false) == 0) && (field_name.Length == 34))
                                                                            return fieldGeneratorStoredGlobalPagesToSetOffByDefault;
                                                                        break;
                                                                    case 'n':
                                                                        if ((String.Compare(field_name, 24, "ByDefault", 0, 9, false) == 0) && (field_name.Length == 33))
                                                                            return fieldGeneratorStoredGlobalPagesToSetOnByDefault;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                switch (field_name[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(field_name, 8, "geMatch", 0, 7, false) == 0)
                                                          {
                                                            switch (field_name[15])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(field_name, 16, "ageListData", 0, 11, false) == 0) && (field_name.Length == 27))
                                                                        return fieldGeneratorStoredPageMatchPageListData;
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(field_name, 16, "eadData", 0, 7, false) == 0) && (field_name.Length == 23))
                                                                        return fieldGeneratorStoredPageMatchReadData;
                                                                    break;
                                                                case 'W':
                                                                    switch (field_name[16])
                                                                      {
                                                                        case 'e':
                                                                            if ((String.Compare(field_name, 17, "ight", 0, 4, false) == 0) && (field_name.Length == 21))
                                                                                return fieldGeneratorStoredPageMatchWeight;
                                                                            break;
                                                                        case 'r':
                                                                            if ((String.Compare(field_name, 17, "iteData", 0, 7, false) == 0) && (field_name.Length == 24))
                                                                                return fieldGeneratorStoredPageMatchWriteData;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'e':
                                                        if (String.Compare(field_name, 8, "rUserPagesTo", 0, 12, false) == 0)
                                                          {
                                                            switch (field_name[20])
                                                              {
                                                                case 'M':
                                                                    if ((String.Compare(field_name, 21, "atch", 0, 4, false) == 0) && (field_name.Length == 25))
                                                                        return fieldGeneratorStoredPerUserPagesToMatch;
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(field_name, 21, "otMatch", 0, 7, false) == 0) && (field_name.Length == 28))
                                                                        return fieldGeneratorStoredPerUserPagesToNotMatch;
                                                                    break;
                                                                case 'S':
                                                                    if (String.Compare(field_name, 21, "etO", 0, 3, false) == 0)
                                                                      {
                                                                        switch (field_name[24])
                                                                          {
                                                                            case 'f':
                                                                                if ((String.Compare(field_name, 25, "fByDefault", 0, 10, false) == 0) && (field_name.Length == 35))
                                                                                    return fieldGeneratorStoredPerUserPagesToSetOffByDefault;
                                                                                break;
                                                                            case 'n':
                                                                                if ((String.Compare(field_name, 25, "ByDefault", 0, 9, false) == 0) && (field_name.Length == 34))
                                                                                    return fieldGeneratorStoredPerUserPagesToSetOnByDefault;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'r':
                                    if (String.Compare(field_name, 3, "e", 0, 1, false) == 0)
                                      {
                                        switch (field_name[4])
                                          {
                                            case 'a':
                                                if ((String.Compare(field_name, 5, "mPreference", 0, 11, false) == 0) && (field_name.Length == 16))
                                                    return fieldGeneratorStreamPreference;
                                                break;
                                            case 'e':
                                                if ((String.Compare(field_name, 5, "t", 0, 1, false) == 0) && (field_name.Length == 6))
                                                    return fieldGeneratorStreet;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'u':
                            if ((String.Compare(field_name, 2, "rveyAPIRequest", 0, 14, false) == 0) && (field_name.Length == 16))
                                return fieldGeneratorSurveyAPIRequest;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'T':
                    switch (field_name[1])
                      {
                        case 'V':
                            if ((String.Compare(field_name, 2, "ChannelList", 0, 11, false) == 0) && (field_name.Length == 13))
                                return fieldGeneratorTVChannelList;
                            break;
                        case 'e':
                            if (String.Compare(field_name, 2, "rrier", 0, 5, false) == 0)
                              {
                                switch (field_name[7])
                                  {
                                    case 'T':
                                        if (String.Compare(field_name, 8, "ableUpload", 0, 10, false) == 0)
                                          {
                                            switch (field_name[18])
                                              {
                                                case 'R':
                                                    if ((String.Compare(field_name, 19, "eadData", 0, 7, false) == 0) && (field_name.Length == 26))
                                                        return fieldGeneratorTerrierTableUploadReadData;
                                                    break;
                                                case 'W':
                                                    if ((String.Compare(field_name, 19, "riteData", 0, 8, false) == 0) && (field_name.Length == 27))
                                                        return fieldGeneratorTerrierTableUploadWriteData;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'U':
                                        if (String.Compare(field_name, 8, "pload", 0, 5, false) == 0)
                                          {
                                            switch (field_name[13])
                                              {
                                                case 'D':
                                                    if (String.Compare(field_name, 14, "eleteProject", 0, 12, false) == 0)
                                                      {
                                                        if (field_name.Length == 26)
                                                          {
                                                            return fieldGeneratorTerrierUploadDeleteProject;
                                                          }
                                                        switch (field_name[26])
                                                          {
                                                            case 'O':
                                                                if ((String.Compare(field_name, 27, "ptions", 0, 6, false) == 0) && (field_name.Length == 33))
                                                                    return fieldGeneratorTerrierUploadDeleteProjectOptions;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'G':
                                                    if (String.Compare(field_name, 14, "etProject", 0, 9, false) == 0)
                                                      {
                                                        if (field_name.Length == 23)
                                                          {
                                                            return fieldGeneratorTerrierUploadGetProject;
                                                          }
                                                        switch (field_name[23])
                                                          {
                                                            case 'L':
                                                                if (String.Compare(field_name, 24, "ist", 0, 3, false) == 0)
                                                                  {
                                                                    if (field_name.Length == 27)
                                                                      {
                                                                        return fieldGeneratorTerrierUploadGetProjectList;
                                                                      }
                                                                    switch (field_name[27])
                                                                      {
                                                                        case 'O':
                                                                            if ((String.Compare(field_name, 28, "ptions", 0, 6, false) == 0) && (field_name.Length == 34))
                                                                                return fieldGeneratorTerrierUploadGetProjectListOptions;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'O':
                                                                if ((String.Compare(field_name, 24, "ptions", 0, 6, false) == 0) && (field_name.Length == 30))
                                                                    return fieldGeneratorTerrierUploadGetProjectOptions;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(field_name, 14, "eadData", 0, 7, false) == 0) && (field_name.Length == 21))
                                                        return fieldGeneratorTerrierUploadReadData;
                                                    break;
                                                case 'W':
                                                    if (String.Compare(field_name, 14, "rite", 0, 4, false) == 0)
                                                      {
                                                        switch (field_name[18])
                                                          {
                                                            case 'D':
                                                                if ((String.Compare(field_name, 19, "ata", 0, 3, false) == 0) && (field_name.Length == 22))
                                                                    return fieldGeneratorTerrierUploadWriteData;
                                                                break;
                                                            case 'P':
                                                                if (String.Compare(field_name, 19, "roject", 0, 6, false) == 0)
                                                                  {
                                                                    if (field_name.Length == 25)
                                                                      {
                                                                        return fieldGeneratorTerrierUploadWriteProject;
                                                                      }
                                                                    switch (field_name[25])
                                                                      {
                                                                        case 'O':
                                                                            if ((String.Compare(field_name, 26, "ptions", 0, 6, false) == 0) && (field_name.Length == 32))
                                                                                return fieldGeneratorTerrierUploadWriteProjectOptions;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'h':
                            if ((String.Compare(field_name, 2, "irdPartyCalendarService", 0, 23, false) == 0) && (field_name.Length == 25))
                                return fieldGeneratorThirdPartyCalendarService;
                            break;
                        case 'i':
                            if (String.Compare(field_name, 2, "me", 0, 2, false) == 0)
                              {
                                switch (field_name[4])
                                  {
                                    case 'S':
                                        if ((String.Compare(field_name, 5, "tamp", 0, 4, false) == 0) && (field_name.Length == 9))
                                            return fieldGeneratorTimeStamp;
                                        break;
                                    case 'Z':
                                        if ((String.Compare(field_name, 5, "one", 0, 3, false) == 0) && (field_name.Length == 8))
                                            return fieldGeneratorTimeZone;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            switch (field_name[2])
                              {
                                case 'a':
                                    if ((String.Compare(field_name, 3, "stEnvironment", 0, 13, false) == 0) && (field_name.Length == 16))
                                        return fieldGeneratorToastEnvironment;
                                    break;
                                case 's':
                                    if ((String.Compare(field_name, 3, "hibaTTSParameters", 0, 17, false) == 0) && (field_name.Length == 20))
                                        return fieldGeneratorToshibaTTSParameters;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'r':
                            if ((String.Compare(field_name, 2, "avelBearing", 0, 11, false) == 0) && (field_name.Length == 13))
                                return fieldGeneratorTravelBearing;
                            break;
                        case 'u':
                            if ((String.Compare(field_name, 2, "rnOffGuidanceMeansMute", 0, 22, false) == 0) && (field_name.Length == 24))
                                return fieldGeneratorTurnOffGuidanceMeansMute;
                            break;
                        default:
                            break;
                      }
                    break;
                case 'U':
                    switch (field_name[1])
                      {
                        case 'D':
                            if ((String.Compare(field_name, 2, "SExampleRequest", 0, 15, false) == 0) && (field_name.Length == 17))
                                return fieldGeneratorUDSExampleRequest;
                            break;
                        case 'b':
                            if (String.Compare(field_name, 2, "er", 0, 2, false) == 0)
                              {
                                switch (field_name[4])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 5, "lientId", 0, 7, false) == 0) && (field_name.Length == 12))
                                            return fieldGeneratorUberClientId;
                                        break;
                                    case 'S':
                                        if ((String.Compare(field_name, 5, "erverToken", 0, 10, false) == 0) && (field_name.Length == 15))
                                            return fieldGeneratorUberServerToken;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'n':
                            if (String.Compare(field_name, 2, "i", 0, 1, false) == 0)
                              {
                                switch (field_name[3])
                                  {
                                    case 't':
                                        if ((String.Compare(field_name, 4, "Preference", 0, 10, false) == 0) && (field_name.Length == 14))
                                            return fieldGeneratorUnitPreference;
                                        break;
                                    case 'v':
                                        if ((String.Compare(field_name, 4, "ersalTranslatorSubstitutionList", 0, 31, false) == 0) && (field_name.Length == 35))
                                            return fieldGeneratorUniversalTranslatorSubstitutionList;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'p':
                            if (String.Compare(field_name, 2, "loadedTest", 0, 10, false) == 0)
                              {
                                switch (field_name[12])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 13, "onfiguration", 0, 12, false) == 0) && (field_name.Length == 25))
                                            return fieldGeneratorUploadedTestConfiguration;
                                        break;
                                    case 'D':
                                        if ((String.Compare(field_name, 13, "ata", 0, 3, false) == 0) && (field_name.Length == 16))
                                            return fieldGeneratorUploadedTestData;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 's':
                            if (String.Compare(field_name, 2, "e", 0, 1, false) == 0)
                              {
                                switch (field_name[3])
                                  {
                                    case 'C':
                                        switch (field_name[4])
                                          {
                                            case 'l':
                                                if ((String.Compare(field_name, 5, "ientTime", 0, 8, false) == 0) && (field_name.Length == 13))
                                                    return fieldGeneratorUseClientTime;
                                                break;
                                            case 'o':
                                                if ((String.Compare(field_name, 5, "ntactData", 0, 9, false) == 0) && (field_name.Length == 14))
                                                    return fieldGeneratorUseContactData;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'F':
                                        if ((String.Compare(field_name, 4, "ormattedTranscriptionAsDefault", 0, 30, false) == 0) && (field_name.Length == 34))
                                            return fieldGeneratorUseFormattedTranscriptionAsDefault;
                                        break;
                                    case 'N':
                                        if ((String.Compare(field_name, 4, "ewStyleSMSCommands", 0, 18, false) == 0) && (field_name.Length == 22))
                                            return fieldGeneratorUseNewStyleSMSCommands;
                                        break;
                                    case 'X':
                                        if ((String.Compare(field_name, 4, "APAPI", 0, 5, false) == 0) && (field_name.Length == 9))
                                            return fieldGeneratorUseXAPAPI;
                                        break;
                                    case 'r':
                                        switch (field_name[4])
                                          {
                                            case 'C':
                                                if (String.Compare(field_name, 5, "ontacts", 0, 7, false) == 0)
                                                  {
                                                    switch (field_name[12])
                                                      {
                                                        case 'C':
                                                            if ((String.Compare(field_name, 13, "onfiguration", 0, 12, false) == 0) && (field_name.Length == 25))
                                                                return fieldGeneratorUserContactsConfiguration;
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(field_name, 13, "equests", 0, 7, false) == 0) && (field_name.Length == 20))
                                                                return fieldGeneratorUserContactsRequests;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'F':
                                                if ((String.Compare(field_name, 5, "eedback", 0, 7, false) == 0) && (field_name.Length == 12))
                                                    return fieldGeneratorUserFeedback;
                                                break;
                                            case 'I':
                                                if ((String.Compare(field_name, 5, "D", 0, 1, false) == 0) && (field_name.Length == 6))
                                                    return fieldGeneratorUserID;
                                                break;
                                            case 'M':
                                                if (String.Compare(field_name, 5, "usic", 0, 4, false) == 0)
                                                  {
                                                    switch (field_name[9])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(field_name, 10, "vailableSources", 0, 15, false) == 0) && (field_name.Length == 25))
                                                                return fieldGeneratorUserMusicAvailableSources;
                                                            break;
                                                        case 'C':
                                                            if ((String.Compare(field_name, 10, "ontrols", 0, 7, false) == 0) && (field_name.Length == 17))
                                                                return fieldGeneratorUserMusicControls;
                                                            break;
                                                        case 'I':
                                                            if ((String.Compare(field_name, 10, "nfo", 0, 3, false) == 0) && (field_name.Length == 13))
                                                                return fieldGeneratorUserMusicInfo;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'V':
                    switch (field_name[1])
                      {
                        case 'i':
                            if (String.Compare(field_name, 2, "deoSearch", 0, 9, false) == 0)
                              {
                                switch (field_name[11])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 12, "onfiguration", 0, 12, false) == 0) && (field_name.Length == 24))
                                            return fieldGeneratorVideoSearchConfiguration;
                                        break;
                                    case 'R':
                                        if ((String.Compare(field_name, 12, "equestInfoProviders", 0, 19, false) == 0) && (field_name.Length == 31))
                                            return fieldGeneratorVideoSearchRequestInfoProviders;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'o':
                            if (String.Compare(field_name, 2, "ice", 0, 3, false) == 0)
                              {
                                switch (field_name[5])
                                  {
                                    case 'A':
                                        if ((String.Compare(field_name, 6, "ctivityDetection", 0, 16, false) == 0) && (field_name.Length == 22))
                                            return fieldGeneratorVoiceActivityDetection;
                                        break;
                                    case 'P':
                                        if ((String.Compare(field_name, 6, "arameters", 0, 9, false) == 0) && (field_name.Length == 15))
                                            return fieldGeneratorVoiceParameters;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                case 'W':
                    switch (field_name[1])
                      {
                        case 'a':
                            if (String.Compare(field_name, 2, "keUpP", 0, 5, false) == 0)
                              {
                                switch (field_name[7])
                                  {
                                    case 'a':
                                        if ((String.Compare(field_name, 8, "ttern", 0, 5, false) == 0) && (field_name.Length == 13))
                                            return fieldGeneratorWakeUpPattern;
                                        break;
                                    case 'h':
                                        if ((String.Compare(field_name, 8, "raseIncludedInAudio", 0, 19, false) == 0) && (field_name.Length == 27))
                                            return fieldGeneratorWakeUpPhraseIncludedInAudio;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'e':
                            if (String.Compare(field_name, 2, "bSearch", 0, 7, false) == 0)
                              {
                                switch (field_name[9])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 10, "onfiguration", 0, 12, false) == 0) && (field_name.Length == 22))
                                            return fieldGeneratorWebSearchConfiguration;
                                        break;
                                    case 'R':
                                        if ((String.Compare(field_name, 10, "equestInfoProviders", 0, 19, false) == 0) && (field_name.Length == 29))
                                            return fieldGeneratorWebSearchRequestInfoProviders;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'h':
                            if (String.Compare(field_name, 2, "at3Words", 0, 8, false) == 0)
                              {
                                switch (field_name[10])
                                  {
                                    case 'C':
                                        if ((String.Compare(field_name, 11, "luePhraseNotRequired", 0, 20, false) == 0) && (field_name.Length == 31))
                                            return fieldGeneratorWhat3WordsCluePhraseNotRequired;
                                        break;
                                    case 'S':
                                        if ((String.Compare(field_name, 11, "tandardGeofenceRadius", 0, 21, false) == 0) && (field_name.Length == 32))
                                            return fieldGeneratorWhat3WordsStandardGeofenceRadius;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                    break;
                default:
                    break;
              }
            return null;
          }
        public Generator(bool ignore_extras)
          {
            fieldGeneratorLatitude = new JSONHoldingNumberTextGenerator("field \"Latitude\" of the RequestInfo class");
            fieldGeneratorLongitude = new JSONHoldingNumberTextGenerator("field \"Longitude\" of the RequestInfo class");
            fieldGeneratorPositionTime = new FieldHoldingGeneratorPositionTime("field \"PositionTime\" of the RequestInfo class");
            fieldGeneratorPositionHorizontalAccuracy = new JSONHoldingNumberTextGenerator("field \"PositionHorizontalAccuracy\" of the RequestInfo class");
            fieldGeneratorStreet = new JSONHoldingStringGenerator("field \"Street\" of the RequestInfo class");
            fieldGeneratorCity = new JSONHoldingStringGenerator("field \"City\" of the RequestInfo class");
            fieldGeneratorState = new JSONHoldingStringGenerator("field \"State\" of the RequestInfo class");
            fieldGeneratorCountry = new JSONHoldingStringGenerator("field \"Country\" of the RequestInfo class");
            fieldGeneratorRoutePoints = new RoutePointsJSON.HoldingGenerator("field \"RoutePoints\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRouteInformation = new ClientRouteInformationJSON.HoldingGenerator("field \"RouteInformation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorControllableTrackPlaying = new JSONHoldingBooleanGenerator("field \"ControllableTrackPlaying\" of the RequestInfo class");
            fieldGeneratorTimeStamp = new FieldHoldingGeneratorTimeStamp("field \"TimeStamp\" of the RequestInfo class");
            fieldGeneratorTimeZone = new JSONHoldingStringGenerator("field \"TimeZone\" of the RequestInfo class");
            fieldGeneratorConversationState = new ConversationStateJSON.HoldingGenerator("field \"ConversationState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorClientState = new ClientStateJSON.HoldingGenerator("field \"ClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDeviceInfo = new TypeDeviceInfoJSON.HoldingGenerator("field \"DeviceInfo\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSendBack = new JSONHoldingValueGenerator("field \"SendBack\" of the RequestInfo class");
            fieldGeneratorPreferredImageSize = new FieldHoldingArrayGeneratorPreferredImageSize("field \"PreferredImageSize\" of the RequestInfo class");
            fieldGeneratorInputLanguageEnglishName = new JSONHoldingStringGenerator("field \"InputLanguageEnglishName\" of the RequestInfo class");
            fieldGeneratorInputLanguageNativeName = new JSONHoldingStringGenerator("field \"InputLanguageNativeName\" of the RequestInfo class");
            fieldGeneratorInputLanguageIETFTag = new JSONHoldingStringGenerator("field \"InputLanguageIETFTag\" of the RequestInfo class");
            fieldGeneratorOutputLanguageEnglishName = new JSONHoldingStringGenerator("field \"OutputLanguageEnglishName\" of the RequestInfo class");
            fieldGeneratorOutputLanguageNativeName = new JSONHoldingStringGenerator("field \"OutputLanguageNativeName\" of the RequestInfo class");
            fieldGeneratorOutputLanguageIETFTag = new JSONHoldingStringGenerator("field \"OutputLanguageIETFTag\" of the RequestInfo class");
            fieldGeneratorResultVersionAccepted = new JSONHoldingNumberTextGenerator("field \"ResultVersionAccepted\" of the RequestInfo class");
            fieldGeneratorUnitPreference = new FieldHoldingGeneratorUnitPreference("field \"UnitPreference\" of the RequestInfo class");
            fieldGeneratorDefaultTimeFormat24Hours = new JSONHoldingBooleanGenerator("field \"DefaultTimeFormat24Hours\" of the RequestInfo class");
            fieldGeneratorClientID = new JSONHoldingStringGenerator("field \"ClientID\" of the RequestInfo class");
            fieldGeneratorClientVersion = new FieldHoldingGeneratorClientVersion("field \"ClientVersion\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDeviceID = new JSONHoldingStringGenerator("field \"DeviceID\" of the RequestInfo class");
            fieldGeneratorSDK = new JSONHoldingStringGenerator("field \"SDK\" of the RequestInfo class");
            fieldGeneratorSDKInfo = new JSONHoldingObjectValueGenerator("field \"SDKInfo\" of the RequestInfo class");
            fieldGeneratorFirstPersonSelf = new JSONHoldingStringGenerator("field \"FirstPersonSelf\" of the RequestInfo class");
            fieldGeneratorFirstPersonSelfSpoken = new JSONHoldingStringGenerator("field \"FirstPersonSelfSpoken\" of the RequestInfo class");
            fieldGeneratorSecondPersonSelf = new JSONHoldingStringArrayGenerator("field \"SecondPersonSelf\" of the RequestInfo class");
            fieldGeneratorSecondPersonSelfSpoken = new JSONHoldingStringArrayGenerator("field \"SecondPersonSelfSpoken\" of the RequestInfo class");
            fieldGeneratorWakeUpPhraseIncludedInAudio = new JSONHoldingBooleanGenerator("field \"WakeUpPhraseIncludedInAudio\" of the RequestInfo class");
            fieldGeneratorInitialSecondsOfAudioToIgnore = new JSONHoldingNumberTextGenerator("field \"InitialSecondsOfAudioToIgnore\" of the RequestInfo class");
            fieldGeneratorWakeUpPattern = new JSONHoldingStringGenerator("field \"WakeUpPattern\" of the RequestInfo class");
            fieldGeneratorUserID = new JSONHoldingStringGenerator("field \"UserID\" of the RequestInfo class");
            fieldGeneratorRequestID = new JSONHoldingStringGenerator("field \"RequestID\" of the RequestInfo class");
            fieldGeneratorSessionID = new JSONHoldingStringGenerator("field \"SessionID\" of the RequestInfo class");
            fieldGeneratorDomains = new DomainsJSON.HoldingGenerator("field \"Domains\" of the RequestInfo class", ignore_extras);
            fieldGeneratorResultUpdateAllowed = new JSONHoldingBooleanGenerator("field \"ResultUpdateAllowed\" of the RequestInfo class");
            fieldGeneratorPartialTranscriptsDesired = new JSONHoldingBooleanGenerator("field \"PartialTranscriptsDesired\" of the RequestInfo class");
            fieldGeneratorMinResults = new FieldHoldingGeneratorMinResults("field \"MinResults\" of the RequestInfo class");
            fieldGeneratorMaxResults = new FieldHoldingGeneratorMaxResults("field \"MaxResults\" of the RequestInfo class");
            fieldGeneratorObjectByteCountPrefix = new JSONHoldingBooleanGenerator("field \"ObjectByteCountPrefix\" of the RequestInfo class");
            fieldGeneratorProfanityFilter = new FieldHoldingGeneratorProfanityFilter("field \"ProfanityFilter\" of the RequestInfo class");
            fieldGeneratorClientMatches = new ClientMatchJSON.HoldingArrayGenerator("field \"ClientMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorClientMatchesOnly = new JSONHoldingBooleanGenerator("field \"ClientMatchesOnly\" of the RequestInfo class");
            fieldGeneratorPagination = new PaginationJSON.HoldingGenerator("field \"Pagination\" of the RequestInfo class", ignore_extras);
            fieldGeneratorResponseAudioVoice = new JSONHoldingStringGenerator("field \"ResponseAudioVoice\" of the RequestInfo class");
            fieldGeneratorResponseAudioShortOrLong = new FieldHoldingGeneratorResponseAudioShortOrLong("field \"ResponseAudioShortOrLong\" of the RequestInfo class");
            fieldGeneratorResponseAudioAcceptedEncodings = new FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings("field \"ResponseAudioAcceptedEncodings\" of the RequestInfo class");
            fieldGeneratorReturnResponseAudioAsURL = new JSONHoldingBooleanGenerator("field \"ReturnResponseAudioAsURL\" of the RequestInfo class");
            fieldGeneratorVoiceActivityDetection = new VoiceActivityDetectionJSON.HoldingGenerator("field \"VoiceActivityDetection\" of the RequestInfo class", ignore_extras);
            fieldGeneratorServerDeterminesEndOfAudio = new JSONHoldingBooleanGenerator("field \"ServerDeterminesEndOfAudio\" of the RequestInfo class");
            fieldGeneratorIntentOnly = new JSONHoldingBooleanGenerator("field \"IntentOnly\" of the RequestInfo class");
            fieldGeneratorDisableSpellCorrection = new JSONHoldingBooleanGenerator("field \"DisableSpellCorrection\" of the RequestInfo class");
            fieldGeneratorUseContactData = new JSONHoldingBooleanGenerator("field \"UseContactData\" of the RequestInfo class");
            fieldGeneratorUseClientTime = new JSONHoldingBooleanGenerator("field \"UseClientTime\" of the RequestInfo class");
            fieldGeneratorForceConversationStateTime = new FieldHoldingGeneratorForceConversationStateTime("field \"ForceConversationStateTime\" of the RequestInfo class");
            fieldGeneratorOutputLatticeSize = new FieldHoldingGeneratorOutputLatticeSize("field \"OutputLatticeSize\" of the RequestInfo class");
            fieldGeneratorMatchingMutations = new MatchingMutationsJSON.HoldingGenerator("field \"MatchingMutations\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUseFormattedTranscriptionAsDefault = new JSONHoldingBooleanGenerator("field \"UseFormattedTranscriptionAsDefault\" of the RequestInfo class");
            fieldGeneratorResponseRanking = new ResponseRankingJSON.HoldingGenerator("field \"ResponseRanking\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAcapelaVoiceParameters = new AcapelaVoiceParametersJSON.HoldingGenerator("field \"AcapelaVoiceParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAllowPopularNameContactMatches = new AllowPopularNameContactMatchesJSON.HoldingGenerator("field \"AllowPopularNameContactMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAlwaysFetchCurrentConditionsData = new AlwaysFetchCurrentConditionsDataJSON.HoldingGenerator("field \"AlwaysFetchCurrentConditionsData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAlwaysFetchHourlyForecastData = new AlwaysFetchHourlyForecastDataJSON.HoldingGenerator("field \"AlwaysFetchHourlyForecastData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorArrivalTime = new DateAndOrTimeJSON.HoldingGenerator("field \"ArrivalTime\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAvantiMachineState = new AvantiMachineStateJSON.HoldingGenerator("field \"AvantiMachineState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorBingAdExtensions = new BingRequestInfoAdExtensionsJSON.HoldingGenerator("field \"BingAdExtensions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorBunnIsConfirmationRequired = new BunnIsConfirmationRequiredJSON.HoldingGenerator("field \"BunnIsConfirmationRequired\" of the RequestInfo class", ignore_extras);
            fieldGeneratorBunnMachineState = new BunnMachineStateJSON.HoldingGenerator("field \"BunnMachineState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCalendarDataSynchronization = new CalendarDataSynchronizationRequestInfoJSON.HoldingGenerator("field \"CalendarDataSynchronization\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCallPermissions = new CallPermissionsJSON.HoldingGenerator("field \"CallPermissions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarControlClimateClientConfiguration = new CarControlClimateClientConfigurationJSON.HoldingGenerator("field \"CarControlClimateClientConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarControlClimateTemperatureConfig = new CarControlClimateTemperatureConfigJSON.HoldingGenerator("field \"CarControlClimateTemperatureConfig\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarManualModel = new CarManualModelJSON.HoldingGenerator("field \"CarManualModel\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarManualNormalizedQueryToSet = new CarManualNormalizedQueryJSON.HoldingGenerator("field \"CarManualNormalizedQueryToSet\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarManualResponseToSet = new DynamicResponseJSON.HoldingGenerator("field \"CarManualResponseToSet\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCarStatus = new CarStatusJSON.HoldingGenerator("field \"CarStatus\" of the RequestInfo class", ignore_extras);
            fieldGeneratorChargingClientState = new ChargingClientStateJSON.HoldingGenerator("field \"ChargingClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorClientListMatches = new ClientListMatchesJSON.HoldingGenerator("field \"ClientListMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCollateMusicEntities = new CollateMusicEntitiesJSON.HoldingGenerator("field \"CollateMusicEntities\" of the RequestInfo class", ignore_extras);
            fieldGeneratorConnectedToThirdPartyMusicApp = new ConnectedToThirdPartyMusicAppJSON.HoldingGenerator("field \"ConnectedToThirdPartyMusicApp\" of the RequestInfo class", ignore_extras);
            fieldGeneratorContactQueryExclusions = new ContactQueryExclusionsJSON.HoldingGenerator("field \"ContactQueryExclusions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPhoneCommandConfiguration = new PhoneCommandConfigurationJSON.HoldingGenerator("field \"PhoneCommandConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorConvertToNewInformationNuggets = new ConvertToNewInformationNuggetsJSON.HoldingGenerator("field \"ConvertToNewInformationNuggets\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomSpeechRecognitionPatternsGroupListData = new CustomSpeechRecognitionPatternsGroupListDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsGroupListData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomSpeechRecognitionPatternsReadData = new CustomSpeechRecognitionPatternsReadDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomSpeechRecognitionPatternsWeight = new CustomSpeechRecognitionPatternsWeightJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsWeight\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomSpeechRecognitionPatternsWriteData = new CustomSpeechRecognitionPatternsDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDeleteUserMemoryLocation = new DeleteUserMemoryLocationJSON.HoldingGenerator("field \"DeleteUserMemoryLocation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDisableMusicPlayerListPositionSpecification = new DisableListPositionSpecificationJSON.HoldingGenerator("field \"DisableMusicPlayerListPositionSpecification\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDisableMusicSearchListPositionSpecification = new DisableListPositionSpecificationJSON.HoldingGenerator("field \"DisableMusicSearchListPositionSpecification\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDisambiguateResultsBeforeAction = new DisambiguateResultsBeforeActionJSON.HoldingGenerator("field \"DisambiguateResultsBeforeAction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorDisplayedReminder = new ReminderJSON.HoldingGenerator("field \"DisplayedReminder\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnableClientControlInModes = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"EnableClientControlInModes\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnableLocalPlacesQueries = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"EnableLocalPlacesQueries\" of the RequestInfo class", ignore_extras);
            fieldGeneratorLocalPlacesSettings = new LocalPlacesSettingsJSON.HoldingGenerator("field \"LocalPlacesSettings\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnableMusicPlayerFavorites = new EnableMusicPlayerFavoritesJSON.HoldingGenerator("field \"EnableMusicPlayerFavorites\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups = new CustomSpeechRecognitionPatternsGroupListJSON.HoldingGenerator("field \"EnabledCustomSpeechRecognitionPatternGroups\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEntertainmentClientState = new EntertainmentClientStateJSON.HoldingGenerator("field \"EntertainmentClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEntertainmentTitlesUploadData = new EntertainmentTitlesUploadDataJSON.HoldingGenerator("field \"EntertainmentTitlesUploadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext = new ExcludeAllMusicResultsWithoutExplicitContextJSON.HoldingGenerator("field \"ExcludeAllMusicResultsWithoutExplicitContext\" of the RequestInfo class", ignore_extras);
            fieldGeneratorExcludeWikipediaLowConfidenceResults = new ExcludeWikipediaLowConfidenceResultsJSON.HoldingGenerator("field \"ExcludeWikipediaLowConfidenceResults\" of the RequestInfo class", ignore_extras);
            fieldGeneratorFitBitAccessToken = new FitBitAccessTokenJSON.HoldingGenerator("field \"FitBitAccessToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorFitBitRefreshToken = new FitBitRefreshTokenJSON.HoldingGenerator("field \"FitBitRefreshToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetHumaxMediaCloudURL = new GetHumaxMediaCloudURLJSON.HoldingGenerator("field \"GetHumaxMediaCloudURL\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetOAuth2ClientID = new GetClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientID\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetOAuth2ClientSecret = new GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientSecret\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSquare = new GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"Square\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetOAuth2ClientToken = new GetClientTokenOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetUberClientId = new GetUberClientIdJSON.HoldingGenerator("field \"GetUberClientId\" of the RequestInfo class", ignore_extras);
            fieldGeneratorGetUberServerToken = new GetUberServerTokenJSON.HoldingGenerator("field \"GetUberServerToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHLSRadius = new HLSRadiusJSON.HoldingGenerator("field \"HLSRadius\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHarmanDeviceRegistration = new HarmanDeviceRegistrationJSON.HoldingGenerator("field \"HarmanDeviceRegistration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHarmanHospitalityAmxControllerHttpRequest = new HarmanAmxControllerHttpRequestJSON.HoldingGenerator("field \"HarmanHospitalityAmxControllerHttpRequest\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHarmanHospitalityMeetingInformation = new HarmanHospitalityMeetingInformationJSON.HoldingGenerator("field \"HarmanHospitalityMeetingInformation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHarmanHospitalityPropertyInformation = new HarmanHospitalityPropertyInformationJSON.HoldingGenerator("field \"HarmanHospitalityPropertyInformation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHarmanPropertyRegistration = new HarmanPropertyRegistrationJSON.HoldingGenerator("field \"HarmanPropertyRegistration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHasTollsOnThisRoad = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"HasTollsOnThisRoad\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHomeAutomationDomainSettings = new HomeAutomationDomainSettingsJSON.HoldingGenerator("field \"HomeAutomationDomainSettings\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHondaAgent20MParameters = new HondaAgent20MParametersJSON.HoldingGenerator("field \"HondaAgent20MParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHondaAgentParameters = new HondaAgentParametersJSON.HoldingGenerator("field \"HondaAgentParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHondaCarManualParameters = new HondaCarManualParametersJSON.HoldingGenerator("field \"HondaCarManualParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHueDeviceRegistration = new HueDeviceRegistrationJSON.HoldingGenerator("field \"HueDeviceRegistration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHumaxHomeAutomationCredentials = new HumaxHomeAutomationCredentialsJSON.HoldingGenerator("field \"HumaxHomeAutomationCredentials\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHumaxMediaCloudURL = new HumaxMediaCloudURLJSON.HoldingGenerator("field \"HumaxMediaCloudURL\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHumaxSmartTVClientState = new HumaxSmartTVClientStateJSON.HoldingGenerator("field \"HumaxSmartTVClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIHeartMediaDeviceIdentifiers = new IHeartMediaDeviceIdentifiersJSON.HoldingGenerator("field \"IHeartMediaDeviceIdentifiers\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIHeartRadioPreferArtistStations = new IHeartRadioPreferArtistStationsJSON.HoldingGenerator("field \"IHeartRadioPreferArtistStations\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIHeartRadioPreferGenericRadioMatches = new IHeartRadioPreferGenericRadioMatchesJSON.HoldingGenerator("field \"IHeartRadioPreferGenericRadioMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches = new IHeartRadioPreferTerrestrialRadioMatchesJSON.HoldingGenerator("field \"IHeartRadioPreferTerrestrialRadioMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIftttKeyItem = new IftttKeyItemJSON.HoldingGenerator("field \"IftttKeyItem\" of the RequestInfo class", ignore_extras);
            fieldGeneratorImageSearchConfiguration = new ImageSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"ImageSearchConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorImageSearchRequestInfoProviders = new ImageSearchRequestInfoProvidersJSON.HoldingGenerator("field \"ImageSearchRequestInfoProviders\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIncludeAllMusicResultsWithoutContext = new IncludeAllMusicResultsWithoutContextJSON.HoldingGenerator("field \"IncludeAllMusicResultsWithoutContext\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIncomingCallPending = new IncomingCallPendingJSON.HoldingGenerator("field \"IncomingCallPending\" of the RequestInfo class", ignore_extras);
            fieldGeneratorInputOverrideDeleteFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"InputOverrideDeleteFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorInputOverrideFunction = new InputOverrideFunctionJSON.HoldingGenerator("field \"InputOverrideFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorInputOverrideFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"InputOverrideFunctionLanguage\" of the RequestInfo class", ignore_extras);
            fieldGeneratorInputOverrideFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"InputOverrideFunctionSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorInputOverrideReadFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"InputOverrideReadFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorKuriInfo = new KuriInfoJSON.HoldingGenerator("field \"KuriInfo\" of the RequestInfo class", ignore_extras);
            fieldGeneratorLocalSearchClientState = new LocalSearchClientStateJSON.HoldingGenerator("field \"LocalSearchClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMapClientControlPageToScroll = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"MapClientControlPageToScroll\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMultipleChoiceQuizAPIRequest = new MultipleChoiceQuizAPIRequestJSON.HoldingGenerator("field \"MultipleChoiceQuizAPIRequest\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMusicClientState = new MusicClientStateJSON.HoldingGenerator("field \"MusicClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNaritaAirportGuideArea = new NaritaAirportGuideAreaJSON.HoldingGenerator("field \"NaritaAirportGuideArea\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNaritaAirportGuideFloor = new NaritaAirportGuideFloorJSON.HoldingGenerator("field \"NaritaAirportGuideFloor\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNaritaAirportGuideTerminal = new NaritaAirportGuideTerminalJSON.HoldingGenerator("field \"NaritaAirportGuideTerminal\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNavigationControlContext = new NavigationControlContextJSON.HoldingGenerator("field \"NavigationControlContext\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTurnOffGuidanceMeansMute = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"TurnOffGuidanceMeansMute\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNavigationLocationDisambiguation = new NavigationLocationDisambiguationConfigJSON.HoldingGenerator("field \"NavigationLocationDisambiguation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNewReminder = new CreateReminderFullDataJSON.HoldingGenerator("field \"NewReminder\" of the RequestInfo class", ignore_extras);
            fieldGeneratorNumberOfVolumeLevels = new NumberOfVolumeLevelsJSON.HoldingGenerator("field \"NumberOfVolumeLevels\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOAuth2ClientID = new ClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2ClientID\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOAuth2ClientSecret = new ClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2ClientSecret\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOAuth2ClientToken = new OAuth2ClientTokenJSON.HoldingGenerator("field \"OAuth2ClientToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOAuth2CodeData = new CodeDataOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2CodeData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOAuth2RefreshToken = new RefreshTokenOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2RefreshToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOrganizationalChartRequest = new OrganizationalChartRequestJSON.HoldingGenerator("field \"OrganizationalChartRequest\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputDeepIntegrationLattice = new OutputDeepIntegrationLatticeJSON.HoldingGenerator("field \"OutputDeepIntegrationLattice\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputSLMLattice = new OutputSLMLatticeJSON.HoldingGenerator("field \"OutputSLMLattice\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideKind = new OutputOverrideKindJSON.HoldingGenerator("field \"OutputOverrideKind\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideFunctionLanguage\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideFunctionSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideCommandIsPreAudioOut = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideCommandIsPreAudioOut\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideDeleteCommandFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideDeleteCommandFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideDeleteInformationNuggetFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideDeleteInformationNuggetFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideInformationNuggetFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunctionLanguage\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideInformationNuggetFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunctionSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideReadCommandFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideReadCommandFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideReadInformationNuggetFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideReadInformationNuggetFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideCommandFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideCommandFunction\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideCommandFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideCommandFunctionLanguage\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOutputOverrideCommandFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideCommandFunctionSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomClientPrompt = new ClientPromptPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomClientPrompt\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableComponentFormat = new EnableComponentFormatPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableComponentFormat\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableDomain = new EnableDomainPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableDomain\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableExclusionInTarzanMode = new EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableExclusionInTarzanMode\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableInferredPlay = new EnableInferredPlayPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlay\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = new EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = new EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableLongJSONFallback = new EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableLongJSONFallback\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnablePodcastMatches = new EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnablePodcastMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableUserDataQueries = new EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableUserDataQueries\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableWildcardMatches = new EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableWildcardMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback = new EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableWildcardMatchesOnlyAsFallback\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomExtendedStationModeData = new ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomExtendedStationModeData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomRapidIngestionData = new RapidIngestionDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomRapidIngestionData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPandoraCustomUserData = new UserDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomUserData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorParkingClientState = new ParkingClientStateJSON.HoldingGenerator("field \"ParkingClientState\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPepperEnabled = new PepperEnabledJSON.HoldingGenerator("field \"PepperEnabled\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPhoneDisambiguationOmitList = new PhoneDisambiguationOmitListJSON.HoldingGenerator("field \"PhoneDisambiguationOmitList\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlAvailableAudioSources = new RadioControlAvailableAudioSourcesJSON.HoldingGenerator("field \"RadioControlAvailableAudioSources\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlOtherAMBands = new RadioControlOtherAMBandsJSON.HoldingGenerator("field \"RadioControlOtherAMBands\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlOtherFMBands = new RadioControlOtherFMBandsJSON.HoldingGenerator("field \"RadioControlOtherFMBands\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlRecognizeNorthAmericanAMBand = new RadioControlRecognizeNorthAmericanAMBandJSON.HoldingGenerator("field \"RadioControlRecognizeNorthAmericanAMBand\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlRecognizeNorthAmericanFMBand = new RadioControlRecognizeNorthAmericanFMBandJSON.HoldingGenerator("field \"RadioControlRecognizeNorthAmericanFMBand\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRadioControlTunableStations = new RadioControlTunableStationsJSON.HoldingGenerator("field \"RadioControlTunableStations\" of the RequestInfo class", ignore_extras);
            fieldGeneratorReadSpeakerVoiceParameters = new ReadSpeakerVoiceParametersJSON.HoldingGenerator("field \"ReadSpeakerVoiceParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRecipeParameters = new RecipeParametersJSON.HoldingGenerator("field \"RecipeParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRegionalPhoneNumberConfiguration = new RegionalPhoneNumberConfigurationJSON.HoldingGenerator("field \"RegionalPhoneNumberConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRemainingDistance = new AmountJSON.HoldingGenerator("field \"RemainingDistance\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRemainingTravelTime = new AmountJSON.HoldingGenerator("field \"RemainingTravelTime\" of the RequestInfo class", ignore_extras);
            fieldGeneratorReminders = new ReminderListJSON.HoldingGenerator("field \"Reminders\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantMenuMetadata = new RestaurantMenuMetadataJSON.HoldingGenerator("field \"RestaurantMenuMetadata\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantMenuObject = new RestaurantMenuObjectJSON.HoldingGenerator("field \"RestaurantMenuObject\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantOrderingMenuData = new RestaurantOrderingMenuDataJSON.HoldingGenerator("field \"RestaurantOrderingMenuData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID = new RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMenuDataStoreID\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = new RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = new RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRestaurantOrderingQueriesRequestData = new RestaurantOrderingQueriesRequestDataJSON.HoldingGenerator("field \"RestaurantOrderingQueriesRequestData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorReturnInformationNuggetsForMusicSearch = new ReturnInformationNuggetsForMusicSearchJSON.HoldingGenerator("field \"ReturnInformationNuggetsForMusicSearch\" of the RequestInfo class", ignore_extras);
            fieldGeneratorRobotInfo = new RobotInfoJSON.HoldingGenerator("field \"RobotInfo\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSendFullWeatherForecastData = new SendFullWeatherForecastDataJSON.HoldingGenerator("field \"SendFullWeatherForecastData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSetUserMemoryLocation = new SetUserMemoryLocationJSON.HoldingGenerator("field \"SetUserMemoryLocation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSiriusXMEnableDomain = new SiriusXMEnableDomainJSON.HoldingGenerator("field \"SiriusXMEnableDomain\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSiriusXMEnableGenericChannelMatches = new SiriusXMEnableGenericChannelMatchesJSON.HoldingGenerator("field \"SiriusXMEnableGenericChannelMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSiriusXMEnableWildcardMatches = new SiriusXMEnableWildcardMatchesJSON.HoldingGenerator("field \"SiriusXMEnableWildcardMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSmartTVOnScreenItems = new SmartTVOnScreenItemsRequestInfoFieldJSON.HoldingGenerator("field \"SmartTVOnScreenItems\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSmartTVUserCustomInputSource = new SmartTVUserCustomInputSourceRequestInfoFieldJSON.HoldingGenerator("field \"SmartTVUserCustomInputSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSoundHoundTTSParameters = new SoundHoundTTSParametersJSON.HoldingGenerator("field \"SoundHoundTTSParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSpeedLimitOnThisRoad = new AmountJSON.HoldingGenerator("field \"SpeedLimitOnThisRoad\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSportsLeagueControl = new SportsLeagueControlJSON.HoldingGenerator("field \"SportsLeagueControl\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSpotifyPlaylistEnableWildcardMatches = new EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON.HoldingGenerator("field \"SpotifyPlaylistEnableWildcardMatches\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredAlwaysMatchReadData = new StoredAlwaysMatchReadDataJSON.HoldingGenerator("field \"StoredAlwaysMatchReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredAlwaysMatchWriteData = new ClientMatchesJSON.HoldingGenerator("field \"StoredAlwaysMatchWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredGlobalPagesToMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToMatch\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredGlobalPagesToNotMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToNotMatch\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredGlobalPagesToSetOffByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToSetOffByDefault\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredGlobalPagesToSetOnByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToSetOnByDefault\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPageMatchPageListData = new StoredPageMatchPageListDataJSON.HoldingGenerator("field \"StoredPageMatchPageListData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPageMatchReadData = new StoredPageMatchReadDataJSON.HoldingGenerator("field \"StoredPageMatchReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPageMatchWeight = new StoredPageMatchWeightJSON.HoldingGenerator("field \"StoredPageMatchWeight\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPageMatchWriteData = new StoredPageMatchWriteDataJSON.HoldingGenerator("field \"StoredPageMatchWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPerUserPagesToMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToMatch\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPerUserPagesToNotMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToNotMatch\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPerUserPagesToSetOffByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToSetOffByDefault\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStoredPerUserPagesToSetOnByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToSetOnByDefault\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSurveyAPIRequest = new SurveyAPIRequestJSON.HoldingGenerator("field \"SurveyAPIRequest\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTVChannelList = new TVChannelListJSON.HoldingGenerator("field \"TVChannelList\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierTableUploadReadData = new TerrierTableUploadReadDataJSON.HoldingGenerator("field \"TerrierTableUploadReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierTableUploadWriteData = new TerrierTableUploadWriteDataJSON.HoldingGenerator("field \"TerrierTableUploadWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadDeleteProject = new TerrierUploadDeleteProjectJSON.HoldingGenerator("field \"TerrierUploadDeleteProject\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadDeleteProjectOptions = new TerrierUploadDeleteProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadDeleteProjectOptions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadGetProject = new TerrierUploadGetProjectJSON.HoldingGenerator("field \"TerrierUploadGetProject\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadGetProjectList = new TerrierUploadGetProjectListJSON.HoldingGenerator("field \"TerrierUploadGetProjectList\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadGetProjectListOptions = new TerrierUploadGetProjectListOptionsJSON.HoldingGenerator("field \"TerrierUploadGetProjectListOptions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadGetProjectOptions = new TerrierUploadGetProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadGetProjectOptions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadReadData = new TerrierUploadReadDataJSON.HoldingGenerator("field \"TerrierUploadReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadWriteData = new TerrierUploadWriteDataJSON.HoldingGenerator("field \"TerrierUploadWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadWriteProject = new TerrierUploadedProjectJSON.HoldingGenerator("field \"TerrierUploadWriteProject\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTerrierUploadWriteProjectOptions = new TerrierUploadWriteProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadWriteProjectOptions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorThirdPartyCalendarService = new ThirdPartyCalendarServiceJSON.HoldingGenerator("field \"ThirdPartyCalendarService\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCalendarMatchingLoosenessLevel = new CalendarMatchingLoosenessLevelJSON.HoldingGenerator("field \"CalendarMatchingLoosenessLevel\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCalendarEvents = new CalendarRequestInfoEventsListJSON.HoldingGenerator("field \"CalendarEvents\" of the RequestInfo class", ignore_extras);
            fieldGeneratorToshibaTTSParameters = new ToshibaTTSParametersJSON.HoldingGenerator("field \"ToshibaTTSParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorTravelBearing = new HLSHeadingJSON.HoldingGenerator("field \"TravelBearing\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUDSExampleRequest = new UDSExampleRequestJSON.HoldingGenerator("field \"UDSExampleRequest\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUberClientId = new UberClientIdJSON.HoldingGenerator("field \"UberClientId\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUberServerToken = new UberServerTokenJSON.HoldingGenerator("field \"UberServerToken\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUploadedTestConfiguration = new UploadedTestConfigurationJSON.HoldingGenerator("field \"UploadedTestConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUploadedTestData = new UploadedTestsJSON.HoldingGenerator("field \"UploadedTestData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUseNewStyleSMSCommands = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"UseNewStyleSMSCommands\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUseXAPAPI = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"UseXAPAPI\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserContactsConfiguration = new UserContactsConfigurationJSON.HoldingGenerator("field \"UserContactsConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserContactsRequests = new UserContactsRequestsJSON.HoldingGenerator("field \"UserContactsRequests\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserFeedback = new UserFeedbackJSON.HoldingGenerator("field \"UserFeedback\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserMusicAvailableSources = new UserMusicAvailableSourcesJSON.HoldingGenerator("field \"UserMusicAvailableSources\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserMusicControls = new UserMusicControlsJSON.HoldingGenerator("field \"UserMusicControls\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUserMusicInfo = new UserMusicInfoJSON.HoldingGenerator("field \"UserMusicInfo\" of the RequestInfo class", ignore_extras);
            fieldGeneratorVideoSearchConfiguration = new VideoSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"VideoSearchConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorVideoSearchRequestInfoProviders = new VideoSearchRequestInfoProvidersJSON.HoldingGenerator("field \"VideoSearchRequestInfoProviders\" of the RequestInfo class", ignore_extras);
            fieldGeneratorVoiceParameters = new VoiceParametersJSON.HoldingGenerator("field \"VoiceParameters\" of the RequestInfo class", ignore_extras);
            fieldGeneratorWebSearchConfiguration = new WebSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"WebSearchConfiguration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorWebSearchRequestInfoProviders = new WebSearchRequestInfoProvidersJSON.HoldingGenerator("field \"WebSearchRequestInfoProviders\" of the RequestInfo class", ignore_extras);
            fieldGeneratorWhat3WordsCluePhraseNotRequired = new What3WordsCluePhraseNotRequiredJSON.HoldingGenerator("field \"What3WordsCluePhraseNotRequired\" of the RequestInfo class", ignore_extras);
            fieldGeneratorWhat3WordsStandardGeofenceRadius = new What3WordsStandardGeofenceRadiusJSON.HoldingGenerator("field \"What3WordsStandardGeofenceRadius\" of the RequestInfo class", ignore_extras);
            fieldGeneratorHereApiPlacesFallback = new HereApiPlacesFallbackSettingsJSON.HoldingGenerator("field \"HereApiPlacesFallback\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPaymentsPredeterminedSMSNumber = new PaymentsPredeterminedSMSNumberFieldJSON.HoldingGenerator("field \"PaymentsPredeterminedSMSNumber\" of the RequestInfo class", ignore_extras);
            fieldGeneratorPaymentsPredeterminedPaymentMethod = new PaymentsPaymentMethodTypeJSON.HoldingGenerator("field \"PaymentsPredeterminedPaymentMethod\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOrderSource = new PaymentsOrderSourceFieldJSON.HoldingGenerator("field \"OrderSource\" of the RequestInfo class", ignore_extras);
            fieldGeneratorOrderPrepDuration = new PaymentsOrderPrepDurationFieldJSON.HoldingGenerator("field \"OrderPrepDuration\" of the RequestInfo class", ignore_extras);
            fieldGeneratorSquareEnvironment = new SquareEnvironmentJSON.HoldingGenerator("field \"SquareEnvironment\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnableSquareCustomerInformationPermissions = new EnableSquareCustomerInformationPermissionsJSON.HoldingGenerator("field \"EnableSquareCustomerInformationPermissions\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMessagingConvertPunctuation = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"MessagingConvertPunctuation\" of the RequestInfo class", ignore_extras);
            fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"AutoNaviAPIPlacesWildcardPOINameUseWebQueryMode\" of the RequestInfo class", ignore_extras);
            fieldGeneratorStreamPreference = new StreamPreferenceJSON.HoldingGenerator("field \"StreamPreference\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand = new MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON.HoldingGenerator("field \"MusicQueriesForceInfoNuggetToPlayCommand\" of the RequestInfo class", ignore_extras);
            fieldGeneratorMusicQueriesAllowRawTop = new MusicQueriesAllowRawTopRequestInfoFieldJSON.HoldingGenerator("field \"MusicQueriesAllowRawTop\" of the RequestInfo class", ignore_extras);
            fieldGeneratorBusinessInformationUploadData = new BusinessInformationUploadDataRequestJSON.HoldingGenerator("field \"BusinessInformationUploadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorBusinessInformationDataStoreId = new BusinessInformationDataStoreIdJSON.HoldingGenerator("field \"BusinessInformationDataStoreId\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomASREnhancementWriteData = new CustomASREnhancementDataJSON.HoldingGenerator("field \"CustomASREnhancementWriteData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomASREnhancementReadData = new CustomASREnhancementReadDataJSON.HoldingGenerator("field \"CustomASREnhancementReadData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomASREnhancementListData = new CustomASREnhancementListDataJSON.HoldingGenerator("field \"CustomASREnhancementListData\" of the RequestInfo class", ignore_extras);
            fieldGeneratorEnabledCustomASREnhancementGrammars = new CustomASREnhancementListJSON.HoldingGenerator("field \"EnabledCustomASREnhancementGrammars\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomASREnhancementWeight = new CustomASREnhancementWeightJSON.HoldingGenerator("field \"CustomASREnhancementWeight\" of the RequestInfo class", ignore_extras);
            fieldGeneratorToastEnvironment = new ToastEnvironmentJSON.HoldingGenerator("field \"ToastEnvironment\" of the RequestInfo class", ignore_extras);
            fieldGeneratorIntentToExecute = new CommandIntentJSON.HoldingGenerator("field \"IntentToExecute\" of the RequestInfo class", ignore_extras);
            fieldGeneratorUniversalTranslatorSubstitutionList = new UniversalTranslatorSubstitutionListJSON.HoldingGenerator("field \"UniversalTranslatorSubstitutionList\" of the RequestInfo class", ignore_extras);
            fieldGeneratorCustomTopicIdentificationWriteData = new CustomTopicIdentificationDataJSON.HoldingGenerator("field \"CustomTopicIdentificationWriteData\" of the RequestInfo class", ignore_extras);
            unknownFieldGenerator = new UnknownFieldGenerator(ignore_extras);
            set_what("the RequestInfo class");
            allow_incomplete = false;
            allow_unpolished = false;
          }
        public Generator()
          {
            fieldGeneratorLatitude = new JSONHoldingNumberTextGenerator("field \"Latitude\" of the RequestInfo class");
            fieldGeneratorLongitude = new JSONHoldingNumberTextGenerator("field \"Longitude\" of the RequestInfo class");
            fieldGeneratorPositionTime = new FieldHoldingGeneratorPositionTime("field \"PositionTime\" of the RequestInfo class");
            fieldGeneratorPositionHorizontalAccuracy = new JSONHoldingNumberTextGenerator("field \"PositionHorizontalAccuracy\" of the RequestInfo class");
            fieldGeneratorStreet = new JSONHoldingStringGenerator("field \"Street\" of the RequestInfo class");
            fieldGeneratorCity = new JSONHoldingStringGenerator("field \"City\" of the RequestInfo class");
            fieldGeneratorState = new JSONHoldingStringGenerator("field \"State\" of the RequestInfo class");
            fieldGeneratorCountry = new JSONHoldingStringGenerator("field \"Country\" of the RequestInfo class");
            fieldGeneratorRoutePoints = new RoutePointsJSON.HoldingGenerator("field \"RoutePoints\" of the RequestInfo class", false);
            fieldGeneratorRouteInformation = new ClientRouteInformationJSON.HoldingGenerator("field \"RouteInformation\" of the RequestInfo class", false);
            fieldGeneratorControllableTrackPlaying = new JSONHoldingBooleanGenerator("field \"ControllableTrackPlaying\" of the RequestInfo class");
            fieldGeneratorTimeStamp = new FieldHoldingGeneratorTimeStamp("field \"TimeStamp\" of the RequestInfo class");
            fieldGeneratorTimeZone = new JSONHoldingStringGenerator("field \"TimeZone\" of the RequestInfo class");
            fieldGeneratorConversationState = new ConversationStateJSON.HoldingGenerator("field \"ConversationState\" of the RequestInfo class", false);
            fieldGeneratorClientState = new ClientStateJSON.HoldingGenerator("field \"ClientState\" of the RequestInfo class", false);
            fieldGeneratorDeviceInfo = new TypeDeviceInfoJSON.HoldingGenerator("field \"DeviceInfo\" of the RequestInfo class", false);
            fieldGeneratorSendBack = new JSONHoldingValueGenerator("field \"SendBack\" of the RequestInfo class");
            fieldGeneratorPreferredImageSize = new FieldHoldingArrayGeneratorPreferredImageSize("field \"PreferredImageSize\" of the RequestInfo class");
            fieldGeneratorInputLanguageEnglishName = new JSONHoldingStringGenerator("field \"InputLanguageEnglishName\" of the RequestInfo class");
            fieldGeneratorInputLanguageNativeName = new JSONHoldingStringGenerator("field \"InputLanguageNativeName\" of the RequestInfo class");
            fieldGeneratorInputLanguageIETFTag = new JSONHoldingStringGenerator("field \"InputLanguageIETFTag\" of the RequestInfo class");
            fieldGeneratorOutputLanguageEnglishName = new JSONHoldingStringGenerator("field \"OutputLanguageEnglishName\" of the RequestInfo class");
            fieldGeneratorOutputLanguageNativeName = new JSONHoldingStringGenerator("field \"OutputLanguageNativeName\" of the RequestInfo class");
            fieldGeneratorOutputLanguageIETFTag = new JSONHoldingStringGenerator("field \"OutputLanguageIETFTag\" of the RequestInfo class");
            fieldGeneratorResultVersionAccepted = new JSONHoldingNumberTextGenerator("field \"ResultVersionAccepted\" of the RequestInfo class");
            fieldGeneratorUnitPreference = new FieldHoldingGeneratorUnitPreference("field \"UnitPreference\" of the RequestInfo class");
            fieldGeneratorDefaultTimeFormat24Hours = new JSONHoldingBooleanGenerator("field \"DefaultTimeFormat24Hours\" of the RequestInfo class");
            fieldGeneratorClientID = new JSONHoldingStringGenerator("field \"ClientID\" of the RequestInfo class");
            fieldGeneratorClientVersion = new FieldHoldingGeneratorClientVersion("field \"ClientVersion\" of the RequestInfo class", false);
            fieldGeneratorDeviceID = new JSONHoldingStringGenerator("field \"DeviceID\" of the RequestInfo class");
            fieldGeneratorSDK = new JSONHoldingStringGenerator("field \"SDK\" of the RequestInfo class");
            fieldGeneratorSDKInfo = new JSONHoldingObjectValueGenerator("field \"SDKInfo\" of the RequestInfo class");
            fieldGeneratorFirstPersonSelf = new JSONHoldingStringGenerator("field \"FirstPersonSelf\" of the RequestInfo class");
            fieldGeneratorFirstPersonSelfSpoken = new JSONHoldingStringGenerator("field \"FirstPersonSelfSpoken\" of the RequestInfo class");
            fieldGeneratorSecondPersonSelf = new JSONHoldingStringArrayGenerator("field \"SecondPersonSelf\" of the RequestInfo class");
            fieldGeneratorSecondPersonSelfSpoken = new JSONHoldingStringArrayGenerator("field \"SecondPersonSelfSpoken\" of the RequestInfo class");
            fieldGeneratorWakeUpPhraseIncludedInAudio = new JSONHoldingBooleanGenerator("field \"WakeUpPhraseIncludedInAudio\" of the RequestInfo class");
            fieldGeneratorInitialSecondsOfAudioToIgnore = new JSONHoldingNumberTextGenerator("field \"InitialSecondsOfAudioToIgnore\" of the RequestInfo class");
            fieldGeneratorWakeUpPattern = new JSONHoldingStringGenerator("field \"WakeUpPattern\" of the RequestInfo class");
            fieldGeneratorUserID = new JSONHoldingStringGenerator("field \"UserID\" of the RequestInfo class");
            fieldGeneratorRequestID = new JSONHoldingStringGenerator("field \"RequestID\" of the RequestInfo class");
            fieldGeneratorSessionID = new JSONHoldingStringGenerator("field \"SessionID\" of the RequestInfo class");
            fieldGeneratorDomains = new DomainsJSON.HoldingGenerator("field \"Domains\" of the RequestInfo class", false);
            fieldGeneratorResultUpdateAllowed = new JSONHoldingBooleanGenerator("field \"ResultUpdateAllowed\" of the RequestInfo class");
            fieldGeneratorPartialTranscriptsDesired = new JSONHoldingBooleanGenerator("field \"PartialTranscriptsDesired\" of the RequestInfo class");
            fieldGeneratorMinResults = new FieldHoldingGeneratorMinResults("field \"MinResults\" of the RequestInfo class");
            fieldGeneratorMaxResults = new FieldHoldingGeneratorMaxResults("field \"MaxResults\" of the RequestInfo class");
            fieldGeneratorObjectByteCountPrefix = new JSONHoldingBooleanGenerator("field \"ObjectByteCountPrefix\" of the RequestInfo class");
            fieldGeneratorProfanityFilter = new FieldHoldingGeneratorProfanityFilter("field \"ProfanityFilter\" of the RequestInfo class");
            fieldGeneratorClientMatches = new ClientMatchJSON.HoldingArrayGenerator("field \"ClientMatches\" of the RequestInfo class", false);
            fieldGeneratorClientMatchesOnly = new JSONHoldingBooleanGenerator("field \"ClientMatchesOnly\" of the RequestInfo class");
            fieldGeneratorPagination = new PaginationJSON.HoldingGenerator("field \"Pagination\" of the RequestInfo class", false);
            fieldGeneratorResponseAudioVoice = new JSONHoldingStringGenerator("field \"ResponseAudioVoice\" of the RequestInfo class");
            fieldGeneratorResponseAudioShortOrLong = new FieldHoldingGeneratorResponseAudioShortOrLong("field \"ResponseAudioShortOrLong\" of the RequestInfo class");
            fieldGeneratorResponseAudioAcceptedEncodings = new FieldHoldingArrayGeneratorResponseAudioAcceptedEncodings("field \"ResponseAudioAcceptedEncodings\" of the RequestInfo class");
            fieldGeneratorReturnResponseAudioAsURL = new JSONHoldingBooleanGenerator("field \"ReturnResponseAudioAsURL\" of the RequestInfo class");
            fieldGeneratorVoiceActivityDetection = new VoiceActivityDetectionJSON.HoldingGenerator("field \"VoiceActivityDetection\" of the RequestInfo class", false);
            fieldGeneratorServerDeterminesEndOfAudio = new JSONHoldingBooleanGenerator("field \"ServerDeterminesEndOfAudio\" of the RequestInfo class");
            fieldGeneratorIntentOnly = new JSONHoldingBooleanGenerator("field \"IntentOnly\" of the RequestInfo class");
            fieldGeneratorDisableSpellCorrection = new JSONHoldingBooleanGenerator("field \"DisableSpellCorrection\" of the RequestInfo class");
            fieldGeneratorUseContactData = new JSONHoldingBooleanGenerator("field \"UseContactData\" of the RequestInfo class");
            fieldGeneratorUseClientTime = new JSONHoldingBooleanGenerator("field \"UseClientTime\" of the RequestInfo class");
            fieldGeneratorForceConversationStateTime = new FieldHoldingGeneratorForceConversationStateTime("field \"ForceConversationStateTime\" of the RequestInfo class");
            fieldGeneratorOutputLatticeSize = new FieldHoldingGeneratorOutputLatticeSize("field \"OutputLatticeSize\" of the RequestInfo class");
            fieldGeneratorMatchingMutations = new MatchingMutationsJSON.HoldingGenerator("field \"MatchingMutations\" of the RequestInfo class", false);
            fieldGeneratorUseFormattedTranscriptionAsDefault = new JSONHoldingBooleanGenerator("field \"UseFormattedTranscriptionAsDefault\" of the RequestInfo class");
            fieldGeneratorResponseRanking = new ResponseRankingJSON.HoldingGenerator("field \"ResponseRanking\" of the RequestInfo class", false);
            fieldGeneratorAcapelaVoiceParameters = new AcapelaVoiceParametersJSON.HoldingGenerator("field \"AcapelaVoiceParameters\" of the RequestInfo class", false);
            fieldGeneratorAllowPopularNameContactMatches = new AllowPopularNameContactMatchesJSON.HoldingGenerator("field \"AllowPopularNameContactMatches\" of the RequestInfo class", false);
            fieldGeneratorAlwaysFetchCurrentConditionsData = new AlwaysFetchCurrentConditionsDataJSON.HoldingGenerator("field \"AlwaysFetchCurrentConditionsData\" of the RequestInfo class", false);
            fieldGeneratorAlwaysFetchHourlyForecastData = new AlwaysFetchHourlyForecastDataJSON.HoldingGenerator("field \"AlwaysFetchHourlyForecastData\" of the RequestInfo class", false);
            fieldGeneratorArrivalTime = new DateAndOrTimeJSON.HoldingGenerator("field \"ArrivalTime\" of the RequestInfo class", false);
            fieldGeneratorAvantiMachineState = new AvantiMachineStateJSON.HoldingGenerator("field \"AvantiMachineState\" of the RequestInfo class", false);
            fieldGeneratorBingAdExtensions = new BingRequestInfoAdExtensionsJSON.HoldingGenerator("field \"BingAdExtensions\" of the RequestInfo class", false);
            fieldGeneratorBunnIsConfirmationRequired = new BunnIsConfirmationRequiredJSON.HoldingGenerator("field \"BunnIsConfirmationRequired\" of the RequestInfo class", false);
            fieldGeneratorBunnMachineState = new BunnMachineStateJSON.HoldingGenerator("field \"BunnMachineState\" of the RequestInfo class", false);
            fieldGeneratorCalendarDataSynchronization = new CalendarDataSynchronizationRequestInfoJSON.HoldingGenerator("field \"CalendarDataSynchronization\" of the RequestInfo class", false);
            fieldGeneratorCallPermissions = new CallPermissionsJSON.HoldingGenerator("field \"CallPermissions\" of the RequestInfo class", false);
            fieldGeneratorCarControlClimateClientConfiguration = new CarControlClimateClientConfigurationJSON.HoldingGenerator("field \"CarControlClimateClientConfiguration\" of the RequestInfo class", false);
            fieldGeneratorCarControlClimateTemperatureConfig = new CarControlClimateTemperatureConfigJSON.HoldingGenerator("field \"CarControlClimateTemperatureConfig\" of the RequestInfo class", false);
            fieldGeneratorCarManualModel = new CarManualModelJSON.HoldingGenerator("field \"CarManualModel\" of the RequestInfo class", false);
            fieldGeneratorCarManualNormalizedQueryToSet = new CarManualNormalizedQueryJSON.HoldingGenerator("field \"CarManualNormalizedQueryToSet\" of the RequestInfo class", false);
            fieldGeneratorCarManualResponseToSet = new DynamicResponseJSON.HoldingGenerator("field \"CarManualResponseToSet\" of the RequestInfo class", false);
            fieldGeneratorCarStatus = new CarStatusJSON.HoldingGenerator("field \"CarStatus\" of the RequestInfo class", false);
            fieldGeneratorChargingClientState = new ChargingClientStateJSON.HoldingGenerator("field \"ChargingClientState\" of the RequestInfo class", false);
            fieldGeneratorClientListMatches = new ClientListMatchesJSON.HoldingGenerator("field \"ClientListMatches\" of the RequestInfo class", false);
            fieldGeneratorCollateMusicEntities = new CollateMusicEntitiesJSON.HoldingGenerator("field \"CollateMusicEntities\" of the RequestInfo class", false);
            fieldGeneratorConnectedToThirdPartyMusicApp = new ConnectedToThirdPartyMusicAppJSON.HoldingGenerator("field \"ConnectedToThirdPartyMusicApp\" of the RequestInfo class", false);
            fieldGeneratorContactQueryExclusions = new ContactQueryExclusionsJSON.HoldingGenerator("field \"ContactQueryExclusions\" of the RequestInfo class", false);
            fieldGeneratorPhoneCommandConfiguration = new PhoneCommandConfigurationJSON.HoldingGenerator("field \"PhoneCommandConfiguration\" of the RequestInfo class", false);
            fieldGeneratorConvertToNewInformationNuggets = new ConvertToNewInformationNuggetsJSON.HoldingGenerator("field \"ConvertToNewInformationNuggets\" of the RequestInfo class", false);
            fieldGeneratorCustomSpeechRecognitionPatternsGroupListData = new CustomSpeechRecognitionPatternsGroupListDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsGroupListData\" of the RequestInfo class", false);
            fieldGeneratorCustomSpeechRecognitionPatternsReadData = new CustomSpeechRecognitionPatternsReadDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsReadData\" of the RequestInfo class", false);
            fieldGeneratorCustomSpeechRecognitionPatternsWeight = new CustomSpeechRecognitionPatternsWeightJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsWeight\" of the RequestInfo class", false);
            fieldGeneratorCustomSpeechRecognitionPatternsWriteData = new CustomSpeechRecognitionPatternsDataJSON.HoldingGenerator("field \"CustomSpeechRecognitionPatternsWriteData\" of the RequestInfo class", false);
            fieldGeneratorDeleteUserMemoryLocation = new DeleteUserMemoryLocationJSON.HoldingGenerator("field \"DeleteUserMemoryLocation\" of the RequestInfo class", false);
            fieldGeneratorDisableMusicPlayerListPositionSpecification = new DisableListPositionSpecificationJSON.HoldingGenerator("field \"DisableMusicPlayerListPositionSpecification\" of the RequestInfo class", false);
            fieldGeneratorDisableMusicSearchListPositionSpecification = new DisableListPositionSpecificationJSON.HoldingGenerator("field \"DisableMusicSearchListPositionSpecification\" of the RequestInfo class", false);
            fieldGeneratorDisambiguateResultsBeforeAction = new DisambiguateResultsBeforeActionJSON.HoldingGenerator("field \"DisambiguateResultsBeforeAction\" of the RequestInfo class", false);
            fieldGeneratorDisplayedReminder = new ReminderJSON.HoldingGenerator("field \"DisplayedReminder\" of the RequestInfo class", false);
            fieldGeneratorEnableClientControlInModes = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"EnableClientControlInModes\" of the RequestInfo class", false);
            fieldGeneratorEnableLocalPlacesQueries = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"EnableLocalPlacesQueries\" of the RequestInfo class", false);
            fieldGeneratorLocalPlacesSettings = new LocalPlacesSettingsJSON.HoldingGenerator("field \"LocalPlacesSettings\" of the RequestInfo class", false);
            fieldGeneratorEnableMusicPlayerFavorites = new EnableMusicPlayerFavoritesJSON.HoldingGenerator("field \"EnableMusicPlayerFavorites\" of the RequestInfo class", false);
            fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups = new CustomSpeechRecognitionPatternsGroupListJSON.HoldingGenerator("field \"EnabledCustomSpeechRecognitionPatternGroups\" of the RequestInfo class", false);
            fieldGeneratorEntertainmentClientState = new EntertainmentClientStateJSON.HoldingGenerator("field \"EntertainmentClientState\" of the RequestInfo class", false);
            fieldGeneratorEntertainmentTitlesUploadData = new EntertainmentTitlesUploadDataJSON.HoldingGenerator("field \"EntertainmentTitlesUploadData\" of the RequestInfo class", false);
            fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext = new ExcludeAllMusicResultsWithoutExplicitContextJSON.HoldingGenerator("field \"ExcludeAllMusicResultsWithoutExplicitContext\" of the RequestInfo class", false);
            fieldGeneratorExcludeWikipediaLowConfidenceResults = new ExcludeWikipediaLowConfidenceResultsJSON.HoldingGenerator("field \"ExcludeWikipediaLowConfidenceResults\" of the RequestInfo class", false);
            fieldGeneratorFitBitAccessToken = new FitBitAccessTokenJSON.HoldingGenerator("field \"FitBitAccessToken\" of the RequestInfo class", false);
            fieldGeneratorFitBitRefreshToken = new FitBitRefreshTokenJSON.HoldingGenerator("field \"FitBitRefreshToken\" of the RequestInfo class", false);
            fieldGeneratorGetHumaxMediaCloudURL = new GetHumaxMediaCloudURLJSON.HoldingGenerator("field \"GetHumaxMediaCloudURL\" of the RequestInfo class", false);
            fieldGeneratorGetOAuth2ClientID = new GetClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientID\" of the RequestInfo class", false);
            fieldGeneratorGetOAuth2ClientSecret = new GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientSecret\" of the RequestInfo class", false);
            fieldGeneratorSquare = new GetClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"Square\" of the RequestInfo class", false);
            fieldGeneratorGetOAuth2ClientToken = new GetClientTokenOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"GetOAuth2ClientToken\" of the RequestInfo class", false);
            fieldGeneratorGetUberClientId = new GetUberClientIdJSON.HoldingGenerator("field \"GetUberClientId\" of the RequestInfo class", false);
            fieldGeneratorGetUberServerToken = new GetUberServerTokenJSON.HoldingGenerator("field \"GetUberServerToken\" of the RequestInfo class", false);
            fieldGeneratorHLSRadius = new HLSRadiusJSON.HoldingGenerator("field \"HLSRadius\" of the RequestInfo class", false);
            fieldGeneratorHarmanDeviceRegistration = new HarmanDeviceRegistrationJSON.HoldingGenerator("field \"HarmanDeviceRegistration\" of the RequestInfo class", false);
            fieldGeneratorHarmanHospitalityAmxControllerHttpRequest = new HarmanAmxControllerHttpRequestJSON.HoldingGenerator("field \"HarmanHospitalityAmxControllerHttpRequest\" of the RequestInfo class", false);
            fieldGeneratorHarmanHospitalityMeetingInformation = new HarmanHospitalityMeetingInformationJSON.HoldingGenerator("field \"HarmanHospitalityMeetingInformation\" of the RequestInfo class", false);
            fieldGeneratorHarmanHospitalityPropertyInformation = new HarmanHospitalityPropertyInformationJSON.HoldingGenerator("field \"HarmanHospitalityPropertyInformation\" of the RequestInfo class", false);
            fieldGeneratorHarmanPropertyRegistration = new HarmanPropertyRegistrationJSON.HoldingGenerator("field \"HarmanPropertyRegistration\" of the RequestInfo class", false);
            fieldGeneratorHasTollsOnThisRoad = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"HasTollsOnThisRoad\" of the RequestInfo class", false);
            fieldGeneratorHomeAutomationDomainSettings = new HomeAutomationDomainSettingsJSON.HoldingGenerator("field \"HomeAutomationDomainSettings\" of the RequestInfo class", false);
            fieldGeneratorHondaAgent20MParameters = new HondaAgent20MParametersJSON.HoldingGenerator("field \"HondaAgent20MParameters\" of the RequestInfo class", false);
            fieldGeneratorHondaAgentParameters = new HondaAgentParametersJSON.HoldingGenerator("field \"HondaAgentParameters\" of the RequestInfo class", false);
            fieldGeneratorHondaCarManualParameters = new HondaCarManualParametersJSON.HoldingGenerator("field \"HondaCarManualParameters\" of the RequestInfo class", false);
            fieldGeneratorHueDeviceRegistration = new HueDeviceRegistrationJSON.HoldingGenerator("field \"HueDeviceRegistration\" of the RequestInfo class", false);
            fieldGeneratorHumaxHomeAutomationCredentials = new HumaxHomeAutomationCredentialsJSON.HoldingGenerator("field \"HumaxHomeAutomationCredentials\" of the RequestInfo class", false);
            fieldGeneratorHumaxMediaCloudURL = new HumaxMediaCloudURLJSON.HoldingGenerator("field \"HumaxMediaCloudURL\" of the RequestInfo class", false);
            fieldGeneratorHumaxSmartTVClientState = new HumaxSmartTVClientStateJSON.HoldingGenerator("field \"HumaxSmartTVClientState\" of the RequestInfo class", false);
            fieldGeneratorIHeartMediaDeviceIdentifiers = new IHeartMediaDeviceIdentifiersJSON.HoldingGenerator("field \"IHeartMediaDeviceIdentifiers\" of the RequestInfo class", false);
            fieldGeneratorIHeartRadioPreferArtistStations = new IHeartRadioPreferArtistStationsJSON.HoldingGenerator("field \"IHeartRadioPreferArtistStations\" of the RequestInfo class", false);
            fieldGeneratorIHeartRadioPreferGenericRadioMatches = new IHeartRadioPreferGenericRadioMatchesJSON.HoldingGenerator("field \"IHeartRadioPreferGenericRadioMatches\" of the RequestInfo class", false);
            fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches = new IHeartRadioPreferTerrestrialRadioMatchesJSON.HoldingGenerator("field \"IHeartRadioPreferTerrestrialRadioMatches\" of the RequestInfo class", false);
            fieldGeneratorIftttKeyItem = new IftttKeyItemJSON.HoldingGenerator("field \"IftttKeyItem\" of the RequestInfo class", false);
            fieldGeneratorImageSearchConfiguration = new ImageSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"ImageSearchConfiguration\" of the RequestInfo class", false);
            fieldGeneratorImageSearchRequestInfoProviders = new ImageSearchRequestInfoProvidersJSON.HoldingGenerator("field \"ImageSearchRequestInfoProviders\" of the RequestInfo class", false);
            fieldGeneratorIncludeAllMusicResultsWithoutContext = new IncludeAllMusicResultsWithoutContextJSON.HoldingGenerator("field \"IncludeAllMusicResultsWithoutContext\" of the RequestInfo class", false);
            fieldGeneratorIncomingCallPending = new IncomingCallPendingJSON.HoldingGenerator("field \"IncomingCallPending\" of the RequestInfo class", false);
            fieldGeneratorInputOverrideDeleteFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"InputOverrideDeleteFunction\" of the RequestInfo class", false);
            fieldGeneratorInputOverrideFunction = new InputOverrideFunctionJSON.HoldingGenerator("field \"InputOverrideFunction\" of the RequestInfo class", false);
            fieldGeneratorInputOverrideFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"InputOverrideFunctionLanguage\" of the RequestInfo class", false);
            fieldGeneratorInputOverrideFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"InputOverrideFunctionSource\" of the RequestInfo class", false);
            fieldGeneratorInputOverrideReadFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"InputOverrideReadFunction\" of the RequestInfo class", false);
            fieldGeneratorKuriInfo = new KuriInfoJSON.HoldingGenerator("field \"KuriInfo\" of the RequestInfo class", false);
            fieldGeneratorLocalSearchClientState = new LocalSearchClientStateJSON.HoldingGenerator("field \"LocalSearchClientState\" of the RequestInfo class", false);
            fieldGeneratorMapClientControlPageToScroll = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"MapClientControlPageToScroll\" of the RequestInfo class", false);
            fieldGeneratorMultipleChoiceQuizAPIRequest = new MultipleChoiceQuizAPIRequestJSON.HoldingGenerator("field \"MultipleChoiceQuizAPIRequest\" of the RequestInfo class", false);
            fieldGeneratorMusicClientState = new MusicClientStateJSON.HoldingGenerator("field \"MusicClientState\" of the RequestInfo class", false);
            fieldGeneratorNaritaAirportGuideArea = new NaritaAirportGuideAreaJSON.HoldingGenerator("field \"NaritaAirportGuideArea\" of the RequestInfo class", false);
            fieldGeneratorNaritaAirportGuideFloor = new NaritaAirportGuideFloorJSON.HoldingGenerator("field \"NaritaAirportGuideFloor\" of the RequestInfo class", false);
            fieldGeneratorNaritaAirportGuideTerminal = new NaritaAirportGuideTerminalJSON.HoldingGenerator("field \"NaritaAirportGuideTerminal\" of the RequestInfo class", false);
            fieldGeneratorNavigationControlContext = new NavigationControlContextJSON.HoldingGenerator("field \"NavigationControlContext\" of the RequestInfo class", false);
            fieldGeneratorTurnOffGuidanceMeansMute = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"TurnOffGuidanceMeansMute\" of the RequestInfo class", false);
            fieldGeneratorNavigationLocationDisambiguation = new NavigationLocationDisambiguationConfigJSON.HoldingGenerator("field \"NavigationLocationDisambiguation\" of the RequestInfo class", false);
            fieldGeneratorNewReminder = new CreateReminderFullDataJSON.HoldingGenerator("field \"NewReminder\" of the RequestInfo class", false);
            fieldGeneratorNumberOfVolumeLevels = new NumberOfVolumeLevelsJSON.HoldingGenerator("field \"NumberOfVolumeLevels\" of the RequestInfo class", false);
            fieldGeneratorOAuth2ClientID = new ClientIDOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2ClientID\" of the RequestInfo class", false);
            fieldGeneratorOAuth2ClientSecret = new ClientSecretOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2ClientSecret\" of the RequestInfo class", false);
            fieldGeneratorOAuth2ClientToken = new OAuth2ClientTokenJSON.HoldingGenerator("field \"OAuth2ClientToken\" of the RequestInfo class", false);
            fieldGeneratorOAuth2CodeData = new CodeDataOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2CodeData\" of the RequestInfo class", false);
            fieldGeneratorOAuth2RefreshToken = new RefreshTokenOAuth2RequestInfoFieldJSON.HoldingGenerator("field \"OAuth2RefreshToken\" of the RequestInfo class", false);
            fieldGeneratorOrganizationalChartRequest = new OrganizationalChartRequestJSON.HoldingGenerator("field \"OrganizationalChartRequest\" of the RequestInfo class", false);
            fieldGeneratorOutputDeepIntegrationLattice = new OutputDeepIntegrationLatticeJSON.HoldingGenerator("field \"OutputDeepIntegrationLattice\" of the RequestInfo class", false);
            fieldGeneratorOutputSLMLattice = new OutputSLMLatticeJSON.HoldingGenerator("field \"OutputSLMLattice\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideKind = new OutputOverrideKindJSON.HoldingGenerator("field \"OutputOverrideKind\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideFunctionLanguage\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideFunctionSource\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideCommandIsPreAudioOut = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideCommandIsPreAudioOut\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideDeleteCommandFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideDeleteCommandFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideDeleteInformationNuggetFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideDeleteInformationNuggetFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideInformationNuggetFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunctionLanguage\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideInformationNuggetFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideInformationNuggetFunctionSource\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideReadCommandFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideReadCommandFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideReadInformationNuggetFunction = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"OutputOverrideReadInformationNuggetFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideCommandFunction = new OutputOverrideFunctionJSON.HoldingGenerator("field \"OutputOverrideCommandFunction\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideCommandFunctionLanguage = new UploadedCodeFunctionLanguageJSON.HoldingGenerator("field \"OutputOverrideCommandFunctionLanguage\" of the RequestInfo class", false);
            fieldGeneratorOutputOverrideCommandFunctionSource = new UploadedCodeSourceJSON.HoldingGenerator("field \"OutputOverrideCommandFunctionSource\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomClientPrompt = new ClientPromptPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomClientPrompt\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableComponentFormat = new EnableComponentFormatPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableComponentFormat\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableDomain = new EnableDomainPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableDomain\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableExclusionInTarzanMode = new EnableExclusionInTarzanModePandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableExclusionInTarzanMode\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableInferredPlay = new EnableInferredPlayPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlay\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList = new EnableInferredPlayForPopularEntitiesInExclusionListPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords = new EnableInferredPlayForUnpopularEntitiesWithoutKeywordsPandoraCustomRequestInfoJSON.HoldingGenerator("field \"PandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableLongJSONFallback = new EnableLongJSONFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableLongJSONFallback\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnablePodcastMatches = new EnablePodcastMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnablePodcastMatches\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableUserDataQueries = new EnableUserDataQueriesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableUserDataQueries\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableWildcardMatches = new EnableWildcardMatchesPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableWildcardMatches\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback = new EnableWildcardMatchesOnlyAsFallbackPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomEnableWildcardMatchesOnlyAsFallback\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomExtendedStationModeData = new ExtendedStationModeDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomExtendedStationModeData\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomRapidIngestionData = new RapidIngestionDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomRapidIngestionData\" of the RequestInfo class", false);
            fieldGeneratorPandoraCustomUserData = new UserDataPandoraCustomRequestInfoFieldJSON.HoldingGenerator("field \"PandoraCustomUserData\" of the RequestInfo class", false);
            fieldGeneratorParkingClientState = new ParkingClientStateJSON.HoldingGenerator("field \"ParkingClientState\" of the RequestInfo class", false);
            fieldGeneratorPepperEnabled = new PepperEnabledJSON.HoldingGenerator("field \"PepperEnabled\" of the RequestInfo class", false);
            fieldGeneratorPhoneDisambiguationOmitList = new PhoneDisambiguationOmitListJSON.HoldingGenerator("field \"PhoneDisambiguationOmitList\" of the RequestInfo class", false);
            fieldGeneratorRadioControlAvailableAudioSources = new RadioControlAvailableAudioSourcesJSON.HoldingGenerator("field \"RadioControlAvailableAudioSources\" of the RequestInfo class", false);
            fieldGeneratorRadioControlOtherAMBands = new RadioControlOtherAMBandsJSON.HoldingGenerator("field \"RadioControlOtherAMBands\" of the RequestInfo class", false);
            fieldGeneratorRadioControlOtherFMBands = new RadioControlOtherFMBandsJSON.HoldingGenerator("field \"RadioControlOtherFMBands\" of the RequestInfo class", false);
            fieldGeneratorRadioControlRecognizeNorthAmericanAMBand = new RadioControlRecognizeNorthAmericanAMBandJSON.HoldingGenerator("field \"RadioControlRecognizeNorthAmericanAMBand\" of the RequestInfo class", false);
            fieldGeneratorRadioControlRecognizeNorthAmericanFMBand = new RadioControlRecognizeNorthAmericanFMBandJSON.HoldingGenerator("field \"RadioControlRecognizeNorthAmericanFMBand\" of the RequestInfo class", false);
            fieldGeneratorRadioControlTunableStations = new RadioControlTunableStationsJSON.HoldingGenerator("field \"RadioControlTunableStations\" of the RequestInfo class", false);
            fieldGeneratorReadSpeakerVoiceParameters = new ReadSpeakerVoiceParametersJSON.HoldingGenerator("field \"ReadSpeakerVoiceParameters\" of the RequestInfo class", false);
            fieldGeneratorRecipeParameters = new RecipeParametersJSON.HoldingGenerator("field \"RecipeParameters\" of the RequestInfo class", false);
            fieldGeneratorRegionalPhoneNumberConfiguration = new RegionalPhoneNumberConfigurationJSON.HoldingGenerator("field \"RegionalPhoneNumberConfiguration\" of the RequestInfo class", false);
            fieldGeneratorRemainingDistance = new AmountJSON.HoldingGenerator("field \"RemainingDistance\" of the RequestInfo class", false);
            fieldGeneratorRemainingTravelTime = new AmountJSON.HoldingGenerator("field \"RemainingTravelTime\" of the RequestInfo class", false);
            fieldGeneratorReminders = new ReminderListJSON.HoldingGenerator("field \"Reminders\" of the RequestInfo class", false);
            fieldGeneratorRestaurantMenuMetadata = new RestaurantMenuMetadataJSON.HoldingGenerator("field \"RestaurantMenuMetadata\" of the RequestInfo class", false);
            fieldGeneratorRestaurantMenuObject = new RestaurantMenuObjectJSON.HoldingGenerator("field \"RestaurantMenuObject\" of the RequestInfo class", false);
            fieldGeneratorRestaurantOrderingMenuData = new RestaurantOrderingMenuDataJSON.HoldingGenerator("field \"RestaurantOrderingMenuData\" of the RequestInfo class", false);
            fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID = new RestaurantOrderingQueriesMenuDataStoreIDRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMenuDataStoreID\" of the RequestInfo class", false);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent = new RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntentRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent\" of the RequestInfo class", false);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent = new RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntentRequestInfoFieldJSON.HoldingGenerator("field \"RestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent\" of the RequestInfo class", false);
            fieldGeneratorRestaurantOrderingQueriesRequestData = new RestaurantOrderingQueriesRequestDataJSON.HoldingGenerator("field \"RestaurantOrderingQueriesRequestData\" of the RequestInfo class", false);
            fieldGeneratorReturnInformationNuggetsForMusicSearch = new ReturnInformationNuggetsForMusicSearchJSON.HoldingGenerator("field \"ReturnInformationNuggetsForMusicSearch\" of the RequestInfo class", false);
            fieldGeneratorRobotInfo = new RobotInfoJSON.HoldingGenerator("field \"RobotInfo\" of the RequestInfo class", false);
            fieldGeneratorSendFullWeatherForecastData = new SendFullWeatherForecastDataJSON.HoldingGenerator("field \"SendFullWeatherForecastData\" of the RequestInfo class", false);
            fieldGeneratorSetUserMemoryLocation = new SetUserMemoryLocationJSON.HoldingGenerator("field \"SetUserMemoryLocation\" of the RequestInfo class", false);
            fieldGeneratorSiriusXMEnableDomain = new SiriusXMEnableDomainJSON.HoldingGenerator("field \"SiriusXMEnableDomain\" of the RequestInfo class", false);
            fieldGeneratorSiriusXMEnableGenericChannelMatches = new SiriusXMEnableGenericChannelMatchesJSON.HoldingGenerator("field \"SiriusXMEnableGenericChannelMatches\" of the RequestInfo class", false);
            fieldGeneratorSiriusXMEnableWildcardMatches = new SiriusXMEnableWildcardMatchesJSON.HoldingGenerator("field \"SiriusXMEnableWildcardMatches\" of the RequestInfo class", false);
            fieldGeneratorSmartTVOnScreenItems = new SmartTVOnScreenItemsRequestInfoFieldJSON.HoldingGenerator("field \"SmartTVOnScreenItems\" of the RequestInfo class", false);
            fieldGeneratorSmartTVUserCustomInputSource = new SmartTVUserCustomInputSourceRequestInfoFieldJSON.HoldingGenerator("field \"SmartTVUserCustomInputSource\" of the RequestInfo class", false);
            fieldGeneratorSoundHoundTTSParameters = new SoundHoundTTSParametersJSON.HoldingGenerator("field \"SoundHoundTTSParameters\" of the RequestInfo class", false);
            fieldGeneratorSpeedLimitOnThisRoad = new AmountJSON.HoldingGenerator("field \"SpeedLimitOnThisRoad\" of the RequestInfo class", false);
            fieldGeneratorSportsLeagueControl = new SportsLeagueControlJSON.HoldingGenerator("field \"SportsLeagueControl\" of the RequestInfo class", false);
            fieldGeneratorSpotifyPlaylistEnableWildcardMatches = new EnableWildcardMatchesSpotifyPlaylistRequestInfoFieldJSON.HoldingGenerator("field \"SpotifyPlaylistEnableWildcardMatches\" of the RequestInfo class", false);
            fieldGeneratorStoredAlwaysMatchReadData = new StoredAlwaysMatchReadDataJSON.HoldingGenerator("field \"StoredAlwaysMatchReadData\" of the RequestInfo class", false);
            fieldGeneratorStoredAlwaysMatchWriteData = new ClientMatchesJSON.HoldingGenerator("field \"StoredAlwaysMatchWriteData\" of the RequestInfo class", false);
            fieldGeneratorStoredGlobalPagesToMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToMatch\" of the RequestInfo class", false);
            fieldGeneratorStoredGlobalPagesToNotMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToNotMatch\" of the RequestInfo class", false);
            fieldGeneratorStoredGlobalPagesToSetOffByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToSetOffByDefault\" of the RequestInfo class", false);
            fieldGeneratorStoredGlobalPagesToSetOnByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredGlobalPagesToSetOnByDefault\" of the RequestInfo class", false);
            fieldGeneratorStoredPageMatchPageListData = new StoredPageMatchPageListDataJSON.HoldingGenerator("field \"StoredPageMatchPageListData\" of the RequestInfo class", false);
            fieldGeneratorStoredPageMatchReadData = new StoredPageMatchReadDataJSON.HoldingGenerator("field \"StoredPageMatchReadData\" of the RequestInfo class", false);
            fieldGeneratorStoredPageMatchWeight = new StoredPageMatchWeightJSON.HoldingGenerator("field \"StoredPageMatchWeight\" of the RequestInfo class", false);
            fieldGeneratorStoredPageMatchWriteData = new StoredPageMatchWriteDataJSON.HoldingGenerator("field \"StoredPageMatchWriteData\" of the RequestInfo class", false);
            fieldGeneratorStoredPerUserPagesToMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToMatch\" of the RequestInfo class", false);
            fieldGeneratorStoredPerUserPagesToNotMatch = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToNotMatch\" of the RequestInfo class", false);
            fieldGeneratorStoredPerUserPagesToSetOffByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToSetOffByDefault\" of the RequestInfo class", false);
            fieldGeneratorStoredPerUserPagesToSetOnByDefault = new StoredPageMatchPageListJSON.HoldingGenerator("field \"StoredPerUserPagesToSetOnByDefault\" of the RequestInfo class", false);
            fieldGeneratorSurveyAPIRequest = new SurveyAPIRequestJSON.HoldingGenerator("field \"SurveyAPIRequest\" of the RequestInfo class", false);
            fieldGeneratorTVChannelList = new TVChannelListJSON.HoldingGenerator("field \"TVChannelList\" of the RequestInfo class", false);
            fieldGeneratorTerrierTableUploadReadData = new TerrierTableUploadReadDataJSON.HoldingGenerator("field \"TerrierTableUploadReadData\" of the RequestInfo class", false);
            fieldGeneratorTerrierTableUploadWriteData = new TerrierTableUploadWriteDataJSON.HoldingGenerator("field \"TerrierTableUploadWriteData\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadDeleteProject = new TerrierUploadDeleteProjectJSON.HoldingGenerator("field \"TerrierUploadDeleteProject\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadDeleteProjectOptions = new TerrierUploadDeleteProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadDeleteProjectOptions\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadGetProject = new TerrierUploadGetProjectJSON.HoldingGenerator("field \"TerrierUploadGetProject\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadGetProjectList = new TerrierUploadGetProjectListJSON.HoldingGenerator("field \"TerrierUploadGetProjectList\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadGetProjectListOptions = new TerrierUploadGetProjectListOptionsJSON.HoldingGenerator("field \"TerrierUploadGetProjectListOptions\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadGetProjectOptions = new TerrierUploadGetProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadGetProjectOptions\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadReadData = new TerrierUploadReadDataJSON.HoldingGenerator("field \"TerrierUploadReadData\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadWriteData = new TerrierUploadWriteDataJSON.HoldingGenerator("field \"TerrierUploadWriteData\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadWriteProject = new TerrierUploadedProjectJSON.HoldingGenerator("field \"TerrierUploadWriteProject\" of the RequestInfo class", false);
            fieldGeneratorTerrierUploadWriteProjectOptions = new TerrierUploadWriteProjectOptionsJSON.HoldingGenerator("field \"TerrierUploadWriteProjectOptions\" of the RequestInfo class", false);
            fieldGeneratorThirdPartyCalendarService = new ThirdPartyCalendarServiceJSON.HoldingGenerator("field \"ThirdPartyCalendarService\" of the RequestInfo class", false);
            fieldGeneratorCalendarMatchingLoosenessLevel = new CalendarMatchingLoosenessLevelJSON.HoldingGenerator("field \"CalendarMatchingLoosenessLevel\" of the RequestInfo class", false);
            fieldGeneratorCalendarEvents = new CalendarRequestInfoEventsListJSON.HoldingGenerator("field \"CalendarEvents\" of the RequestInfo class", false);
            fieldGeneratorToshibaTTSParameters = new ToshibaTTSParametersJSON.HoldingGenerator("field \"ToshibaTTSParameters\" of the RequestInfo class", false);
            fieldGeneratorTravelBearing = new HLSHeadingJSON.HoldingGenerator("field \"TravelBearing\" of the RequestInfo class", false);
            fieldGeneratorUDSExampleRequest = new UDSExampleRequestJSON.HoldingGenerator("field \"UDSExampleRequest\" of the RequestInfo class", false);
            fieldGeneratorUberClientId = new UberClientIdJSON.HoldingGenerator("field \"UberClientId\" of the RequestInfo class", false);
            fieldGeneratorUberServerToken = new UberServerTokenJSON.HoldingGenerator("field \"UberServerToken\" of the RequestInfo class", false);
            fieldGeneratorUploadedTestConfiguration = new UploadedTestConfigurationJSON.HoldingGenerator("field \"UploadedTestConfiguration\" of the RequestInfo class", false);
            fieldGeneratorUploadedTestData = new UploadedTestsJSON.HoldingGenerator("field \"UploadedTestData\" of the RequestInfo class", false);
            fieldGeneratorUseNewStyleSMSCommands = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"UseNewStyleSMSCommands\" of the RequestInfo class", false);
            fieldGeneratorUseXAPAPI = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"UseXAPAPI\" of the RequestInfo class", false);
            fieldGeneratorUserContactsConfiguration = new UserContactsConfigurationJSON.HoldingGenerator("field \"UserContactsConfiguration\" of the RequestInfo class", false);
            fieldGeneratorUserContactsRequests = new UserContactsRequestsJSON.HoldingGenerator("field \"UserContactsRequests\" of the RequestInfo class", false);
            fieldGeneratorUserFeedback = new UserFeedbackJSON.HoldingGenerator("field \"UserFeedback\" of the RequestInfo class", false);
            fieldGeneratorUserMusicAvailableSources = new UserMusicAvailableSourcesJSON.HoldingGenerator("field \"UserMusicAvailableSources\" of the RequestInfo class", false);
            fieldGeneratorUserMusicControls = new UserMusicControlsJSON.HoldingGenerator("field \"UserMusicControls\" of the RequestInfo class", false);
            fieldGeneratorUserMusicInfo = new UserMusicInfoJSON.HoldingGenerator("field \"UserMusicInfo\" of the RequestInfo class", false);
            fieldGeneratorVideoSearchConfiguration = new VideoSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"VideoSearchConfiguration\" of the RequestInfo class", false);
            fieldGeneratorVideoSearchRequestInfoProviders = new VideoSearchRequestInfoProvidersJSON.HoldingGenerator("field \"VideoSearchRequestInfoProviders\" of the RequestInfo class", false);
            fieldGeneratorVoiceParameters = new VoiceParametersJSON.HoldingGenerator("field \"VoiceParameters\" of the RequestInfo class", false);
            fieldGeneratorWebSearchConfiguration = new WebSearchRequestInfoConfigurationJSON.HoldingGenerator("field \"WebSearchConfiguration\" of the RequestInfo class", false);
            fieldGeneratorWebSearchRequestInfoProviders = new WebSearchRequestInfoProvidersJSON.HoldingGenerator("field \"WebSearchRequestInfoProviders\" of the RequestInfo class", false);
            fieldGeneratorWhat3WordsCluePhraseNotRequired = new What3WordsCluePhraseNotRequiredJSON.HoldingGenerator("field \"What3WordsCluePhraseNotRequired\" of the RequestInfo class", false);
            fieldGeneratorWhat3WordsStandardGeofenceRadius = new What3WordsStandardGeofenceRadiusJSON.HoldingGenerator("field \"What3WordsStandardGeofenceRadius\" of the RequestInfo class", false);
            fieldGeneratorHereApiPlacesFallback = new HereApiPlacesFallbackSettingsJSON.HoldingGenerator("field \"HereApiPlacesFallback\" of the RequestInfo class", false);
            fieldGeneratorPaymentsPredeterminedSMSNumber = new PaymentsPredeterminedSMSNumberFieldJSON.HoldingGenerator("field \"PaymentsPredeterminedSMSNumber\" of the RequestInfo class", false);
            fieldGeneratorPaymentsPredeterminedPaymentMethod = new PaymentsPaymentMethodTypeJSON.HoldingGenerator("field \"PaymentsPredeterminedPaymentMethod\" of the RequestInfo class", false);
            fieldGeneratorOrderSource = new PaymentsOrderSourceFieldJSON.HoldingGenerator("field \"OrderSource\" of the RequestInfo class", false);
            fieldGeneratorOrderPrepDuration = new PaymentsOrderPrepDurationFieldJSON.HoldingGenerator("field \"OrderPrepDuration\" of the RequestInfo class", false);
            fieldGeneratorSquareEnvironment = new SquareEnvironmentJSON.HoldingGenerator("field \"SquareEnvironment\" of the RequestInfo class", false);
            fieldGeneratorEnableSquareCustomerInformationPermissions = new EnableSquareCustomerInformationPermissionsJSON.HoldingGenerator("field \"EnableSquareCustomerInformationPermissions\" of the RequestInfo class", false);
            fieldGeneratorMessagingConvertPunctuation = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"MessagingConvertPunctuation\" of the RequestInfo class", false);
            fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode = new RequestInfoBooleanFlagJSON.HoldingGenerator("field \"AutoNaviAPIPlacesWildcardPOINameUseWebQueryMode\" of the RequestInfo class", false);
            fieldGeneratorStreamPreference = new StreamPreferenceJSON.HoldingGenerator("field \"StreamPreference\" of the RequestInfo class", false);
            fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand = new MusicQueriesForceInfoNuggetToPlayCommandRequestInfoFieldJSON.HoldingGenerator("field \"MusicQueriesForceInfoNuggetToPlayCommand\" of the RequestInfo class", false);
            fieldGeneratorMusicQueriesAllowRawTop = new MusicQueriesAllowRawTopRequestInfoFieldJSON.HoldingGenerator("field \"MusicQueriesAllowRawTop\" of the RequestInfo class", false);
            fieldGeneratorBusinessInformationUploadData = new BusinessInformationUploadDataRequestJSON.HoldingGenerator("field \"BusinessInformationUploadData\" of the RequestInfo class", false);
            fieldGeneratorBusinessInformationDataStoreId = new BusinessInformationDataStoreIdJSON.HoldingGenerator("field \"BusinessInformationDataStoreId\" of the RequestInfo class", false);
            fieldGeneratorCustomASREnhancementWriteData = new CustomASREnhancementDataJSON.HoldingGenerator("field \"CustomASREnhancementWriteData\" of the RequestInfo class", false);
            fieldGeneratorCustomASREnhancementReadData = new CustomASREnhancementReadDataJSON.HoldingGenerator("field \"CustomASREnhancementReadData\" of the RequestInfo class", false);
            fieldGeneratorCustomASREnhancementListData = new CustomASREnhancementListDataJSON.HoldingGenerator("field \"CustomASREnhancementListData\" of the RequestInfo class", false);
            fieldGeneratorEnabledCustomASREnhancementGrammars = new CustomASREnhancementListJSON.HoldingGenerator("field \"EnabledCustomASREnhancementGrammars\" of the RequestInfo class", false);
            fieldGeneratorCustomASREnhancementWeight = new CustomASREnhancementWeightJSON.HoldingGenerator("field \"CustomASREnhancementWeight\" of the RequestInfo class", false);
            fieldGeneratorToastEnvironment = new ToastEnvironmentJSON.HoldingGenerator("field \"ToastEnvironment\" of the RequestInfo class", false);
            fieldGeneratorIntentToExecute = new CommandIntentJSON.HoldingGenerator("field \"IntentToExecute\" of the RequestInfo class", false);
            fieldGeneratorUniversalTranslatorSubstitutionList = new UniversalTranslatorSubstitutionListJSON.HoldingGenerator("field \"UniversalTranslatorSubstitutionList\" of the RequestInfo class", false);
            fieldGeneratorCustomTopicIdentificationWriteData = new CustomTopicIdentificationDataJSON.HoldingGenerator("field \"CustomTopicIdentificationWriteData\" of the RequestInfo class", false);
            unknownFieldGenerator = new UnknownFieldGenerator(false);
            set_what("the RequestInfo class");
            allow_incomplete = false;
            allow_unpolished = false;
          }

        public override void reset()
          {
            fieldGeneratorLatitude.reset();
            fieldGeneratorLongitude.reset();
            fieldGeneratorPositionTime.reset();
            fieldGeneratorPositionHorizontalAccuracy.reset();
            fieldGeneratorStreet.reset();
            fieldGeneratorCity.reset();
            fieldGeneratorState.reset();
            fieldGeneratorCountry.reset();
            fieldGeneratorRoutePoints.reset();
            fieldGeneratorRouteInformation.reset();
            fieldGeneratorControllableTrackPlaying.reset();
            fieldGeneratorTimeStamp.reset();
            fieldGeneratorTimeZone.reset();
            fieldGeneratorConversationState.reset();
            fieldGeneratorClientState.reset();
            fieldGeneratorDeviceInfo.reset();
            fieldGeneratorSendBack.reset();
            fieldGeneratorPreferredImageSize.reset();
            fieldGeneratorInputLanguageEnglishName.reset();
            fieldGeneratorInputLanguageNativeName.reset();
            fieldGeneratorInputLanguageIETFTag.reset();
            fieldGeneratorOutputLanguageEnglishName.reset();
            fieldGeneratorOutputLanguageNativeName.reset();
            fieldGeneratorOutputLanguageIETFTag.reset();
            fieldGeneratorResultVersionAccepted.reset();
            fieldGeneratorUnitPreference.reset();
            fieldGeneratorDefaultTimeFormat24Hours.reset();
            fieldGeneratorClientID.reset();
            fieldGeneratorClientVersion.reset();
            fieldGeneratorDeviceID.reset();
            fieldGeneratorSDK.reset();
            fieldGeneratorSDKInfo.reset();
            fieldGeneratorFirstPersonSelf.reset();
            fieldGeneratorFirstPersonSelfSpoken.reset();
            fieldGeneratorSecondPersonSelf.reset();
            fieldGeneratorSecondPersonSelfSpoken.reset();
            fieldGeneratorWakeUpPhraseIncludedInAudio.reset();
            fieldGeneratorInitialSecondsOfAudioToIgnore.reset();
            fieldGeneratorWakeUpPattern.reset();
            fieldGeneratorUserID.reset();
            fieldGeneratorRequestID.reset();
            fieldGeneratorSessionID.reset();
            fieldGeneratorDomains.reset();
            fieldGeneratorResultUpdateAllowed.reset();
            fieldGeneratorPartialTranscriptsDesired.reset();
            fieldGeneratorMinResults.reset();
            fieldGeneratorMaxResults.reset();
            fieldGeneratorObjectByteCountPrefix.reset();
            fieldGeneratorProfanityFilter.reset();
            fieldGeneratorClientMatches.reset();
            fieldGeneratorClientMatchesOnly.reset();
            fieldGeneratorPagination.reset();
            fieldGeneratorResponseAudioVoice.reset();
            fieldGeneratorResponseAudioShortOrLong.reset();
            fieldGeneratorResponseAudioAcceptedEncodings.reset();
            fieldGeneratorReturnResponseAudioAsURL.reset();
            fieldGeneratorVoiceActivityDetection.reset();
            fieldGeneratorServerDeterminesEndOfAudio.reset();
            fieldGeneratorIntentOnly.reset();
            fieldGeneratorDisableSpellCorrection.reset();
            fieldGeneratorUseContactData.reset();
            fieldGeneratorUseClientTime.reset();
            fieldGeneratorForceConversationStateTime.reset();
            fieldGeneratorOutputLatticeSize.reset();
            fieldGeneratorMatchingMutations.reset();
            fieldGeneratorUseFormattedTranscriptionAsDefault.reset();
            fieldGeneratorResponseRanking.reset();
            fieldGeneratorAcapelaVoiceParameters.reset();
            fieldGeneratorAllowPopularNameContactMatches.reset();
            fieldGeneratorAlwaysFetchCurrentConditionsData.reset();
            fieldGeneratorAlwaysFetchHourlyForecastData.reset();
            fieldGeneratorArrivalTime.reset();
            fieldGeneratorAvantiMachineState.reset();
            fieldGeneratorBingAdExtensions.reset();
            fieldGeneratorBunnIsConfirmationRequired.reset();
            fieldGeneratorBunnMachineState.reset();
            fieldGeneratorCalendarDataSynchronization.reset();
            fieldGeneratorCallPermissions.reset();
            fieldGeneratorCarControlClimateClientConfiguration.reset();
            fieldGeneratorCarControlClimateTemperatureConfig.reset();
            fieldGeneratorCarManualModel.reset();
            fieldGeneratorCarManualNormalizedQueryToSet.reset();
            fieldGeneratorCarManualResponseToSet.reset();
            fieldGeneratorCarStatus.reset();
            fieldGeneratorChargingClientState.reset();
            fieldGeneratorClientListMatches.reset();
            fieldGeneratorCollateMusicEntities.reset();
            fieldGeneratorConnectedToThirdPartyMusicApp.reset();
            fieldGeneratorContactQueryExclusions.reset();
            fieldGeneratorPhoneCommandConfiguration.reset();
            fieldGeneratorConvertToNewInformationNuggets.reset();
            fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.reset();
            fieldGeneratorCustomSpeechRecognitionPatternsReadData.reset();
            fieldGeneratorCustomSpeechRecognitionPatternsWeight.reset();
            fieldGeneratorCustomSpeechRecognitionPatternsWriteData.reset();
            fieldGeneratorDeleteUserMemoryLocation.reset();
            fieldGeneratorDisableMusicPlayerListPositionSpecification.reset();
            fieldGeneratorDisableMusicSearchListPositionSpecification.reset();
            fieldGeneratorDisambiguateResultsBeforeAction.reset();
            fieldGeneratorDisplayedReminder.reset();
            fieldGeneratorEnableClientControlInModes.reset();
            fieldGeneratorEnableLocalPlacesQueries.reset();
            fieldGeneratorLocalPlacesSettings.reset();
            fieldGeneratorEnableMusicPlayerFavorites.reset();
            fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.reset();
            fieldGeneratorEntertainmentClientState.reset();
            fieldGeneratorEntertainmentTitlesUploadData.reset();
            fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.reset();
            fieldGeneratorExcludeWikipediaLowConfidenceResults.reset();
            fieldGeneratorFitBitAccessToken.reset();
            fieldGeneratorFitBitRefreshToken.reset();
            fieldGeneratorGetHumaxMediaCloudURL.reset();
            fieldGeneratorGetOAuth2ClientID.reset();
            fieldGeneratorGetOAuth2ClientSecret.reset();
            fieldGeneratorSquare.reset();
            fieldGeneratorGetOAuth2ClientToken.reset();
            fieldGeneratorGetUberClientId.reset();
            fieldGeneratorGetUberServerToken.reset();
            fieldGeneratorHLSRadius.reset();
            fieldGeneratorHarmanDeviceRegistration.reset();
            fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.reset();
            fieldGeneratorHarmanHospitalityMeetingInformation.reset();
            fieldGeneratorHarmanHospitalityPropertyInformation.reset();
            fieldGeneratorHarmanPropertyRegistration.reset();
            fieldGeneratorHasTollsOnThisRoad.reset();
            fieldGeneratorHomeAutomationDomainSettings.reset();
            fieldGeneratorHondaAgent20MParameters.reset();
            fieldGeneratorHondaAgentParameters.reset();
            fieldGeneratorHondaCarManualParameters.reset();
            fieldGeneratorHueDeviceRegistration.reset();
            fieldGeneratorHumaxHomeAutomationCredentials.reset();
            fieldGeneratorHumaxMediaCloudURL.reset();
            fieldGeneratorHumaxSmartTVClientState.reset();
            fieldGeneratorIHeartMediaDeviceIdentifiers.reset();
            fieldGeneratorIHeartRadioPreferArtistStations.reset();
            fieldGeneratorIHeartRadioPreferGenericRadioMatches.reset();
            fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.reset();
            fieldGeneratorIftttKeyItem.reset();
            fieldGeneratorImageSearchConfiguration.reset();
            fieldGeneratorImageSearchRequestInfoProviders.reset();
            fieldGeneratorIncludeAllMusicResultsWithoutContext.reset();
            fieldGeneratorIncomingCallPending.reset();
            fieldGeneratorInputOverrideDeleteFunction.reset();
            fieldGeneratorInputOverrideFunction.reset();
            fieldGeneratorInputOverrideFunctionLanguage.reset();
            fieldGeneratorInputOverrideFunctionSource.reset();
            fieldGeneratorInputOverrideReadFunction.reset();
            fieldGeneratorKuriInfo.reset();
            fieldGeneratorLocalSearchClientState.reset();
            fieldGeneratorMapClientControlPageToScroll.reset();
            fieldGeneratorMultipleChoiceQuizAPIRequest.reset();
            fieldGeneratorMusicClientState.reset();
            fieldGeneratorNaritaAirportGuideArea.reset();
            fieldGeneratorNaritaAirportGuideFloor.reset();
            fieldGeneratorNaritaAirportGuideTerminal.reset();
            fieldGeneratorNavigationControlContext.reset();
            fieldGeneratorTurnOffGuidanceMeansMute.reset();
            fieldGeneratorNavigationLocationDisambiguation.reset();
            fieldGeneratorNewReminder.reset();
            fieldGeneratorNumberOfVolumeLevels.reset();
            fieldGeneratorOAuth2ClientID.reset();
            fieldGeneratorOAuth2ClientSecret.reset();
            fieldGeneratorOAuth2ClientToken.reset();
            fieldGeneratorOAuth2CodeData.reset();
            fieldGeneratorOAuth2RefreshToken.reset();
            fieldGeneratorOrganizationalChartRequest.reset();
            fieldGeneratorOutputDeepIntegrationLattice.reset();
            fieldGeneratorOutputSLMLattice.reset();
            fieldGeneratorOutputOverrideKind.reset();
            fieldGeneratorOutputOverrideFunction.reset();
            fieldGeneratorOutputOverrideFunctionLanguage.reset();
            fieldGeneratorOutputOverrideFunctionSource.reset();
            fieldGeneratorOutputOverrideCommandIsPreAudioOut.reset();
            fieldGeneratorOutputOverrideDeleteCommandFunction.reset();
            fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.reset();
            fieldGeneratorOutputOverrideInformationNuggetFunction.reset();
            fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.reset();
            fieldGeneratorOutputOverrideInformationNuggetFunctionSource.reset();
            fieldGeneratorOutputOverrideReadCommandFunction.reset();
            fieldGeneratorOutputOverrideReadInformationNuggetFunction.reset();
            fieldGeneratorOutputOverrideCommandFunction.reset();
            fieldGeneratorOutputOverrideCommandFunctionLanguage.reset();
            fieldGeneratorOutputOverrideCommandFunctionSource.reset();
            fieldGeneratorPandoraCustomClientPrompt.reset();
            fieldGeneratorPandoraCustomEnableComponentFormat.reset();
            fieldGeneratorPandoraCustomEnableDomain.reset();
            fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.reset();
            fieldGeneratorPandoraCustomEnableInferredPlay.reset();
            fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.reset();
            fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.reset();
            fieldGeneratorPandoraCustomEnableLongJSONFallback.reset();
            fieldGeneratorPandoraCustomEnablePodcastMatches.reset();
            fieldGeneratorPandoraCustomEnableUserDataQueries.reset();
            fieldGeneratorPandoraCustomEnableWildcardMatches.reset();
            fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.reset();
            fieldGeneratorPandoraCustomExtendedStationModeData.reset();
            fieldGeneratorPandoraCustomRapidIngestionData.reset();
            fieldGeneratorPandoraCustomUserData.reset();
            fieldGeneratorParkingClientState.reset();
            fieldGeneratorPepperEnabled.reset();
            fieldGeneratorPhoneDisambiguationOmitList.reset();
            fieldGeneratorRadioControlAvailableAudioSources.reset();
            fieldGeneratorRadioControlOtherAMBands.reset();
            fieldGeneratorRadioControlOtherFMBands.reset();
            fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.reset();
            fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.reset();
            fieldGeneratorRadioControlTunableStations.reset();
            fieldGeneratorReadSpeakerVoiceParameters.reset();
            fieldGeneratorRecipeParameters.reset();
            fieldGeneratorRegionalPhoneNumberConfiguration.reset();
            fieldGeneratorRemainingDistance.reset();
            fieldGeneratorRemainingTravelTime.reset();
            fieldGeneratorReminders.reset();
            fieldGeneratorRestaurantMenuMetadata.reset();
            fieldGeneratorRestaurantMenuObject.reset();
            fieldGeneratorRestaurantOrderingMenuData.reset();
            fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.reset();
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.reset();
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.reset();
            fieldGeneratorRestaurantOrderingQueriesRequestData.reset();
            fieldGeneratorReturnInformationNuggetsForMusicSearch.reset();
            fieldGeneratorRobotInfo.reset();
            fieldGeneratorSendFullWeatherForecastData.reset();
            fieldGeneratorSetUserMemoryLocation.reset();
            fieldGeneratorSiriusXMEnableDomain.reset();
            fieldGeneratorSiriusXMEnableGenericChannelMatches.reset();
            fieldGeneratorSiriusXMEnableWildcardMatches.reset();
            fieldGeneratorSmartTVOnScreenItems.reset();
            fieldGeneratorSmartTVUserCustomInputSource.reset();
            fieldGeneratorSoundHoundTTSParameters.reset();
            fieldGeneratorSpeedLimitOnThisRoad.reset();
            fieldGeneratorSportsLeagueControl.reset();
            fieldGeneratorSpotifyPlaylistEnableWildcardMatches.reset();
            fieldGeneratorStoredAlwaysMatchReadData.reset();
            fieldGeneratorStoredAlwaysMatchWriteData.reset();
            fieldGeneratorStoredGlobalPagesToMatch.reset();
            fieldGeneratorStoredGlobalPagesToNotMatch.reset();
            fieldGeneratorStoredGlobalPagesToSetOffByDefault.reset();
            fieldGeneratorStoredGlobalPagesToSetOnByDefault.reset();
            fieldGeneratorStoredPageMatchPageListData.reset();
            fieldGeneratorStoredPageMatchReadData.reset();
            fieldGeneratorStoredPageMatchWeight.reset();
            fieldGeneratorStoredPageMatchWriteData.reset();
            fieldGeneratorStoredPerUserPagesToMatch.reset();
            fieldGeneratorStoredPerUserPagesToNotMatch.reset();
            fieldGeneratorStoredPerUserPagesToSetOffByDefault.reset();
            fieldGeneratorStoredPerUserPagesToSetOnByDefault.reset();
            fieldGeneratorSurveyAPIRequest.reset();
            fieldGeneratorTVChannelList.reset();
            fieldGeneratorTerrierTableUploadReadData.reset();
            fieldGeneratorTerrierTableUploadWriteData.reset();
            fieldGeneratorTerrierUploadDeleteProject.reset();
            fieldGeneratorTerrierUploadDeleteProjectOptions.reset();
            fieldGeneratorTerrierUploadGetProject.reset();
            fieldGeneratorTerrierUploadGetProjectList.reset();
            fieldGeneratorTerrierUploadGetProjectListOptions.reset();
            fieldGeneratorTerrierUploadGetProjectOptions.reset();
            fieldGeneratorTerrierUploadReadData.reset();
            fieldGeneratorTerrierUploadWriteData.reset();
            fieldGeneratorTerrierUploadWriteProject.reset();
            fieldGeneratorTerrierUploadWriteProjectOptions.reset();
            fieldGeneratorThirdPartyCalendarService.reset();
            fieldGeneratorCalendarMatchingLoosenessLevel.reset();
            fieldGeneratorCalendarEvents.reset();
            fieldGeneratorToshibaTTSParameters.reset();
            fieldGeneratorTravelBearing.reset();
            fieldGeneratorUDSExampleRequest.reset();
            fieldGeneratorUberClientId.reset();
            fieldGeneratorUberServerToken.reset();
            fieldGeneratorUploadedTestConfiguration.reset();
            fieldGeneratorUploadedTestData.reset();
            fieldGeneratorUseNewStyleSMSCommands.reset();
            fieldGeneratorUseXAPAPI.reset();
            fieldGeneratorUserContactsConfiguration.reset();
            fieldGeneratorUserContactsRequests.reset();
            fieldGeneratorUserFeedback.reset();
            fieldGeneratorUserMusicAvailableSources.reset();
            fieldGeneratorUserMusicControls.reset();
            fieldGeneratorUserMusicInfo.reset();
            fieldGeneratorVideoSearchConfiguration.reset();
            fieldGeneratorVideoSearchRequestInfoProviders.reset();
            fieldGeneratorVoiceParameters.reset();
            fieldGeneratorWebSearchConfiguration.reset();
            fieldGeneratorWebSearchRequestInfoProviders.reset();
            fieldGeneratorWhat3WordsCluePhraseNotRequired.reset();
            fieldGeneratorWhat3WordsStandardGeofenceRadius.reset();
            fieldGeneratorHereApiPlacesFallback.reset();
            fieldGeneratorPaymentsPredeterminedSMSNumber.reset();
            fieldGeneratorPaymentsPredeterminedPaymentMethod.reset();
            fieldGeneratorOrderSource.reset();
            fieldGeneratorOrderPrepDuration.reset();
            fieldGeneratorSquareEnvironment.reset();
            fieldGeneratorEnableSquareCustomerInformationPermissions.reset();
            fieldGeneratorMessagingConvertPunctuation.reset();
            fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.reset();
            fieldGeneratorStreamPreference.reset();
            fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.reset();
            fieldGeneratorMusicQueriesAllowRawTop.reset();
            fieldGeneratorBusinessInformationUploadData.reset();
            fieldGeneratorBusinessInformationDataStoreId.reset();
            fieldGeneratorCustomASREnhancementWriteData.reset();
            fieldGeneratorCustomASREnhancementReadData.reset();
            fieldGeneratorCustomASREnhancementListData.reset();
            fieldGeneratorEnabledCustomASREnhancementGrammars.reset();
            fieldGeneratorCustomASREnhancementWeight.reset();
            fieldGeneratorToastEnvironment.reset();
            fieldGeneratorIntentToExecute.reset();
            fieldGeneratorUniversalTranslatorSubstitutionList.reset();
            fieldGeneratorCustomTopicIdentificationWriteData.reset();
            base.reset();
            unknownFieldGenerator.reset();
          }
        public void set_allow_incomplete(bool new_allow_incomplete)
          {
            allow_incomplete = new_allow_incomplete;
            fieldGeneratorRoutePoints.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRouteInformation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorConversationState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDeviceInfo.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDomains.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorClientMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPagination.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorVoiceActivityDetection.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMatchingMutations.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorResponseRanking.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAcapelaVoiceParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAllowPopularNameContactMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAlwaysFetchCurrentConditionsData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAlwaysFetchHourlyForecastData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorArrivalTime.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAvantiMachineState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorBingAdExtensions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorBunnIsConfirmationRequired.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorBunnMachineState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCalendarDataSynchronization.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCallPermissions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarControlClimateClientConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarControlClimateTemperatureConfig.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarManualModel.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarManualNormalizedQueryToSet.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarManualResponseToSet.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCarStatus.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorChargingClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorClientListMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCollateMusicEntities.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorConnectedToThirdPartyMusicApp.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorContactQueryExclusions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPhoneCommandConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorConvertToNewInformationNuggets.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomSpeechRecognitionPatternsReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomSpeechRecognitionPatternsWeight.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomSpeechRecognitionPatternsWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDeleteUserMemoryLocation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDisableMusicPlayerListPositionSpecification.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDisableMusicSearchListPositionSpecification.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDisambiguateResultsBeforeAction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorDisplayedReminder.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnableClientControlInModes.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnableLocalPlacesQueries.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorLocalPlacesSettings.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnableMusicPlayerFavorites.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEntertainmentClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEntertainmentTitlesUploadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorExcludeWikipediaLowConfidenceResults.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorFitBitAccessToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorFitBitRefreshToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetHumaxMediaCloudURL.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetOAuth2ClientID.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetOAuth2ClientSecret.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSquare.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetOAuth2ClientToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetUberClientId.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorGetUberServerToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHLSRadius.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHarmanDeviceRegistration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHarmanHospitalityMeetingInformation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHarmanHospitalityPropertyInformation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHarmanPropertyRegistration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHasTollsOnThisRoad.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHomeAutomationDomainSettings.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHondaAgent20MParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHondaAgentParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHondaCarManualParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHueDeviceRegistration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHumaxHomeAutomationCredentials.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHumaxMediaCloudURL.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHumaxSmartTVClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIHeartMediaDeviceIdentifiers.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIHeartRadioPreferArtistStations.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIHeartRadioPreferGenericRadioMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIftttKeyItem.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorImageSearchConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorImageSearchRequestInfoProviders.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIncludeAllMusicResultsWithoutContext.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIncomingCallPending.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorInputOverrideDeleteFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorInputOverrideFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorInputOverrideFunctionLanguage.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorInputOverrideFunctionSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorInputOverrideReadFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorKuriInfo.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorLocalSearchClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMapClientControlPageToScroll.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMultipleChoiceQuizAPIRequest.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMusicClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNaritaAirportGuideArea.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNaritaAirportGuideFloor.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNaritaAirportGuideTerminal.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNavigationControlContext.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTurnOffGuidanceMeansMute.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNavigationLocationDisambiguation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNewReminder.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorNumberOfVolumeLevels.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOAuth2ClientID.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOAuth2ClientSecret.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOAuth2ClientToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOAuth2CodeData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOAuth2RefreshToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOrganizationalChartRequest.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputDeepIntegrationLattice.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputSLMLattice.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideKind.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideFunctionLanguage.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideFunctionSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideCommandIsPreAudioOut.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideDeleteCommandFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideInformationNuggetFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideInformationNuggetFunctionSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideReadCommandFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideReadInformationNuggetFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideCommandFunction.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideCommandFunctionLanguage.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOutputOverrideCommandFunctionSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomClientPrompt.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableComponentFormat.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableDomain.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableInferredPlay.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableLongJSONFallback.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnablePodcastMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableUserDataQueries.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableWildcardMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomExtendedStationModeData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomRapidIngestionData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPandoraCustomUserData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorParkingClientState.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPepperEnabled.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPhoneDisambiguationOmitList.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlAvailableAudioSources.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlOtherAMBands.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlOtherFMBands.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRadioControlTunableStations.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorReadSpeakerVoiceParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRecipeParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRegionalPhoneNumberConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRemainingDistance.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRemainingTravelTime.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorReminders.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantMenuMetadata.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantMenuObject.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantOrderingMenuData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRestaurantOrderingQueriesRequestData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorReturnInformationNuggetsForMusicSearch.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorRobotInfo.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSendFullWeatherForecastData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSetUserMemoryLocation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSiriusXMEnableDomain.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSiriusXMEnableGenericChannelMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSiriusXMEnableWildcardMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSmartTVOnScreenItems.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSmartTVUserCustomInputSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSoundHoundTTSParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSpeedLimitOnThisRoad.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSportsLeagueControl.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSpotifyPlaylistEnableWildcardMatches.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredAlwaysMatchReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredAlwaysMatchWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredGlobalPagesToMatch.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredGlobalPagesToNotMatch.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredGlobalPagesToSetOffByDefault.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredGlobalPagesToSetOnByDefault.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPageMatchPageListData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPageMatchReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPageMatchWeight.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPageMatchWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPerUserPagesToMatch.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPerUserPagesToNotMatch.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPerUserPagesToSetOffByDefault.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStoredPerUserPagesToSetOnByDefault.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSurveyAPIRequest.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTVChannelList.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierTableUploadReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierTableUploadWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadDeleteProject.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadDeleteProjectOptions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadGetProject.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadGetProjectList.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadGetProjectListOptions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadGetProjectOptions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadWriteProject.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTerrierUploadWriteProjectOptions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorThirdPartyCalendarService.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCalendarMatchingLoosenessLevel.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCalendarEvents.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorToshibaTTSParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorTravelBearing.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUDSExampleRequest.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUberClientId.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUberServerToken.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUploadedTestConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUploadedTestData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUseNewStyleSMSCommands.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUseXAPAPI.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserContactsConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserContactsRequests.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserFeedback.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserMusicAvailableSources.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserMusicControls.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUserMusicInfo.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorVideoSearchConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorVideoSearchRequestInfoProviders.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorVoiceParameters.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorWebSearchConfiguration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorWebSearchRequestInfoProviders.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorWhat3WordsCluePhraseNotRequired.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorWhat3WordsStandardGeofenceRadius.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorHereApiPlacesFallback.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPaymentsPredeterminedSMSNumber.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorPaymentsPredeterminedPaymentMethod.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOrderSource.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorOrderPrepDuration.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorSquareEnvironment.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnableSquareCustomerInformationPermissions.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMessagingConvertPunctuation.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorStreamPreference.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorMusicQueriesAllowRawTop.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorBusinessInformationUploadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorBusinessInformationDataStoreId.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomASREnhancementWriteData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomASREnhancementReadData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomASREnhancementListData.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorEnabledCustomASREnhancementGrammars.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomASREnhancementWeight.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorToastEnvironment.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorIntentToExecute.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorUniversalTranslatorSubstitutionList.set_allow_incomplete(new_allow_incomplete);
            fieldGeneratorCustomTopicIdentificationWriteData.set_allow_incomplete(new_allow_incomplete);
          }
        public void set_allow_unpolished(bool new_allow_unpolished)
          {
            allow_unpolished = new_allow_unpolished;
            fieldGeneratorRoutePoints.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRouteInformation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorConversationState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDeviceInfo.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDomains.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorClientMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPagination.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorVoiceActivityDetection.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMatchingMutations.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorResponseRanking.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAcapelaVoiceParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAllowPopularNameContactMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAlwaysFetchCurrentConditionsData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAlwaysFetchHourlyForecastData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorArrivalTime.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAvantiMachineState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorBingAdExtensions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorBunnIsConfirmationRequired.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorBunnMachineState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCalendarDataSynchronization.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCallPermissions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarControlClimateClientConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarControlClimateTemperatureConfig.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarManualModel.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarManualNormalizedQueryToSet.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarManualResponseToSet.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCarStatus.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorChargingClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorClientListMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCollateMusicEntities.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorConnectedToThirdPartyMusicApp.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorContactQueryExclusions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPhoneCommandConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorConvertToNewInformationNuggets.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomSpeechRecognitionPatternsGroupListData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomSpeechRecognitionPatternsReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomSpeechRecognitionPatternsWeight.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomSpeechRecognitionPatternsWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDeleteUserMemoryLocation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDisableMusicPlayerListPositionSpecification.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDisableMusicSearchListPositionSpecification.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDisambiguateResultsBeforeAction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorDisplayedReminder.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnableClientControlInModes.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnableLocalPlacesQueries.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorLocalPlacesSettings.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnableMusicPlayerFavorites.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnabledCustomSpeechRecognitionPatternGroups.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEntertainmentClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEntertainmentTitlesUploadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorExcludeAllMusicResultsWithoutExplicitContext.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorExcludeWikipediaLowConfidenceResults.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorFitBitAccessToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorFitBitRefreshToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetHumaxMediaCloudURL.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetOAuth2ClientID.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetOAuth2ClientSecret.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSquare.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetOAuth2ClientToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetUberClientId.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorGetUberServerToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHLSRadius.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHarmanDeviceRegistration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHarmanHospitalityAmxControllerHttpRequest.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHarmanHospitalityMeetingInformation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHarmanHospitalityPropertyInformation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHarmanPropertyRegistration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHasTollsOnThisRoad.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHomeAutomationDomainSettings.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHondaAgent20MParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHondaAgentParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHondaCarManualParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHueDeviceRegistration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHumaxHomeAutomationCredentials.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHumaxMediaCloudURL.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHumaxSmartTVClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIHeartMediaDeviceIdentifiers.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIHeartRadioPreferArtistStations.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIHeartRadioPreferGenericRadioMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIHeartRadioPreferTerrestrialRadioMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIftttKeyItem.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorImageSearchConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorImageSearchRequestInfoProviders.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIncludeAllMusicResultsWithoutContext.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIncomingCallPending.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorInputOverrideDeleteFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorInputOverrideFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorInputOverrideFunctionLanguage.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorInputOverrideFunctionSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorInputOverrideReadFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorKuriInfo.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorLocalSearchClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMapClientControlPageToScroll.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMultipleChoiceQuizAPIRequest.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMusicClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNaritaAirportGuideArea.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNaritaAirportGuideFloor.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNaritaAirportGuideTerminal.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNavigationControlContext.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTurnOffGuidanceMeansMute.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNavigationLocationDisambiguation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNewReminder.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorNumberOfVolumeLevels.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOAuth2ClientID.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOAuth2ClientSecret.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOAuth2ClientToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOAuth2CodeData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOAuth2RefreshToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOrganizationalChartRequest.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputDeepIntegrationLattice.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputSLMLattice.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideKind.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideFunctionLanguage.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideFunctionSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideCommandIsPreAudioOut.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideDeleteCommandFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideDeleteInformationNuggetFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideInformationNuggetFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideInformationNuggetFunctionLanguage.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideInformationNuggetFunctionSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideReadCommandFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideReadInformationNuggetFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideCommandFunction.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideCommandFunctionLanguage.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOutputOverrideCommandFunctionSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomClientPrompt.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableComponentFormat.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableDomain.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableExclusionInTarzanMode.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableInferredPlay.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableInferredPlayForPopularEntitiesInExclusionList.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableInferredPlayForUnpopularEntitiesWithoutKeywords.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableLongJSONFallback.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnablePodcastMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableUserDataQueries.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableWildcardMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomEnableWildcardMatchesOnlyAsFallback.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomExtendedStationModeData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomRapidIngestionData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPandoraCustomUserData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorParkingClientState.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPepperEnabled.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPhoneDisambiguationOmitList.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlAvailableAudioSources.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlOtherAMBands.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlOtherFMBands.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlRecognizeNorthAmericanAMBand.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlRecognizeNorthAmericanFMBand.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRadioControlTunableStations.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorReadSpeakerVoiceParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRecipeParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRegionalPhoneNumberConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRemainingDistance.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRemainingTravelTime.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorReminders.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantMenuMetadata.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantMenuObject.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantOrderingMenuData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantOrderingQueriesMenuDataStoreID.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnrelatedIntent.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantOrderingQueriesMaximumPromptRepetitionUnknownIntent.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRestaurantOrderingQueriesRequestData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorReturnInformationNuggetsForMusicSearch.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorRobotInfo.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSendFullWeatherForecastData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSetUserMemoryLocation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSiriusXMEnableDomain.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSiriusXMEnableGenericChannelMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSiriusXMEnableWildcardMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSmartTVOnScreenItems.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSmartTVUserCustomInputSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSoundHoundTTSParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSpeedLimitOnThisRoad.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSportsLeagueControl.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSpotifyPlaylistEnableWildcardMatches.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredAlwaysMatchReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredAlwaysMatchWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredGlobalPagesToMatch.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredGlobalPagesToNotMatch.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredGlobalPagesToSetOffByDefault.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredGlobalPagesToSetOnByDefault.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPageMatchPageListData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPageMatchReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPageMatchWeight.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPageMatchWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPerUserPagesToMatch.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPerUserPagesToNotMatch.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPerUserPagesToSetOffByDefault.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStoredPerUserPagesToSetOnByDefault.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSurveyAPIRequest.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTVChannelList.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierTableUploadReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierTableUploadWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadDeleteProject.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadDeleteProjectOptions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadGetProject.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadGetProjectList.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadGetProjectListOptions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadGetProjectOptions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadWriteProject.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTerrierUploadWriteProjectOptions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorThirdPartyCalendarService.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCalendarMatchingLoosenessLevel.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCalendarEvents.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorToshibaTTSParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorTravelBearing.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUDSExampleRequest.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUberClientId.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUberServerToken.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUploadedTestConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUploadedTestData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUseNewStyleSMSCommands.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUseXAPAPI.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserContactsConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserContactsRequests.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserFeedback.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserMusicAvailableSources.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserMusicControls.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUserMusicInfo.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorVideoSearchConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorVideoSearchRequestInfoProviders.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorVoiceParameters.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorWebSearchConfiguration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorWebSearchRequestInfoProviders.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorWhat3WordsCluePhraseNotRequired.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorWhat3WordsStandardGeofenceRadius.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorHereApiPlacesFallback.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPaymentsPredeterminedSMSNumber.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorPaymentsPredeterminedPaymentMethod.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOrderSource.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorOrderPrepDuration.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorSquareEnvironment.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnableSquareCustomerInformationPermissions.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMessagingConvertPunctuation.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorAutoNaviAPIPlacesWildcardPOINameUseWebQueryMode.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorStreamPreference.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMusicQueriesForceInfoNuggetToPlayCommand.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorMusicQueriesAllowRawTop.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorBusinessInformationUploadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorBusinessInformationDataStoreId.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomASREnhancementWriteData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomASREnhancementReadData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomASREnhancementListData.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorEnabledCustomASREnhancementGrammars.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomASREnhancementWeight.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorToastEnvironment.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorIntentToExecute.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorUniversalTranslatorSubstitutionList.set_allow_unpolished(new_allow_unpolished);
            fieldGeneratorCustomTopicIdentificationWriteData.set_allow_unpolished(new_allow_unpolished);
          }
      };
    public class HoldingGenerator : Generator
      {
        protected override void handle_result(RequestInfoJSON  result)
          {
//@@@            Debug.Assert(!have_value);
            have_value = true;
            value = result;
          }

        public HoldingGenerator(String what, bool ignore_extras) : base(ignore_extras)
          {
            have_value = false;
            base.set_what(what);
          }

        public HoldingGenerator(String what) : base(false)
          {
            have_value = false;
            base.set_what(what);
          }

        public override void reset()
          {
            have_value = false;
            base.reset();
          }

        public bool have_value;
        public RequestInfoJSON value;
      };
    public class HoldingArrayGenerator : JSONArrayGenerator
  {
    protected class ElementHandler : Generator
      {
        private HoldingArrayGenerator top;

        protected override void handle_result(RequestInfoJSON  result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(HoldingArrayGenerator init_top, bool ignore_extras) : base(ignore_extras)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<RequestInfoJSON> result)

      {
      }

    public HoldingArrayGenerator(string what, bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<RequestInfoJSON>();
        base.set_what(what);
      }
    public HoldingArrayGenerator(bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        value = new List<RequestInfoJSON>();
        have_value = false;
      }

    public void set_allow_incomplete(bool new_allow_incomplete)
      {
        element_handler.set_allow_incomplete(new_allow_incomplete);
      }

    public void set_allow_unpolished(bool new_allow_unpolished)
      {
        element_handler.set_allow_unpolished(new_allow_unpolished);
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<RequestInfoJSON> value;
  };
  };
