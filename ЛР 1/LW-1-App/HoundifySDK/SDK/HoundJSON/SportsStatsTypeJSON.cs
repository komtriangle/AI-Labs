/* file "SportsStatsTypeJSON.cs" */

/* Generated automatically by Classy JSON. */


using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.IO;


public class SportsStatsTypeJSON : JSONBase
  {
    public enum TypeValueKnownValues
      {
        Value_BaseballBaserunningCaughtStealing,
        Value_BaseballBaserunningPickoffs,
        Value_BaseballBaserunningStolenBasePerc,
        Value_BaseballBaserunningStolenBases,
        Value_BaseballFieldingAssists,
        Value_BaseballFieldingCompleteGames,
        Value_BaseballFieldingDoublePlays,
        Value_BaseballFieldingErrors,
        Value_BaseballFieldingFieldingPercentage,
        Value_BaseballFieldingGamesFinished,
        Value_BaseballFieldingGamesPlayed,
        Value_BaseballFieldingGamesStarted,
        Value_BaseballFieldingPassedBalls,
        Value_BaseballFieldingPutouts,
        Value_BaseballFieldingRangeFactor,
        Value_BaseballFieldingTotalChances,
        Value_BaseballFieldingTriplePlays,
        Value_BaseballHittingAtBats,
        Value_BaseballHittingAtBatsPerHomeRun,
        Value_BaseballHittingAtBatsPerStrikeout,
        Value_BaseballHittingAtBatsWithRunnersInScoringPosition,
        Value_BaseballHittingBalls,
        Value_BaseballHittingBallsInPlay,
        Value_BaseballHittingBattingAverage,
        Value_BaseballHittingBattingAverageOnBallsInPlay,
        Value_BaseballHittingCompleteGames,
        Value_BaseballHittingCycles,
        Value_BaseballHittingDirtBallsFaced,
        Value_BaseballHittingDoubles,
        Value_BaseballHittingEarnedRunsScored,
        Value_BaseballHittingExtraBaseHits,
        Value_BaseballHittingFieldersChoice,
        Value_BaseballHittingFlyBalls,
        Value_BaseballHittingFlyOuts,
        Value_BaseballHittingFlyOutsIntoDoublePlays,
        Value_BaseballHittingFoulBalls,
        Value_BaseballHittingGamesFinished,
        Value_BaseballHittingGamesPlayed,
        Value_BaseballHittingGamesStarted,
        Value_BaseballHittingGroundBallToFlyBallRatio,
        Value_BaseballHittingGroundBalls,
        Value_BaseballHittingGroundOuts,
        Value_BaseballHittingGroundedIntoDoublePlay,
        Value_BaseballHittingHitByPitch,
        Value_BaseballHittingHits,
        Value_BaseballHittingHitsWithRunnersInScoringPosition,
        Value_BaseballHittingHomeRuns,
        Value_BaseballHittingIntentionalBalls,
        Value_BaseballHittingIntentionalWalks,
        Value_BaseballHittingIsolatedPower,
        Value_BaseballHittingLineDrives,
        Value_BaseballHittingLineOuts,
        Value_BaseballHittingLineOutsIntoDoublePlay,
        Value_BaseballHittingOnBasePlusSluggingPerc,
        Value_BaseballHittingOnBasePerc,
        Value_BaseballHittingPitchesFaced,
        Value_BaseballHittingPlateAppearances,
        Value_BaseballHittingPopOuts,
        Value_BaseballHittingPopUps,
        Value_BaseballHittingReachedOnError,
        Value_BaseballHittingRunnersLeftOnBase,
        Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition,
        Value_BaseballHittingRunsBattedIn,
        Value_BaseballHittingRunsBattedInWithTwoOuts,
        Value_BaseballHittingSacrificeFlys,
        Value_BaseballHittingSacrificeHits,
        Value_BaseballHittingSecondaryAverage,
        Value_BaseballHittingSingles,
        Value_BaseballHittingSluggingPerc,
        Value_BaseballHittingStrikeoutsLooking,
        Value_BaseballHittingStrikeoutsSwinging,
        Value_BaseballHittingStrikesLooking,
        Value_BaseballHittingStrikesSwinging,
        Value_BaseballHittingTotalBases,
        Value_BaseballHittingTotalRunsScored,
        Value_BaseballHittingTotalStrikeouts,
        Value_BaseballHittingTotalStrikes,
        Value_BaseballHittingTriples,
        Value_BaseballHittingUnearnedRunsScored,
        Value_BaseballHittingWalks,
        Value_BaseballHittingWalksPerPlateAppearance,
        Value_BaseballHittingWalksPerStrikeout,
        Value_BaseballPitchingBalks,
        Value_BaseballPitchingBalls,
        Value_BaseballPitchingBattersFaced,
        Value_BaseballPitchingBlownSaves,
        Value_BaseballPitchingCompleteGames,
        Value_BaseballPitchingDirtBallsThrown,
        Value_BaseballPitchingDoublesAllowed,
        Value_BaseballPitchingEarnedRunAverage,
        Value_BaseballPitchingEarnedRunsAllowed,
        Value_BaseballPitchingErrors,
        Value_BaseballPitchingFieldersChoice,
        Value_BaseballPitchingFlyOuts,
        Value_BaseballPitchingFlyOutsIntoDoublePlays,
        Value_BaseballPitchingFoulBalls,
        Value_BaseballPitchingGamesFinished,
        Value_BaseballPitchingGamesPlayed,
        Value_BaseballPitchingGamesStarted,
        Value_BaseballPitchingGroundBallToFlyBallRatio,
        Value_BaseballPitchingGroundOuts,
        Value_BaseballPitchingGroundOutsIntoDoublePlays,
        Value_BaseballPitchingHitBatters,
        Value_BaseballPitchingHitsAllowed,
        Value_BaseballPitchingHolds,
        Value_BaseballPitchingHomeRunsAllowed,
        Value_BaseballPitchingInningsPitchedCompletePartial,
        Value_BaseballPitchingInningsPitchedTotalOuts,
        Value_BaseballPitchingIntentionalBalls,
        Value_BaseballPitchingIntentionalWalks,
        Value_BaseballPitchingLineOuts,
        Value_BaseballPitchingLineOutsIntoDoublePlays,
        Value_BaseballPitchingLosses,
        Value_BaseballPitchingOpponentsBattingAverage,
        Value_BaseballPitchingOpponentRunnersLeftOnBase,
        Value_BaseballPitchingPickoffs,
        Value_BaseballPitchingPitchCount,
        Value_BaseballPitchingPopOutsForced,
        Value_BaseballPitchingQualityStarts,
        Value_BaseballPitchingReachedOnError,
        Value_BaseballPitchingRunnersCaughtStealing,
        Value_BaseballPitchingSacrificeFlys,
        Value_BaseballPitchingSacrificeHits,
        Value_BaseballPitchingSaveOpportunities,
        Value_BaseballPitchingSaves,
        Value_BaseballPitchingShutouts,
        Value_BaseballPitchingSinglesAllowed,
        Value_BaseballPitchingStolenBasesAllowed,
        Value_BaseballPitchingStrikeoutsLooking,
        Value_BaseballPitchingStrikeoutsPer9Innings,
        Value_BaseballPitchingStrikeoutsPerWalk,
        Value_BaseballPitchingStrikeoutsSwinging,
        Value_BaseballPitchingStrikesLooking,
        Value_BaseballPitchingStrikesSwinging,
        Value_BaseballPitchingTotalBasesAllowed,
        Value_BaseballPitchingTotalRunsAllowed,
        Value_BaseballPitchingTotalStrikeouts,
        Value_BaseballPitchingTotalStrikes,
        Value_BaseballPitchingTriplesAllowed,
        Value_BaseballPitchingUnearnedRunsAllowed,
        Value_BaseballPitchingWalks,
        Value_BaseballPitchingWalksPlusHitsPerInningPitched,
        Value_BaseballPitchingWildPitches,
        Value_BaseballPitchingWins,
        Value_HockeyAssists,
        Value_HockeyAssistsPerGame,
        Value_HockeyAverageTimeOnIce,
        Value_HockeyBlockedAttempts,
        Value_HockeyBlockedAttemptsPerGame,
        Value_HockeyBlockedShots,
        Value_HockeyBlockedShotsPerGame,
        Value_HockeyEvenStrengthAssists,
        Value_HockeyEvenStrengthFaceoffWinPerc,
        Value_HockeyEvenStrengthFaceoffs,
        Value_HockeyEvenStrengthFaceoffsLost,
        Value_HockeyEvenStrengthFaceoffsWon,
        Value_HockeyEvenStrengthGoals,
        Value_HockeyEvenStrengthMissedShots,
        Value_HockeyEvenStrengthShotsOnGoal,
        Value_HockeyEvenStrengthTimeOnIce,
        Value_HockeyFaceoffWinPerc,
        Value_HockeyFaceoffs,
        Value_HockeyFaceoffsWon,
        Value_HockeyFaceoffsLost,
        Value_HockeyGameWinningGoalFlag,
        Value_HockeyGameWinningGoals,
        Value_HockeyGamesPlayed,
        Value_HockeyGiveaways,
        Value_HockeyGiveawaysPerGame,
        Value_HockeyGoals,
        Value_HockeyGoalsPerGame,
        Value_HockeyHits,
        Value_HockeyHitsPerGame,
        Value_HockeyMissedShots,
        Value_HockeyMissedShotsPerGame,
        Value_HockeyPenalties,
        Value_HockeyPenaltiesPerGame,
        Value_HockeyPenaltyGoals,
        Value_HockeyPenaltyMinutes,
        Value_HockeyPenaltyMinutesPerGame,
        Value_HockeyPenaltyMissedShots,
        Value_HockeyPenaltyShotsOnGoal,
        Value_HockeyPlusMinus,
        Value_HockeyPoints,
        Value_HockeyPointsPerGame,
        Value_HockeyPowerPlayAssists,
        Value_HockeyPowerPlayFaceoffWinPerc,
        Value_HockeyPowerPlayFaceoffs,
        Value_HockeyPowerPlayFaceoffsLost,
        Value_HockeyPowerPlayFaceoffsWon,
        Value_HockeyPowerPlayGoals,
        Value_HockeyPowerPlayMissedShots,
        Value_HockeyPowerPlayOpportunities,
        Value_HockeyPowerPlayPoints,
        Value_HockeyPowerPlayShotsOnGoal,
        Value_HockeyPowerPlayTimeOnIce,
        Value_HockeyScratches,
        Value_HockeyShifts,
        Value_HockeyShiftsPerGame,
        Value_HockeyShootingPerc,
        Value_HockeyShootoutGoals,
        Value_HockeyShootoutMissedShots,
        Value_HockeyShootoutShotsOnGoal,
        Value_HockeyShortHandedAssists,
        Value_HockeyShortHandedFaceoffWinPerc,
        Value_HockeyShortHandedFaceoffs,
        Value_HockeyShortHandedFaceoffsLost,
        Value_HockeyShortHandedFaceoffsWon,
        Value_HockeyShortHandedGoals,
        Value_HockeyShortHandedMissedShots,
        Value_HockeyShortHandedPoints,
        Value_HockeyShortHandedShotsOnGoal,
        Value_HockeyShortHandedTimeOnIce,
        Value_HockeyShotsOnGoal,
        Value_HockeyShotsOnGoalPerGame,
        Value_HockeyTakeaways,
        Value_HockeyTakeawaysPerGame,
        Value_HockeyTeamPenalties,
        Value_HockeyTeamPenaltiesPerGame,
        Value_HockeyTeamPenaltyMinutes,
        Value_HockeyTeamPenaltyMinutesPerGame,
        Value_HockeyTotalTimeOnIce,
        Value_HockeyTotalTimeOnIcePerGame,
        Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst,
        Value_HockeyGoaltendingEmptyNetGoalsAgainst,
        Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst,
        Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst,
        Value_HockeyGoaltendingEmptyNetShotsAgainst,
        Value_HockeyGoaltendingEvenStrengthGoalsAgainst,
        Value_HockeyGoaltendingEvenStrengthSavePerc,
        Value_HockeyGoaltendingEvenStrengthSaves,
        Value_HockeyGoaltendingEvenStrengthShotsAgainst,
        Value_HockeyGoaltendingGoalsAgainst,
        Value_HockeyGoaltendingGoalsAgainstAverage,
        Value_HockeyGoaltendingGoalsAgainstPerGame,
        Value_HockeyGoaltendingLosses,
        Value_HockeyGoaltendingOutcome,
        Value_HockeyGoaltendingOvertimeLosses,
        Value_HockeyGoaltendingPenaltyGoalsAgainst,
        Value_HockeyGoaltendingPenaltySavePerc,
        Value_HockeyGoaltendingPenaltySaves,
        Value_HockeyGoaltendingPenaltyShotsAgainst,
        Value_HockeyGoaltendingPowerPlayGoalsAgainst,
        Value_HockeyGoaltendingPowerPlaySavePerc,
        Value_HockeyGoaltendingPowerPlaySaves,
        Value_HockeyGoaltendingPowerPlayShotsAgainst,
        Value_HockeyGoaltendingSavePerc,
        Value_HockeyGoaltendingSaves,
        Value_HockeyGoaltendingShootoutGoalsAgainst,
        Value_HockeyGoaltendingShootoutSavePerc,
        Value_HockeyGoaltendingShootoutSaves,
        Value_HockeyGoaltendingShootoutShotsAgainst,
        Value_HockeyGoaltendingShortHandedGoalsAgainst,
        Value_HockeyGoaltendingShortHandedSavePerc,
        Value_HockeyGoaltendingShortHandedSaves,
        Value_HockeyGoaltendingShortHandedShotsAgainst,
        Value_HockeyGoaltendingShotsAgainst,
        Value_HockeyGoaltendingShotsAgainstPerGame,
        Value_HockeyGoaltendingShutoutFlag,
        Value_HockeyGoaltendingShutouts,
        Value_HockeyGoaltendingTotalGoalsAgainst,
        Value_HockeyGoaltendingTotalShotsAgainst,
        Value_HockeyGoaltendingWins,
        Value_AmericanFootball3rdDownConversionAttempts,
        Value_AmericanFootball3rdDownConversions,
        Value_AmericanFootball3rdDownConversionPerc,
        Value_AmericanFootball3rdDownConversionsViaPass,
        Value_AmericanFootball3rdDownConversionsViaPenalty,
        Value_AmericanFootball3rdDownConversionsViaRush,
        Value_AmericanFootball4thDownConversionAttempts,
        Value_AmericanFootball4thDownConversions,
        Value_AmericanFootball4thDownConversionPerc,
        Value_AmericanFootball4thDownConversionsViaPass,
        Value_AmericanFootball4thDownConversionsViaPenalty,
        Value_AmericanFootball4thDownConversionsViaRush,
        Value_AmericanFootballGamesPlayed,
        Value_AmericanFootballGamesStarted,
        Value_AmericanFootballGoalEfficiencyAttempts,
        Value_AmericanFootballGoalEfficiencyPerc,
        Value_AmericanFootballGoalEfficiencyTouchdowns,
        Value_AmericanFootballPassing10PlusYards,
        Value_AmericanFootballPassing20PlusYards,
        Value_AmericanFootballPassing30PlusYards,
        Value_AmericanFootballPassing40PlusYards,
        Value_AmericanFootballPassing50PlusYards,
        Value_AmericanFootballPassingAttempts,
        Value_AmericanFootballPassingAverageYardsPerCompletion,
        Value_AmericanFootballPassingAverageYardsPerAttempt,
        Value_AmericanFootballPassingCompletionPerc,
        Value_AmericanFootballPassingCompletions,
        Value_AmericanFootballPassing1stDowns,
        Value_AmericanFootballPassingGrossYards,
        Value_AmericanFootballPassingInterceptionPerc,
        Value_AmericanFootballPassingInterceptions,
        Value_AmericanFootballPassingInterceptionsReturnedForTouchdown,
        Value_AmericanFootballPassingLongestPass,
        Value_AmericanFootballPassingNetYards,
        Value_AmericanFootballPassingRating,
        Value_AmericanFootballPassingRedZoneAttempts,
        Value_AmericanFootballPassingSacked,
        Value_AmericanFootballPassingSackedYardsLost,
        Value_AmericanFootballPassingTackledForSafety,
        Value_AmericanFootballPassingTotalYards,
        Value_AmericanFootballPassingTouchdownPerc,
        Value_AmericanFootballPassingTouchdowns,
        Value_AmericanFootballReceiving10PlusYards,
        Value_AmericanFootballReceiving20PlusYards,
        Value_AmericanFootballReceiving30PlusYards,
        Value_AmericanFootballReceiving40PlusYards,
        Value_AmericanFootballReceiving50PlusYards,
        Value_AmericanFootballReceivingAverageReception,
        Value_AmericanFootballReceiving1stDowns,
        Value_AmericanFootballReceivingFumbledOnReception,
        Value_AmericanFootballReceivingLongestReception,
        Value_AmericanFootballReceivingReceptions,
        Value_AmericanFootballReceivingRedZoneTargets,
        Value_AmericanFootballReceivingTargets,
        Value_AmericanFootballReceivingTotalYards,
        Value_AmericanFootballReceivingTouchdowns,
        Value_AmericanFootballReceivingYardsAfterCompletion,
        Value_AmericanFootballRedZoneEfficiencyAttempts,
        Value_AmericanFootballRedZoneEfficiencyConversions,
        Value_AmericanFootballRedZoneEfficiencyPerc,
        Value_AmericanFootballRushing10PlusYards,
        Value_AmericanFootballRushing20PlusYards,
        Value_AmericanFootballRushing30PlusYards,
        Value_AmericanFootballRushing40PlusYards,
        Value_AmericanFootballRushing50PlusYards,
        Value_AmericanFootballRushingAttempts,
        Value_AmericanFootballRushingAverageRush,
        Value_AmericanFootballRushing1stDownPerc,
        Value_AmericanFootballRushing1stDowns,
        Value_AmericanFootballRushingFumbledOnRush,
        Value_AmericanFootballRushingLongestRush,
        Value_AmericanFootballRushingRedZoneAttempts,
        Value_AmericanFootballRushingTackledForSafety,
        Value_AmericanFootballRushingTotalYards,
        Value_AmericanFootballRushingTouchdowns,
        Value_AmericanFootball1stDowns,
        Value_AmericanFootball2PointConversionsAttempted,
        Value_AmericanFootball2PointConversionsFailed,
        Value_AmericanFootball2PointConversionsMade,
        Value_AmericanFootball2PointConversionsPassing,
        Value_AmericanFootball2PointConversionsReceiving,
        Value_AmericanFootball2PointConversionsRushing,
        Value_AmericanFootball1PointSafety,
        Value_AmericanFootballBlockedKicks,
        Value_AmericanFootballConversionAttempts,
        Value_AmericanFootballConversionsCompleted,
        Value_AmericanFootballConversionsFailed,
        Value_AmericanFootballForcedFumbles,
        Value_AmericanFootballFumblesRecovered,
        Value_AmericanFootballFumblesRecoveredForTouchdowns,
        Value_AmericanFootballInterceptions,
        Value_AmericanFootballInterceptionsLongestInterception,
        Value_AmericanFootballInterceptionsTouchdowns,
        Value_AmericanFootballInterceptionsYards,
        Value_AmericanFootballMiscAssistedTackles,
        Value_AmericanFootballMiscCombinedTackles,
        Value_AmericanFootballMiscForcedFumbles,
        Value_AmericanFootballMiscFumblesRecovered,
        Value_AmericanFootballMiscTackles,
        Value_AmericanFootballPassesDefended,
        Value_AmericanFootballQuarterbackHits,
        Value_AmericanFootballSacks,
        Value_AmericanFootballSackYards,
        Value_AmericanFootballSafeties,
        Value_AmericanFootballSpecialTeamsAssistedTackles,
        Value_AmericanFootballSpecialTeamsCombinedTackles,
        Value_AmericanFootballSpecialTeamsForcedFumbles,
        Value_AmericanFootballSpecialTeamsFumblesRecovered,
        Value_AmericanFootballSpecialTeamsTotalTackles,
        Value_AmericanFootballTacklesAssisted,
        Value_AmericanFootballTacklesCombined,
        Value_AmericanFootballTacklesForLoss,
        Value_AmericanFootballTackles,
        Value_AmericanFootballBlockedFieldGoalReturns10PlusYards,
        Value_AmericanFootballBlockedFieldGoalReturns20PlusYards,
        Value_AmericanFootballBlockedFieldGoalReturns30PlusYards,
        Value_AmericanFootballBlockedFieldGoalReturns40PlusYards,
        Value_AmericanFootballBlockedFieldGoalReturns50PlusYards,
        Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn,
        Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn,
        Value_AmericanFootballBlockedFieldGoalReturns,
        Value_AmericanFootballBlockedFieldGoalReturnsTotalYards,
        Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns,
        Value_AmericanFootballBlockedPuntReturn10PlusYards,
        Value_AmericanFootballBlockedPuntReturn20PlusYards,
        Value_AmericanFootballBlockedPuntReturn30PlusYards,
        Value_AmericanFootballBlockedPuntReturn40PlusYards,
        Value_AmericanFootballBlockedPuntReturn50PlusYards,
        Value_AmericanFootballBlockedPuntReturnsAverageReturn,
        Value_AmericanFootballBlockedPuntReturnsLongestReturn,
        Value_AmericanFootballBlockedPuntReturns,
        Value_AmericanFootballBlockedPuntReturnsTotalYards,
        Value_AmericanFootballBlockedPuntReturnsTouchdowns,
        Value_AmericanFootballExtraPointsAttempted,
        Value_AmericanFootballExtraPointsAttemptedKicking,
        Value_AmericanFootballExtraPointsAttempted2PointConversion,
        Value_AmericanFootballExtraPointsBlocked,
        Value_AmericanFootballExtraPointsMade,
        Value_AmericanFootballExtraPointsMadeKicking,
        Value_AmericanFootballExtraPointsMade2PointConversion,
        Value_AmericanFootballExtraPointsPerc,
        Value_AmericanFootballFieldGoalReturns10PlusYards,
        Value_AmericanFootballFieldGoalReturns20PlusYards,
        Value_AmericanFootballFieldGoalReturns30PlusYards,
        Value_AmericanFootballFieldGoalReturns40PlusYards,
        Value_AmericanFootballFieldGoalReturns50PlusYards,
        Value_AmericanFootballFieldGoalReturnsAverageReturn,
        Value_AmericanFootballFieldGoalReturnsLongestReturn,
        Value_AmericanFootballFieldGoalReturns,
        Value_AmericanFootballFieldGoalReturnsTotalYards,
        Value_AmericanFootballFieldGoalReturnsTouchdowns,
        Value_AmericanFootballFieldGoalsAttempted,
        Value_AmericanFootballFieldGoalsAttempted1to19Yards,
        Value_AmericanFootballFieldGoalsAttempted20to29Yards,
        Value_AmericanFootballFieldGoalsAttempted30to39Yards,
        Value_AmericanFootballFieldGoalsAttempted40to49Yards,
        Value_AmericanFootballFieldGoalsAttempted50PlusYards,
        Value_AmericanFootballFieldGoalsBlocked,
        Value_AmericanFootballFieldGoalsLongestMade,
        Value_AmericanFootballFieldGoalsMade,
        Value_AmericanFootballFieldGoalsMade1to19Yards,
        Value_AmericanFootballFieldGoalsMade20to29Yards,
        Value_AmericanFootballFieldGoalsMade30to39Yards,
        Value_AmericanFootballFieldGoalsMade40to49Yards,
        Value_AmericanFootballFieldGoalsMade50PlusYards,
        Value_AmericanFootballFieldGoalsPerc,
        Value_AmericanFootballKickoffReturns10PlusYards,
        Value_AmericanFootballKickoffReturns20PlusYards,
        Value_AmericanFootballKickoffReturns30PlusYards,
        Value_AmericanFootballKickoffReturns40PlusYards,
        Value_AmericanFootballKickoffReturns50PlusYards,
        Value_AmericanFootballKickoffReturnsAverageRun,
        Value_AmericanFootballKickoffReturnsFairCatches,
        Value_AmericanFootballKickoffReturnsLongestKickReturn,
        Value_AmericanFootballKickoffReturnsReturns,
        Value_AmericanFootballKickoffReturnsTouchdowns,
        Value_AmericanFootballKickoffReturnsYards,
        Value_AmericanFootballKickoffsAverageGrossYards,
        Value_AmericanFootballKickoffsAverageNetYards,
        Value_AmericanFootballKickoffsAverageReturnYards,
        Value_AmericanFootballKickoffsEndZoneKicks,
        Value_AmericanFootballKickoffsGrossYards,
        Value_AmericanFootballKickoffsInsideOpponents20YardLine,
        Value_AmericanFootballKickoffsKicks,
        Value_AmericanFootballKickoffsLongestKick,
        Value_AmericanFootballKickoffsNetYards,
        Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc,
        Value_AmericanFootballKickoffsTouchbacksPerc,
        Value_AmericanFootballKickoffsReturned,
        Value_AmericanFootballKickoffsTotalReturnYards,
        Value_AmericanFootballKickoffsTouchbacks,
        Value_AmericanFootballPuntReturns10PlusYards,
        Value_AmericanFootballPuntReturns20PlusYards,
        Value_AmericanFootballPuntReturns30PlusYards,
        Value_AmericanFootballPuntReturns40PlusYards,
        Value_AmericanFootballPuntReturns50PlusYards,
        Value_AmericanFootballPuntReturnsAverageRun,
        Value_AmericanFootballPuntReturnsFairCatches,
        Value_AmericanFootballPuntReturnsLongestKickReturn,
        Value_AmericanFootballPuntReturns,
        Value_AmericanFootballPuntReturnsTouchdowns,
        Value_AmericanFootballPuntReturnsYards,
        Value_AmericanFootballPuntingAverageGrossYards,
        Value_AmericanFootballPuntingAverageNetYards,
        Value_AmericanFootballPuntingAverageReturnYards,
        Value_AmericanFootballPuntingBlocked,
        Value_AmericanFootballPuntingGrossYards,
        Value_AmericanFootballPuntingInsideOpponents20YardLine,
        Value_AmericanFootballPuntingLongestPunt,
        Value_AmericanFootballPuntingNetYards,
        Value_AmericanFootballPuntingInsideOpponents20YardLinePerc,
        Value_AmericanFootballPuntingTouchbacksPerc,
        Value_AmericanFootballPuntingPunts,
        Value_AmericanFootballPuntingReturnYards,
        Value_AmericanFootballPuntingReturned,
        Value_AmericanFootballPuntingTouchbacks,
        Value_AmericanFootballFumblesForced,
        Value_AmericanFootballFumbles,
        Value_AmericanFootballFumblesLost,
        Value_AmericanFootballFumblesOpponentRecovery,
        Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery,
        Value_AmericanFootballFumblesOutOfBounds,
        Value_AmericanFootballFumblesOwnRecovery,
        Value_AmericanFootballFumblesOwnTouchdownsFromRecovery,
        Value_AmericanFootballFumblesYardsFromOpponentRecovery,
        Value_AmericanFootballFumblesYardsFromOwnRecovery,
        Value_AmericanFootballPenalties1stDowns,
        Value_AmericanFootballPenalties,
        Value_AmericanFootballPenaltiesYards,
        Value_BasketballAssists,
        Value_BasketballAssistsPerGame,
        Value_BasketballAssistsToTurnoverRatio,
        Value_BasketballBlockedAttempts,
        Value_BasketballBlockedAttemptsPerGame,
        Value_BasketballBlockedShots,
        Value_BasketballBlockedShotsPerGame,
        Value_BasketballCoachTechnicalFouls,
        Value_BasketballDefensiveRebounds,
        Value_BasketballDefensiveReboundsPerGame,
        Value_BasketballEjections,
        Value_BasketballFastBreakPoints,
        Value_BasketballFastBreakPointsPerGame,
        Value_BasketballFieldGoalAttempts,
        Value_BasketballFieldGoalAttemptsPerGame,
        Value_BasketballFieldGoalPercentage,
        Value_BasketballFieldGoalsMade,
        Value_BasketballFieldGoalsMadePerGame,
        Value_BasketballFlagrantFouls,
        Value_BasketballFlagrantFoulsPerGame,
        Value_BasketballFreeThrowAttempts,
        Value_BasketballFreeThrowAttemptsPerGame,
        Value_BasketballFreeThrowPercentage,
        Value_BasketballFreeThrowsMade,
        Value_BasketballFreeThrowsMadePerGame,
        Value_BasketballGamesPlayed,
        Value_BasketballGamesStarted,
        Value_BasketballMinutesPlayed,
        Value_BasketballMinutesPlayedPerGame,
        Value_BasketballOffensiveRebounds,
        Value_BasketballOffensiveReboundsPerGame,
        Value_BasketballPersonalFouls,
        Value_BasketballPersonalFoulsPerGame,
        Value_BasketballPoints,
        Value_BasketballPointsPerGame,
        Value_BasketballPointsInPaint,
        Value_BasketballPointsInPaintPerGame,
        Value_BasketballPointsOffTurnovers,
        Value_BasketballPointsOffTurnoversPerGame,
        Value_BasketballRebounds,
        Value_BasketballReboundsPerGame,
        Value_BasketballSecondChancePoints,
        Value_BasketballSecondChancePointsPerGame,
        Value_BasketballSteals,
        Value_BasketballStealsPerGame,
        Value_BasketballTeamTechnicalFouls,
        Value_BasketballPlayerTechnicalFouls,
        Value_BasketballThreePointAttempts,
        Value_BasketballThreePointAttemptsPerGame,
        Value_BasketballThreePointPercentage,
        Value_BasketballThreePointsMade,
        Value_BasketballThreePointsMadePerGame,
        Value_BasketballTurnovers,
        Value_BasketballTurnoversPerGame,
        Value_BasketballTwoPointAttempts,
        Value_BasketballTwoPointAttemptsPerGame,
        Value_BasketballTwoPointPercentage,
        Value_BasketballTwoPointsMade,
        Value_BasketballTwoPointsMadePerGame,
        Value_SoccerBallPossessions,
        Value_SoccerCardsGiven,
        Value_SoccerCornerKicks,
        Value_SoccerFreeKicks,
        Value_SoccerGoalAttempts,
        Value_SoccerGoalsByFoot,
        Value_SoccerGoalsByHeaders,
        Value_SoccerGoalsByTime00To15,
        Value_SoccerGoalsByTime16To30,
        Value_SoccerGoalsByTime31To45,
        Value_SoccerGoalsByTime46To60,
        Value_SoccerGoalsByTime61To75,
        Value_SoccerGoalsByTime76To90,
        Value_SoccerGoalsConceded,
        Value_SoccerGoalsConcededByTime00To15,
        Value_SoccerGoalsConcededByTime16To30,
        Value_SoccerGoalsConcededByTime31To45,
        Value_SoccerGoalsConcededByTime46To60,
        Value_SoccerGoalsConcededByTime61To75,
        Value_SoccerGoalsConcededByTime76To90,
        Value_SoccerGoalsScored,
        Value_SoccerMatchesPlayed,
        Value_SoccerOffsides,
        Value_SoccerOwnGoals,
        Value_SoccerShotsBlocked,
        Value_SoccerShotsOffGoal,
        Value_SoccerShotsOnGoal,
        Value_SoccerSubstitutedIn,
        Value_SoccerSubstitutedOut,
        Value_CricketBattingRuns,
        Value_CricketBowlingWickets,
        Value__none
      };
    public struct TypeValue
      {
        public bool in_known_list;
        public string string_value;
        public TypeValueKnownValues list_value;
      };

    public static TypeValueKnownValues  stringToValue(string chars)
      {
        switch (chars[0])
          {
            case 'A':
                if (String.Compare(chars, 1, "mericanFootball", 0, 15, false) == 0)
                  {
                    switch (chars[16])
                      {
                        case '1':
                            switch (chars[17])
                              {
                                case 'P':
                                    if ((String.Compare(chars, 18, "ointSafety", 0, 10, false) == 0) && (chars.Length == 28))
                                        return TypeValueKnownValues.Value_AmericanFootball1PointSafety;
                                    break;
                                case 's':
                                    if ((String.Compare(chars, 18, "tDowns", 0, 6, false) == 0) && (chars.Length == 24))
                                        return TypeValueKnownValues.Value_AmericanFootball1stDowns;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case '2':
                            if (String.Compare(chars, 17, "PointConversions", 0, 16, false) == 0)
                              {
                                switch (chars[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 34, "ttempted", 0, 8, false) == 0) && (chars.Length == 42))
                                            return TypeValueKnownValues.Value_AmericanFootball2PointConversionsAttempted;
                                        break;
                                    case 'F':
                                        if ((String.Compare(chars, 34, "ailed", 0, 5, false) == 0) && (chars.Length == 39))
                                            return TypeValueKnownValues.Value_AmericanFootball2PointConversionsFailed;
                                        break;
                                    case 'M':
                                        if ((String.Compare(chars, 34, "ade", 0, 3, false) == 0) && (chars.Length == 37))
                                            return TypeValueKnownValues.Value_AmericanFootball2PointConversionsMade;
                                        break;
                                    case 'P':
                                        if ((String.Compare(chars, 34, "assing", 0, 6, false) == 0) && (chars.Length == 40))
                                            return TypeValueKnownValues.Value_AmericanFootball2PointConversionsPassing;
                                        break;
                                    case 'R':
                                        switch (chars[34])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 35, "ceiving", 0, 7, false) == 0) && (chars.Length == 42))
                                                    return TypeValueKnownValues.Value_AmericanFootball2PointConversionsReceiving;
                                                break;
                                            case 'u':
                                                if ((String.Compare(chars, 35, "shing", 0, 5, false) == 0) && (chars.Length == 40))
                                                    return TypeValueKnownValues.Value_AmericanFootball2PointConversionsRushing;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case '3':
                            if (String.Compare(chars, 17, "rdDownConversion", 0, 16, false) == 0)
                              {
                                switch (chars[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 34, "ttempts", 0, 7, false) == 0) && (chars.Length == 41))
                                            return TypeValueKnownValues.Value_AmericanFootball3rdDownConversionAttempts;
                                        break;
                                    case 'P':
                                        if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                            return TypeValueKnownValues.Value_AmericanFootball3rdDownConversionPerc;
                                        break;
                                    case 's':
                                        if (chars.Length == 34)
                                          {
                                            return TypeValueKnownValues.Value_AmericanFootball3rdDownConversions;
                                          }
                                        switch (chars[34])
                                          {
                                            case 'V':
                                                if (String.Compare(chars, 35, "ia", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[37])
                                                      {
                                                        case 'P':
                                                            switch (chars[38])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(chars, 39, "ss", 0, 2, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPass;
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(chars, 39, "nalty", 0, 5, false) == 0) && (chars.Length == 44))
                                                                        return TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPenalty;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 38, "ush", 0, 3, false) == 0) && (chars.Length == 41))
                                                                return TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaRush;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case '4':
                            if (String.Compare(chars, 17, "thDownConversion", 0, 16, false) == 0)
                              {
                                switch (chars[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 34, "ttempts", 0, 7, false) == 0) && (chars.Length == 41))
                                            return TypeValueKnownValues.Value_AmericanFootball4thDownConversionAttempts;
                                        break;
                                    case 'P':
                                        if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                            return TypeValueKnownValues.Value_AmericanFootball4thDownConversionPerc;
                                        break;
                                    case 's':
                                        if (chars.Length == 34)
                                          {
                                            return TypeValueKnownValues.Value_AmericanFootball4thDownConversions;
                                          }
                                        switch (chars[34])
                                          {
                                            case 'V':
                                                if (String.Compare(chars, 35, "ia", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[37])
                                                      {
                                                        case 'P':
                                                            switch (chars[38])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(chars, 39, "ss", 0, 2, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPass;
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(chars, 39, "nalty", 0, 5, false) == 0) && (chars.Length == 44))
                                                                        return TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPenalty;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 38, "ush", 0, 3, false) == 0) && (chars.Length == 41))
                                                                return TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaRush;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'B':
                            if (String.Compare(chars, 17, "locked", 0, 6, false) == 0)
                              {
                                switch (chars[23])
                                  {
                                    case 'F':
                                        if (String.Compare(chars, 24, "ieldGoalReturns", 0, 15, false) == 0)
                                          {
                                            if (chars.Length == 39)
                                              {
                                                return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns;
                                              }
                                            switch (chars[39])
                                              {
                                                case '1':
                                                    if ((String.Compare(chars, 40, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 50))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns10PlusYards;
                                                    break;
                                                case '2':
                                                    if ((String.Compare(chars, 40, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 50))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns20PlusYards;
                                                    break;
                                                case '3':
                                                    if ((String.Compare(chars, 40, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 50))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns30PlusYards;
                                                    break;
                                                case '4':
                                                    if ((String.Compare(chars, 40, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 50))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns40PlusYards;
                                                    break;
                                                case '5':
                                                    if ((String.Compare(chars, 40, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 50))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns50PlusYards;
                                                    break;
                                                case 'A':
                                                    if ((String.Compare(chars, 40, "verageReturn", 0, 12, false) == 0) && (chars.Length == 52))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn;
                                                    break;
                                                case 'L':
                                                    if ((String.Compare(chars, 40, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 52))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn;
                                                    break;
                                                case 'T':
                                                    if (String.Compare(chars, 40, "o", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[41])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(chars, 42, "alYards", 0, 7, false) == 0) && (chars.Length == 49))
                                                                    return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTotalYards;
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(chars, 42, "chdowns", 0, 7, false) == 0) && (chars.Length == 49))
                                                                    return TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'K':
                                        if ((String.Compare(chars, 24, "icks", 0, 4, false) == 0) && (chars.Length == 28))
                                            return TypeValueKnownValues.Value_AmericanFootballBlockedKicks;
                                        break;
                                    case 'P':
                                        if (String.Compare(chars, 24, "untReturn", 0, 9, false) == 0)
                                          {
                                            switch (chars[33])
                                              {
                                                case '1':
                                                    if ((String.Compare(chars, 34, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn10PlusYards;
                                                    break;
                                                case '2':
                                                    if ((String.Compare(chars, 34, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn20PlusYards;
                                                    break;
                                                case '3':
                                                    if ((String.Compare(chars, 34, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn30PlusYards;
                                                    break;
                                                case '4':
                                                    if ((String.Compare(chars, 34, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn40PlusYards;
                                                    break;
                                                case '5':
                                                    if ((String.Compare(chars, 34, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn50PlusYards;
                                                    break;
                                                case 's':
                                                    if (chars.Length == 34)
                                                      {
                                                        return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturns;
                                                      }
                                                    switch (chars[34])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 35, "verageReturn", 0, 12, false) == 0) && (chars.Length == 47))
                                                                return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsAverageReturn;
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 35, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 47))
                                                                return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsLongestReturn;
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 35, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[36])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(chars, 37, "alYards", 0, 7, false) == 0) && (chars.Length == 44))
                                                                            return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTotalYards;
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(chars, 37, "chdowns", 0, 7, false) == 0) && (chars.Length == 44))
                                                                            return TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTouchdowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'C':
                            if (String.Compare(chars, 17, "onversion", 0, 9, false) == 0)
                              {
                                switch (chars[26])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 27, "ttempts", 0, 7, false) == 0) && (chars.Length == 34))
                                            return TypeValueKnownValues.Value_AmericanFootballConversionAttempts;
                                        break;
                                    case 's':
                                        switch (chars[27])
                                          {
                                            case 'C':
                                                if ((String.Compare(chars, 28, "ompleted", 0, 8, false) == 0) && (chars.Length == 36))
                                                    return TypeValueKnownValues.Value_AmericanFootballConversionsCompleted;
                                                break;
                                            case 'F':
                                                if ((String.Compare(chars, 28, "ailed", 0, 5, false) == 0) && (chars.Length == 33))
                                                    return TypeValueKnownValues.Value_AmericanFootballConversionsFailed;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'E':
                            if (String.Compare(chars, 17, "xtraPoints", 0, 10, false) == 0)
                              {
                                switch (chars[27])
                                  {
                                    case 'A':
                                        if (String.Compare(chars, 28, "ttempted", 0, 8, false) == 0)
                                          {
                                            if (chars.Length == 36)
                                              {
                                                return TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted;
                                              }
                                            switch (chars[36])
                                              {
                                                case '2':
                                                    if ((String.Compare(chars, 37, "PointConversion", 0, 15, false) == 0) && (chars.Length == 52))
                                                        return TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted2PointConversion;
                                                    break;
                                                case 'K':
                                                    if ((String.Compare(chars, 37, "icking", 0, 6, false) == 0) && (chars.Length == 43))
                                                        return TypeValueKnownValues.Value_AmericanFootballExtraPointsAttemptedKicking;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if ((String.Compare(chars, 28, "locked", 0, 6, false) == 0) && (chars.Length == 34))
                                            return TypeValueKnownValues.Value_AmericanFootballExtraPointsBlocked;
                                        break;
                                    case 'M':
                                        if (String.Compare(chars, 28, "ade", 0, 3, false) == 0)
                                          {
                                            if (chars.Length == 31)
                                              {
                                                return TypeValueKnownValues.Value_AmericanFootballExtraPointsMade;
                                              }
                                            switch (chars[31])
                                              {
                                                case '2':
                                                    if ((String.Compare(chars, 32, "PointConversion", 0, 15, false) == 0) && (chars.Length == 47))
                                                        return TypeValueKnownValues.Value_AmericanFootballExtraPointsMade2PointConversion;
                                                    break;
                                                case 'K':
                                                    if ((String.Compare(chars, 32, "icking", 0, 6, false) == 0) && (chars.Length == 38))
                                                        return TypeValueKnownValues.Value_AmericanFootballExtraPointsMadeKicking;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        if ((String.Compare(chars, 28, "erc", 0, 3, false) == 0) && (chars.Length == 31))
                                            return TypeValueKnownValues.Value_AmericanFootballExtraPointsPerc;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            switch (chars[17])
                              {
                                case 'i':
                                    if (String.Compare(chars, 18, "eldGoal", 0, 7, false) == 0)
                                      {
                                        switch (chars[25])
                                          {
                                            case 'R':
                                                if (String.Compare(chars, 26, "eturns", 0, 6, false) == 0)
                                                  {
                                                    if (chars.Length == 32)
                                                      {
                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns;
                                                      }
                                                    switch (chars[32])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(chars, 33, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns10PlusYards;
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 33, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 33, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 33, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 33, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns50PlusYards;
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(chars, 33, "verageReturn", 0, 12, false) == 0) && (chars.Length == 45))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsAverageReturn;
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 33, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 45))
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsLongestReturn;
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 33, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[34])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(chars, 35, "alYards", 0, 7, false) == 0) && (chars.Length == 42))
                                                                            return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTotalYards;
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(chars, 35, "chdowns", 0, 7, false) == 0) && (chars.Length == 42))
                                                                            return TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTouchdowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                switch (chars[26])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 27, "ttempted", 0, 8, false) == 0)
                                                          {
                                                            if (chars.Length == 35)
                                                              {
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted;
                                                              }
                                                            switch (chars[35])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(chars, 36, "to19Yards", 0, 9, false) == 0) && (chars.Length == 45))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted1to19Yards;
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 36, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 46))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted20to29Yards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 36, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 46))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted30to39Yards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 36, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 46))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted40to49Yards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 36, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 46))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted50PlusYards;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'B':
                                                        if ((String.Compare(chars, 27, "locked", 0, 6, false) == 0) && (chars.Length == 33))
                                                            return TypeValueKnownValues.Value_AmericanFootballFieldGoalsBlocked;
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(chars, 27, "ongestMade", 0, 10, false) == 0) && (chars.Length == 37))
                                                            return TypeValueKnownValues.Value_AmericanFootballFieldGoalsLongestMade;
                                                        break;
                                                    case 'M':
                                                        if (String.Compare(chars, 27, "ade", 0, 3, false) == 0)
                                                          {
                                                            if (chars.Length == 30)
                                                              {
                                                                return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade;
                                                              }
                                                            switch (chars[30])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(chars, 31, "to19Yards", 0, 9, false) == 0) && (chars.Length == 40))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade1to19Yards;
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 31, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade20to29Yards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 31, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade30to39Yards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 31, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade40to49Yards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade50PlusYards;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 27, "erc", 0, 3, false) == 0) && (chars.Length == 30))
                                                            return TypeValueKnownValues.Value_AmericanFootballFieldGoalsPerc;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 18, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 29))
                                        return TypeValueKnownValues.Value_AmericanFootballForcedFumbles;
                                    break;
                                case 'u':
                                    if (String.Compare(chars, 18, "mbles", 0, 5, false) == 0)
                                      {
                                        if (chars.Length == 23)
                                          {
                                            return TypeValueKnownValues.Value_AmericanFootballFumbles;
                                          }
                                        switch (chars[23])
                                          {
                                            case 'F':
                                                if ((String.Compare(chars, 24, "orced", 0, 5, false) == 0) && (chars.Length == 29))
                                                    return TypeValueKnownValues.Value_AmericanFootballFumblesForced;
                                                break;
                                            case 'L':
                                                if ((String.Compare(chars, 24, "ost", 0, 3, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_AmericanFootballFumblesLost;
                                                break;
                                            case 'O':
                                                switch (chars[24])
                                                  {
                                                    case 'p':
                                                        if (String.Compare(chars, 25, "ponent", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[31])
                                                              {
                                                                case 'R':
                                                                    if ((String.Compare(chars, 32, "ecovery", 0, 7, false) == 0) && (chars.Length == 39))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFumblesOpponentRecovery;
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(chars, 32, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 53))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(chars, 25, "tOfBounds", 0, 9, false) == 0) && (chars.Length == 34))
                                                            return TypeValueKnownValues.Value_AmericanFootballFumblesOutOfBounds;
                                                        break;
                                                    case 'w':
                                                        if (String.Compare(chars, 25, "n", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[26])
                                                              {
                                                                case 'R':
                                                                    if ((String.Compare(chars, 27, "ecovery", 0, 7, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFumblesOwnRecovery;
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(chars, 27, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 48))
                                                                        return TypeValueKnownValues.Value_AmericanFootballFumblesOwnTouchdownsFromRecovery;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'R':
                                                if (String.Compare(chars, 24, "ecovered", 0, 8, false) == 0)
                                                  {
                                                    if (chars.Length == 32)
                                                      {
                                                        return TypeValueKnownValues.Value_AmericanFootballFumblesRecovered;
                                                      }
                                                    switch (chars[32])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 33, "orTouchdowns", 0, 12, false) == 0) && (chars.Length == 45))
                                                                return TypeValueKnownValues.Value_AmericanFootballFumblesRecoveredForTouchdowns;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'Y':
                                                if (String.Compare(chars, 24, "ardsFromO", 0, 9, false) == 0)
                                                  {
                                                    switch (chars[33])
                                                      {
                                                        case 'p':
                                                            if ((String.Compare(chars, 34, "ponentRecovery", 0, 14, false) == 0) && (chars.Length == 48))
                                                                return TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOpponentRecovery;
                                                            break;
                                                        case 'w':
                                                            if ((String.Compare(chars, 34, "nRecovery", 0, 9, false) == 0) && (chars.Length == 43))
                                                                return TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOwnRecovery;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'G':
                            switch (chars[17])
                              {
                                case 'a':
                                    if (String.Compare(chars, 18, "mes", 0, 3, false) == 0)
                                      {
                                        switch (chars[21])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 22, "layed", 0, 5, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_AmericanFootballGamesPlayed;
                                                break;
                                            case 'S':
                                                if ((String.Compare(chars, 22, "tarted", 0, 6, false) == 0) && (chars.Length == 28))
                                                    return TypeValueKnownValues.Value_AmericanFootballGamesStarted;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(chars, 18, "alEfficiency", 0, 12, false) == 0)
                                      {
                                        switch (chars[30])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 31, "ttempts", 0, 7, false) == 0) && (chars.Length == 38))
                                                    return TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyAttempts;
                                                break;
                                            case 'P':
                                                if ((String.Compare(chars, 31, "erc", 0, 3, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyPerc;
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 31, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 40))
                                                    return TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyTouchdowns;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'I':
                            if (String.Compare(chars, 17, "nterceptions", 0, 12, false) == 0)
                              {
                                if (chars.Length == 29)
                                  {
                                    return TypeValueKnownValues.Value_AmericanFootballInterceptions;
                                  }
                                switch (chars[29])
                                  {
                                    case 'L':
                                        if ((String.Compare(chars, 30, "ongestInterception", 0, 18, false) == 0) && (chars.Length == 48))
                                            return TypeValueKnownValues.Value_AmericanFootballInterceptionsLongestInterception;
                                        break;
                                    case 'T':
                                        if ((String.Compare(chars, 30, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 39))
                                            return TypeValueKnownValues.Value_AmericanFootballInterceptionsTouchdowns;
                                        break;
                                    case 'Y':
                                        if ((String.Compare(chars, 30, "ards", 0, 4, false) == 0) && (chars.Length == 34))
                                            return TypeValueKnownValues.Value_AmericanFootballInterceptionsYards;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'K':
                            if (String.Compare(chars, 17, "ickoff", 0, 6, false) == 0)
                              {
                                switch (chars[23])
                                  {
                                    case 'R':
                                        if (String.Compare(chars, 24, "eturns", 0, 6, false) == 0)
                                          {
                                            switch (chars[30])
                                              {
                                                case '1':
                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturns10PlusYards;
                                                    break;
                                                case '2':
                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturns20PlusYards;
                                                    break;
                                                case '3':
                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturns30PlusYards;
                                                    break;
                                                case '4':
                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturns40PlusYards;
                                                    break;
                                                case '5':
                                                    if ((String.Compare(chars, 31, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturns50PlusYards;
                                                    break;
                                                case 'A':
                                                    if ((String.Compare(chars, 31, "verageRun", 0, 9, false) == 0) && (chars.Length == 40))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsAverageRun;
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(chars, 31, "airCatches", 0, 10, false) == 0) && (chars.Length == 41))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsFairCatches;
                                                    break;
                                                case 'L':
                                                    if ((String.Compare(chars, 31, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 47))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsLongestKickReturn;
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(chars, 31, "eturns", 0, 6, false) == 0) && (chars.Length == 37))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsReturns;
                                                    break;
                                                case 'T':
                                                    if ((String.Compare(chars, 31, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 40))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsTouchdowns;
                                                    break;
                                                case 'Y':
                                                    if ((String.Compare(chars, 31, "ards", 0, 4, false) == 0) && (chars.Length == 35))
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffReturnsYards;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 's':
                                        switch (chars[24])
                                          {
                                            case 'A':
                                                if (String.Compare(chars, 25, "verage", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[31])
                                                      {
                                                        case 'G':
                                                            if ((String.Compare(chars, 32, "rossYards", 0, 9, false) == 0) && (chars.Length == 41))
                                                                return TypeValueKnownValues.Value_AmericanFootballKickoffsAverageGrossYards;
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(chars, 32, "etYards", 0, 7, false) == 0) && (chars.Length == 39))
                                                                return TypeValueKnownValues.Value_AmericanFootballKickoffsAverageNetYards;
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 32, "eturnYards", 0, 10, false) == 0) && (chars.Length == 42))
                                                                return TypeValueKnownValues.Value_AmericanFootballKickoffsAverageReturnYards;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if ((String.Compare(chars, 25, "ndZoneKicks", 0, 11, false) == 0) && (chars.Length == 36))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsEndZoneKicks;
                                                break;
                                            case 'G':
                                                if ((String.Compare(chars, 25, "rossYards", 0, 9, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsGrossYards;
                                                break;
                                            case 'I':
                                                if (String.Compare(chars, 25, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                  {
                                                    if (chars.Length == 49)
                                                      {
                                                        return TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLine;
                                                      }
                                                    switch (chars[49])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 50, "erc", 0, 3, false) == 0) && (chars.Length == 53))
                                                                return TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if ((String.Compare(chars, 25, "icks", 0, 4, false) == 0) && (chars.Length == 29))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsKicks;
                                                break;
                                            case 'L':
                                                if ((String.Compare(chars, 25, "ongestKick", 0, 10, false) == 0) && (chars.Length == 35))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsLongestKick;
                                                break;
                                            case 'N':
                                                if ((String.Compare(chars, 25, "etYards", 0, 7, false) == 0) && (chars.Length == 32))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsNetYards;
                                                break;
                                            case 'R':
                                                if ((String.Compare(chars, 25, "eturned", 0, 7, false) == 0) && (chars.Length == 32))
                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsReturned;
                                                break;
                                            case 'T':
                                                if (String.Compare(chars, 25, "o", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[26])
                                                      {
                                                        case 't':
                                                            if ((String.Compare(chars, 27, "alReturnYards", 0, 13, false) == 0) && (chars.Length == 40))
                                                                return TypeValueKnownValues.Value_AmericanFootballKickoffsTotalReturnYards;
                                                            break;
                                                        case 'u':
                                                            if (String.Compare(chars, 27, "chbacks", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 34)
                                                                  {
                                                                    return TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacks;
                                                                  }
                                                                switch (chars[34])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 35, "erc", 0, 3, false) == 0) && (chars.Length == 38))
                                                                            return TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacksPerc;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if (String.Compare(chars, 17, "isc", 0, 3, false) == 0)
                              {
                                switch (chars[20])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 21, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 35))
                                            return TypeValueKnownValues.Value_AmericanFootballMiscAssistedTackles;
                                        break;
                                    case 'C':
                                        if ((String.Compare(chars, 21, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 35))
                                            return TypeValueKnownValues.Value_AmericanFootballMiscCombinedTackles;
                                        break;
                                    case 'F':
                                        switch (chars[21])
                                          {
                                            case 'o':
                                                if ((String.Compare(chars, 22, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 33))
                                                    return TypeValueKnownValues.Value_AmericanFootballMiscForcedFumbles;
                                                break;
                                            case 'u':
                                                if ((String.Compare(chars, 22, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 36))
                                                    return TypeValueKnownValues.Value_AmericanFootballMiscFumblesRecovered;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        if ((String.Compare(chars, 21, "ackles", 0, 6, false) == 0) && (chars.Length == 27))
                                            return TypeValueKnownValues.Value_AmericanFootballMiscTackles;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            switch (chars[17])
                              {
                                case 'a':
                                    if (String.Compare(chars, 18, "ss", 0, 2, false) == 0)
                                      {
                                        switch (chars[20])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 21, "sDefended", 0, 9, false) == 0) && (chars.Length == 30))
                                                    return TypeValueKnownValues.Value_AmericanFootballPassesDefended;
                                                break;
                                            case 'i':
                                                if (String.Compare(chars, 21, "ng", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[23])
                                                      {
                                                        case '1':
                                                            switch (chars[24])
                                                              {
                                                                case '0':
                                                                    if ((String.Compare(chars, 25, "PlusYards", 0, 9, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassing10PlusYards;
                                                                    break;
                                                                case 's':
                                                                    if ((String.Compare(chars, 25, "tDowns", 0, 6, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassing1stDowns;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassing20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassing30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassing40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassing50PlusYards;
                                                            break;
                                                        case 'A':
                                                            switch (chars[24])
                                                              {
                                                                case 't':
                                                                    if ((String.Compare(chars, 25, "tempts", 0, 6, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassingAttempts;
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(chars, 25, "erageYardsPer", 0, 13, false) == 0)
                                                                      {
                                                                        switch (chars[38])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(chars, 39, "ttempt", 0, 6, false) == 0) && (chars.Length == 45))
                                                                                    return TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerAttempt;
                                                                                break;
                                                                            case 'C':
                                                                                if ((String.Compare(chars, 39, "ompletion", 0, 9, false) == 0) && (chars.Length == 48))
                                                                                    return TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerCompletion;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'C':
                                                            if (String.Compare(chars, 24, "ompletion", 0, 9, false) == 0)
                                                              {
                                                                switch (chars[33])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingCompletionPerc;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 34)
                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingCompletions;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'G':
                                                            if ((String.Compare(chars, 24, "rossYards", 0, 9, false) == 0) && (chars.Length == 33))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassingGrossYards;
                                                            break;
                                                        case 'I':
                                                            if (String.Compare(chars, 24, "nterception", 0, 11, false) == 0)
                                                              {
                                                                switch (chars[35])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 36, "erc", 0, 3, false) == 0) && (chars.Length == 39))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingInterceptionPerc;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 36)
                                                                          {
                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingInterceptions;
                                                                          }
                                                                        switch (chars[36])
                                                                          {
                                                                            case 'R':
                                                                                if ((String.Compare(chars, 37, "eturnedForTouchdown", 0, 19, false) == 0) && (chars.Length == 56))
                                                                                    return TypeValueKnownValues.Value_AmericanFootballPassingInterceptionsReturnedForTouchdown;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 24, "ongestPass", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassingLongestPass;
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(chars, 24, "etYards", 0, 7, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_AmericanFootballPassingNetYards;
                                                            break;
                                                        case 'R':
                                                            switch (chars[24])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(chars, 25, "ting", 0, 4, false) == 0) && (chars.Length == 29))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassingRating;
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(chars, 25, "dZoneAttempts", 0, 13, false) == 0) && (chars.Length == 38))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassingRedZoneAttempts;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(chars, 24, "acked", 0, 5, false) == 0)
                                                              {
                                                                if (chars.Length == 29)
                                                                  {
                                                                    return TypeValueKnownValues.Value_AmericanFootballPassingSacked;
                                                                  }
                                                                switch (chars[29])
                                                                  {
                                                                    case 'Y':
                                                                        if ((String.Compare(chars, 30, "ardsLost", 0, 8, false) == 0) && (chars.Length == 38))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingSackedYardsLost;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'T':
                                                            switch (chars[24])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(chars, 25, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 39))
                                                                        return TypeValueKnownValues.Value_AmericanFootballPassingTackledForSafety;
                                                                    break;
                                                                case 'o':
                                                                    switch (chars[25])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(chars, 26, "alYards", 0, 7, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_AmericanFootballPassingTotalYards;
                                                                            break;
                                                                        case 'u':
                                                                            if (String.Compare(chars, 26, "chdown", 0, 6, false) == 0)
                                                                              {
                                                                                switch (chars[32])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(chars, 33, "erc", 0, 3, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingTouchdownPerc;
                                                                                        break;
                                                                                    case 's':
                                                                                        if (chars.Length == 33)
                                                                                            return TypeValueKnownValues.Value_AmericanFootballPassingTouchdowns;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'e':
                                    if (String.Compare(chars, 18, "nalties", 0, 7, false) == 0)
                                      {
                                        if (chars.Length == 25)
                                          {
                                            return TypeValueKnownValues.Value_AmericanFootballPenalties;
                                          }
                                        switch (chars[25])
                                          {
                                            case '1':
                                                if ((String.Compare(chars, 26, "stDowns", 0, 7, false) == 0) && (chars.Length == 33))
                                                    return TypeValueKnownValues.Value_AmericanFootballPenalties1stDowns;
                                                break;
                                            case 'Y':
                                                if ((String.Compare(chars, 26, "ards", 0, 4, false) == 0) && (chars.Length == 30))
                                                    return TypeValueKnownValues.Value_AmericanFootballPenaltiesYards;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(chars, 18, "nt", 0, 2, false) == 0)
                                      {
                                        switch (chars[20])
                                          {
                                            case 'R':
                                                if (String.Compare(chars, 21, "eturns", 0, 6, false) == 0)
                                                  {
                                                    if (chars.Length == 27)
                                                      {
                                                        return TypeValueKnownValues.Value_AmericanFootballPuntReturns;
                                                      }
                                                    switch (chars[27])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(chars, 28, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturns10PlusYards;
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 28, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturns20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 28, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturns30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 28, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturns40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 28, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturns50PlusYards;
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(chars, 28, "verageRun", 0, 9, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturnsAverageRun;
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(chars, 28, "airCatches", 0, 10, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturnsFairCatches;
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 28, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 44))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturnsLongestKickReturn;
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(chars, 28, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturnsTouchdowns;
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(chars, 28, "ards", 0, 4, false) == 0) && (chars.Length == 32))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntReturnsYards;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                if (String.Compare(chars, 21, "ng", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[23])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 24, "verage", 0, 6, false) == 0)
                                                              {
                                                                switch (chars[30])
                                                                  {
                                                                    case 'G':
                                                                        if ((String.Compare(chars, 31, "rossYards", 0, 9, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingAverageGrossYards;
                                                                        break;
                                                                    case 'N':
                                                                        if ((String.Compare(chars, 31, "etYards", 0, 7, false) == 0) && (chars.Length == 38))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingAverageNetYards;
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(chars, 31, "eturnYards", 0, 10, false) == 0) && (chars.Length == 41))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingAverageReturnYards;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'B':
                                                            if ((String.Compare(chars, 24, "locked", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntingBlocked;
                                                            break;
                                                        case 'G':
                                                            if ((String.Compare(chars, 24, "rossYards", 0, 9, false) == 0) && (chars.Length == 33))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntingGrossYards;
                                                            break;
                                                        case 'I':
                                                            if (String.Compare(chars, 24, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                              {
                                                                if (chars.Length == 48)
                                                                  {
                                                                    return TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLine;
                                                                  }
                                                                switch (chars[48])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 49, "erc", 0, 3, false) == 0) && (chars.Length == 52))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLinePerc;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 24, "ongestPunt", 0, 10, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntingLongestPunt;
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(chars, 24, "etYards", 0, 7, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntingNetYards;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "unts", 0, 4, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_AmericanFootballPuntingPunts;
                                                            break;
                                                        case 'R':
                                                            if (String.Compare(chars, 24, "eturn", 0, 5, false) == 0)
                                                              {
                                                                switch (chars[29])
                                                                  {
                                                                    case 'Y':
                                                                        if ((String.Compare(chars, 30, "ards", 0, 4, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingReturnYards;
                                                                        break;
                                                                    case 'e':
                                                                        if ((String.Compare(chars, 30, "d", 0, 1, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingReturned;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 24, "ouchbacks", 0, 9, false) == 0)
                                                              {
                                                                if (chars.Length == 33)
                                                                  {
                                                                    return TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacks;
                                                                  }
                                                                switch (chars[33])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                                                            return TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacksPerc;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'Q':
                            if ((String.Compare(chars, 17, "uarterbackHits", 0, 14, false) == 0) && (chars.Length == 31))
                                return TypeValueKnownValues.Value_AmericanFootballQuarterbackHits;
                            break;
                        case 'R':
                            switch (chars[17])
                              {
                                case 'e':
                                    switch (chars[18])
                                      {
                                        case 'c':
                                            if (String.Compare(chars, 19, "eiving", 0, 6, false) == 0)
                                              {
                                                switch (chars[25])
                                                  {
                                                    case '1':
                                                        switch (chars[26])
                                                          {
                                                            case '0':
                                                                if ((String.Compare(chars, 27, "PlusYards", 0, 9, false) == 0) && (chars.Length == 36))
                                                                    return TypeValueKnownValues.Value_AmericanFootballReceiving10PlusYards;
                                                                break;
                                                            case 's':
                                                                if ((String.Compare(chars, 27, "tDowns", 0, 6, false) == 0) && (chars.Length == 33))
                                                                    return TypeValueKnownValues.Value_AmericanFootballReceiving1stDowns;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case '2':
                                                        if ((String.Compare(chars, 26, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 36))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceiving20PlusYards;
                                                        break;
                                                    case '3':
                                                        if ((String.Compare(chars, 26, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 36))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceiving30PlusYards;
                                                        break;
                                                    case '4':
                                                        if ((String.Compare(chars, 26, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 36))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceiving40PlusYards;
                                                        break;
                                                    case '5':
                                                        if ((String.Compare(chars, 26, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 36))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceiving50PlusYards;
                                                        break;
                                                    case 'A':
                                                        if ((String.Compare(chars, 26, "verageReception", 0, 15, false) == 0) && (chars.Length == 41))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingAverageReception;
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(chars, 26, "umbledOnReception", 0, 17, false) == 0) && (chars.Length == 43))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingFumbledOnReception;
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(chars, 26, "ongestReception", 0, 15, false) == 0) && (chars.Length == 41))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingLongestReception;
                                                        break;
                                                    case 'R':
                                                        if (String.Compare(chars, 26, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[27])
                                                              {
                                                                case 'c':
                                                                    if ((String.Compare(chars, 28, "eptions", 0, 7, false) == 0) && (chars.Length == 35))
                                                                        return TypeValueKnownValues.Value_AmericanFootballReceivingReceptions;
                                                                    break;
                                                                case 'd':
                                                                    if ((String.Compare(chars, 28, "ZoneTargets", 0, 11, false) == 0) && (chars.Length == 39))
                                                                        return TypeValueKnownValues.Value_AmericanFootballReceivingRedZoneTargets;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'T':
                                                        switch (chars[26])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(chars, 27, "rgets", 0, 5, false) == 0) && (chars.Length == 32))
                                                                    return TypeValueKnownValues.Value_AmericanFootballReceivingTargets;
                                                                break;
                                                            case 'o':
                                                                switch (chars[27])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(chars, 28, "alYards", 0, 7, false) == 0) && (chars.Length == 35))
                                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingTotalYards;
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(chars, 28, "chdowns", 0, 7, false) == 0) && (chars.Length == 35))
                                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingTouchdowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'Y':
                                                        if ((String.Compare(chars, 26, "ardsAfterCompletion", 0, 19, false) == 0) && (chars.Length == 45))
                                                            return TypeValueKnownValues.Value_AmericanFootballReceivingYardsAfterCompletion;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'd':
                                            if (String.Compare(chars, 19, "ZoneEfficiency", 0, 14, false) == 0)
                                              {
                                                switch (chars[33])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(chars, 34, "ttempts", 0, 7, false) == 0) && (chars.Length == 41))
                                                            return TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyAttempts;
                                                        break;
                                                    case 'C':
                                                        if ((String.Compare(chars, 34, "onversions", 0, 10, false) == 0) && (chars.Length == 44))
                                                            return TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyConversions;
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                                            return TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyPerc;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(chars, 18, "shing", 0, 5, false) == 0)
                                      {
                                        switch (chars[23])
                                          {
                                            case '1':
                                                switch (chars[24])
                                                  {
                                                    case '0':
                                                        if ((String.Compare(chars, 25, "PlusYards", 0, 9, false) == 0) && (chars.Length == 34))
                                                            return TypeValueKnownValues.Value_AmericanFootballRushing10PlusYards;
                                                        break;
                                                    case 's':
                                                        if (String.Compare(chars, 25, "tDown", 0, 5, false) == 0)
                                                          {
                                                            switch (chars[30])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 31, "erc", 0, 3, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_AmericanFootballRushing1stDownPerc;
                                                                    break;
                                                                case 's':
                                                                    if (chars.Length == 31)
                                                                        return TypeValueKnownValues.Value_AmericanFootballRushing1stDowns;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case '2':
                                                if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushing20PlusYards;
                                                break;
                                            case '3':
                                                if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushing30PlusYards;
                                                break;
                                            case '4':
                                                if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushing40PlusYards;
                                                break;
                                            case '5':
                                                if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushing50PlusYards;
                                                break;
                                            case 'A':
                                                switch (chars[24])
                                                  {
                                                    case 't':
                                                        if ((String.Compare(chars, 25, "tempts", 0, 6, false) == 0) && (chars.Length == 31))
                                                            return TypeValueKnownValues.Value_AmericanFootballRushingAttempts;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 25, "erageRush", 0, 9, false) == 0) && (chars.Length == 34))
                                                            return TypeValueKnownValues.Value_AmericanFootballRushingAverageRush;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'F':
                                                if ((String.Compare(chars, 24, "umbledOnRush", 0, 12, false) == 0) && (chars.Length == 36))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushingFumbledOnRush;
                                                break;
                                            case 'L':
                                                if ((String.Compare(chars, 24, "ongestRush", 0, 10, false) == 0) && (chars.Length == 34))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushingLongestRush;
                                                break;
                                            case 'R':
                                                if ((String.Compare(chars, 24, "edZoneAttempts", 0, 14, false) == 0) && (chars.Length == 38))
                                                    return TypeValueKnownValues.Value_AmericanFootballRushingRedZoneAttempts;
                                                break;
                                            case 'T':
                                                switch (chars[24])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 25, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 39))
                                                            return TypeValueKnownValues.Value_AmericanFootballRushingTackledForSafety;
                                                        break;
                                                    case 'o':
                                                        switch (chars[25])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(chars, 26, "alYards", 0, 7, false) == 0) && (chars.Length == 33))
                                                                    return TypeValueKnownValues.Value_AmericanFootballRushingTotalYards;
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(chars, 26, "chdowns", 0, 7, false) == 0) && (chars.Length == 33))
                                                                    return TypeValueKnownValues.Value_AmericanFootballRushingTouchdowns;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (chars[17])
                              {
                                case 'a':
                                    switch (chars[18])
                                      {
                                        case 'c':
                                            if (String.Compare(chars, 19, "k", 0, 1, false) == 0)
                                              {
                                                switch (chars[20])
                                                  {
                                                    case 'Y':
                                                        if ((String.Compare(chars, 21, "ards", 0, 4, false) == 0) && (chars.Length == 25))
                                                            return TypeValueKnownValues.Value_AmericanFootballSackYards;
                                                        break;
                                                    case 's':
                                                        if (chars.Length == 21)
                                                            return TypeValueKnownValues.Value_AmericanFootballSacks;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 19, "eties", 0, 5, false) == 0) && (chars.Length == 24))
                                                return TypeValueKnownValues.Value_AmericanFootballSafeties;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'p':
                                    if (String.Compare(chars, 18, "ecialTeams", 0, 10, false) == 0)
                                      {
                                        switch (chars[28])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 29, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 43))
                                                    return TypeValueKnownValues.Value_AmericanFootballSpecialTeamsAssistedTackles;
                                                break;
                                            case 'C':
                                                if ((String.Compare(chars, 29, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 43))
                                                    return TypeValueKnownValues.Value_AmericanFootballSpecialTeamsCombinedTackles;
                                                break;
                                            case 'F':
                                                switch (chars[29])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(chars, 30, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 41))
                                                            return TypeValueKnownValues.Value_AmericanFootballSpecialTeamsForcedFumbles;
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(chars, 30, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 44))
                                                            return TypeValueKnownValues.Value_AmericanFootballSpecialTeamsFumblesRecovered;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 29, "otalTackles", 0, 11, false) == 0) && (chars.Length == 40))
                                                    return TypeValueKnownValues.Value_AmericanFootballSpecialTeamsTotalTackles;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'T':
                            if (String.Compare(chars, 17, "ackles", 0, 6, false) == 0)
                              {
                                if (chars.Length == 23)
                                  {
                                    return TypeValueKnownValues.Value_AmericanFootballTackles;
                                  }
                                switch (chars[23])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 24, "ssisted", 0, 7, false) == 0) && (chars.Length == 31))
                                            return TypeValueKnownValues.Value_AmericanFootballTacklesAssisted;
                                        break;
                                    case 'C':
                                        if ((String.Compare(chars, 24, "ombined", 0, 7, false) == 0) && (chars.Length == 31))
                                            return TypeValueKnownValues.Value_AmericanFootballTacklesCombined;
                                        break;
                                    case 'F':
                                        if ((String.Compare(chars, 24, "orLoss", 0, 6, false) == 0) && (chars.Length == 30))
                                            return TypeValueKnownValues.Value_AmericanFootballTacklesForLoss;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'B':
                if (String.Compare(chars, 1, "as", 0, 2, false) == 0)
                  {
                    switch (chars[3])
                      {
                        case 'e':
                            if (String.Compare(chars, 4, "ball", 0, 4, false) == 0)
                              {
                                switch (chars[8])
                                  {
                                    case 'B':
                                        if (String.Compare(chars, 9, "aserunning", 0, 10, false) == 0)
                                          {
                                            switch (chars[19])
                                              {
                                                case 'C':
                                                    if ((String.Compare(chars, 20, "aughtStealing", 0, 13, false) == 0) && (chars.Length == 33))
                                                        return TypeValueKnownValues.Value_BaseballBaserunningCaughtStealing;
                                                    break;
                                                case 'P':
                                                    if ((String.Compare(chars, 20, "ickoffs", 0, 7, false) == 0) && (chars.Length == 27))
                                                        return TypeValueKnownValues.Value_BaseballBaserunningPickoffs;
                                                    break;
                                                case 'S':
                                                    if (String.Compare(chars, 20, "tolenBase", 0, 9, false) == 0)
                                                      {
                                                        switch (chars[29])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 30, "erc", 0, 3, false) == 0) && (chars.Length == 33))
                                                                    return TypeValueKnownValues.Value_BaseballBaserunningStolenBasePerc;
                                                                break;
                                                            case 's':
                                                                if (chars.Length == 30)
                                                                    return TypeValueKnownValues.Value_BaseballBaserunningStolenBases;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'F':
                                        if (String.Compare(chars, 9, "ielding", 0, 7, false) == 0)
                                          {
                                            switch (chars[16])
                                              {
                                                case 'A':
                                                    if ((String.Compare(chars, 17, "ssists", 0, 6, false) == 0) && (chars.Length == 23))
                                                        return TypeValueKnownValues.Value_BaseballFieldingAssists;
                                                    break;
                                                case 'C':
                                                    if ((String.Compare(chars, 17, "ompleteGames", 0, 12, false) == 0) && (chars.Length == 29))
                                                        return TypeValueKnownValues.Value_BaseballFieldingCompleteGames;
                                                    break;
                                                case 'D':
                                                    if ((String.Compare(chars, 17, "oublePlays", 0, 10, false) == 0) && (chars.Length == 27))
                                                        return TypeValueKnownValues.Value_BaseballFieldingDoublePlays;
                                                    break;
                                                case 'E':
                                                    if ((String.Compare(chars, 17, "rrors", 0, 5, false) == 0) && (chars.Length == 22))
                                                        return TypeValueKnownValues.Value_BaseballFieldingErrors;
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(chars, 17, "ieldingPercentage", 0, 17, false) == 0) && (chars.Length == 34))
                                                        return TypeValueKnownValues.Value_BaseballFieldingFieldingPercentage;
                                                    break;
                                                case 'G':
                                                    if (String.Compare(chars, 17, "ames", 0, 4, false) == 0)
                                                      {
                                                        switch (chars[21])
                                                          {
                                                            case 'F':
                                                                if ((String.Compare(chars, 22, "inished", 0, 7, false) == 0) && (chars.Length == 29))
                                                                    return TypeValueKnownValues.Value_BaseballFieldingGamesFinished;
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(chars, 22, "layed", 0, 5, false) == 0) && (chars.Length == 27))
                                                                    return TypeValueKnownValues.Value_BaseballFieldingGamesPlayed;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 22, "tarted", 0, 6, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_BaseballFieldingGamesStarted;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(chars, 18, "ssedBalls", 0, 9, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_BaseballFieldingPassedBalls;
                                                            break;
                                                        case 'u':
                                                            if ((String.Compare(chars, 18, "touts", 0, 5, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_BaseballFieldingPutouts;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(chars, 17, "angeFactor", 0, 10, false) == 0) && (chars.Length == 27))
                                                        return TypeValueKnownValues.Value_BaseballFieldingRangeFactor;
                                                    break;
                                                case 'T':
                                                    switch (chars[17])
                                                      {
                                                        case 'o':
                                                            if ((String.Compare(chars, 18, "talChances", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_BaseballFieldingTotalChances;
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 18, "iplePlays", 0, 9, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_BaseballFieldingTriplePlays;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'H':
                                        if (String.Compare(chars, 9, "itting", 0, 6, false) == 0)
                                          {
                                            switch (chars[15])
                                              {
                                                case 'A':
                                                    if (String.Compare(chars, 16, "tBats", 0, 5, false) == 0)
                                                      {
                                                        if (chars.Length == 21)
                                                          {
                                                            return TypeValueKnownValues.Value_BaseballHittingAtBats;
                                                          }
                                                        switch (chars[21])
                                                          {
                                                            case 'P':
                                                                if (String.Compare(chars, 22, "er", 0, 2, false) == 0)
                                                                  {
                                                                    switch (chars[24])
                                                                      {
                                                                        case 'H':
                                                                            if ((String.Compare(chars, 25, "omeRun", 0, 6, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_BaseballHittingAtBatsPerHomeRun;
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(chars, 25, "trikeout", 0, 8, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_BaseballHittingAtBatsPerStrikeout;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'W':
                                                                if ((String.Compare(chars, 22, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (chars.Length == 49))
                                                                    return TypeValueKnownValues.Value_BaseballHittingAtBatsWithRunnersInScoringPosition;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'B':
                                                    if (String.Compare(chars, 16, "a", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[17])
                                                          {
                                                            case 'l':
                                                                if (String.Compare(chars, 18, "ls", 0, 2, false) == 0)
                                                                  {
                                                                    if (chars.Length == 20)
                                                                      {
                                                                        return TypeValueKnownValues.Value_BaseballHittingBalls;
                                                                      }
                                                                    switch (chars[20])
                                                                      {
                                                                        case 'I':
                                                                            if ((String.Compare(chars, 21, "nPlay", 0, 5, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_BaseballHittingBallsInPlay;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if (String.Compare(chars, 18, "tingAverage", 0, 11, false) == 0)
                                                                  {
                                                                    if (chars.Length == 29)
                                                                      {
                                                                        return TypeValueKnownValues.Value_BaseballHittingBattingAverage;
                                                                      }
                                                                    switch (chars[29])
                                                                      {
                                                                        case 'O':
                                                                            if ((String.Compare(chars, 30, "nBallsInPlay", 0, 12, false) == 0) && (chars.Length == 42))
                                                                                return TypeValueKnownValues.Value_BaseballHittingBattingAverageOnBallsInPlay;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'C':
                                                    switch (chars[16])
                                                      {
                                                        case 'o':
                                                            if ((String.Compare(chars, 17, "mpleteGames", 0, 11, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_BaseballHittingCompleteGames;
                                                            break;
                                                        case 'y':
                                                            if ((String.Compare(chars, 17, "cles", 0, 4, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_BaseballHittingCycles;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'D':
                                                    switch (chars[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 17, "rtBallsFaced", 0, 12, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BaseballHittingDirtBallsFaced;
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 17, "ubles", 0, 5, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_BaseballHittingDoubles;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'E':
                                                    switch (chars[16])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(chars, 17, "rnedRunsScored", 0, 14, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_BaseballHittingEarnedRunsScored;
                                                            break;
                                                        case 'x':
                                                            if ((String.Compare(chars, 17, "traBaseHits", 0, 11, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_BaseballHittingExtraBaseHits;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'F':
                                                    switch (chars[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 17, "eldersChoice", 0, 12, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BaseballHittingFieldersChoice;
                                                            break;
                                                        case 'l':
                                                            if (String.Compare(chars, 17, "y", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[18])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 19, "alls", 0, 4, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_BaseballHittingFlyBalls;
                                                                        break;
                                                                    case 'O':
                                                                        if (String.Compare(chars, 19, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            if (chars.Length == 22)
                                                                              {
                                                                                return TypeValueKnownValues.Value_BaseballHittingFlyOuts;
                                                                              }
                                                                            switch (chars[22])
                                                                              {
                                                                                case 'I':
                                                                                    if ((String.Compare(chars, 23, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 37))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingFlyOutsIntoDoublePlays;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 17, "ulBalls", 0, 7, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_BaseballHittingFoulBalls;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'G':
                                                    switch (chars[16])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(chars, 17, "mes", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[20])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(chars, 21, "inished", 0, 7, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_BaseballHittingGamesFinished;
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 21, "layed", 0, 5, false) == 0) && (chars.Length == 26))
                                                                            return TypeValueKnownValues.Value_BaseballHittingGamesPlayed;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(chars, 21, "tarted", 0, 6, false) == 0) && (chars.Length == 27))
                                                                            return TypeValueKnownValues.Value_BaseballHittingGamesStarted;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(chars, 17, "ound", 0, 4, false) == 0)
                                                              {
                                                                switch (chars[21])
                                                                  {
                                                                    case 'B':
                                                                        if (String.Compare(chars, 22, "all", 0, 3, false) == 0)
                                                                          {
                                                                            switch (chars[25])
                                                                              {
                                                                                case 'T':
                                                                                    if ((String.Compare(chars, 26, "oFlyBallRatio", 0, 13, false) == 0) && (chars.Length == 39))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingGroundBallToFlyBallRatio;
                                                                                    break;
                                                                                case 's':
                                                                                    if (chars.Length == 26)
                                                                                        return TypeValueKnownValues.Value_BaseballHittingGroundBalls;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 'O':
                                                                        if ((String.Compare(chars, 22, "uts", 0, 3, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_BaseballHittingGroundOuts;
                                                                        break;
                                                                    case 'e':
                                                                        if ((String.Compare(chars, 22, "dIntoDoublePlay", 0, 15, false) == 0) && (chars.Length == 37))
                                                                            return TypeValueKnownValues.Value_BaseballHittingGroundedIntoDoublePlay;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'H':
                                                    switch (chars[16])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(chars, 17, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[18])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 19, "yPitch", 0, 6, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_BaseballHittingHitByPitch;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 19)
                                                                          {
                                                                            return TypeValueKnownValues.Value_BaseballHittingHits;
                                                                          }
                                                                        switch (chars[19])
                                                                          {
                                                                            case 'W':
                                                                                if ((String.Compare(chars, 20, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (chars.Length == 47))
                                                                                    return TypeValueKnownValues.Value_BaseballHittingHitsWithRunnersInScoringPosition;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 17, "meRuns", 0, 6, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_BaseballHittingHomeRuns;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'I':
                                                    switch (chars[16])
                                                      {
                                                        case 'n':
                                                            if (String.Compare(chars, 17, "tentional", 0, 9, false) == 0)
                                                              {
                                                                switch (chars[26])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 27, "alls", 0, 4, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_BaseballHittingIntentionalBalls;
                                                                        break;
                                                                    case 'W':
                                                                        if ((String.Compare(chars, 27, "alks", 0, 4, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_BaseballHittingIntentionalWalks;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(chars, 17, "olatedPower", 0, 11, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_BaseballHittingIsolatedPower;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'L':
                                                    if (String.Compare(chars, 16, "ine", 0, 3, false) == 0)
                                                      {
                                                        switch (chars[19])
                                                          {
                                                            case 'D':
                                                                if ((String.Compare(chars, 20, "rives", 0, 5, false) == 0) && (chars.Length == 25))
                                                                    return TypeValueKnownValues.Value_BaseballHittingLineDrives;
                                                                break;
                                                            case 'O':
                                                                if (String.Compare(chars, 20, "uts", 0, 3, false) == 0)
                                                                  {
                                                                    if (chars.Length == 23)
                                                                      {
                                                                        return TypeValueKnownValues.Value_BaseballHittingLineOuts;
                                                                      }
                                                                    switch (chars[23])
                                                                      {
                                                                        case 'I':
                                                                            if ((String.Compare(chars, 24, "ntoDoublePlay", 0, 13, false) == 0) && (chars.Length == 37))
                                                                                return TypeValueKnownValues.Value_BaseballHittingLineOutsIntoDoublePlay;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'O':
                                                    if (String.Compare(chars, 16, "nBaseP", 0, 6, false) == 0)
                                                      {
                                                        switch (chars[22])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(chars, 23, "rc", 0, 2, false) == 0) && (chars.Length == 25))
                                                                    return TypeValueKnownValues.Value_BaseballHittingOnBasePerc;
                                                                break;
                                                            case 'l':
                                                                if ((String.Compare(chars, 23, "usSluggingPerc", 0, 14, false) == 0) && (chars.Length == 37))
                                                                    return TypeValueKnownValues.Value_BaseballHittingOnBasePlusSluggingPerc;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (chars[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 17, "tchesFaced", 0, 10, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_BaseballHittingPitchesFaced;
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(chars, 17, "ateAppearances", 0, 14, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_BaseballHittingPlateAppearances;
                                                            break;
                                                        case 'o':
                                                            if (String.Compare(chars, 17, "p", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[18])
                                                                  {
                                                                    case 'O':
                                                                        if ((String.Compare(chars, 19, "uts", 0, 3, false) == 0) && (chars.Length == 22))
                                                                            return TypeValueKnownValues.Value_BaseballHittingPopOuts;
                                                                        break;
                                                                    case 'U':
                                                                        if ((String.Compare(chars, 19, "ps", 0, 2, false) == 0) && (chars.Length == 21))
                                                                            return TypeValueKnownValues.Value_BaseballHittingPopUps;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'R':
                                                    switch (chars[16])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(chars, 17, "achedOnError", 0, 12, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BaseballHittingReachedOnError;
                                                            break;
                                                        case 'u':
                                                            if (String.Compare(chars, 17, "n", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[18])
                                                                  {
                                                                    case 'n':
                                                                        if (String.Compare(chars, 19, "ersLeftOnBase", 0, 13, false) == 0)
                                                                          {
                                                                            if (chars.Length == 32)
                                                                              {
                                                                                return TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBase;
                                                                              }
                                                                            switch (chars[32])
                                                                              {
                                                                                case 'T':
                                                                                    if ((String.Compare(chars, 33, "woOutsRunnersInScoringPosition", 0, 30, false) == 0) && (chars.Length == 63))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 's':
                                                                        if (String.Compare(chars, 19, "BattedIn", 0, 8, false) == 0)
                                                                          {
                                                                            if (chars.Length == 27)
                                                                              {
                                                                                return TypeValueKnownValues.Value_BaseballHittingRunsBattedIn;
                                                                              }
                                                                            switch (chars[27])
                                                                              {
                                                                                case 'W':
                                                                                    if ((String.Compare(chars, 28, "ithTwoOuts", 0, 10, false) == 0) && (chars.Length == 38))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingRunsBattedInWithTwoOuts;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'S':
                                                    switch (chars[16])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(chars, 17, "crifice", 0, 7, false) == 0)
                                                              {
                                                                switch (chars[24])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(chars, 25, "lys", 0, 3, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_BaseballHittingSacrificeFlys;
                                                                        break;
                                                                    case 'H':
                                                                        if ((String.Compare(chars, 25, "its", 0, 3, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_BaseballHittingSacrificeHits;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(chars, 17, "condaryAverage", 0, 14, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_BaseballHittingSecondaryAverage;
                                                            break;
                                                        case 'i':
                                                            if ((String.Compare(chars, 17, "ngles", 0, 5, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_BaseballHittingSingles;
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(chars, 17, "uggingPerc", 0, 10, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_BaseballHittingSluggingPerc;
                                                            break;
                                                        case 't':
                                                            if (String.Compare(chars, 17, "rike", 0, 4, false) == 0)
                                                              {
                                                                switch (chars[21])
                                                                  {
                                                                    case 'o':
                                                                        if (String.Compare(chars, 22, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            switch (chars[25])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(chars, 26, "ooking", 0, 6, false) == 0) && (chars.Length == 32))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingStrikeoutsLooking;
                                                                                    break;
                                                                                case 'S':
                                                                                    if ((String.Compare(chars, 26, "winging", 0, 7, false) == 0) && (chars.Length == 33))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingStrikeoutsSwinging;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 's':
                                                                        switch (chars[22])
                                                                          {
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 23, "ooking", 0, 6, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_BaseballHittingStrikesLooking;
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(chars, 23, "winging", 0, 7, false) == 0) && (chars.Length == 30))
                                                                                    return TypeValueKnownValues.Value_BaseballHittingStrikesSwinging;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'T':
                                                    switch (chars[16])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(chars, 17, "tal", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[20])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 21, "ases", 0, 4, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_BaseballHittingTotalBases;
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(chars, 21, "unsScored", 0, 9, false) == 0) && (chars.Length == 30))
                                                                            return TypeValueKnownValues.Value_BaseballHittingTotalRunsScored;
                                                                        break;
                                                                    case 'S':
                                                                        if (String.Compare(chars, 21, "trike", 0, 5, false) == 0)
                                                                          {
                                                                            switch (chars[26])
                                                                              {
                                                                                case 'o':
                                                                                    if ((String.Compare(chars, 27, "uts", 0, 3, false) == 0) && (chars.Length == 30))
                                                                                        return TypeValueKnownValues.Value_BaseballHittingTotalStrikeouts;
                                                                                    break;
                                                                                case 's':
                                                                                    if (chars.Length == 27)
                                                                                        return TypeValueKnownValues.Value_BaseballHittingTotalStrikes;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 17, "iples", 0, 5, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_BaseballHittingTriples;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'U':
                                                    if ((String.Compare(chars, 16, "nearnedRunsScored", 0, 17, false) == 0) && (chars.Length == 33))
                                                        return TypeValueKnownValues.Value_BaseballHittingUnearnedRunsScored;
                                                    break;
                                                case 'W':
                                                    if (String.Compare(chars, 16, "alks", 0, 4, false) == 0)
                                                      {
                                                        if (chars.Length == 20)
                                                          {
                                                            return TypeValueKnownValues.Value_BaseballHittingWalks;
                                                          }
                                                        switch (chars[20])
                                                          {
                                                            case 'P':
                                                                if (String.Compare(chars, 21, "er", 0, 2, false) == 0)
                                                                  {
                                                                    switch (chars[23])
                                                                      {
                                                                        case 'P':
                                                                            if ((String.Compare(chars, 24, "lateAppearance", 0, 14, false) == 0) && (chars.Length == 38))
                                                                                return TypeValueKnownValues.Value_BaseballHittingWalksPerPlateAppearance;
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(chars, 24, "trikeout", 0, 8, false) == 0) && (chars.Length == 32))
                                                                                return TypeValueKnownValues.Value_BaseballHittingWalksPerStrikeout;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        if (String.Compare(chars, 9, "itching", 0, 7, false) == 0)
                                          {
                                            switch (chars[16])
                                              {
                                                case 'B':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            switch (chars[18])
                                                              {
                                                                case 'l':
                                                                    switch (chars[19])
                                                                      {
                                                                        case 'k':
                                                                            if ((String.Compare(chars, 20, "s", 0, 1, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingBalks;
                                                                            break;
                                                                        case 'l':
                                                                            if ((String.Compare(chars, 20, "s", 0, 1, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingBalls;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 't':
                                                                    if ((String.Compare(chars, 19, "tersFaced", 0, 9, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingBattersFaced;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(chars, 18, "ownSaves", 0, 8, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_BaseballPitchingBlownSaves;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'C':
                                                    if ((String.Compare(chars, 17, "ompleteGames", 0, 12, false) == 0) && (chars.Length == 29))
                                                        return TypeValueKnownValues.Value_BaseballPitchingCompleteGames;
                                                    break;
                                                case 'D':
                                                    switch (chars[17])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 18, "rtBallsThrown", 0, 13, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_BaseballPitchingDirtBallsThrown;
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 18, "ublesAllowed", 0, 12, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BaseballPitchingDoublesAllowed;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'E':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(chars, 18, "rnedRun", 0, 7, false) == 0)
                                                              {
                                                                switch (chars[25])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(chars, 26, "verage", 0, 6, false) == 0) && (chars.Length == 32))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingEarnedRunAverage;
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(chars, 26, "Allowed", 0, 7, false) == 0) && (chars.Length == 33))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingEarnedRunsAllowed;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 18, "rors", 0, 4, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_BaseballPitchingErrors;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'F':
                                                    switch (chars[17])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 18, "eldersChoice", 0, 12, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BaseballPitchingFieldersChoice;
                                                            break;
                                                        case 'l':
                                                            if (String.Compare(chars, 18, "yOuts", 0, 5, false) == 0)
                                                              {
                                                                if (chars.Length == 23)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BaseballPitchingFlyOuts;
                                                                  }
                                                                switch (chars[23])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(chars, 24, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 38))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingFlyOutsIntoDoublePlays;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 18, "ulBalls", 0, 7, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_BaseballPitchingFoulBalls;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'G':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(chars, 18, "mes", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[21])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(chars, 22, "inished", 0, 7, false) == 0) && (chars.Length == 29))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingGamesFinished;
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 22, "layed", 0, 5, false) == 0) && (chars.Length == 27))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingGamesPlayed;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(chars, 22, "tarted", 0, 6, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingGamesStarted;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(chars, 18, "ound", 0, 4, false) == 0)
                                                              {
                                                                switch (chars[22])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 23, "allToFlyBallRatio", 0, 17, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingGroundBallToFlyBallRatio;
                                                                        break;
                                                                    case 'O':
                                                                        if (String.Compare(chars, 23, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            if (chars.Length == 26)
                                                                              {
                                                                                return TypeValueKnownValues.Value_BaseballPitchingGroundOuts;
                                                                              }
                                                                            switch (chars[26])
                                                                              {
                                                                                case 'I':
                                                                                    if ((String.Compare(chars, 27, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 41))
                                                                                        return TypeValueKnownValues.Value_BaseballPitchingGroundOutsIntoDoublePlays;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'H':
                                                    switch (chars[17])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(chars, 18, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[19])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 20, "atters", 0, 6, false) == 0) && (chars.Length == 26))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingHitBatters;
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(chars, 20, "Allowed", 0, 7, false) == 0) && (chars.Length == 27))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingHitsAllowed;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            switch (chars[18])
                                                              {
                                                                case 'l':
                                                                    if ((String.Compare(chars, 19, "ds", 0, 2, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingHolds;
                                                                    break;
                                                                case 'm':
                                                                    if ((String.Compare(chars, 19, "eRunsAllowed", 0, 12, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingHomeRunsAllowed;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'I':
                                                    if (String.Compare(chars, 17, "n", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[18])
                                                          {
                                                            case 'n':
                                                                if (String.Compare(chars, 19, "ingsPitched", 0, 11, false) == 0)
                                                                  {
                                                                    switch (chars[30])
                                                                      {
                                                                        case 'C':
                                                                            if ((String.Compare(chars, 31, "ompletePartial", 0, 14, false) == 0) && (chars.Length == 45))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingInningsPitchedCompletePartial;
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(chars, 31, "otalOuts", 0, 8, false) == 0) && (chars.Length == 39))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingInningsPitchedTotalOuts;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if (String.Compare(chars, 19, "entional", 0, 8, false) == 0)
                                                                  {
                                                                    switch (chars[27])
                                                                      {
                                                                        case 'B':
                                                                            if ((String.Compare(chars, 28, "alls", 0, 4, false) == 0) && (chars.Length == 32))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingIntentionalBalls;
                                                                            break;
                                                                        case 'W':
                                                                            if ((String.Compare(chars, 28, "alks", 0, 4, false) == 0) && (chars.Length == 32))
                                                                                return TypeValueKnownValues.Value_BaseballPitchingIntentionalWalks;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'L':
                                                    switch (chars[17])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(chars, 18, "neOuts", 0, 6, false) == 0)
                                                              {
                                                                if (chars.Length == 24)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BaseballPitchingLineOuts;
                                                                  }
                                                                switch (chars[24])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(chars, 25, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 39))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingLineOutsIntoDoublePlays;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 18, "sses", 0, 4, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_BaseballPitchingLosses;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'O':
                                                    if (String.Compare(chars, 17, "pponent", 0, 7, false) == 0)
                                                      {
                                                        switch (chars[24])
                                                          {
                                                            case 'R':
                                                                if ((String.Compare(chars, 25, "unnersLeftOnBase", 0, 16, false) == 0) && (chars.Length == 41))
                                                                    return TypeValueKnownValues.Value_BaseballPitchingOpponentRunnersLeftOnBase;
                                                                break;
                                                            case 's':
                                                                if ((String.Compare(chars, 25, "BattingAverage", 0, 14, false) == 0) && (chars.Length == 39))
                                                                    return TypeValueKnownValues.Value_BaseballPitchingOpponentsBattingAverage;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (chars[17])
                                                      {
                                                        case 'i':
                                                            switch (chars[18])
                                                              {
                                                                case 'c':
                                                                    if ((String.Compare(chars, 19, "koffs", 0, 5, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingPickoffs;
                                                                    break;
                                                                case 't':
                                                                    if ((String.Compare(chars, 19, "chCount", 0, 7, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingPitchCount;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 18, "pOutsForced", 0, 11, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BaseballPitchingPopOutsForced;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'Q':
                                                    if ((String.Compare(chars, 17, "ualityStarts", 0, 12, false) == 0) && (chars.Length == 29))
                                                        return TypeValueKnownValues.Value_BaseballPitchingQualityStarts;
                                                    break;
                                                case 'R':
                                                    switch (chars[17])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(chars, 18, "achedOnError", 0, 12, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BaseballPitchingReachedOnError;
                                                            break;
                                                        case 'u':
                                                            if ((String.Compare(chars, 18, "nnersCaughtStealing", 0, 19, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_BaseballPitchingRunnersCaughtStealing;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'S':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            switch (chars[18])
                                                              {
                                                                case 'c':
                                                                    if (String.Compare(chars, 19, "rifice", 0, 6, false) == 0)
                                                                      {
                                                                        switch (chars[25])
                                                                          {
                                                                            case 'F':
                                                                                if ((String.Compare(chars, 26, "lys", 0, 3, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_BaseballPitchingSacrificeFlys;
                                                                                break;
                                                                            case 'H':
                                                                                if ((String.Compare(chars, 26, "its", 0, 3, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_BaseballPitchingSacrificeHits;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(chars, 19, "e", 0, 1, false) == 0)
                                                                      {
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'O':
                                                                                if ((String.Compare(chars, 21, "pportunities", 0, 12, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_BaseballPitchingSaveOpportunities;
                                                                                break;
                                                                            case 's':
                                                                                if (chars.Length == 21)
                                                                                    return TypeValueKnownValues.Value_BaseballPitchingSaves;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'h':
                                                            if ((String.Compare(chars, 18, "utouts", 0, 6, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_BaseballPitchingShutouts;
                                                            break;
                                                        case 'i':
                                                            if ((String.Compare(chars, 18, "nglesAllowed", 0, 12, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BaseballPitchingSinglesAllowed;
                                                            break;
                                                        case 't':
                                                            switch (chars[18])
                                                              {
                                                                case 'o':
                                                                    if ((String.Compare(chars, 19, "lenBasesAllowed", 0, 15, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingStolenBasesAllowed;
                                                                    break;
                                                                case 'r':
                                                                    if (String.Compare(chars, 19, "ike", 0, 3, false) == 0)
                                                                      {
                                                                        switch (chars[22])
                                                                          {
                                                                            case 'o':
                                                                                if (String.Compare(chars, 23, "uts", 0, 3, false) == 0)
                                                                                  {
                                                                                    switch (chars[26])
                                                                                      {
                                                                                        case 'L':
                                                                                            if ((String.Compare(chars, 27, "ooking", 0, 6, false) == 0) && (chars.Length == 33))
                                                                                                return TypeValueKnownValues.Value_BaseballPitchingStrikeoutsLooking;
                                                                                            break;
                                                                                        case 'P':
                                                                                            if (String.Compare(chars, 27, "er", 0, 2, false) == 0)
                                                                                              {
                                                                                                switch (chars[29])
                                                                                                  {
                                                                                                    case '9':
                                                                                                        if ((String.Compare(chars, 30, "Innings", 0, 7, false) == 0) && (chars.Length == 37))
                                                                                                            return TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPer9Innings;
                                                                                                        break;
                                                                                                    case 'W':
                                                                                                        if ((String.Compare(chars, 30, "alk", 0, 3, false) == 0) && (chars.Length == 33))
                                                                                                            return TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPerWalk;
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 'S':
                                                                                            if ((String.Compare(chars, 27, "winging", 0, 7, false) == 0) && (chars.Length == 34))
                                                                                                return TypeValueKnownValues.Value_BaseballPitchingStrikeoutsSwinging;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 's':
                                                                                switch (chars[23])
                                                                                  {
                                                                                    case 'L':
                                                                                        if ((String.Compare(chars, 24, "ooking", 0, 6, false) == 0) && (chars.Length == 30))
                                                                                            return TypeValueKnownValues.Value_BaseballPitchingStrikesLooking;
                                                                                        break;
                                                                                    case 'S':
                                                                                        if ((String.Compare(chars, 24, "winging", 0, 7, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_BaseballPitchingStrikesSwinging;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'T':
                                                    switch (chars[17])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(chars, 18, "tal", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[21])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(chars, 22, "asesAllowed", 0, 11, false) == 0) && (chars.Length == 33))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingTotalBasesAllowed;
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(chars, 22, "unsAllowed", 0, 10, false) == 0) && (chars.Length == 32))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingTotalRunsAllowed;
                                                                        break;
                                                                    case 'S':
                                                                        if (String.Compare(chars, 22, "trike", 0, 5, false) == 0)
                                                                          {
                                                                            switch (chars[27])
                                                                              {
                                                                                case 'o':
                                                                                    if ((String.Compare(chars, 28, "uts", 0, 3, false) == 0) && (chars.Length == 31))
                                                                                        return TypeValueKnownValues.Value_BaseballPitchingTotalStrikeouts;
                                                                                    break;
                                                                                case 's':
                                                                                    if (chars.Length == 28)
                                                                                        return TypeValueKnownValues.Value_BaseballPitchingTotalStrikes;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 18, "iplesAllowed", 0, 12, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BaseballPitchingTriplesAllowed;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'U':
                                                    if ((String.Compare(chars, 17, "nearnedRunsAllowed", 0, 18, false) == 0) && (chars.Length == 35))
                                                        return TypeValueKnownValues.Value_BaseballPitchingUnearnedRunsAllowed;
                                                    break;
                                                case 'W':
                                                    switch (chars[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(chars, 18, "lks", 0, 3, false) == 0)
                                                              {
                                                                if (chars.Length == 21)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BaseballPitchingWalks;
                                                                  }
                                                                switch (chars[21])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 22, "lusHitsPerInningPitched", 0, 23, false) == 0) && (chars.Length == 45))
                                                                            return TypeValueKnownValues.Value_BaseballPitchingWalksPlusHitsPerInningPitched;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'i':
                                                            switch (chars[18])
                                                              {
                                                                case 'l':
                                                                    if ((String.Compare(chars, 19, "dPitches", 0, 8, false) == 0) && (chars.Length == 27))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingWildPitches;
                                                                    break;
                                                                case 'n':
                                                                    if ((String.Compare(chars, 19, "s", 0, 1, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_BaseballPitchingWins;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'k':
                            if (String.Compare(chars, 4, "etball", 0, 6, false) == 0)
                              {
                                switch (chars[10])
                                  {
                                    case 'A':
                                        if (String.Compare(chars, 11, "ssists", 0, 6, false) == 0)
                                          {
                                            if (chars.Length == 17)
                                              {
                                                return TypeValueKnownValues.Value_BasketballAssists;
                                              }
                                            switch (chars[17])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                        return TypeValueKnownValues.Value_BasketballAssistsPerGame;
                                                    break;
                                                case 'T':
                                                    if ((String.Compare(chars, 18, "oTurnoverRatio", 0, 14, false) == 0) && (chars.Length == 32))
                                                        return TypeValueKnownValues.Value_BasketballAssistsToTurnoverRatio;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if (String.Compare(chars, 11, "locked", 0, 6, false) == 0)
                                          {
                                            switch (chars[17])
                                              {
                                                case 'A':
                                                    if (String.Compare(chars, 18, "ttempts", 0, 7, false) == 0)
                                                      {
                                                        if (chars.Length == 25)
                                                          {
                                                            return TypeValueKnownValues.Value_BasketballBlockedAttempts;
                                                          }
                                                        switch (chars[25])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 26, "erGame", 0, 6, false) == 0) && (chars.Length == 32))
                                                                    return TypeValueKnownValues.Value_BasketballBlockedAttemptsPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'S':
                                                    if (String.Compare(chars, 18, "hots", 0, 4, false) == 0)
                                                      {
                                                        if (chars.Length == 22)
                                                          {
                                                            return TypeValueKnownValues.Value_BasketballBlockedShots;
                                                          }
                                                        switch (chars[22])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 23, "erGame", 0, 6, false) == 0) && (chars.Length == 29))
                                                                    return TypeValueKnownValues.Value_BasketballBlockedShotsPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'C':
                                        if ((String.Compare(chars, 11, "oachTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 29))
                                            return TypeValueKnownValues.Value_BasketballCoachTechnicalFouls;
                                        break;
                                    case 'D':
                                        if (String.Compare(chars, 11, "efensiveRebounds", 0, 16, false) == 0)
                                          {
                                            if (chars.Length == 27)
                                              {
                                                return TypeValueKnownValues.Value_BasketballDefensiveRebounds;
                                              }
                                            switch (chars[27])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 28, "erGame", 0, 6, false) == 0) && (chars.Length == 34))
                                                        return TypeValueKnownValues.Value_BasketballDefensiveReboundsPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'E':
                                        if ((String.Compare(chars, 11, "jections", 0, 8, false) == 0) && (chars.Length == 19))
                                            return TypeValueKnownValues.Value_BasketballEjections;
                                        break;
                                    case 'F':
                                        switch (chars[11])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 12, "stBreakPoints", 0, 13, false) == 0)
                                                  {
                                                    if (chars.Length == 25)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballFastBreakPoints;
                                                      }
                                                    switch (chars[25])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 26, "erGame", 0, 6, false) == 0) && (chars.Length == 32))
                                                                return TypeValueKnownValues.Value_BasketballFastBreakPointsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                if (String.Compare(chars, 12, "eldGoal", 0, 7, false) == 0)
                                                  {
                                                    switch (chars[19])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 20, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 27)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballFieldGoalAttempts;
                                                                  }
                                                                switch (chars[27])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 28, "erGame", 0, 6, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_BasketballFieldGoalAttemptsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 20, "ercentage", 0, 9, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BasketballFieldGoalPercentage;
                                                            break;
                                                        case 's':
                                                            if (String.Compare(chars, 20, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (chars.Length == 24)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballFieldGoalsMade;
                                                                  }
                                                                switch (chars[24])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_BasketballFieldGoalsMadePerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'l':
                                                if (String.Compare(chars, 12, "agrantFouls", 0, 11, false) == 0)
                                                  {
                                                    if (chars.Length == 23)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballFlagrantFouls;
                                                      }
                                                    switch (chars[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BasketballFlagrantFoulsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(chars, 12, "eeThrow", 0, 7, false) == 0)
                                                  {
                                                    switch (chars[19])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 20, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 27)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballFreeThrowAttempts;
                                                                  }
                                                                switch (chars[27])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 28, "erGame", 0, 6, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_BasketballFreeThrowAttemptsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 20, "ercentage", 0, 9, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_BasketballFreeThrowPercentage;
                                                            break;
                                                        case 's':
                                                            if (String.Compare(chars, 20, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (chars.Length == 24)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballFreeThrowsMade;
                                                                  }
                                                                switch (chars[24])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_BasketballFreeThrowsMadePerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        if (String.Compare(chars, 11, "ames", 0, 4, false) == 0)
                                          {
                                            switch (chars[15])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 16, "layed", 0, 5, false) == 0) && (chars.Length == 21))
                                                        return TypeValueKnownValues.Value_BasketballGamesPlayed;
                                                    break;
                                                case 'S':
                                                    if ((String.Compare(chars, 16, "tarted", 0, 6, false) == 0) && (chars.Length == 22))
                                                        return TypeValueKnownValues.Value_BasketballGamesStarted;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'M':
                                        if (String.Compare(chars, 11, "inutesPlayed", 0, 12, false) == 0)
                                          {
                                            if (chars.Length == 23)
                                              {
                                                return TypeValueKnownValues.Value_BasketballMinutesPlayed;
                                              }
                                            switch (chars[23])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                        return TypeValueKnownValues.Value_BasketballMinutesPlayedPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(chars, 11, "ffensiveRebounds", 0, 16, false) == 0)
                                          {
                                            if (chars.Length == 27)
                                              {
                                                return TypeValueKnownValues.Value_BasketballOffensiveRebounds;
                                              }
                                            switch (chars[27])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 28, "erGame", 0, 6, false) == 0) && (chars.Length == 34))
                                                        return TypeValueKnownValues.Value_BasketballOffensiveReboundsPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (chars[11])
                                          {
                                            case 'e':
                                                if (String.Compare(chars, 12, "rsonalFouls", 0, 11, false) == 0)
                                                  {
                                                    if (chars.Length == 23)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballPersonalFouls;
                                                      }
                                                    switch (chars[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BasketballPersonalFoulsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'l':
                                                if ((String.Compare(chars, 12, "ayerTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 30))
                                                    return TypeValueKnownValues.Value_BasketballPlayerTechnicalFouls;
                                                break;
                                            case 'o':
                                                if (String.Compare(chars, 12, "ints", 0, 4, false) == 0)
                                                  {
                                                    if (chars.Length == 16)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballPoints;
                                                      }
                                                    switch (chars[16])
                                                      {
                                                        case 'I':
                                                            if (String.Compare(chars, 17, "nPaint", 0, 6, false) == 0)
                                                              {
                                                                if (chars.Length == 23)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballPointsInPaint;
                                                                  }
                                                                switch (chars[23])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                            return TypeValueKnownValues.Value_BasketballPointsInPaintPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(chars, 17, "ffTurnovers", 0, 11, false) == 0)
                                                              {
                                                                if (chars.Length == 28)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballPointsOffTurnovers;
                                                                  }
                                                                switch (chars[28])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 29, "erGame", 0, 6, false) == 0) && (chars.Length == 35))
                                                                            return TypeValueKnownValues.Value_BasketballPointsOffTurnoversPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_BasketballPointsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        if (String.Compare(chars, 11, "ebounds", 0, 7, false) == 0)
                                          {
                                            if (chars.Length == 18)
                                              {
                                                return TypeValueKnownValues.Value_BasketballRebounds;
                                              }
                                            switch (chars[18])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                        return TypeValueKnownValues.Value_BasketballReboundsPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        switch (chars[11])
                                          {
                                            case 'e':
                                                if (String.Compare(chars, 12, "condChancePoints", 0, 16, false) == 0)
                                                  {
                                                    if (chars.Length == 28)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballSecondChancePoints;
                                                      }
                                                    switch (chars[28])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 29, "erGame", 0, 6, false) == 0) && (chars.Length == 35))
                                                                return TypeValueKnownValues.Value_BasketballSecondChancePointsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if (String.Compare(chars, 12, "eals", 0, 4, false) == 0)
                                                  {
                                                    if (chars.Length == 16)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballSteals;
                                                      }
                                                    switch (chars[16])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_BasketballStealsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (chars[11])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 12, "amTechnicalFouls", 0, 16, false) == 0) && (chars.Length == 28))
                                                    return TypeValueKnownValues.Value_BasketballTeamTechnicalFouls;
                                                break;
                                            case 'h':
                                                if (String.Compare(chars, 12, "reePoint", 0, 8, false) == 0)
                                                  {
                                                    switch (chars[20])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 21, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 28)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballThreePointAttempts;
                                                                  }
                                                                switch (chars[28])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 29, "erGame", 0, 6, false) == 0) && (chars.Length == 35))
                                                                            return TypeValueKnownValues.Value_BasketballThreePointAttemptsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 21, "ercentage", 0, 9, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_BasketballThreePointPercentage;
                                                            break;
                                                        case 's':
                                                            if (String.Compare(chars, 21, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (chars.Length == 25)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballThreePointsMade;
                                                                  }
                                                                switch (chars[25])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 26, "erGame", 0, 6, false) == 0) && (chars.Length == 32))
                                                                            return TypeValueKnownValues.Value_BasketballThreePointsMadePerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'u':
                                                if (String.Compare(chars, 12, "rnovers", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_BasketballTurnovers;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_BasketballTurnoversPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'w':
                                                if (String.Compare(chars, 12, "oPoint", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[18])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 19, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 26)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballTwoPointAttempts;
                                                                  }
                                                                switch (chars[26])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 27, "erGame", 0, 6, false) == 0) && (chars.Length == 33))
                                                                            return TypeValueKnownValues.Value_BasketballTwoPointAttemptsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 19, "ercentage", 0, 9, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_BasketballTwoPointPercentage;
                                                            break;
                                                        case 's':
                                                            if (String.Compare(chars, 19, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (chars.Length == 23)
                                                                  {
                                                                    return TypeValueKnownValues.Value_BasketballTwoPointsMade;
                                                                  }
                                                                switch (chars[23])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                            return TypeValueKnownValues.Value_BasketballTwoPointsMadePerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'C':
                if (String.Compare(chars, 1, "ricketB", 0, 7, false) == 0)
                  {
                    switch (chars[8])
                      {
                        case 'a':
                            if ((String.Compare(chars, 9, "ttingRuns", 0, 9, false) == 0) && (chars.Length == 18))
                                return TypeValueKnownValues.Value_CricketBattingRuns;
                            break;
                        case 'o':
                            if ((String.Compare(chars, 9, "wlingWickets", 0, 12, false) == 0) && (chars.Length == 21))
                                return TypeValueKnownValues.Value_CricketBowlingWickets;
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'H':
                if (String.Compare(chars, 1, "ockey", 0, 5, false) == 0)
                  {
                    switch (chars[6])
                      {
                        case 'A':
                            switch (chars[7])
                              {
                                case 's':
                                    if (String.Compare(chars, 8, "sists", 0, 5, false) == 0)
                                      {
                                        if (chars.Length == 13)
                                          {
                                            return TypeValueKnownValues.Value_HockeyAssists;
                                          }
                                        switch (chars[13])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 14, "erGame", 0, 6, false) == 0) && (chars.Length == 20))
                                                    return TypeValueKnownValues.Value_HockeyAssistsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 8, "erageTimeOnIce", 0, 14, false) == 0) && (chars.Length == 22))
                                        return TypeValueKnownValues.Value_HockeyAverageTimeOnIce;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'B':
                            if (String.Compare(chars, 7, "locked", 0, 6, false) == 0)
                              {
                                switch (chars[13])
                                  {
                                    case 'A':
                                        if (String.Compare(chars, 14, "ttempts", 0, 7, false) == 0)
                                          {
                                            if (chars.Length == 21)
                                              {
                                                return TypeValueKnownValues.Value_HockeyBlockedAttempts;
                                              }
                                            switch (chars[21])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                        return TypeValueKnownValues.Value_HockeyBlockedAttemptsPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        if (String.Compare(chars, 14, "hots", 0, 4, false) == 0)
                                          {
                                            if (chars.Length == 18)
                                              {
                                                return TypeValueKnownValues.Value_HockeyBlockedShots;
                                              }
                                            switch (chars[18])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                        return TypeValueKnownValues.Value_HockeyBlockedShotsPerGame;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'E':
                            if (String.Compare(chars, 7, "venStrength", 0, 11, false) == 0)
                              {
                                switch (chars[18])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 19, "ssists", 0, 6, false) == 0) && (chars.Length == 25))
                                            return TypeValueKnownValues.Value_HockeyEvenStrengthAssists;
                                        break;
                                    case 'F':
                                        if (String.Compare(chars, 19, "aceoff", 0, 6, false) == 0)
                                          {
                                            switch (chars[25])
                                              {
                                                case 'W':
                                                    if ((String.Compare(chars, 26, "inPerc", 0, 6, false) == 0) && (chars.Length == 32))
                                                        return TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffWinPerc;
                                                    break;
                                                case 's':
                                                    if (chars.Length == 26)
                                                      {
                                                        return TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffs;
                                                      }
                                                    switch (chars[26])
                                                      {
                                                        case 'L':
                                                            if ((String.Compare(chars, 27, "ost", 0, 3, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsLost;
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(chars, 27, "on", 0, 2, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsWon;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'G':
                                        if ((String.Compare(chars, 19, "oals", 0, 4, false) == 0) && (chars.Length == 23))
                                            return TypeValueKnownValues.Value_HockeyEvenStrengthGoals;
                                        break;
                                    case 'M':
                                        if ((String.Compare(chars, 19, "issedShots", 0, 10, false) == 0) && (chars.Length == 29))
                                            return TypeValueKnownValues.Value_HockeyEvenStrengthMissedShots;
                                        break;
                                    case 'S':
                                        if ((String.Compare(chars, 19, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 29))
                                            return TypeValueKnownValues.Value_HockeyEvenStrengthShotsOnGoal;
                                        break;
                                    case 'T':
                                        if ((String.Compare(chars, 19, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 27))
                                            return TypeValueKnownValues.Value_HockeyEvenStrengthTimeOnIce;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            if (String.Compare(chars, 7, "aceoff", 0, 6, false) == 0)
                              {
                                switch (chars[13])
                                  {
                                    case 'W':
                                        if ((String.Compare(chars, 14, "inPerc", 0, 6, false) == 0) && (chars.Length == 20))
                                            return TypeValueKnownValues.Value_HockeyFaceoffWinPerc;
                                        break;
                                    case 's':
                                        if (chars.Length == 14)
                                          {
                                            return TypeValueKnownValues.Value_HockeyFaceoffs;
                                          }
                                        switch (chars[14])
                                          {
                                            case 'L':
                                                if ((String.Compare(chars, 15, "ost", 0, 3, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_HockeyFaceoffsLost;
                                                break;
                                            case 'W':
                                                if ((String.Compare(chars, 15, "on", 0, 2, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_HockeyFaceoffsWon;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'G':
                            switch (chars[7])
                              {
                                case 'a':
                                    if (String.Compare(chars, 8, "me", 0, 2, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'W':
                                                if (String.Compare(chars, 11, "inningGoal", 0, 10, false) == 0)
                                                  {
                                                    switch (chars[21])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 22, "lag", 0, 3, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_HockeyGameWinningGoalFlag;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 22)
                                                                return TypeValueKnownValues.Value_HockeyGameWinningGoals;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                if ((String.Compare(chars, 11, "Played", 0, 6, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_HockeyGamesPlayed;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'i':
                                    if (String.Compare(chars, 8, "veaways", 0, 7, false) == 0)
                                      {
                                        if (chars.Length == 15)
                                          {
                                            return TypeValueKnownValues.Value_HockeyGiveaways;
                                          }
                                        switch (chars[15])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_HockeyGiveawaysPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(chars, 8, "al", 0, 2, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 's':
                                                if (chars.Length == 11)
                                                  {
                                                    return TypeValueKnownValues.Value_HockeyGoals;
                                                  }
                                                switch (chars[11])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 12, "erGame", 0, 6, false) == 0) && (chars.Length == 18))
                                                            return TypeValueKnownValues.Value_HockeyGoalsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                if (String.Compare(chars, 11, "ending", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[17])
                                                      {
                                                        case 'E':
                                                            switch (chars[18])
                                                              {
                                                                case 'm':
                                                                    if (String.Compare(chars, 19, "ptyNet", 0, 6, false) == 0)
                                                                      {
                                                                        switch (chars[25])
                                                                          {
                                                                            case 'E':
                                                                                if ((String.Compare(chars, 26, "venStrengthGoalsAgainst", 0, 23, false) == 0) && (chars.Length == 49))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst;
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 26, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 37))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetGoalsAgainst;
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 26, "owerPlayGoalsAgainst", 0, 20, false) == 0) && (chars.Length == 46))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst;
                                                                                break;
                                                                            case 'S':
                                                                                if (String.Compare(chars, 26, "ho", 0, 2, false) == 0)
                                                                                  {
                                                                                    switch (chars[28])
                                                                                      {
                                                                                        case 'r':
                                                                                            if ((String.Compare(chars, 29, "tHandedGoalsAgainst", 0, 19, false) == 0) && (chars.Length == 48))
                                                                                                return TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst;
                                                                                            break;
                                                                                        case 't':
                                                                                            if ((String.Compare(chars, 29, "sAgainst", 0, 8, false) == 0) && (chars.Length == 37))
                                                                                                return TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShotsAgainst;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(chars, 19, "enStrength", 0, 10, false) == 0)
                                                                      {
                                                                        switch (chars[29])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 30, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 41))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthGoalsAgainst;
                                                                                break;
                                                                            case 'S':
                                                                                switch (chars[30])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(chars, 31, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (chars[33])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(chars, 34, "erc", 0, 3, false) == 0) && (chars.Length == 37))
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSavePerc;
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (chars.Length == 34)
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSaves;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(chars, 31, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 41))
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthShotsAgainst;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'G':
                                                            if (String.Compare(chars, 18, "oalsAgainst", 0, 11, false) == 0)
                                                              {
                                                                if (chars.Length == 29)
                                                                  {
                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainst;
                                                                  }
                                                                switch (chars[29])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(chars, 30, "verage", 0, 6, false) == 0) && (chars.Length == 36))
                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstAverage;
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 30, "erGame", 0, 6, false) == 0) && (chars.Length == 36))
                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 18, "osses", 0, 5, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_HockeyGoaltendingLosses;
                                                            break;
                                                        case 'O':
                                                            switch (chars[18])
                                                              {
                                                                case 'u':
                                                                    if ((String.Compare(chars, 19, "tcome", 0, 5, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingOutcome;
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(chars, 19, "ertimeLosses", 0, 12, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingOvertimeLosses;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'P':
                                                            switch (chars[18])
                                                              {
                                                                case 'e':
                                                                    if (String.Compare(chars, 19, "nalty", 0, 5, false) == 0)
                                                                      {
                                                                        switch (chars[24])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 25, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 36))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingPenaltyGoalsAgainst;
                                                                                break;
                                                                            case 'S':
                                                                                switch (chars[25])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(chars, 26, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (chars[28])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(chars, 29, "erc", 0, 3, false) == 0) && (chars.Length == 32))
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingPenaltySavePerc;
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (chars.Length == 29)
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingPenaltySaves;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(chars, 26, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingPenaltyShotsAgainst;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'o':
                                                                    if (String.Compare(chars, 19, "werPlay", 0, 7, false) == 0)
                                                                      {
                                                                        switch (chars[26])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 27, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 38))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayGoalsAgainst;
                                                                                break;
                                                                            case 'S':
                                                                                switch (chars[27])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(chars, 28, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (chars[30])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(chars, 31, "erc", 0, 3, false) == 0) && (chars.Length == 34))
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySavePerc;
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (chars.Length == 31)
                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySaves;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(chars, 28, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 38))
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayShotsAgainst;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'S':
                                                            switch (chars[18])
                                                              {
                                                                case 'a':
                                                                    if (String.Compare(chars, 19, "ve", 0, 2, false) == 0)
                                                                      {
                                                                        switch (chars[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 22, "erc", 0, 3, false) == 0) && (chars.Length == 25))
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingSavePerc;
                                                                                break;
                                                                            case 's':
                                                                                if (chars.Length == 22)
                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingSaves;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'h':
                                                                    switch (chars[19])
                                                                      {
                                                                        case 'o':
                                                                            switch (chars[20])
                                                                              {
                                                                                case 'o':
                                                                                    if (String.Compare(chars, 21, "tout", 0, 4, false) == 0)
                                                                                      {
                                                                                        switch (chars[25])
                                                                                          {
                                                                                            case 'G':
                                                                                                if ((String.Compare(chars, 26, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 37))
                                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingShootoutGoalsAgainst;
                                                                                                break;
                                                                                            case 'S':
                                                                                                switch (chars[26])
                                                                                                  {
                                                                                                    case 'a':
                                                                                                        if (String.Compare(chars, 27, "ve", 0, 2, false) == 0)
                                                                                                          {
                                                                                                            switch (chars[29])
                                                                                                              {
                                                                                                                case 'P':
                                                                                                                    if ((String.Compare(chars, 30, "erc", 0, 3, false) == 0) && (chars.Length == 33))
                                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingShootoutSavePerc;
                                                                                                                    break;
                                                                                                                case 's':
                                                                                                                    if (chars.Length == 30)
                                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingShootoutSaves;
                                                                                                                    break;
                                                                                                                default:
                                                                                                                    break;
                                                                                                              }
                                                                                                          }
                                                                                                        break;
                                                                                                    case 'h':
                                                                                                        if ((String.Compare(chars, 27, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 37))
                                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingShootoutShotsAgainst;
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                case 'r':
                                                                                    if (String.Compare(chars, 21, "tHanded", 0, 7, false) == 0)
                                                                                      {
                                                                                        switch (chars[28])
                                                                                          {
                                                                                            case 'G':
                                                                                                if ((String.Compare(chars, 29, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 40))
                                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingShortHandedGoalsAgainst;
                                                                                                break;
                                                                                            case 'S':
                                                                                                switch (chars[29])
                                                                                                  {
                                                                                                    case 'a':
                                                                                                        if (String.Compare(chars, 30, "ve", 0, 2, false) == 0)
                                                                                                          {
                                                                                                            switch (chars[32])
                                                                                                              {
                                                                                                                case 'P':
                                                                                                                    if ((String.Compare(chars, 33, "erc", 0, 3, false) == 0) && (chars.Length == 36))
                                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSavePerc;
                                                                                                                    break;
                                                                                                                case 's':
                                                                                                                    if (chars.Length == 33)
                                                                                                                        return TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSaves;
                                                                                                                    break;
                                                                                                                default:
                                                                                                                    break;
                                                                                                              }
                                                                                                          }
                                                                                                        break;
                                                                                                    case 'h':
                                                                                                        if ((String.Compare(chars, 30, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 40))
                                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingShortHandedShotsAgainst;
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                case 't':
                                                                                    if (String.Compare(chars, 21, "sAgainst", 0, 8, false) == 0)
                                                                                      {
                                                                                        if (chars.Length == 29)
                                                                                          {
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainst;
                                                                                          }
                                                                                        switch (chars[29])
                                                                                          {
                                                                                            case 'P':
                                                                                                if ((String.Compare(chars, 30, "erGame", 0, 6, false) == 0) && (chars.Length == 36))
                                                                                                    return TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainstPerGame;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case 'u':
                                                                            if (String.Compare(chars, 20, "tout", 0, 4, false) == 0)
                                                                              {
                                                                                switch (chars[24])
                                                                                  {
                                                                                    case 'F':
                                                                                        if ((String.Compare(chars, 25, "lag", 0, 3, false) == 0) && (chars.Length == 28))
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingShutoutFlag;
                                                                                        break;
                                                                                    case 's':
                                                                                        if (chars.Length == 25)
                                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingShutouts;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 18, "otal", 0, 4, false) == 0)
                                                              {
                                                                switch (chars[22])
                                                                  {
                                                                    case 'G':
                                                                        if ((String.Compare(chars, 23, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingTotalGoalsAgainst;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(chars, 23, "hotsAgainst", 0, 11, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_HockeyGoaltendingTotalShotsAgainst;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(chars, 18, "ins", 0, 3, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_HockeyGoaltendingWins;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'H':
                            if (String.Compare(chars, 7, "its", 0, 3, false) == 0)
                              {
                                if (chars.Length == 10)
                                  {
                                    return TypeValueKnownValues.Value_HockeyHits;
                                  }
                                switch (chars[10])
                                  {
                                    case 'P':
                                        if ((String.Compare(chars, 11, "erGame", 0, 6, false) == 0) && (chars.Length == 17))
                                            return TypeValueKnownValues.Value_HockeyHitsPerGame;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if (String.Compare(chars, 7, "issedShots", 0, 10, false) == 0)
                              {
                                if (chars.Length == 17)
                                  {
                                    return TypeValueKnownValues.Value_HockeyMissedShots;
                                  }
                                switch (chars[17])
                                  {
                                    case 'P':
                                        if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                            return TypeValueKnownValues.Value_HockeyMissedShotsPerGame;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            switch (chars[7])
                              {
                                case 'e':
                                    if (String.Compare(chars, 8, "nalt", 0, 4, false) == 0)
                                      {
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                if (String.Compare(chars, 13, "es", 0, 2, false) == 0)
                                                  {
                                                    if (chars.Length == 15)
                                                      {
                                                        return TypeValueKnownValues.Value_HockeyPenalties;
                                                      }
                                                    switch (chars[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_HockeyPenaltiesPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'y':
                                                switch (chars[13])
                                                  {
                                                    case 'G':
                                                        if ((String.Compare(chars, 14, "oals", 0, 4, false) == 0) && (chars.Length == 18))
                                                            return TypeValueKnownValues.Value_HockeyPenaltyGoals;
                                                        break;
                                                    case 'M':
                                                        if (String.Compare(chars, 14, "i", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[15])
                                                              {
                                                                case 'n':
                                                                    if (String.Compare(chars, 16, "utes", 0, 4, false) == 0)
                                                                      {
                                                                        if (chars.Length == 20)
                                                                          {
                                                                            return TypeValueKnownValues.Value_HockeyPenaltyMinutes;
                                                                          }
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_HockeyPenaltyMinutesPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    if ((String.Compare(chars, 16, "sedShots", 0, 8, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_HockeyPenaltyMissedShots;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(chars, 14, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 24))
                                                            return TypeValueKnownValues.Value_HockeyPenaltyShotsOnGoal;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'l':
                                    if ((String.Compare(chars, 8, "usMinus", 0, 7, false) == 0) && (chars.Length == 15))
                                        return TypeValueKnownValues.Value_HockeyPlusMinus;
                                    break;
                                case 'o':
                                    switch (chars[8])
                                      {
                                        case 'i':
                                            if (String.Compare(chars, 9, "nts", 0, 3, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_HockeyPoints;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_HockeyPointsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'w':
                                            if (String.Compare(chars, 9, "erPlay", 0, 6, false) == 0)
                                              {
                                                switch (chars[15])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(chars, 16, "ssists", 0, 6, false) == 0) && (chars.Length == 22))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayAssists;
                                                        break;
                                                    case 'F':
                                                        if (String.Compare(chars, 16, "aceoff", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[22])
                                                              {
                                                                case 'W':
                                                                    if ((String.Compare(chars, 23, "inPerc", 0, 6, false) == 0) && (chars.Length == 29))
                                                                        return TypeValueKnownValues.Value_HockeyPowerPlayFaceoffWinPerc;
                                                                    break;
                                                                case 's':
                                                                    if (chars.Length == 23)
                                                                      {
                                                                        return TypeValueKnownValues.Value_HockeyPowerPlayFaceoffs;
                                                                      }
                                                                    switch (chars[23])
                                                                      {
                                                                        case 'L':
                                                                            if ((String.Compare(chars, 24, "ost", 0, 3, false) == 0) && (chars.Length == 27))
                                                                                return TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsLost;
                                                                            break;
                                                                        case 'W':
                                                                            if ((String.Compare(chars, 24, "on", 0, 2, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsWon;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'G':
                                                        if ((String.Compare(chars, 16, "oals", 0, 4, false) == 0) && (chars.Length == 20))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayGoals;
                                                        break;
                                                    case 'M':
                                                        if ((String.Compare(chars, 16, "issedShots", 0, 10, false) == 0) && (chars.Length == 26))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayMissedShots;
                                                        break;
                                                    case 'O':
                                                        if ((String.Compare(chars, 16, "pportunities", 0, 12, false) == 0) && (chars.Length == 28))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayOpportunities;
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 16, "oints", 0, 5, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayPoints;
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(chars, 16, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 26))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayShotsOnGoal;
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(chars, 16, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 24))
                                                            return TypeValueKnownValues.Value_HockeyPowerPlayTimeOnIce;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (chars[7])
                              {
                                case 'c':
                                    if ((String.Compare(chars, 8, "ratches", 0, 7, false) == 0) && (chars.Length == 15))
                                        return TypeValueKnownValues.Value_HockeyScratches;
                                    break;
                                case 'h':
                                    switch (chars[8])
                                      {
                                        case 'i':
                                            if (String.Compare(chars, 9, "fts", 0, 3, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_HockeyShifts;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_HockeyShiftsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            switch (chars[9])
                                              {
                                                case 'o':
                                                    if (String.Compare(chars, 10, "t", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[11])
                                                          {
                                                            case 'i':
                                                                if ((String.Compare(chars, 12, "ngPerc", 0, 6, false) == 0) && (chars.Length == 18))
                                                                    return TypeValueKnownValues.Value_HockeyShootingPerc;
                                                                break;
                                                            case 'o':
                                                                if (String.Compare(chars, 12, "ut", 0, 2, false) == 0)
                                                                  {
                                                                    switch (chars[14])
                                                                      {
                                                                        case 'G':
                                                                            if ((String.Compare(chars, 15, "oals", 0, 4, false) == 0) && (chars.Length == 19))
                                                                                return TypeValueKnownValues.Value_HockeyShootoutGoals;
                                                                            break;
                                                                        case 'M':
                                                                            if ((String.Compare(chars, 15, "issedShots", 0, 10, false) == 0) && (chars.Length == 25))
                                                                                return TypeValueKnownValues.Value_HockeyShootoutMissedShots;
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(chars, 15, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 25))
                                                                                return TypeValueKnownValues.Value_HockeyShootoutShotsOnGoal;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'r':
                                                    if (String.Compare(chars, 10, "tHanded", 0, 7, false) == 0)
                                                      {
                                                        switch (chars[17])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(chars, 18, "ssists", 0, 6, false) == 0) && (chars.Length == 24))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedAssists;
                                                                break;
                                                            case 'F':
                                                                if (String.Compare(chars, 18, "aceoff", 0, 6, false) == 0)
                                                                  {
                                                                    switch (chars[24])
                                                                      {
                                                                        case 'W':
                                                                            if ((String.Compare(chars, 25, "inPerc", 0, 6, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_HockeyShortHandedFaceoffWinPerc;
                                                                            break;
                                                                        case 's':
                                                                            if (chars.Length == 25)
                                                                              {
                                                                                return TypeValueKnownValues.Value_HockeyShortHandedFaceoffs;
                                                                              }
                                                                            switch (chars[25])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(chars, 26, "ost", 0, 3, false) == 0) && (chars.Length == 29))
                                                                                        return TypeValueKnownValues.Value_HockeyShortHandedFaceoffsLost;
                                                                                    break;
                                                                                case 'W':
                                                                                    if ((String.Compare(chars, 26, "on", 0, 2, false) == 0) && (chars.Length == 28))
                                                                                        return TypeValueKnownValues.Value_HockeyShortHandedFaceoffsWon;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'G':
                                                                if ((String.Compare(chars, 18, "oals", 0, 4, false) == 0) && (chars.Length == 22))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedGoals;
                                                                break;
                                                            case 'M':
                                                                if ((String.Compare(chars, 18, "issedShots", 0, 10, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedMissedShots;
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(chars, 18, "oints", 0, 5, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedPoints;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 18, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedShotsOnGoal;
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(chars, 18, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 26))
                                                                    return TypeValueKnownValues.Value_HockeyShortHandedTimeOnIce;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(chars, 10, "sOnGoal", 0, 7, false) == 0)
                                                      {
                                                        if (chars.Length == 17)
                                                          {
                                                            return TypeValueKnownValues.Value_HockeyShotsOnGoal;
                                                          }
                                                        switch (chars[17])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                                    return TypeValueKnownValues.Value_HockeyShotsOnGoalPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'T':
                            switch (chars[7])
                              {
                                case 'a':
                                    if (String.Compare(chars, 8, "keaways", 0, 7, false) == 0)
                                      {
                                        if (chars.Length == 15)
                                          {
                                            return TypeValueKnownValues.Value_HockeyTakeaways;
                                          }
                                        switch (chars[15])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_HockeyTakeawaysPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'e':
                                    if (String.Compare(chars, 8, "amPenalt", 0, 8, false) == 0)
                                      {
                                        switch (chars[16])
                                          {
                                            case 'i':
                                                if (String.Compare(chars, 17, "es", 0, 2, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_HockeyTeamPenalties;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_HockeyTeamPenaltiesPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'y':
                                                if (String.Compare(chars, 17, "Minutes", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 24)
                                                      {
                                                        return TypeValueKnownValues.Value_HockeyTeamPenaltyMinutes;
                                                      }
                                                    switch (chars[24])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_HockeyTeamPenaltyMinutesPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(chars, 8, "talTimeOnIce", 0, 12, false) == 0)
                                      {
                                        if (chars.Length == 20)
                                          {
                                            return TypeValueKnownValues.Value_HockeyTotalTimeOnIce;
                                          }
                                        switch (chars[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_HockeyTotalTimeOnIcePerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'S':
                if (String.Compare(chars, 1, "occer", 0, 5, false) == 0)
                  {
                    switch (chars[6])
                      {
                        case 'B':
                            if ((String.Compare(chars, 7, "allPossessions", 0, 14, false) == 0) && (chars.Length == 21))
                                return TypeValueKnownValues.Value_SoccerBallPossessions;
                            break;
                        case 'C':
                            switch (chars[7])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 8, "rdsGiven", 0, 8, false) == 0) && (chars.Length == 16))
                                        return TypeValueKnownValues.Value_SoccerCardsGiven;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 8, "rnerKicks", 0, 9, false) == 0) && (chars.Length == 17))
                                        return TypeValueKnownValues.Value_SoccerCornerKicks;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'F':
                            if ((String.Compare(chars, 7, "reeKicks", 0, 8, false) == 0) && (chars.Length == 15))
                                return TypeValueKnownValues.Value_SoccerFreeKicks;
                            break;
                        case 'G':
                            if (String.Compare(chars, 7, "oal", 0, 3, false) == 0)
                              {
                                switch (chars[10])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 11, "ttempts", 0, 7, false) == 0) && (chars.Length == 18))
                                            return TypeValueKnownValues.Value_SoccerGoalAttempts;
                                        break;
                                    case 's':
                                        switch (chars[11])
                                          {
                                            case 'B':
                                                if (String.Compare(chars, 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 14, "oot", 0, 3, false) == 0) && (chars.Length == 17))
                                                                return TypeValueKnownValues.Value_SoccerGoalsByFoot;
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(chars, 14, "eaders", 0, 6, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_SoccerGoalsByHeaders;
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 14, "ime", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[17])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(chars, 18, "0To15", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime00To15;
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(chars, 18, "6To30", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime16To30;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 18, "1To45", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime31To45;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 18, "6To60", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime46To60;
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(chars, 18, "1To75", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime61To75;
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(chars, 18, "6To90", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime76To90;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if (String.Compare(chars, 12, "onceded", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_SoccerGoalsConceded;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(chars, 20, "yTime", 0, 5, false) == 0)
                                                              {
                                                                switch (chars[25])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(chars, 26, "0To15", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15;
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(chars, 26, "6To30", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 26, "1To45", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 26, "6To60", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60;
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(chars, 26, "1To75", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75;
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(chars, 26, "6To90", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if ((String.Compare(chars, 12, "cored", 0, 5, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_SoccerGoalsScored;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if ((String.Compare(chars, 7, "atchesPlayed", 0, 12, false) == 0) && (chars.Length == 19))
                                return TypeValueKnownValues.Value_SoccerMatchesPlayed;
                            break;
                        case 'O':
                            switch (chars[7])
                              {
                                case 'f':
                                    if ((String.Compare(chars, 8, "fsides", 0, 6, false) == 0) && (chars.Length == 14))
                                        return TypeValueKnownValues.Value_SoccerOffsides;
                                    break;
                                case 'w':
                                    if ((String.Compare(chars, 8, "nGoals", 0, 6, false) == 0) && (chars.Length == 14))
                                        return TypeValueKnownValues.Value_SoccerOwnGoals;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (chars[7])
                              {
                                case 'h':
                                    if (String.Compare(chars, 8, "ots", 0, 3, false) == 0)
                                      {
                                        switch (chars[11])
                                          {
                                            case 'B':
                                                if ((String.Compare(chars, 12, "locked", 0, 6, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_SoccerShotsBlocked;
                                                break;
                                            case 'O':
                                                switch (chars[12])
                                                  {
                                                    case 'f':
                                                        if ((String.Compare(chars, 13, "fGoal", 0, 5, false) == 0) && (chars.Length == 18))
                                                            return TypeValueKnownValues.Value_SoccerShotsOffGoal;
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(chars, 13, "Goal", 0, 4, false) == 0) && (chars.Length == 17))
                                                            return TypeValueKnownValues.Value_SoccerShotsOnGoal;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(chars, 8, "bstituted", 0, 9, false) == 0)
                                      {
                                        switch (chars[17])
                                          {
                                            case 'I':
                                                if ((String.Compare(chars, 18, "n", 0, 1, false) == 0) && (chars.Length == 19))
                                                    return TypeValueKnownValues.Value_SoccerSubstitutedIn;
                                                break;
                                            case 'O':
                                                if ((String.Compare(chars, 18, "ut", 0, 2, false) == 0) && (chars.Length == 20))
                                                    return TypeValueKnownValues.Value_SoccerSubstitutedOut;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        return TypeValueKnownValues.Value__none;
      }

    public static string  stringFromValue(TypeValueKnownValues the_enum)
      {
        switch (the_enum)
          {
            case TypeValueKnownValues.Value_BaseballBaserunningCaughtStealing:
                return "BaseballBaserunningCaughtStealing";
            case TypeValueKnownValues.Value_BaseballBaserunningPickoffs:
                return "BaseballBaserunningPickoffs";
            case TypeValueKnownValues.Value_BaseballBaserunningStolenBasePerc:
                return "BaseballBaserunningStolenBasePerc";
            case TypeValueKnownValues.Value_BaseballBaserunningStolenBases:
                return "BaseballBaserunningStolenBases";
            case TypeValueKnownValues.Value_BaseballFieldingAssists:
                return "BaseballFieldingAssists";
            case TypeValueKnownValues.Value_BaseballFieldingCompleteGames:
                return "BaseballFieldingCompleteGames";
            case TypeValueKnownValues.Value_BaseballFieldingDoublePlays:
                return "BaseballFieldingDoublePlays";
            case TypeValueKnownValues.Value_BaseballFieldingErrors:
                return "BaseballFieldingErrors";
            case TypeValueKnownValues.Value_BaseballFieldingFieldingPercentage:
                return "BaseballFieldingFieldingPercentage";
            case TypeValueKnownValues.Value_BaseballFieldingGamesFinished:
                return "BaseballFieldingGamesFinished";
            case TypeValueKnownValues.Value_BaseballFieldingGamesPlayed:
                return "BaseballFieldingGamesPlayed";
            case TypeValueKnownValues.Value_BaseballFieldingGamesStarted:
                return "BaseballFieldingGamesStarted";
            case TypeValueKnownValues.Value_BaseballFieldingPassedBalls:
                return "BaseballFieldingPassedBalls";
            case TypeValueKnownValues.Value_BaseballFieldingPutouts:
                return "BaseballFieldingPutouts";
            case TypeValueKnownValues.Value_BaseballFieldingRangeFactor:
                return "BaseballFieldingRangeFactor";
            case TypeValueKnownValues.Value_BaseballFieldingTotalChances:
                return "BaseballFieldingTotalChances";
            case TypeValueKnownValues.Value_BaseballFieldingTriplePlays:
                return "BaseballFieldingTriplePlays";
            case TypeValueKnownValues.Value_BaseballHittingAtBats:
                return "BaseballHittingAtBats";
            case TypeValueKnownValues.Value_BaseballHittingAtBatsPerHomeRun:
                return "BaseballHittingAtBatsPerHomeRun";
            case TypeValueKnownValues.Value_BaseballHittingAtBatsPerStrikeout:
                return "BaseballHittingAtBatsPerStrikeout";
            case TypeValueKnownValues.Value_BaseballHittingAtBatsWithRunnersInScoringPosition:
                return "BaseballHittingAtBatsWithRunnersInScoringPosition";
            case TypeValueKnownValues.Value_BaseballHittingBalls:
                return "BaseballHittingBalls";
            case TypeValueKnownValues.Value_BaseballHittingBallsInPlay:
                return "BaseballHittingBallsInPlay";
            case TypeValueKnownValues.Value_BaseballHittingBattingAverage:
                return "BaseballHittingBattingAverage";
            case TypeValueKnownValues.Value_BaseballHittingBattingAverageOnBallsInPlay:
                return "BaseballHittingBattingAverageOnBallsInPlay";
            case TypeValueKnownValues.Value_BaseballHittingCompleteGames:
                return "BaseballHittingCompleteGames";
            case TypeValueKnownValues.Value_BaseballHittingCycles:
                return "BaseballHittingCycles";
            case TypeValueKnownValues.Value_BaseballHittingDirtBallsFaced:
                return "BaseballHittingDirtBallsFaced";
            case TypeValueKnownValues.Value_BaseballHittingDoubles:
                return "BaseballHittingDoubles";
            case TypeValueKnownValues.Value_BaseballHittingEarnedRunsScored:
                return "BaseballHittingEarnedRunsScored";
            case TypeValueKnownValues.Value_BaseballHittingExtraBaseHits:
                return "BaseballHittingExtraBaseHits";
            case TypeValueKnownValues.Value_BaseballHittingFieldersChoice:
                return "BaseballHittingFieldersChoice";
            case TypeValueKnownValues.Value_BaseballHittingFlyBalls:
                return "BaseballHittingFlyBalls";
            case TypeValueKnownValues.Value_BaseballHittingFlyOuts:
                return "BaseballHittingFlyOuts";
            case TypeValueKnownValues.Value_BaseballHittingFlyOutsIntoDoublePlays:
                return "BaseballHittingFlyOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_BaseballHittingFoulBalls:
                return "BaseballHittingFoulBalls";
            case TypeValueKnownValues.Value_BaseballHittingGamesFinished:
                return "BaseballHittingGamesFinished";
            case TypeValueKnownValues.Value_BaseballHittingGamesPlayed:
                return "BaseballHittingGamesPlayed";
            case TypeValueKnownValues.Value_BaseballHittingGamesStarted:
                return "BaseballHittingGamesStarted";
            case TypeValueKnownValues.Value_BaseballHittingGroundBallToFlyBallRatio:
                return "BaseballHittingGroundBallToFlyBallRatio";
            case TypeValueKnownValues.Value_BaseballHittingGroundBalls:
                return "BaseballHittingGroundBalls";
            case TypeValueKnownValues.Value_BaseballHittingGroundOuts:
                return "BaseballHittingGroundOuts";
            case TypeValueKnownValues.Value_BaseballHittingGroundedIntoDoublePlay:
                return "BaseballHittingGroundedIntoDoublePlay";
            case TypeValueKnownValues.Value_BaseballHittingHitByPitch:
                return "BaseballHittingHitByPitch";
            case TypeValueKnownValues.Value_BaseballHittingHits:
                return "BaseballHittingHits";
            case TypeValueKnownValues.Value_BaseballHittingHitsWithRunnersInScoringPosition:
                return "BaseballHittingHitsWithRunnersInScoringPosition";
            case TypeValueKnownValues.Value_BaseballHittingHomeRuns:
                return "BaseballHittingHomeRuns";
            case TypeValueKnownValues.Value_BaseballHittingIntentionalBalls:
                return "BaseballHittingIntentionalBalls";
            case TypeValueKnownValues.Value_BaseballHittingIntentionalWalks:
                return "BaseballHittingIntentionalWalks";
            case TypeValueKnownValues.Value_BaseballHittingIsolatedPower:
                return "BaseballHittingIsolatedPower";
            case TypeValueKnownValues.Value_BaseballHittingLineDrives:
                return "BaseballHittingLineDrives";
            case TypeValueKnownValues.Value_BaseballHittingLineOuts:
                return "BaseballHittingLineOuts";
            case TypeValueKnownValues.Value_BaseballHittingLineOutsIntoDoublePlay:
                return "BaseballHittingLineOutsIntoDoublePlay";
            case TypeValueKnownValues.Value_BaseballHittingOnBasePlusSluggingPerc:
                return "BaseballHittingOnBasePlusSluggingPerc";
            case TypeValueKnownValues.Value_BaseballHittingOnBasePerc:
                return "BaseballHittingOnBasePerc";
            case TypeValueKnownValues.Value_BaseballHittingPitchesFaced:
                return "BaseballHittingPitchesFaced";
            case TypeValueKnownValues.Value_BaseballHittingPlateAppearances:
                return "BaseballHittingPlateAppearances";
            case TypeValueKnownValues.Value_BaseballHittingPopOuts:
                return "BaseballHittingPopOuts";
            case TypeValueKnownValues.Value_BaseballHittingPopUps:
                return "BaseballHittingPopUps";
            case TypeValueKnownValues.Value_BaseballHittingReachedOnError:
                return "BaseballHittingReachedOnError";
            case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBase:
                return "BaseballHittingRunnersLeftOnBase";
            case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                return "BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition";
            case TypeValueKnownValues.Value_BaseballHittingRunsBattedIn:
                return "BaseballHittingRunsBattedIn";
            case TypeValueKnownValues.Value_BaseballHittingRunsBattedInWithTwoOuts:
                return "BaseballHittingRunsBattedInWithTwoOuts";
            case TypeValueKnownValues.Value_BaseballHittingSacrificeFlys:
                return "BaseballHittingSacrificeFlys";
            case TypeValueKnownValues.Value_BaseballHittingSacrificeHits:
                return "BaseballHittingSacrificeHits";
            case TypeValueKnownValues.Value_BaseballHittingSecondaryAverage:
                return "BaseballHittingSecondaryAverage";
            case TypeValueKnownValues.Value_BaseballHittingSingles:
                return "BaseballHittingSingles";
            case TypeValueKnownValues.Value_BaseballHittingSluggingPerc:
                return "BaseballHittingSluggingPerc";
            case TypeValueKnownValues.Value_BaseballHittingStrikeoutsLooking:
                return "BaseballHittingStrikeoutsLooking";
            case TypeValueKnownValues.Value_BaseballHittingStrikeoutsSwinging:
                return "BaseballHittingStrikeoutsSwinging";
            case TypeValueKnownValues.Value_BaseballHittingStrikesLooking:
                return "BaseballHittingStrikesLooking";
            case TypeValueKnownValues.Value_BaseballHittingStrikesSwinging:
                return "BaseballHittingStrikesSwinging";
            case TypeValueKnownValues.Value_BaseballHittingTotalBases:
                return "BaseballHittingTotalBases";
            case TypeValueKnownValues.Value_BaseballHittingTotalRunsScored:
                return "BaseballHittingTotalRunsScored";
            case TypeValueKnownValues.Value_BaseballHittingTotalStrikeouts:
                return "BaseballHittingTotalStrikeouts";
            case TypeValueKnownValues.Value_BaseballHittingTotalStrikes:
                return "BaseballHittingTotalStrikes";
            case TypeValueKnownValues.Value_BaseballHittingTriples:
                return "BaseballHittingTriples";
            case TypeValueKnownValues.Value_BaseballHittingUnearnedRunsScored:
                return "BaseballHittingUnearnedRunsScored";
            case TypeValueKnownValues.Value_BaseballHittingWalks:
                return "BaseballHittingWalks";
            case TypeValueKnownValues.Value_BaseballHittingWalksPerPlateAppearance:
                return "BaseballHittingWalksPerPlateAppearance";
            case TypeValueKnownValues.Value_BaseballHittingWalksPerStrikeout:
                return "BaseballHittingWalksPerStrikeout";
            case TypeValueKnownValues.Value_BaseballPitchingBalks:
                return "BaseballPitchingBalks";
            case TypeValueKnownValues.Value_BaseballPitchingBalls:
                return "BaseballPitchingBalls";
            case TypeValueKnownValues.Value_BaseballPitchingBattersFaced:
                return "BaseballPitchingBattersFaced";
            case TypeValueKnownValues.Value_BaseballPitchingBlownSaves:
                return "BaseballPitchingBlownSaves";
            case TypeValueKnownValues.Value_BaseballPitchingCompleteGames:
                return "BaseballPitchingCompleteGames";
            case TypeValueKnownValues.Value_BaseballPitchingDirtBallsThrown:
                return "BaseballPitchingDirtBallsThrown";
            case TypeValueKnownValues.Value_BaseballPitchingDoublesAllowed:
                return "BaseballPitchingDoublesAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingEarnedRunAverage:
                return "BaseballPitchingEarnedRunAverage";
            case TypeValueKnownValues.Value_BaseballPitchingEarnedRunsAllowed:
                return "BaseballPitchingEarnedRunsAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingErrors:
                return "BaseballPitchingErrors";
            case TypeValueKnownValues.Value_BaseballPitchingFieldersChoice:
                return "BaseballPitchingFieldersChoice";
            case TypeValueKnownValues.Value_BaseballPitchingFlyOuts:
                return "BaseballPitchingFlyOuts";
            case TypeValueKnownValues.Value_BaseballPitchingFlyOutsIntoDoublePlays:
                return "BaseballPitchingFlyOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_BaseballPitchingFoulBalls:
                return "BaseballPitchingFoulBalls";
            case TypeValueKnownValues.Value_BaseballPitchingGamesFinished:
                return "BaseballPitchingGamesFinished";
            case TypeValueKnownValues.Value_BaseballPitchingGamesPlayed:
                return "BaseballPitchingGamesPlayed";
            case TypeValueKnownValues.Value_BaseballPitchingGamesStarted:
                return "BaseballPitchingGamesStarted";
            case TypeValueKnownValues.Value_BaseballPitchingGroundBallToFlyBallRatio:
                return "BaseballPitchingGroundBallToFlyBallRatio";
            case TypeValueKnownValues.Value_BaseballPitchingGroundOuts:
                return "BaseballPitchingGroundOuts";
            case TypeValueKnownValues.Value_BaseballPitchingGroundOutsIntoDoublePlays:
                return "BaseballPitchingGroundOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_BaseballPitchingHitBatters:
                return "BaseballPitchingHitBatters";
            case TypeValueKnownValues.Value_BaseballPitchingHitsAllowed:
                return "BaseballPitchingHitsAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingHolds:
                return "BaseballPitchingHolds";
            case TypeValueKnownValues.Value_BaseballPitchingHomeRunsAllowed:
                return "BaseballPitchingHomeRunsAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedCompletePartial:
                return "BaseballPitchingInningsPitchedCompletePartial";
            case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedTotalOuts:
                return "BaseballPitchingInningsPitchedTotalOuts";
            case TypeValueKnownValues.Value_BaseballPitchingIntentionalBalls:
                return "BaseballPitchingIntentionalBalls";
            case TypeValueKnownValues.Value_BaseballPitchingIntentionalWalks:
                return "BaseballPitchingIntentionalWalks";
            case TypeValueKnownValues.Value_BaseballPitchingLineOuts:
                return "BaseballPitchingLineOuts";
            case TypeValueKnownValues.Value_BaseballPitchingLineOutsIntoDoublePlays:
                return "BaseballPitchingLineOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_BaseballPitchingLosses:
                return "BaseballPitchingLosses";
            case TypeValueKnownValues.Value_BaseballPitchingOpponentsBattingAverage:
                return "BaseballPitchingOpponentsBattingAverage";
            case TypeValueKnownValues.Value_BaseballPitchingOpponentRunnersLeftOnBase:
                return "BaseballPitchingOpponentRunnersLeftOnBase";
            case TypeValueKnownValues.Value_BaseballPitchingPickoffs:
                return "BaseballPitchingPickoffs";
            case TypeValueKnownValues.Value_BaseballPitchingPitchCount:
                return "BaseballPitchingPitchCount";
            case TypeValueKnownValues.Value_BaseballPitchingPopOutsForced:
                return "BaseballPitchingPopOutsForced";
            case TypeValueKnownValues.Value_BaseballPitchingQualityStarts:
                return "BaseballPitchingQualityStarts";
            case TypeValueKnownValues.Value_BaseballPitchingReachedOnError:
                return "BaseballPitchingReachedOnError";
            case TypeValueKnownValues.Value_BaseballPitchingRunnersCaughtStealing:
                return "BaseballPitchingRunnersCaughtStealing";
            case TypeValueKnownValues.Value_BaseballPitchingSacrificeFlys:
                return "BaseballPitchingSacrificeFlys";
            case TypeValueKnownValues.Value_BaseballPitchingSacrificeHits:
                return "BaseballPitchingSacrificeHits";
            case TypeValueKnownValues.Value_BaseballPitchingSaveOpportunities:
                return "BaseballPitchingSaveOpportunities";
            case TypeValueKnownValues.Value_BaseballPitchingSaves:
                return "BaseballPitchingSaves";
            case TypeValueKnownValues.Value_BaseballPitchingShutouts:
                return "BaseballPitchingShutouts";
            case TypeValueKnownValues.Value_BaseballPitchingSinglesAllowed:
                return "BaseballPitchingSinglesAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingStolenBasesAllowed:
                return "BaseballPitchingStolenBasesAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsLooking:
                return "BaseballPitchingStrikeoutsLooking";
            case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPer9Innings:
                return "BaseballPitchingStrikeoutsPer9Innings";
            case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPerWalk:
                return "BaseballPitchingStrikeoutsPerWalk";
            case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsSwinging:
                return "BaseballPitchingStrikeoutsSwinging";
            case TypeValueKnownValues.Value_BaseballPitchingStrikesLooking:
                return "BaseballPitchingStrikesLooking";
            case TypeValueKnownValues.Value_BaseballPitchingStrikesSwinging:
                return "BaseballPitchingStrikesSwinging";
            case TypeValueKnownValues.Value_BaseballPitchingTotalBasesAllowed:
                return "BaseballPitchingTotalBasesAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingTotalRunsAllowed:
                return "BaseballPitchingTotalRunsAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingTotalStrikeouts:
                return "BaseballPitchingTotalStrikeouts";
            case TypeValueKnownValues.Value_BaseballPitchingTotalStrikes:
                return "BaseballPitchingTotalStrikes";
            case TypeValueKnownValues.Value_BaseballPitchingTriplesAllowed:
                return "BaseballPitchingTriplesAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingUnearnedRunsAllowed:
                return "BaseballPitchingUnearnedRunsAllowed";
            case TypeValueKnownValues.Value_BaseballPitchingWalks:
                return "BaseballPitchingWalks";
            case TypeValueKnownValues.Value_BaseballPitchingWalksPlusHitsPerInningPitched:
                return "BaseballPitchingWalksPlusHitsPerInningPitched";
            case TypeValueKnownValues.Value_BaseballPitchingWildPitches:
                return "BaseballPitchingWildPitches";
            case TypeValueKnownValues.Value_BaseballPitchingWins:
                return "BaseballPitchingWins";
            case TypeValueKnownValues.Value_HockeyAssists:
                return "HockeyAssists";
            case TypeValueKnownValues.Value_HockeyAssistsPerGame:
                return "HockeyAssistsPerGame";
            case TypeValueKnownValues.Value_HockeyAverageTimeOnIce:
                return "HockeyAverageTimeOnIce";
            case TypeValueKnownValues.Value_HockeyBlockedAttempts:
                return "HockeyBlockedAttempts";
            case TypeValueKnownValues.Value_HockeyBlockedAttemptsPerGame:
                return "HockeyBlockedAttemptsPerGame";
            case TypeValueKnownValues.Value_HockeyBlockedShots:
                return "HockeyBlockedShots";
            case TypeValueKnownValues.Value_HockeyBlockedShotsPerGame:
                return "HockeyBlockedShotsPerGame";
            case TypeValueKnownValues.Value_HockeyEvenStrengthAssists:
                return "HockeyEvenStrengthAssists";
            case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffWinPerc:
                return "HockeyEvenStrengthFaceoffWinPerc";
            case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffs:
                return "HockeyEvenStrengthFaceoffs";
            case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsLost:
                return "HockeyEvenStrengthFaceoffsLost";
            case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsWon:
                return "HockeyEvenStrengthFaceoffsWon";
            case TypeValueKnownValues.Value_HockeyEvenStrengthGoals:
                return "HockeyEvenStrengthGoals";
            case TypeValueKnownValues.Value_HockeyEvenStrengthMissedShots:
                return "HockeyEvenStrengthMissedShots";
            case TypeValueKnownValues.Value_HockeyEvenStrengthShotsOnGoal:
                return "HockeyEvenStrengthShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyEvenStrengthTimeOnIce:
                return "HockeyEvenStrengthTimeOnIce";
            case TypeValueKnownValues.Value_HockeyFaceoffWinPerc:
                return "HockeyFaceoffWinPerc";
            case TypeValueKnownValues.Value_HockeyFaceoffs:
                return "HockeyFaceoffs";
            case TypeValueKnownValues.Value_HockeyFaceoffsWon:
                return "HockeyFaceoffsWon";
            case TypeValueKnownValues.Value_HockeyFaceoffsLost:
                return "HockeyFaceoffsLost";
            case TypeValueKnownValues.Value_HockeyGameWinningGoalFlag:
                return "HockeyGameWinningGoalFlag";
            case TypeValueKnownValues.Value_HockeyGameWinningGoals:
                return "HockeyGameWinningGoals";
            case TypeValueKnownValues.Value_HockeyGamesPlayed:
                return "HockeyGamesPlayed";
            case TypeValueKnownValues.Value_HockeyGiveaways:
                return "HockeyGiveaways";
            case TypeValueKnownValues.Value_HockeyGiveawaysPerGame:
                return "HockeyGiveawaysPerGame";
            case TypeValueKnownValues.Value_HockeyGoals:
                return "HockeyGoals";
            case TypeValueKnownValues.Value_HockeyGoalsPerGame:
                return "HockeyGoalsPerGame";
            case TypeValueKnownValues.Value_HockeyHits:
                return "HockeyHits";
            case TypeValueKnownValues.Value_HockeyHitsPerGame:
                return "HockeyHitsPerGame";
            case TypeValueKnownValues.Value_HockeyMissedShots:
                return "HockeyMissedShots";
            case TypeValueKnownValues.Value_HockeyMissedShotsPerGame:
                return "HockeyMissedShotsPerGame";
            case TypeValueKnownValues.Value_HockeyPenalties:
                return "HockeyPenalties";
            case TypeValueKnownValues.Value_HockeyPenaltiesPerGame:
                return "HockeyPenaltiesPerGame";
            case TypeValueKnownValues.Value_HockeyPenaltyGoals:
                return "HockeyPenaltyGoals";
            case TypeValueKnownValues.Value_HockeyPenaltyMinutes:
                return "HockeyPenaltyMinutes";
            case TypeValueKnownValues.Value_HockeyPenaltyMinutesPerGame:
                return "HockeyPenaltyMinutesPerGame";
            case TypeValueKnownValues.Value_HockeyPenaltyMissedShots:
                return "HockeyPenaltyMissedShots";
            case TypeValueKnownValues.Value_HockeyPenaltyShotsOnGoal:
                return "HockeyPenaltyShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyPlusMinus:
                return "HockeyPlusMinus";
            case TypeValueKnownValues.Value_HockeyPoints:
                return "HockeyPoints";
            case TypeValueKnownValues.Value_HockeyPointsPerGame:
                return "HockeyPointsPerGame";
            case TypeValueKnownValues.Value_HockeyPowerPlayAssists:
                return "HockeyPowerPlayAssists";
            case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffWinPerc:
                return "HockeyPowerPlayFaceoffWinPerc";
            case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffs:
                return "HockeyPowerPlayFaceoffs";
            case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsLost:
                return "HockeyPowerPlayFaceoffsLost";
            case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsWon:
                return "HockeyPowerPlayFaceoffsWon";
            case TypeValueKnownValues.Value_HockeyPowerPlayGoals:
                return "HockeyPowerPlayGoals";
            case TypeValueKnownValues.Value_HockeyPowerPlayMissedShots:
                return "HockeyPowerPlayMissedShots";
            case TypeValueKnownValues.Value_HockeyPowerPlayOpportunities:
                return "HockeyPowerPlayOpportunities";
            case TypeValueKnownValues.Value_HockeyPowerPlayPoints:
                return "HockeyPowerPlayPoints";
            case TypeValueKnownValues.Value_HockeyPowerPlayShotsOnGoal:
                return "HockeyPowerPlayShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyPowerPlayTimeOnIce:
                return "HockeyPowerPlayTimeOnIce";
            case TypeValueKnownValues.Value_HockeyScratches:
                return "HockeyScratches";
            case TypeValueKnownValues.Value_HockeyShifts:
                return "HockeyShifts";
            case TypeValueKnownValues.Value_HockeyShiftsPerGame:
                return "HockeyShiftsPerGame";
            case TypeValueKnownValues.Value_HockeyShootingPerc:
                return "HockeyShootingPerc";
            case TypeValueKnownValues.Value_HockeyShootoutGoals:
                return "HockeyShootoutGoals";
            case TypeValueKnownValues.Value_HockeyShootoutMissedShots:
                return "HockeyShootoutMissedShots";
            case TypeValueKnownValues.Value_HockeyShootoutShotsOnGoal:
                return "HockeyShootoutShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyShortHandedAssists:
                return "HockeyShortHandedAssists";
            case TypeValueKnownValues.Value_HockeyShortHandedFaceoffWinPerc:
                return "HockeyShortHandedFaceoffWinPerc";
            case TypeValueKnownValues.Value_HockeyShortHandedFaceoffs:
                return "HockeyShortHandedFaceoffs";
            case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsLost:
                return "HockeyShortHandedFaceoffsLost";
            case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsWon:
                return "HockeyShortHandedFaceoffsWon";
            case TypeValueKnownValues.Value_HockeyShortHandedGoals:
                return "HockeyShortHandedGoals";
            case TypeValueKnownValues.Value_HockeyShortHandedMissedShots:
                return "HockeyShortHandedMissedShots";
            case TypeValueKnownValues.Value_HockeyShortHandedPoints:
                return "HockeyShortHandedPoints";
            case TypeValueKnownValues.Value_HockeyShortHandedShotsOnGoal:
                return "HockeyShortHandedShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyShortHandedTimeOnIce:
                return "HockeyShortHandedTimeOnIce";
            case TypeValueKnownValues.Value_HockeyShotsOnGoal:
                return "HockeyShotsOnGoal";
            case TypeValueKnownValues.Value_HockeyShotsOnGoalPerGame:
                return "HockeyShotsOnGoalPerGame";
            case TypeValueKnownValues.Value_HockeyTakeaways:
                return "HockeyTakeaways";
            case TypeValueKnownValues.Value_HockeyTakeawaysPerGame:
                return "HockeyTakeawaysPerGame";
            case TypeValueKnownValues.Value_HockeyTeamPenalties:
                return "HockeyTeamPenalties";
            case TypeValueKnownValues.Value_HockeyTeamPenaltiesPerGame:
                return "HockeyTeamPenaltiesPerGame";
            case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutes:
                return "HockeyTeamPenaltyMinutes";
            case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutesPerGame:
                return "HockeyTeamPenaltyMinutesPerGame";
            case TypeValueKnownValues.Value_HockeyTotalTimeOnIce:
                return "HockeyTotalTimeOnIce";
            case TypeValueKnownValues.Value_HockeyTotalTimeOnIcePerGame:
                return "HockeyTotalTimeOnIcePerGame";
            case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                return "HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetGoalsAgainst:
                return "HockeyGoaltendingEmptyNetGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst:
                return "HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst:
                return "HockeyGoaltendingEmptyNetShortHandedGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShotsAgainst:
                return "HockeyGoaltendingEmptyNetShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthGoalsAgainst:
                return "HockeyGoaltendingEvenStrengthGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSavePerc:
                return "HockeyGoaltendingEvenStrengthSavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSaves:
                return "HockeyGoaltendingEvenStrengthSaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthShotsAgainst:
                return "HockeyGoaltendingEvenStrengthShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainst:
                return "HockeyGoaltendingGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstAverage:
                return "HockeyGoaltendingGoalsAgainstAverage";
            case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstPerGame:
                return "HockeyGoaltendingGoalsAgainstPerGame";
            case TypeValueKnownValues.Value_HockeyGoaltendingLosses:
                return "HockeyGoaltendingLosses";
            case TypeValueKnownValues.Value_HockeyGoaltendingOutcome:
                return "HockeyGoaltendingOutcome";
            case TypeValueKnownValues.Value_HockeyGoaltendingOvertimeLosses:
                return "HockeyGoaltendingOvertimeLosses";
            case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyGoalsAgainst:
                return "HockeyGoaltendingPenaltyGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySavePerc:
                return "HockeyGoaltendingPenaltySavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySaves:
                return "HockeyGoaltendingPenaltySaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyShotsAgainst:
                return "HockeyGoaltendingPenaltyShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayGoalsAgainst:
                return "HockeyGoaltendingPowerPlayGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySavePerc:
                return "HockeyGoaltendingPowerPlaySavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySaves:
                return "HockeyGoaltendingPowerPlaySaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayShotsAgainst:
                return "HockeyGoaltendingPowerPlayShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingSavePerc:
                return "HockeyGoaltendingSavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingSaves:
                return "HockeyGoaltendingSaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingShootoutGoalsAgainst:
                return "HockeyGoaltendingShootoutGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSavePerc:
                return "HockeyGoaltendingShootoutSavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSaves:
                return "HockeyGoaltendingShootoutSaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingShootoutShotsAgainst:
                return "HockeyGoaltendingShootoutShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedGoalsAgainst:
                return "HockeyGoaltendingShortHandedGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSavePerc:
                return "HockeyGoaltendingShortHandedSavePerc";
            case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSaves:
                return "HockeyGoaltendingShortHandedSaves";
            case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedShotsAgainst:
                return "HockeyGoaltendingShortHandedShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainst:
                return "HockeyGoaltendingShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainstPerGame:
                return "HockeyGoaltendingShotsAgainstPerGame";
            case TypeValueKnownValues.Value_HockeyGoaltendingShutoutFlag:
                return "HockeyGoaltendingShutoutFlag";
            case TypeValueKnownValues.Value_HockeyGoaltendingShutouts:
                return "HockeyGoaltendingShutouts";
            case TypeValueKnownValues.Value_HockeyGoaltendingTotalGoalsAgainst:
                return "HockeyGoaltendingTotalGoalsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingTotalShotsAgainst:
                return "HockeyGoaltendingTotalShotsAgainst";
            case TypeValueKnownValues.Value_HockeyGoaltendingWins:
                return "HockeyGoaltendingWins";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionAttempts:
                return "AmericanFootball3rdDownConversionAttempts";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversions:
                return "AmericanFootball3rdDownConversions";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionPerc:
                return "AmericanFootball3rdDownConversionPerc";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPass:
                return "AmericanFootball3rdDownConversionsViaPass";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPenalty:
                return "AmericanFootball3rdDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaRush:
                return "AmericanFootball3rdDownConversionsViaRush";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversionAttempts:
                return "AmericanFootball4thDownConversionAttempts";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversions:
                return "AmericanFootball4thDownConversions";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversionPerc:
                return "AmericanFootball4thDownConversionPerc";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPass:
                return "AmericanFootball4thDownConversionsViaPass";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPenalty:
                return "AmericanFootball4thDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaRush:
                return "AmericanFootball4thDownConversionsViaRush";
            case TypeValueKnownValues.Value_AmericanFootballGamesPlayed:
                return "AmericanFootballGamesPlayed";
            case TypeValueKnownValues.Value_AmericanFootballGamesStarted:
                return "AmericanFootballGamesStarted";
            case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyAttempts:
                return "AmericanFootballGoalEfficiencyAttempts";
            case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyPerc:
                return "AmericanFootballGoalEfficiencyPerc";
            case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyTouchdowns:
                return "AmericanFootballGoalEfficiencyTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballPassing10PlusYards:
                return "AmericanFootballPassing10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPassing20PlusYards:
                return "AmericanFootballPassing20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPassing30PlusYards:
                return "AmericanFootballPassing30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPassing40PlusYards:
                return "AmericanFootballPassing40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPassing50PlusYards:
                return "AmericanFootballPassing50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPassingAttempts:
                return "AmericanFootballPassingAttempts";
            case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerCompletion:
                return "AmericanFootballPassingAverageYardsPerCompletion";
            case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerAttempt:
                return "AmericanFootballPassingAverageYardsPerAttempt";
            case TypeValueKnownValues.Value_AmericanFootballPassingCompletionPerc:
                return "AmericanFootballPassingCompletionPerc";
            case TypeValueKnownValues.Value_AmericanFootballPassingCompletions:
                return "AmericanFootballPassingCompletions";
            case TypeValueKnownValues.Value_AmericanFootballPassing1stDowns:
                return "AmericanFootballPassing1stDowns";
            case TypeValueKnownValues.Value_AmericanFootballPassingGrossYards:
                return "AmericanFootballPassingGrossYards";
            case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionPerc:
                return "AmericanFootballPassingInterceptionPerc";
            case TypeValueKnownValues.Value_AmericanFootballPassingInterceptions:
                return "AmericanFootballPassingInterceptions";
            case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionsReturnedForTouchdown:
                return "AmericanFootballPassingInterceptionsReturnedForTouchdown";
            case TypeValueKnownValues.Value_AmericanFootballPassingLongestPass:
                return "AmericanFootballPassingLongestPass";
            case TypeValueKnownValues.Value_AmericanFootballPassingNetYards:
                return "AmericanFootballPassingNetYards";
            case TypeValueKnownValues.Value_AmericanFootballPassingRating:
                return "AmericanFootballPassingRating";
            case TypeValueKnownValues.Value_AmericanFootballPassingRedZoneAttempts:
                return "AmericanFootballPassingRedZoneAttempts";
            case TypeValueKnownValues.Value_AmericanFootballPassingSacked:
                return "AmericanFootballPassingSacked";
            case TypeValueKnownValues.Value_AmericanFootballPassingSackedYardsLost:
                return "AmericanFootballPassingSackedYardsLost";
            case TypeValueKnownValues.Value_AmericanFootballPassingTackledForSafety:
                return "AmericanFootballPassingTackledForSafety";
            case TypeValueKnownValues.Value_AmericanFootballPassingTotalYards:
                return "AmericanFootballPassingTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballPassingTouchdownPerc:
                return "AmericanFootballPassingTouchdownPerc";
            case TypeValueKnownValues.Value_AmericanFootballPassingTouchdowns:
                return "AmericanFootballPassingTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballReceiving10PlusYards:
                return "AmericanFootballReceiving10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballReceiving20PlusYards:
                return "AmericanFootballReceiving20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballReceiving30PlusYards:
                return "AmericanFootballReceiving30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballReceiving40PlusYards:
                return "AmericanFootballReceiving40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballReceiving50PlusYards:
                return "AmericanFootballReceiving50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballReceivingAverageReception:
                return "AmericanFootballReceivingAverageReception";
            case TypeValueKnownValues.Value_AmericanFootballReceiving1stDowns:
                return "AmericanFootballReceiving1stDowns";
            case TypeValueKnownValues.Value_AmericanFootballReceivingFumbledOnReception:
                return "AmericanFootballReceivingFumbledOnReception";
            case TypeValueKnownValues.Value_AmericanFootballReceivingLongestReception:
                return "AmericanFootballReceivingLongestReception";
            case TypeValueKnownValues.Value_AmericanFootballReceivingReceptions:
                return "AmericanFootballReceivingReceptions";
            case TypeValueKnownValues.Value_AmericanFootballReceivingRedZoneTargets:
                return "AmericanFootballReceivingRedZoneTargets";
            case TypeValueKnownValues.Value_AmericanFootballReceivingTargets:
                return "AmericanFootballReceivingTargets";
            case TypeValueKnownValues.Value_AmericanFootballReceivingTotalYards:
                return "AmericanFootballReceivingTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballReceivingTouchdowns:
                return "AmericanFootballReceivingTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballReceivingYardsAfterCompletion:
                return "AmericanFootballReceivingYardsAfterCompletion";
            case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyAttempts:
                return "AmericanFootballRedZoneEfficiencyAttempts";
            case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyConversions:
                return "AmericanFootballRedZoneEfficiencyConversions";
            case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyPerc:
                return "AmericanFootballRedZoneEfficiencyPerc";
            case TypeValueKnownValues.Value_AmericanFootballRushing10PlusYards:
                return "AmericanFootballRushing10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballRushing20PlusYards:
                return "AmericanFootballRushing20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballRushing30PlusYards:
                return "AmericanFootballRushing30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballRushing40PlusYards:
                return "AmericanFootballRushing40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballRushing50PlusYards:
                return "AmericanFootballRushing50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballRushingAttempts:
                return "AmericanFootballRushingAttempts";
            case TypeValueKnownValues.Value_AmericanFootballRushingAverageRush:
                return "AmericanFootballRushingAverageRush";
            case TypeValueKnownValues.Value_AmericanFootballRushing1stDownPerc:
                return "AmericanFootballRushing1stDownPerc";
            case TypeValueKnownValues.Value_AmericanFootballRushing1stDowns:
                return "AmericanFootballRushing1stDowns";
            case TypeValueKnownValues.Value_AmericanFootballRushingFumbledOnRush:
                return "AmericanFootballRushingFumbledOnRush";
            case TypeValueKnownValues.Value_AmericanFootballRushingLongestRush:
                return "AmericanFootballRushingLongestRush";
            case TypeValueKnownValues.Value_AmericanFootballRushingRedZoneAttempts:
                return "AmericanFootballRushingRedZoneAttempts";
            case TypeValueKnownValues.Value_AmericanFootballRushingTackledForSafety:
                return "AmericanFootballRushingTackledForSafety";
            case TypeValueKnownValues.Value_AmericanFootballRushingTotalYards:
                return "AmericanFootballRushingTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballRushingTouchdowns:
                return "AmericanFootballRushingTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootball1stDowns:
                return "AmericanFootball1stDowns";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsAttempted:
                return "AmericanFootball2PointConversionsAttempted";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsFailed:
                return "AmericanFootball2PointConversionsFailed";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsMade:
                return "AmericanFootball2PointConversionsMade";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsPassing:
                return "AmericanFootball2PointConversionsPassing";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsReceiving:
                return "AmericanFootball2PointConversionsReceiving";
            case TypeValueKnownValues.Value_AmericanFootball2PointConversionsRushing:
                return "AmericanFootball2PointConversionsRushing";
            case TypeValueKnownValues.Value_AmericanFootball1PointSafety:
                return "AmericanFootball1PointSafety";
            case TypeValueKnownValues.Value_AmericanFootballBlockedKicks:
                return "AmericanFootballBlockedKicks";
            case TypeValueKnownValues.Value_AmericanFootballConversionAttempts:
                return "AmericanFootballConversionAttempts";
            case TypeValueKnownValues.Value_AmericanFootballConversionsCompleted:
                return "AmericanFootballConversionsCompleted";
            case TypeValueKnownValues.Value_AmericanFootballConversionsFailed:
                return "AmericanFootballConversionsFailed";
            case TypeValueKnownValues.Value_AmericanFootballForcedFumbles:
                return "AmericanFootballForcedFumbles";
            case TypeValueKnownValues.Value_AmericanFootballFumblesRecovered:
                return "AmericanFootballFumblesRecovered";
            case TypeValueKnownValues.Value_AmericanFootballFumblesRecoveredForTouchdowns:
                return "AmericanFootballFumblesRecoveredForTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballInterceptions:
                return "AmericanFootballInterceptions";
            case TypeValueKnownValues.Value_AmericanFootballInterceptionsLongestInterception:
                return "AmericanFootballInterceptionsLongestInterception";
            case TypeValueKnownValues.Value_AmericanFootballInterceptionsTouchdowns:
                return "AmericanFootballInterceptionsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballInterceptionsYards:
                return "AmericanFootballInterceptionsYards";
            case TypeValueKnownValues.Value_AmericanFootballMiscAssistedTackles:
                return "AmericanFootballMiscAssistedTackles";
            case TypeValueKnownValues.Value_AmericanFootballMiscCombinedTackles:
                return "AmericanFootballMiscCombinedTackles";
            case TypeValueKnownValues.Value_AmericanFootballMiscForcedFumbles:
                return "AmericanFootballMiscForcedFumbles";
            case TypeValueKnownValues.Value_AmericanFootballMiscFumblesRecovered:
                return "AmericanFootballMiscFumblesRecovered";
            case TypeValueKnownValues.Value_AmericanFootballMiscTackles:
                return "AmericanFootballMiscTackles";
            case TypeValueKnownValues.Value_AmericanFootballPassesDefended:
                return "AmericanFootballPassesDefended";
            case TypeValueKnownValues.Value_AmericanFootballQuarterbackHits:
                return "AmericanFootballQuarterbackHits";
            case TypeValueKnownValues.Value_AmericanFootballSacks:
                return "AmericanFootballSacks";
            case TypeValueKnownValues.Value_AmericanFootballSackYards:
                return "AmericanFootballSackYards";
            case TypeValueKnownValues.Value_AmericanFootballSafeties:
                return "AmericanFootballSafeties";
            case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsAssistedTackles:
                return "AmericanFootballSpecialTeamsAssistedTackles";
            case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsCombinedTackles:
                return "AmericanFootballSpecialTeamsCombinedTackles";
            case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsForcedFumbles:
                return "AmericanFootballSpecialTeamsForcedFumbles";
            case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsFumblesRecovered:
                return "AmericanFootballSpecialTeamsFumblesRecovered";
            case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsTotalTackles:
                return "AmericanFootballSpecialTeamsTotalTackles";
            case TypeValueKnownValues.Value_AmericanFootballTacklesAssisted:
                return "AmericanFootballTacklesAssisted";
            case TypeValueKnownValues.Value_AmericanFootballTacklesCombined:
                return "AmericanFootballTacklesCombined";
            case TypeValueKnownValues.Value_AmericanFootballTacklesForLoss:
                return "AmericanFootballTacklesForLoss";
            case TypeValueKnownValues.Value_AmericanFootballTackles:
                return "AmericanFootballTackles";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns10PlusYards:
                return "AmericanFootballBlockedFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns20PlusYards:
                return "AmericanFootballBlockedFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns30PlusYards:
                return "AmericanFootballBlockedFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns40PlusYards:
                return "AmericanFootballBlockedFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns50PlusYards:
                return "AmericanFootballBlockedFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn:
                return "AmericanFootballBlockedFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn:
                return "AmericanFootballBlockedFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns:
                return "AmericanFootballBlockedFieldGoalReturns";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTotalYards:
                return "AmericanFootballBlockedFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns:
                return "AmericanFootballBlockedFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn10PlusYards:
                return "AmericanFootballBlockedPuntReturn10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn20PlusYards:
                return "AmericanFootballBlockedPuntReturn20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn30PlusYards:
                return "AmericanFootballBlockedPuntReturn30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn40PlusYards:
                return "AmericanFootballBlockedPuntReturn40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn50PlusYards:
                return "AmericanFootballBlockedPuntReturn50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsAverageReturn:
                return "AmericanFootballBlockedPuntReturnsAverageReturn";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsLongestReturn:
                return "AmericanFootballBlockedPuntReturnsLongestReturn";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturns:
                return "AmericanFootballBlockedPuntReturns";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTotalYards:
                return "AmericanFootballBlockedPuntReturnsTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTouchdowns:
                return "AmericanFootballBlockedPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted:
                return "AmericanFootballExtraPointsAttempted";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttemptedKicking:
                return "AmericanFootballExtraPointsAttemptedKicking";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted2PointConversion:
                return "AmericanFootballExtraPointsAttempted2PointConversion";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsBlocked:
                return "AmericanFootballExtraPointsBlocked";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade:
                return "AmericanFootballExtraPointsMade";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsMadeKicking:
                return "AmericanFootballExtraPointsMadeKicking";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade2PointConversion:
                return "AmericanFootballExtraPointsMade2PointConversion";
            case TypeValueKnownValues.Value_AmericanFootballExtraPointsPerc:
                return "AmericanFootballExtraPointsPerc";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns10PlusYards:
                return "AmericanFootballFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns20PlusYards:
                return "AmericanFootballFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns30PlusYards:
                return "AmericanFootballFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns40PlusYards:
                return "AmericanFootballFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns50PlusYards:
                return "AmericanFootballFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsAverageReturn:
                return "AmericanFootballFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsLongestReturn:
                return "AmericanFootballFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns:
                return "AmericanFootballFieldGoalReturns";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTotalYards:
                return "AmericanFootballFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTouchdowns:
                return "AmericanFootballFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted:
                return "AmericanFootballFieldGoalsAttempted";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted1to19Yards:
                return "AmericanFootballFieldGoalsAttempted1to19Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted20to29Yards:
                return "AmericanFootballFieldGoalsAttempted20to29Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted30to39Yards:
                return "AmericanFootballFieldGoalsAttempted30to39Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted40to49Yards:
                return "AmericanFootballFieldGoalsAttempted40to49Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted50PlusYards:
                return "AmericanFootballFieldGoalsAttempted50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsBlocked:
                return "AmericanFootballFieldGoalsBlocked";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsLongestMade:
                return "AmericanFootballFieldGoalsLongestMade";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade:
                return "AmericanFootballFieldGoalsMade";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade1to19Yards:
                return "AmericanFootballFieldGoalsMade1to19Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade20to29Yards:
                return "AmericanFootballFieldGoalsMade20to29Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade30to39Yards:
                return "AmericanFootballFieldGoalsMade30to39Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade40to49Yards:
                return "AmericanFootballFieldGoalsMade40to49Yards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade50PlusYards:
                return "AmericanFootballFieldGoalsMade50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballFieldGoalsPerc:
                return "AmericanFootballFieldGoalsPerc";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturns10PlusYards:
                return "AmericanFootballKickoffReturns10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturns20PlusYards:
                return "AmericanFootballKickoffReturns20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturns30PlusYards:
                return "AmericanFootballKickoffReturns30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturns40PlusYards:
                return "AmericanFootballKickoffReturns40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturns50PlusYards:
                return "AmericanFootballKickoffReturns50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsAverageRun:
                return "AmericanFootballKickoffReturnsAverageRun";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsFairCatches:
                return "AmericanFootballKickoffReturnsFairCatches";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsLongestKickReturn:
                return "AmericanFootballKickoffReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsReturns:
                return "AmericanFootballKickoffReturnsReturns";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsTouchdowns:
                return "AmericanFootballKickoffReturnsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsYards:
                return "AmericanFootballKickoffReturnsYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageGrossYards:
                return "AmericanFootballKickoffsAverageGrossYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageNetYards:
                return "AmericanFootballKickoffsAverageNetYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageReturnYards:
                return "AmericanFootballKickoffsAverageReturnYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsEndZoneKicks:
                return "AmericanFootballKickoffsEndZoneKicks";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsGrossYards:
                return "AmericanFootballKickoffsGrossYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLine:
                return "AmericanFootballKickoffsInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsKicks:
                return "AmericanFootballKickoffsKicks";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsLongestKick:
                return "AmericanFootballKickoffsLongestKick";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsNetYards:
                return "AmericanFootballKickoffsNetYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc:
                return "AmericanFootballKickoffsInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacksPerc:
                return "AmericanFootballKickoffsTouchbacksPerc";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsReturned:
                return "AmericanFootballKickoffsReturned";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsTotalReturnYards:
                return "AmericanFootballKickoffsTotalReturnYards";
            case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacks:
                return "AmericanFootballKickoffsTouchbacks";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns10PlusYards:
                return "AmericanFootballPuntReturns10PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns20PlusYards:
                return "AmericanFootballPuntReturns20PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns30PlusYards:
                return "AmericanFootballPuntReturns30PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns40PlusYards:
                return "AmericanFootballPuntReturns40PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns50PlusYards:
                return "AmericanFootballPuntReturns50PlusYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturnsAverageRun:
                return "AmericanFootballPuntReturnsAverageRun";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturnsFairCatches:
                return "AmericanFootballPuntReturnsFairCatches";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturnsLongestKickReturn:
                return "AmericanFootballPuntReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturns:
                return "AmericanFootballPuntReturns";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturnsTouchdowns:
                return "AmericanFootballPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_AmericanFootballPuntReturnsYards:
                return "AmericanFootballPuntReturnsYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingAverageGrossYards:
                return "AmericanFootballPuntingAverageGrossYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingAverageNetYards:
                return "AmericanFootballPuntingAverageNetYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingAverageReturnYards:
                return "AmericanFootballPuntingAverageReturnYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingBlocked:
                return "AmericanFootballPuntingBlocked";
            case TypeValueKnownValues.Value_AmericanFootballPuntingGrossYards:
                return "AmericanFootballPuntingGrossYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLine:
                return "AmericanFootballPuntingInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_AmericanFootballPuntingLongestPunt:
                return "AmericanFootballPuntingLongestPunt";
            case TypeValueKnownValues.Value_AmericanFootballPuntingNetYards:
                return "AmericanFootballPuntingNetYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLinePerc:
                return "AmericanFootballPuntingInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacksPerc:
                return "AmericanFootballPuntingTouchbacksPerc";
            case TypeValueKnownValues.Value_AmericanFootballPuntingPunts:
                return "AmericanFootballPuntingPunts";
            case TypeValueKnownValues.Value_AmericanFootballPuntingReturnYards:
                return "AmericanFootballPuntingReturnYards";
            case TypeValueKnownValues.Value_AmericanFootballPuntingReturned:
                return "AmericanFootballPuntingReturned";
            case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacks:
                return "AmericanFootballPuntingTouchbacks";
            case TypeValueKnownValues.Value_AmericanFootballFumblesForced:
                return "AmericanFootballFumblesForced";
            case TypeValueKnownValues.Value_AmericanFootballFumbles:
                return "AmericanFootballFumbles";
            case TypeValueKnownValues.Value_AmericanFootballFumblesLost:
                return "AmericanFootballFumblesLost";
            case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentRecovery:
                return "AmericanFootballFumblesOpponentRecovery";
            case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery:
                return "AmericanFootballFumblesOpponentTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_AmericanFootballFumblesOutOfBounds:
                return "AmericanFootballFumblesOutOfBounds";
            case TypeValueKnownValues.Value_AmericanFootballFumblesOwnRecovery:
                return "AmericanFootballFumblesOwnRecovery";
            case TypeValueKnownValues.Value_AmericanFootballFumblesOwnTouchdownsFromRecovery:
                return "AmericanFootballFumblesOwnTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOpponentRecovery:
                return "AmericanFootballFumblesYardsFromOpponentRecovery";
            case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOwnRecovery:
                return "AmericanFootballFumblesYardsFromOwnRecovery";
            case TypeValueKnownValues.Value_AmericanFootballPenalties1stDowns:
                return "AmericanFootballPenalties1stDowns";
            case TypeValueKnownValues.Value_AmericanFootballPenalties:
                return "AmericanFootballPenalties";
            case TypeValueKnownValues.Value_AmericanFootballPenaltiesYards:
                return "AmericanFootballPenaltiesYards";
            case TypeValueKnownValues.Value_BasketballAssists:
                return "BasketballAssists";
            case TypeValueKnownValues.Value_BasketballAssistsPerGame:
                return "BasketballAssistsPerGame";
            case TypeValueKnownValues.Value_BasketballAssistsToTurnoverRatio:
                return "BasketballAssistsToTurnoverRatio";
            case TypeValueKnownValues.Value_BasketballBlockedAttempts:
                return "BasketballBlockedAttempts";
            case TypeValueKnownValues.Value_BasketballBlockedAttemptsPerGame:
                return "BasketballBlockedAttemptsPerGame";
            case TypeValueKnownValues.Value_BasketballBlockedShots:
                return "BasketballBlockedShots";
            case TypeValueKnownValues.Value_BasketballBlockedShotsPerGame:
                return "BasketballBlockedShotsPerGame";
            case TypeValueKnownValues.Value_BasketballCoachTechnicalFouls:
                return "BasketballCoachTechnicalFouls";
            case TypeValueKnownValues.Value_BasketballDefensiveRebounds:
                return "BasketballDefensiveRebounds";
            case TypeValueKnownValues.Value_BasketballDefensiveReboundsPerGame:
                return "BasketballDefensiveReboundsPerGame";
            case TypeValueKnownValues.Value_BasketballEjections:
                return "BasketballEjections";
            case TypeValueKnownValues.Value_BasketballFastBreakPoints:
                return "BasketballFastBreakPoints";
            case TypeValueKnownValues.Value_BasketballFastBreakPointsPerGame:
                return "BasketballFastBreakPointsPerGame";
            case TypeValueKnownValues.Value_BasketballFieldGoalAttempts:
                return "BasketballFieldGoalAttempts";
            case TypeValueKnownValues.Value_BasketballFieldGoalAttemptsPerGame:
                return "BasketballFieldGoalAttemptsPerGame";
            case TypeValueKnownValues.Value_BasketballFieldGoalPercentage:
                return "BasketballFieldGoalPercentage";
            case TypeValueKnownValues.Value_BasketballFieldGoalsMade:
                return "BasketballFieldGoalsMade";
            case TypeValueKnownValues.Value_BasketballFieldGoalsMadePerGame:
                return "BasketballFieldGoalsMadePerGame";
            case TypeValueKnownValues.Value_BasketballFlagrantFouls:
                return "BasketballFlagrantFouls";
            case TypeValueKnownValues.Value_BasketballFlagrantFoulsPerGame:
                return "BasketballFlagrantFoulsPerGame";
            case TypeValueKnownValues.Value_BasketballFreeThrowAttempts:
                return "BasketballFreeThrowAttempts";
            case TypeValueKnownValues.Value_BasketballFreeThrowAttemptsPerGame:
                return "BasketballFreeThrowAttemptsPerGame";
            case TypeValueKnownValues.Value_BasketballFreeThrowPercentage:
                return "BasketballFreeThrowPercentage";
            case TypeValueKnownValues.Value_BasketballFreeThrowsMade:
                return "BasketballFreeThrowsMade";
            case TypeValueKnownValues.Value_BasketballFreeThrowsMadePerGame:
                return "BasketballFreeThrowsMadePerGame";
            case TypeValueKnownValues.Value_BasketballGamesPlayed:
                return "BasketballGamesPlayed";
            case TypeValueKnownValues.Value_BasketballGamesStarted:
                return "BasketballGamesStarted";
            case TypeValueKnownValues.Value_BasketballMinutesPlayed:
                return "BasketballMinutesPlayed";
            case TypeValueKnownValues.Value_BasketballMinutesPlayedPerGame:
                return "BasketballMinutesPlayedPerGame";
            case TypeValueKnownValues.Value_BasketballOffensiveRebounds:
                return "BasketballOffensiveRebounds";
            case TypeValueKnownValues.Value_BasketballOffensiveReboundsPerGame:
                return "BasketballOffensiveReboundsPerGame";
            case TypeValueKnownValues.Value_BasketballPersonalFouls:
                return "BasketballPersonalFouls";
            case TypeValueKnownValues.Value_BasketballPersonalFoulsPerGame:
                return "BasketballPersonalFoulsPerGame";
            case TypeValueKnownValues.Value_BasketballPoints:
                return "BasketballPoints";
            case TypeValueKnownValues.Value_BasketballPointsPerGame:
                return "BasketballPointsPerGame";
            case TypeValueKnownValues.Value_BasketballPointsInPaint:
                return "BasketballPointsInPaint";
            case TypeValueKnownValues.Value_BasketballPointsInPaintPerGame:
                return "BasketballPointsInPaintPerGame";
            case TypeValueKnownValues.Value_BasketballPointsOffTurnovers:
                return "BasketballPointsOffTurnovers";
            case TypeValueKnownValues.Value_BasketballPointsOffTurnoversPerGame:
                return "BasketballPointsOffTurnoversPerGame";
            case TypeValueKnownValues.Value_BasketballRebounds:
                return "BasketballRebounds";
            case TypeValueKnownValues.Value_BasketballReboundsPerGame:
                return "BasketballReboundsPerGame";
            case TypeValueKnownValues.Value_BasketballSecondChancePoints:
                return "BasketballSecondChancePoints";
            case TypeValueKnownValues.Value_BasketballSecondChancePointsPerGame:
                return "BasketballSecondChancePointsPerGame";
            case TypeValueKnownValues.Value_BasketballSteals:
                return "BasketballSteals";
            case TypeValueKnownValues.Value_BasketballStealsPerGame:
                return "BasketballStealsPerGame";
            case TypeValueKnownValues.Value_BasketballTeamTechnicalFouls:
                return "BasketballTeamTechnicalFouls";
            case TypeValueKnownValues.Value_BasketballPlayerTechnicalFouls:
                return "BasketballPlayerTechnicalFouls";
            case TypeValueKnownValues.Value_BasketballThreePointAttempts:
                return "BasketballThreePointAttempts";
            case TypeValueKnownValues.Value_BasketballThreePointAttemptsPerGame:
                return "BasketballThreePointAttemptsPerGame";
            case TypeValueKnownValues.Value_BasketballThreePointPercentage:
                return "BasketballThreePointPercentage";
            case TypeValueKnownValues.Value_BasketballThreePointsMade:
                return "BasketballThreePointsMade";
            case TypeValueKnownValues.Value_BasketballThreePointsMadePerGame:
                return "BasketballThreePointsMadePerGame";
            case TypeValueKnownValues.Value_BasketballTurnovers:
                return "BasketballTurnovers";
            case TypeValueKnownValues.Value_BasketballTurnoversPerGame:
                return "BasketballTurnoversPerGame";
            case TypeValueKnownValues.Value_BasketballTwoPointAttempts:
                return "BasketballTwoPointAttempts";
            case TypeValueKnownValues.Value_BasketballTwoPointAttemptsPerGame:
                return "BasketballTwoPointAttemptsPerGame";
            case TypeValueKnownValues.Value_BasketballTwoPointPercentage:
                return "BasketballTwoPointPercentage";
            case TypeValueKnownValues.Value_BasketballTwoPointsMade:
                return "BasketballTwoPointsMade";
            case TypeValueKnownValues.Value_BasketballTwoPointsMadePerGame:
                return "BasketballTwoPointsMadePerGame";
            case TypeValueKnownValues.Value_SoccerBallPossessions:
                return "SoccerBallPossessions";
            case TypeValueKnownValues.Value_SoccerCardsGiven:
                return "SoccerCardsGiven";
            case TypeValueKnownValues.Value_SoccerCornerKicks:
                return "SoccerCornerKicks";
            case TypeValueKnownValues.Value_SoccerFreeKicks:
                return "SoccerFreeKicks";
            case TypeValueKnownValues.Value_SoccerGoalAttempts:
                return "SoccerGoalAttempts";
            case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                return "SoccerGoalsByFoot";
            case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                return "SoccerGoalsByHeaders";
            case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                return "SoccerGoalsByTime00To15";
            case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                return "SoccerGoalsByTime16To30";
            case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                return "SoccerGoalsByTime31To45";
            case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                return "SoccerGoalsByTime46To60";
            case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                return "SoccerGoalsByTime61To75";
            case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                return "SoccerGoalsByTime76To90";
            case TypeValueKnownValues.Value_SoccerGoalsConceded:
                return "SoccerGoalsConceded";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                return "SoccerGoalsConcededByTime00To15";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                return "SoccerGoalsConcededByTime16To30";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                return "SoccerGoalsConcededByTime31To45";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                return "SoccerGoalsConcededByTime46To60";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                return "SoccerGoalsConcededByTime61To75";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                return "SoccerGoalsConcededByTime76To90";
            case TypeValueKnownValues.Value_SoccerGoalsScored:
                return "SoccerGoalsScored";
            case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                return "SoccerMatchesPlayed";
            case TypeValueKnownValues.Value_SoccerOffsides:
                return "SoccerOffsides";
            case TypeValueKnownValues.Value_SoccerOwnGoals:
                return "SoccerOwnGoals";
            case TypeValueKnownValues.Value_SoccerShotsBlocked:
                return "SoccerShotsBlocked";
            case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                return "SoccerShotsOffGoal";
            case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                return "SoccerShotsOnGoal";
            case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                return "SoccerSubstitutedIn";
            case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                return "SoccerSubstitutedOut";
            case TypeValueKnownValues.Value_CricketBattingRuns:
                return "CricketBattingRuns";
            case TypeValueKnownValues.Value_CricketBowlingWickets:
                return "CricketBowlingWickets";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    private bool flagHasValue;
    private TypeValue storeValue;


    private void  fromJSONValue(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field Value of SportsStatsTypeJSON is not a string.");
        TypeValue the_open_enum = new TypeValue();
        switch (json_string.getData()[0])
          {
            case 'A':
                if (String.Compare(json_string.getData(), 1, "mericanFootball", 0, 15, false) == 0)
                  {
                    switch (json_string.getData()[16])
                      {
                        case '1':
                            switch (json_string.getData()[17])
                              {
                                case 'P':
                                    if ((String.Compare(json_string.getData(), 18, "ointSafety", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball1PointSafety;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    if ((String.Compare(json_string.getData(), 18, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball1stDowns;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case '2':
                            if (String.Compare(json_string.getData(), 17, "PointConversions", 0, 16, false) == 0)
                              {
                                switch (json_string.getData()[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 34, "ttempted", 0, 8, false) == 0) && (json_string.getData().Length == 42))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsAttempted;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        if ((String.Compare(json_string.getData(), 34, "ailed", 0, 5, false) == 0) && (json_string.getData().Length == 39))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsFailed;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'M':
                                        if ((String.Compare(json_string.getData(), 34, "ade", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsMade;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 34, "assing", 0, 6, false) == 0) && (json_string.getData().Length == 40))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsPassing;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'R':
                                        switch (json_string.getData()[34])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 35, "ceiving", 0, 7, false) == 0) && (json_string.getData().Length == 42))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsReceiving;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                if ((String.Compare(json_string.getData(), 35, "shing", 0, 5, false) == 0) && (json_string.getData().Length == 40))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball2PointConversionsRushing;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case '3':
                            if (String.Compare(json_string.getData(), 17, "rdDownConversion", 0, 16, false) == 0)
                              {
                                switch (json_string.getData()[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 34, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 41))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversionAttempts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversionPerc;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        if (json_string.getData().Length == 34)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversions;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[34])
                                          {
                                            case 'V':
                                                if (String.Compare(json_string.getData(), 35, "ia", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[37])
                                                      {
                                                        case 'P':
                                                            switch (json_string.getData()[38])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(json_string.getData(), 39, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPass;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(json_string.getData(), 39, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 44))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPenalty;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 38, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 41))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaRush;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case '4':
                            if (String.Compare(json_string.getData(), 17, "thDownConversion", 0, 16, false) == 0)
                              {
                                switch (json_string.getData()[33])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 34, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 41))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversionAttempts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversionPerc;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        if (json_string.getData().Length == 34)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversions;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[34])
                                          {
                                            case 'V':
                                                if (String.Compare(json_string.getData(), 35, "ia", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[37])
                                                      {
                                                        case 'P':
                                                            switch (json_string.getData()[38])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(json_string.getData(), 39, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPass;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(json_string.getData(), 39, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 44))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPenalty;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 38, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 41))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaRush;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'B':
                            if (String.Compare(json_string.getData(), 17, "locked", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[23])
                                  {
                                    case 'F':
                                        if (String.Compare(json_string.getData(), 24, "ieldGoalReturns", 0, 15, false) == 0)
                                          {
                                            if (json_string.getData().Length == 39)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[39])
                                              {
                                                case '1':
                                                    if ((String.Compare(json_string.getData(), 40, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 50))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns10PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '2':
                                                    if ((String.Compare(json_string.getData(), 40, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 50))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns20PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '3':
                                                    if ((String.Compare(json_string.getData(), 40, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 50))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns30PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '4':
                                                    if ((String.Compare(json_string.getData(), 40, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 50))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns40PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '5':
                                                    if ((String.Compare(json_string.getData(), 40, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 50))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns50PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'A':
                                                    if ((String.Compare(json_string.getData(), 40, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 52))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'L':
                                                    if ((String.Compare(json_string.getData(), 40, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 52))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'T':
                                                    if (String.Compare(json_string.getData(), 40, "o", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[41])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(json_string.getData(), 42, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 49))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTotalYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(json_string.getData(), 42, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 49))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'K':
                                        if ((String.Compare(json_string.getData(), 24, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 28))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedKicks;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'P':
                                        if (String.Compare(json_string.getData(), 24, "untReturn", 0, 9, false) == 0)
                                          {
                                            switch (json_string.getData()[33])
                                              {
                                                case '1':
                                                    if ((String.Compare(json_string.getData(), 34, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn10PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '2':
                                                    if ((String.Compare(json_string.getData(), 34, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn20PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '3':
                                                    if ((String.Compare(json_string.getData(), 34, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn30PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '4':
                                                    if ((String.Compare(json_string.getData(), 34, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn40PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '5':
                                                    if ((String.Compare(json_string.getData(), 34, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn50PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 's':
                                                    if (json_string.getData().Length == 34)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturns;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[34])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 35, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 47))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsAverageReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 35, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 47))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsLongestReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 35, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[36])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(json_string.getData(), 37, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 44))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTotalYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(json_string.getData(), 37, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 44))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'C':
                            if (String.Compare(json_string.getData(), 17, "onversion", 0, 9, false) == 0)
                              {
                                switch (json_string.getData()[26])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 27, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 34))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballConversionAttempts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[27])
                                          {
                                            case 'C':
                                                if ((String.Compare(json_string.getData(), 28, "ompleted", 0, 8, false) == 0) && (json_string.getData().Length == 36))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballConversionsCompleted;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                if ((String.Compare(json_string.getData(), 28, "ailed", 0, 5, false) == 0) && (json_string.getData().Length == 33))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballConversionsFailed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'E':
                            if (String.Compare(json_string.getData(), 17, "xtraPoints", 0, 10, false) == 0)
                              {
                                switch (json_string.getData()[27])
                                  {
                                    case 'A':
                                        if (String.Compare(json_string.getData(), 28, "ttempted", 0, 8, false) == 0)
                                          {
                                            if (json_string.getData().Length == 36)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[36])
                                              {
                                                case '2':
                                                    if ((String.Compare(json_string.getData(), 37, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 52))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted2PointConversion;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'K':
                                                    if ((String.Compare(json_string.getData(), 37, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 43))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsAttemptedKicking;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if ((String.Compare(json_string.getData(), 28, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 34))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsBlocked;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'M':
                                        if (String.Compare(json_string.getData(), 28, "ade", 0, 3, false) == 0)
                                          {
                                            if (json_string.getData().Length == 31)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsMade;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[31])
                                              {
                                                case '2':
                                                    if ((String.Compare(json_string.getData(), 32, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 47))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsMade2PointConversion;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'K':
                                                    if ((String.Compare(json_string.getData(), 32, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 38))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsMadeKicking;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 28, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 31))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballExtraPointsPerc;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            switch (json_string.getData()[17])
                              {
                                case 'i':
                                    if (String.Compare(json_string.getData(), 18, "eldGoal", 0, 7, false) == 0)
                                      {
                                        switch (json_string.getData()[25])
                                          {
                                            case 'R':
                                                if (String.Compare(json_string.getData(), 26, "eturns", 0, 6, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 32)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[32])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(json_string.getData(), 33, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns10PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 33, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 33, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 33, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 33, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 33, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 45))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsAverageReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 33, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 45))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsLongestReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 33, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[34])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(json_string.getData(), 35, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 42))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTotalYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(json_string.getData(), 35, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 42))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                switch (json_string.getData()[26])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 27, "ttempted", 0, 8, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 35)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[35])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(json_string.getData(), 36, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 45))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted1to19Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 36, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 46))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted20to29Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 36, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 46))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted30to39Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 36, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 46))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted40to49Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 36, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 46))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'B':
                                                        if ((String.Compare(json_string.getData(), 27, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsBlocked;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 27, "ongestMade", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsLongestMade;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'M':
                                                        if (String.Compare(json_string.getData(), 27, "ade", 0, 3, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 30)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[30])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(json_string.getData(), 31, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 40))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade1to19Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 31, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade20to29Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 31, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade30to39Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 31, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade40to49Yards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 27, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 30))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFieldGoalsPerc;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 18, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 29))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballForcedFumbles;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'u':
                                    if (String.Compare(json_string.getData(), 18, "mbles", 0, 5, false) == 0)
                                      {
                                        if (json_string.getData().Length == 23)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumbles;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[23])
                                          {
                                            case 'F':
                                                if ((String.Compare(json_string.getData(), 24, "orced", 0, 5, false) == 0) && (json_string.getData().Length == 29))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesForced;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'L':
                                                if ((String.Compare(json_string.getData(), 24, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesLost;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'O':
                                                switch (json_string.getData()[24])
                                                  {
                                                    case 'p':
                                                        if (String.Compare(json_string.getData(), 25, "ponent", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[31])
                                                              {
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 32, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 39))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesOpponentRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(json_string.getData(), 32, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 53))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(json_string.getData(), 25, "tOfBounds", 0, 9, false) == 0) && (json_string.getData().Length == 34))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesOutOfBounds;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'w':
                                                        if (String.Compare(json_string.getData(), 25, "n", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[26])
                                                              {
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 27, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesOwnRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(json_string.getData(), 27, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 48))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesOwnTouchdownsFromRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'R':
                                                if (String.Compare(json_string.getData(), 24, "ecovered", 0, 8, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 32)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesRecovered;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[32])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 33, "orTouchdowns", 0, 12, false) == 0) && (json_string.getData().Length == 45))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesRecoveredForTouchdowns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'Y':
                                                if (String.Compare(json_string.getData(), 24, "ardsFromO", 0, 9, false) == 0)
                                                  {
                                                    switch (json_string.getData()[33])
                                                      {
                                                        case 'p':
                                                            if ((String.Compare(json_string.getData(), 34, "ponentRecovery", 0, 14, false) == 0) && (json_string.getData().Length == 48))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOpponentRecovery;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'w':
                                                            if ((String.Compare(json_string.getData(), 34, "nRecovery", 0, 9, false) == 0) && (json_string.getData().Length == 43))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOwnRecovery;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'G':
                            switch (json_string.getData()[17])
                              {
                                case 'a':
                                    if (String.Compare(json_string.getData(), 18, "mes", 0, 3, false) == 0)
                                      {
                                        switch (json_string.getData()[21])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 22, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballGamesPlayed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'S':
                                                if ((String.Compare(json_string.getData(), 22, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballGamesStarted;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(json_string.getData(), 18, "alEfficiency", 0, 12, false) == 0)
                                      {
                                        switch (json_string.getData()[30])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 31, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 38))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyAttempts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 31, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 31, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 40))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyTouchdowns;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'I':
                            if (String.Compare(json_string.getData(), 17, "nterceptions", 0, 12, false) == 0)
                              {
                                if (json_string.getData().Length == 29)
                                  {
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballInterceptions;
                                        goto open_enum_is_done;
                                      }
                                  }
                                switch (json_string.getData()[29])
                                  {
                                    case 'L':
                                        if ((String.Compare(json_string.getData(), 30, "ongestInterception", 0, 18, false) == 0) && (json_string.getData().Length == 48))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballInterceptionsLongestInterception;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'T':
                                        if ((String.Compare(json_string.getData(), 30, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 39))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballInterceptionsTouchdowns;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'Y':
                                        if ((String.Compare(json_string.getData(), 30, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 34))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballInterceptionsYards;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'K':
                            if (String.Compare(json_string.getData(), 17, "ickoff", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[23])
                                  {
                                    case 'R':
                                        if (String.Compare(json_string.getData(), 24, "eturns", 0, 6, false) == 0)
                                          {
                                            switch (json_string.getData()[30])
                                              {
                                                case '1':
                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturns10PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '2':
                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturns20PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '3':
                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturns30PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '4':
                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturns40PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case '5':
                                                    if ((String.Compare(json_string.getData(), 31, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturns50PlusYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'A':
                                                    if ((String.Compare(json_string.getData(), 31, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 40))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsAverageRun;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(json_string.getData(), 31, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsFairCatches;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'L':
                                                    if ((String.Compare(json_string.getData(), 31, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 47))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsLongestKickReturn;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(json_string.getData(), 31, "eturns", 0, 6, false) == 0) && (json_string.getData().Length == 37))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsReturns;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'T':
                                                    if ((String.Compare(json_string.getData(), 31, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 40))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsTouchdowns;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'Y':
                                                    if ((String.Compare(json_string.getData(), 31, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 35))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffReturnsYards;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[24])
                                          {
                                            case 'A':
                                                if (String.Compare(json_string.getData(), 25, "verage", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[31])
                                                      {
                                                        case 'G':
                                                            if ((String.Compare(json_string.getData(), 32, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 41))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsAverageGrossYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(json_string.getData(), 32, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 39))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsAverageNetYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 32, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 42))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsAverageReturnYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if ((String.Compare(json_string.getData(), 25, "ndZoneKicks", 0, 11, false) == 0) && (json_string.getData().Length == 36))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsEndZoneKicks;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'G':
                                                if ((String.Compare(json_string.getData(), 25, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsGrossYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'I':
                                                if (String.Compare(json_string.getData(), 25, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 49)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLine;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[49])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 50, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 53))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if ((String.Compare(json_string.getData(), 25, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 29))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsKicks;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'L':
                                                if ((String.Compare(json_string.getData(), 25, "ongestKick", 0, 10, false) == 0) && (json_string.getData().Length == 35))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsLongestKick;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'N':
                                                if ((String.Compare(json_string.getData(), 25, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsNetYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'R':
                                                if ((String.Compare(json_string.getData(), 25, "eturned", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsReturned;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                if (String.Compare(json_string.getData(), 25, "o", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[26])
                                                      {
                                                        case 't':
                                                            if ((String.Compare(json_string.getData(), 27, "alReturnYards", 0, 13, false) == 0) && (json_string.getData().Length == 40))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsTotalReturnYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'u':
                                                            if (String.Compare(json_string.getData(), 27, "chbacks", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 34)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[34])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 35, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 38))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacksPerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if (String.Compare(json_string.getData(), 17, "isc", 0, 3, false) == 0)
                              {
                                switch (json_string.getData()[20])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 21, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 35))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballMiscAssistedTackles;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 21, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 35))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballMiscCombinedTackles;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        switch (json_string.getData()[21])
                                          {
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 22, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 33))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballMiscForcedFumbles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                if ((String.Compare(json_string.getData(), 22, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 36))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballMiscFumblesRecovered;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        if ((String.Compare(json_string.getData(), 21, "ackles", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballMiscTackles;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            switch (json_string.getData()[17])
                              {
                                case 'a':
                                    if (String.Compare(json_string.getData(), 18, "ss", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[20])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 21, "sDefended", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassesDefended;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 21, "ng", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case '1':
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case '0':
                                                                    if ((String.Compare(json_string.getData(), 25, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing10PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if ((String.Compare(json_string.getData(), 25, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing1stDowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassing50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'A':
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 't':
                                                                    if ((String.Compare(json_string.getData(), 25, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingAttempts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(json_string.getData(), 25, "erageYardsPer", 0, 13, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[38])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(json_string.getData(), 39, "ttempt", 0, 6, false) == 0) && (json_string.getData().Length == 45))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerAttempt;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'C':
                                                                                if ((String.Compare(json_string.getData(), 39, "ompletion", 0, 9, false) == 0) && (json_string.getData().Length == 48))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerCompletion;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'C':
                                                            if (String.Compare(json_string.getData(), 24, "ompletion", 0, 9, false) == 0)
                                                              {
                                                                switch (json_string.getData()[33])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingCompletionPerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 34)
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingCompletions;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'G':
                                                            if ((String.Compare(json_string.getData(), 24, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 33))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingGrossYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'I':
                                                            if (String.Compare(json_string.getData(), 24, "nterception", 0, 11, false) == 0)
                                                              {
                                                                switch (json_string.getData()[35])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 36, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 39))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingInterceptionPerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 36)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingInterceptions;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[36])
                                                                          {
                                                                            case 'R':
                                                                                if ((String.Compare(json_string.getData(), 37, "eturnedForTouchdown", 0, 19, false) == 0) && (json_string.getData().Length == 56))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingInterceptionsReturnedForTouchdown;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 24, "ongestPass", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingLongestPass;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(json_string.getData(), 24, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingNetYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(json_string.getData(), 25, "ting", 0, 4, false) == 0) && (json_string.getData().Length == 29))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingRating;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'e':
                                                                    if ((String.Compare(json_string.getData(), 25, "dZoneAttempts", 0, 13, false) == 0) && (json_string.getData().Length == 38))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingRedZoneAttempts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(json_string.getData(), 24, "acked", 0, 5, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 29)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingSacked;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[29])
                                                                  {
                                                                    case 'Y':
                                                                        if ((String.Compare(json_string.getData(), 30, "ardsLost", 0, 8, false) == 0) && (json_string.getData().Length == 38))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingSackedYardsLost;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'T':
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'a':
                                                                    if ((String.Compare(json_string.getData(), 25, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 39))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingTackledForSafety;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'o':
                                                                    switch (json_string.getData()[25])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(json_string.getData(), 26, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingTotalYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'u':
                                                                            if (String.Compare(json_string.getData(), 26, "chdown", 0, 6, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[32])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(json_string.getData(), 33, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingTouchdownPerc;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 's':
                                                                                        if (json_string.getData().Length == 33)
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPassingTouchdowns;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'e':
                                    if (String.Compare(json_string.getData(), 18, "nalties", 0, 7, false) == 0)
                                      {
                                        if (json_string.getData().Length == 25)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPenalties;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[25])
                                          {
                                            case '1':
                                                if ((String.Compare(json_string.getData(), 26, "stDowns", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPenalties1stDowns;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'Y':
                                                if ((String.Compare(json_string.getData(), 26, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 30))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPenaltiesYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(json_string.getData(), 18, "nt", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[20])
                                          {
                                            case 'R':
                                                if (String.Compare(json_string.getData(), 21, "eturns", 0, 6, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 27)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[27])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(json_string.getData(), 28, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns10PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 28, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 28, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 28, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 28, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturns50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 28, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturnsAverageRun;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 28, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturnsFairCatches;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 28, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 44))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturnsLongestKickReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(json_string.getData(), 28, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturnsTouchdowns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(json_string.getData(), 28, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 32))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntReturnsYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 21, "ng", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 24, "verage", 0, 6, false) == 0)
                                                              {
                                                                switch (json_string.getData()[30])
                                                                  {
                                                                    case 'G':
                                                                        if ((String.Compare(json_string.getData(), 31, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingAverageGrossYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'N':
                                                                        if ((String.Compare(json_string.getData(), 31, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 38))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingAverageNetYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(json_string.getData(), 31, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingAverageReturnYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 24, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingBlocked;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'G':
                                                            if ((String.Compare(json_string.getData(), 24, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 33))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingGrossYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'I':
                                                            if (String.Compare(json_string.getData(), 24, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 48)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLine;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[48])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 49, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 52))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLinePerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 24, "ongestPunt", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingLongestPunt;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'N':
                                                            if ((String.Compare(json_string.getData(), 24, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingNetYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "unts", 0, 4, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingPunts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            if (String.Compare(json_string.getData(), 24, "eturn", 0, 5, false) == 0)
                                                              {
                                                                switch (json_string.getData()[29])
                                                                  {
                                                                    case 'Y':
                                                                        if ((String.Compare(json_string.getData(), 30, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingReturnYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'e':
                                                                        if ((String.Compare(json_string.getData(), 30, "d", 0, 1, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingReturned;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 24, "ouchbacks", 0, 9, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 33)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[33])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacksPerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'Q':
                            if ((String.Compare(json_string.getData(), 17, "uarterbackHits", 0, 14, false) == 0) && (json_string.getData().Length == 31))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballQuarterbackHits;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'R':
                            switch (json_string.getData()[17])
                              {
                                case 'e':
                                    switch (json_string.getData()[18])
                                      {
                                        case 'c':
                                            if (String.Compare(json_string.getData(), 19, "eiving", 0, 6, false) == 0)
                                              {
                                                switch (json_string.getData()[25])
                                                  {
                                                    case '1':
                                                        switch (json_string.getData()[26])
                                                          {
                                                            case '0':
                                                                if ((String.Compare(json_string.getData(), 27, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 36))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving10PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 's':
                                                                if ((String.Compare(json_string.getData(), 27, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving1stDowns;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case '2':
                                                        if ((String.Compare(json_string.getData(), 26, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving20PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '3':
                                                        if ((String.Compare(json_string.getData(), 26, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving30PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '4':
                                                        if ((String.Compare(json_string.getData(), 26, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving40PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '5':
                                                        if ((String.Compare(json_string.getData(), 26, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceiving50PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'A':
                                                        if ((String.Compare(json_string.getData(), 26, "verageReception", 0, 15, false) == 0) && (json_string.getData().Length == 41))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingAverageReception;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(json_string.getData(), 26, "umbledOnReception", 0, 17, false) == 0) && (json_string.getData().Length == 43))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingFumbledOnReception;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 26, "ongestReception", 0, 15, false) == 0) && (json_string.getData().Length == 41))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingLongestReception;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'R':
                                                        if (String.Compare(json_string.getData(), 26, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[27])
                                                              {
                                                                case 'c':
                                                                    if ((String.Compare(json_string.getData(), 28, "eptions", 0, 7, false) == 0) && (json_string.getData().Length == 35))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingReceptions;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'd':
                                                                    if ((String.Compare(json_string.getData(), 28, "ZoneTargets", 0, 11, false) == 0) && (json_string.getData().Length == 39))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingRedZoneTargets;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'T':
                                                        switch (json_string.getData()[26])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(json_string.getData(), 27, "rgets", 0, 5, false) == 0) && (json_string.getData().Length == 32))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingTargets;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                switch (json_string.getData()[27])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(json_string.getData(), 28, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 35))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingTotalYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(json_string.getData(), 28, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 35))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'Y':
                                                        if ((String.Compare(json_string.getData(), 26, "ardsAfterCompletion", 0, 19, false) == 0) && (json_string.getData().Length == 45))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballReceivingYardsAfterCompletion;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'd':
                                            if (String.Compare(json_string.getData(), 19, "ZoneEfficiency", 0, 14, false) == 0)
                                              {
                                                switch (json_string.getData()[33])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(json_string.getData(), 34, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 41))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyAttempts;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'C':
                                                        if ((String.Compare(json_string.getData(), 34, "onversions", 0, 10, false) == 0) && (json_string.getData().Length == 44))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyConversions;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyPerc;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(json_string.getData(), 18, "shing", 0, 5, false) == 0)
                                      {
                                        switch (json_string.getData()[23])
                                          {
                                            case '1':
                                                switch (json_string.getData()[24])
                                                  {
                                                    case '0':
                                                        if ((String.Compare(json_string.getData(), 25, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 34))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing10PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (String.Compare(json_string.getData(), 25, "tDown", 0, 5, false) == 0)
                                                          {
                                                            switch (json_string.getData()[30])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 31, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing1stDownPerc;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (json_string.getData().Length == 31)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing1stDowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case '2':
                                                if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing20PlusYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case '3':
                                                if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing30PlusYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case '4':
                                                if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing40PlusYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case '5':
                                                if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushing50PlusYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'A':
                                                switch (json_string.getData()[24])
                                                  {
                                                    case 't':
                                                        if ((String.Compare(json_string.getData(), 25, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingAttempts;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 25, "erageRush", 0, 9, false) == 0) && (json_string.getData().Length == 34))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingAverageRush;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'F':
                                                if ((String.Compare(json_string.getData(), 24, "umbledOnRush", 0, 12, false) == 0) && (json_string.getData().Length == 36))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingFumbledOnRush;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'L':
                                                if ((String.Compare(json_string.getData(), 24, "ongestRush", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingLongestRush;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'R':
                                                if ((String.Compare(json_string.getData(), 24, "edZoneAttempts", 0, 14, false) == 0) && (json_string.getData().Length == 38))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingRedZoneAttempts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                switch (json_string.getData()[24])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 25, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 39))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingTackledForSafety;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        switch (json_string.getData()[25])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(json_string.getData(), 26, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingTotalYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(json_string.getData(), 26, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballRushingTouchdowns;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (json_string.getData()[17])
                              {
                                case 'a':
                                    switch (json_string.getData()[18])
                                      {
                                        case 'c':
                                            if (String.Compare(json_string.getData(), 19, "k", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[20])
                                                  {
                                                    case 'Y':
                                                        if ((String.Compare(json_string.getData(), 21, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 25))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSackYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (json_string.getData().Length == 21)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSacks;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 19, "eties", 0, 5, false) == 0) && (json_string.getData().Length == 24))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSafeties;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'p':
                                    if (String.Compare(json_string.getData(), 18, "ecialTeams", 0, 10, false) == 0)
                                      {
                                        switch (json_string.getData()[28])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 29, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 43))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSpecialTeamsAssistedTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'C':
                                                if ((String.Compare(json_string.getData(), 29, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 43))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSpecialTeamsCombinedTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                switch (json_string.getData()[29])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 30, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 41))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSpecialTeamsForcedFumbles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(json_string.getData(), 30, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 44))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSpecialTeamsFumblesRecovered;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 29, "otalTackles", 0, 11, false) == 0) && (json_string.getData().Length == 40))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballSpecialTeamsTotalTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'T':
                            if (String.Compare(json_string.getData(), 17, "ackles", 0, 6, false) == 0)
                              {
                                if (json_string.getData().Length == 23)
                                  {
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballTackles;
                                        goto open_enum_is_done;
                                      }
                                  }
                                switch (json_string.getData()[23])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 24, "ssisted", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballTacklesAssisted;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 24, "ombined", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballTacklesCombined;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        if ((String.Compare(json_string.getData(), 24, "orLoss", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_AmericanFootballTacklesForLoss;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'B':
                if (String.Compare(json_string.getData(), 1, "as", 0, 2, false) == 0)
                  {
                    switch (json_string.getData()[3])
                      {
                        case 'e':
                            if (String.Compare(json_string.getData(), 4, "ball", 0, 4, false) == 0)
                              {
                                switch (json_string.getData()[8])
                                  {
                                    case 'B':
                                        if (String.Compare(json_string.getData(), 9, "aserunning", 0, 10, false) == 0)
                                          {
                                            switch (json_string.getData()[19])
                                              {
                                                case 'C':
                                                    if ((String.Compare(json_string.getData(), 20, "aughtStealing", 0, 13, false) == 0) && (json_string.getData().Length == 33))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballBaserunningCaughtStealing;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 20, "ickoffs", 0, 7, false) == 0) && (json_string.getData().Length == 27))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballBaserunningPickoffs;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'S':
                                                    if (String.Compare(json_string.getData(), 20, "tolenBase", 0, 9, false) == 0)
                                                      {
                                                        switch (json_string.getData()[29])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 30, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 33))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballBaserunningStolenBasePerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 's':
                                                                if (json_string.getData().Length == 30)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballBaserunningStolenBases;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'F':
                                        if (String.Compare(json_string.getData(), 9, "ielding", 0, 7, false) == 0)
                                          {
                                            switch (json_string.getData()[16])
                                              {
                                                case 'A':
                                                    if ((String.Compare(json_string.getData(), 17, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingAssists;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'C':
                                                    if ((String.Compare(json_string.getData(), 17, "ompleteGames", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingCompleteGames;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'D':
                                                    if ((String.Compare(json_string.getData(), 17, "oublePlays", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingDoublePlays;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'E':
                                                    if ((String.Compare(json_string.getData(), 17, "rrors", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingErrors;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'F':
                                                    if ((String.Compare(json_string.getData(), 17, "ieldingPercentage", 0, 17, false) == 0) && (json_string.getData().Length == 34))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingFieldingPercentage;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'G':
                                                    if (String.Compare(json_string.getData(), 17, "ames", 0, 4, false) == 0)
                                                      {
                                                        switch (json_string.getData()[21])
                                                          {
                                                            case 'F':
                                                                if ((String.Compare(json_string.getData(), 22, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingGamesFinished;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 22, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 27))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingGamesPlayed;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 22, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingGamesStarted;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(json_string.getData(), 18, "ssedBalls", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingPassedBalls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'u':
                                                            if ((String.Compare(json_string.getData(), 18, "touts", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingPutouts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'R':
                                                    if ((String.Compare(json_string.getData(), 17, "angeFactor", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingRangeFactor;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'T':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 18, "talChances", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingTotalChances;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 18, "iplePlays", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballFieldingTriplePlays;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'H':
                                        if (String.Compare(json_string.getData(), 9, "itting", 0, 6, false) == 0)
                                          {
                                            switch (json_string.getData()[15])
                                              {
                                                case 'A':
                                                    if (String.Compare(json_string.getData(), 16, "tBats", 0, 5, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 21)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingAtBats;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[21])
                                                          {
                                                            case 'P':
                                                                if (String.Compare(json_string.getData(), 22, "er", 0, 2, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[24])
                                                                      {
                                                                        case 'H':
                                                                            if ((String.Compare(json_string.getData(), 25, "omeRun", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingAtBatsPerHomeRun;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(json_string.getData(), 25, "trikeout", 0, 8, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingAtBatsPerStrikeout;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'W':
                                                                if ((String.Compare(json_string.getData(), 22, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (json_string.getData().Length == 49))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingAtBatsWithRunnersInScoringPosition;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'B':
                                                    if (String.Compare(json_string.getData(), 16, "a", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[17])
                                                          {
                                                            case 'l':
                                                                if (String.Compare(json_string.getData(), 18, "ls", 0, 2, false) == 0)
                                                                  {
                                                                    if (json_string.getData().Length == 20)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingBalls;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[20])
                                                                      {
                                                                        case 'I':
                                                                            if ((String.Compare(json_string.getData(), 21, "nPlay", 0, 5, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingBallsInPlay;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if (String.Compare(json_string.getData(), 18, "tingAverage", 0, 11, false) == 0)
                                                                  {
                                                                    if (json_string.getData().Length == 29)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingBattingAverage;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[29])
                                                                      {
                                                                        case 'O':
                                                                            if ((String.Compare(json_string.getData(), 30, "nBallsInPlay", 0, 12, false) == 0) && (json_string.getData().Length == 42))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingBattingAverageOnBallsInPlay;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'C':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 17, "mpleteGames", 0, 11, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingCompleteGames;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'y':
                                                            if ((String.Compare(json_string.getData(), 17, "cles", 0, 4, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingCycles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'D':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 17, "rtBallsFaced", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingDirtBallsFaced;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 17, "ubles", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingDoubles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'E':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(json_string.getData(), 17, "rnedRunsScored", 0, 14, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingEarnedRunsScored;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if ((String.Compare(json_string.getData(), 17, "traBaseHits", 0, 11, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingExtraBaseHits;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'F':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 17, "eldersChoice", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingFieldersChoice;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'l':
                                                            if (String.Compare(json_string.getData(), 17, "y", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[18])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 19, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingFlyBalls;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'O':
                                                                        if (String.Compare(json_string.getData(), 19, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            if (json_string.getData().Length == 22)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingFlyOuts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[22])
                                                                              {
                                                                                case 'I':
                                                                                    if ((String.Compare(json_string.getData(), 23, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 37))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingFlyOutsIntoDoublePlays;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 17, "ulBalls", 0, 7, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingFoulBalls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'G':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(json_string.getData(), 17, "mes", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[20])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(json_string.getData(), 21, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGamesFinished;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 21, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 26))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGamesPlayed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(json_string.getData(), 21, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGamesStarted;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(json_string.getData(), 17, "ound", 0, 4, false) == 0)
                                                              {
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'B':
                                                                        if (String.Compare(json_string.getData(), 22, "all", 0, 3, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[25])
                                                                              {
                                                                                case 'T':
                                                                                    if ((String.Compare(json_string.getData(), 26, "oFlyBallRatio", 0, 13, false) == 0) && (json_string.getData().Length == 39))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGroundBallToFlyBallRatio;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 's':
                                                                                    if (json_string.getData().Length == 26)
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGroundBalls;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 'O':
                                                                        if ((String.Compare(json_string.getData(), 22, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGroundOuts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'e':
                                                                        if ((String.Compare(json_string.getData(), 22, "dIntoDoublePlay", 0, 15, false) == 0) && (json_string.getData().Length == 37))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingGroundedIntoDoublePlay;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'H':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(json_string.getData(), 17, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[18])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 19, "yPitch", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingHitByPitch;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 19)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingHits;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[19])
                                                                          {
                                                                            case 'W':
                                                                                if ((String.Compare(json_string.getData(), 20, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (json_string.getData().Length == 47))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingHitsWithRunnersInScoringPosition;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 17, "meRuns", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingHomeRuns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'I':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'n':
                                                            if (String.Compare(json_string.getData(), 17, "tentional", 0, 9, false) == 0)
                                                              {
                                                                switch (json_string.getData()[26])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 27, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingIntentionalBalls;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'W':
                                                                        if ((String.Compare(json_string.getData(), 27, "alks", 0, 4, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingIntentionalWalks;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(json_string.getData(), 17, "olatedPower", 0, 11, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingIsolatedPower;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'L':
                                                    if (String.Compare(json_string.getData(), 16, "ine", 0, 3, false) == 0)
                                                      {
                                                        switch (json_string.getData()[19])
                                                          {
                                                            case 'D':
                                                                if ((String.Compare(json_string.getData(), 20, "rives", 0, 5, false) == 0) && (json_string.getData().Length == 25))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingLineDrives;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'O':
                                                                if (String.Compare(json_string.getData(), 20, "uts", 0, 3, false) == 0)
                                                                  {
                                                                    if (json_string.getData().Length == 23)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingLineOuts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[23])
                                                                      {
                                                                        case 'I':
                                                                            if ((String.Compare(json_string.getData(), 24, "ntoDoublePlay", 0, 13, false) == 0) && (json_string.getData().Length == 37))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingLineOutsIntoDoublePlay;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'O':
                                                    if (String.Compare(json_string.getData(), 16, "nBaseP", 0, 6, false) == 0)
                                                      {
                                                        switch (json_string.getData()[22])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 23, "rc", 0, 2, false) == 0) && (json_string.getData().Length == 25))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingOnBasePerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'l':
                                                                if ((String.Compare(json_string.getData(), 23, "usSluggingPerc", 0, 14, false) == 0) && (json_string.getData().Length == 37))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingOnBasePlusSluggingPerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 17, "tchesFaced", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingPitchesFaced;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(json_string.getData(), 17, "ateAppearances", 0, 14, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingPlateAppearances;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if (String.Compare(json_string.getData(), 17, "p", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[18])
                                                                  {
                                                                    case 'O':
                                                                        if ((String.Compare(json_string.getData(), 19, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 22))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingPopOuts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'U':
                                                                        if ((String.Compare(json_string.getData(), 19, "ps", 0, 2, false) == 0) && (json_string.getData().Length == 21))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingPopUps;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'R':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 17, "achedOnError", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingReachedOnError;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'u':
                                                            if (String.Compare(json_string.getData(), 17, "n", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[18])
                                                                  {
                                                                    case 'n':
                                                                        if (String.Compare(json_string.getData(), 19, "ersLeftOnBase", 0, 13, false) == 0)
                                                                          {
                                                                            if (json_string.getData().Length == 32)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBase;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[32])
                                                                              {
                                                                                case 'T':
                                                                                    if ((String.Compare(json_string.getData(), 33, "woOutsRunnersInScoringPosition", 0, 30, false) == 0) && (json_string.getData().Length == 63))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 's':
                                                                        if (String.Compare(json_string.getData(), 19, "BattedIn", 0, 8, false) == 0)
                                                                          {
                                                                            if (json_string.getData().Length == 27)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingRunsBattedIn;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[27])
                                                                              {
                                                                                case 'W':
                                                                                    if ((String.Compare(json_string.getData(), 28, "ithTwoOuts", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingRunsBattedInWithTwoOuts;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'S':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(json_string.getData(), 17, "crifice", 0, 7, false) == 0)
                                                              {
                                                                switch (json_string.getData()[24])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(json_string.getData(), 25, "lys", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingSacrificeFlys;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'H':
                                                                        if ((String.Compare(json_string.getData(), 25, "its", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingSacrificeHits;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 17, "condaryAverage", 0, 14, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingSecondaryAverage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 17, "ngles", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingSingles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(json_string.getData(), 17, "uggingPerc", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingSluggingPerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 't':
                                                            if (String.Compare(json_string.getData(), 17, "rike", 0, 4, false) == 0)
                                                              {
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'o':
                                                                        if (String.Compare(json_string.getData(), 22, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[25])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(json_string.getData(), 26, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingStrikeoutsLooking;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'S':
                                                                                    if ((String.Compare(json_string.getData(), 26, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingStrikeoutsSwinging;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 's':
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 23, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingStrikesLooking;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(json_string.getData(), 23, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 30))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingStrikesSwinging;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'T':
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(json_string.getData(), 17, "tal", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[20])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 21, "ases", 0, 4, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingTotalBases;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(json_string.getData(), 21, "unsScored", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingTotalRunsScored;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if (String.Compare(json_string.getData(), 21, "trike", 0, 5, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[26])
                                                                              {
                                                                                case 'o':
                                                                                    if ((String.Compare(json_string.getData(), 27, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 30))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingTotalStrikeouts;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 's':
                                                                                    if (json_string.getData().Length == 27)
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingTotalStrikes;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 17, "iples", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingTriples;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'U':
                                                    if ((String.Compare(json_string.getData(), 16, "nearnedRunsScored", 0, 17, false) == 0) && (json_string.getData().Length == 33))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingUnearnedRunsScored;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'W':
                                                    if (String.Compare(json_string.getData(), 16, "alks", 0, 4, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 20)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingWalks;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[20])
                                                          {
                                                            case 'P':
                                                                if (String.Compare(json_string.getData(), 21, "er", 0, 2, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[23])
                                                                      {
                                                                        case 'P':
                                                                            if ((String.Compare(json_string.getData(), 24, "lateAppearance", 0, 14, false) == 0) && (json_string.getData().Length == 38))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingWalksPerPlateAppearance;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(json_string.getData(), 24, "trikeout", 0, 8, false) == 0) && (json_string.getData().Length == 32))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballHittingWalksPerStrikeout;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        if (String.Compare(json_string.getData(), 9, "itching", 0, 7, false) == 0)
                                          {
                                            switch (json_string.getData()[16])
                                              {
                                                case 'B':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'l':
                                                                    switch (json_string.getData()[19])
                                                                      {
                                                                        case 'k':
                                                                            if ((String.Compare(json_string.getData(), 20, "s", 0, 1, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingBalks;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'l':
                                                                            if ((String.Compare(json_string.getData(), 20, "s", 0, 1, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingBalls;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 't':
                                                                    if ((String.Compare(json_string.getData(), 19, "tersFaced", 0, 9, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingBattersFaced;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'l':
                                                            if ((String.Compare(json_string.getData(), 18, "ownSaves", 0, 8, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingBlownSaves;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'C':
                                                    if ((String.Compare(json_string.getData(), 17, "ompleteGames", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingCompleteGames;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'D':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 18, "rtBallsThrown", 0, 13, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingDirtBallsThrown;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 18, "ublesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingDoublesAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'E':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(json_string.getData(), 18, "rnedRun", 0, 7, false) == 0)
                                                              {
                                                                switch (json_string.getData()[25])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(json_string.getData(), 26, "verage", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingEarnedRunAverage;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(json_string.getData(), 26, "Allowed", 0, 7, false) == 0) && (json_string.getData().Length == 33))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingEarnedRunsAllowed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 18, "rors", 0, 4, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingErrors;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'F':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 18, "eldersChoice", 0, 12, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingFieldersChoice;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'l':
                                                            if (String.Compare(json_string.getData(), 18, "yOuts", 0, 5, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 23)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingFlyOuts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[23])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(json_string.getData(), 24, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 38))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingFlyOutsIntoDoublePlays;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 18, "ulBalls", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingFoulBalls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'G':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(json_string.getData(), 18, "mes", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'F':
                                                                        if ((String.Compare(json_string.getData(), 22, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGamesFinished;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 22, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 27))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGamesPlayed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(json_string.getData(), 22, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGamesStarted;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(json_string.getData(), 18, "ound", 0, 4, false) == 0)
                                                              {
                                                                switch (json_string.getData()[22])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 23, "allToFlyBallRatio", 0, 17, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGroundBallToFlyBallRatio;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'O':
                                                                        if (String.Compare(json_string.getData(), 23, "uts", 0, 3, false) == 0)
                                                                          {
                                                                            if (json_string.getData().Length == 26)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGroundOuts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[26])
                                                                              {
                                                                                case 'I':
                                                                                    if ((String.Compare(json_string.getData(), 27, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 41))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingGroundOutsIntoDoublePlays;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'H':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(json_string.getData(), 18, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[19])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 20, "atters", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingHitBatters;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(json_string.getData(), 20, "Allowed", 0, 7, false) == 0) && (json_string.getData().Length == 27))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingHitsAllowed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'l':
                                                                    if ((String.Compare(json_string.getData(), 19, "ds", 0, 2, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingHolds;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'm':
                                                                    if ((String.Compare(json_string.getData(), 19, "eRunsAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingHomeRunsAllowed;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'I':
                                                    if (String.Compare(json_string.getData(), 17, "n", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[18])
                                                          {
                                                            case 'n':
                                                                if (String.Compare(json_string.getData(), 19, "ingsPitched", 0, 11, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[30])
                                                                      {
                                                                        case 'C':
                                                                            if ((String.Compare(json_string.getData(), 31, "ompletePartial", 0, 14, false) == 0) && (json_string.getData().Length == 45))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingInningsPitchedCompletePartial;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(json_string.getData(), 31, "otalOuts", 0, 8, false) == 0) && (json_string.getData().Length == 39))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingInningsPitchedTotalOuts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if (String.Compare(json_string.getData(), 19, "entional", 0, 8, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[27])
                                                                      {
                                                                        case 'B':
                                                                            if ((String.Compare(json_string.getData(), 28, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 32))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingIntentionalBalls;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'W':
                                                                            if ((String.Compare(json_string.getData(), 28, "alks", 0, 4, false) == 0) && (json_string.getData().Length == 32))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingIntentionalWalks;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'L':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'i':
                                                            if (String.Compare(json_string.getData(), 18, "neOuts", 0, 6, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 24)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingLineOuts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[24])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(json_string.getData(), 25, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 39))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingLineOutsIntoDoublePlays;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 18, "sses", 0, 4, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingLosses;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'O':
                                                    if (String.Compare(json_string.getData(), 17, "pponent", 0, 7, false) == 0)
                                                      {
                                                        switch (json_string.getData()[24])
                                                          {
                                                            case 'R':
                                                                if ((String.Compare(json_string.getData(), 25, "unnersLeftOnBase", 0, 16, false) == 0) && (json_string.getData().Length == 41))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingOpponentRunnersLeftOnBase;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 's':
                                                                if ((String.Compare(json_string.getData(), 25, "BattingAverage", 0, 14, false) == 0) && (json_string.getData().Length == 39))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingOpponentsBattingAverage;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'P':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'i':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'c':
                                                                    if ((String.Compare(json_string.getData(), 19, "koffs", 0, 5, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingPickoffs;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 't':
                                                                    if ((String.Compare(json_string.getData(), 19, "chCount", 0, 7, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingPitchCount;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 18, "pOutsForced", 0, 11, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingPopOutsForced;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'Q':
                                                    if ((String.Compare(json_string.getData(), 17, "ualityStarts", 0, 12, false) == 0) && (json_string.getData().Length == 29))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingQualityStarts;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'R':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 18, "achedOnError", 0, 12, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingReachedOnError;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'u':
                                                            if ((String.Compare(json_string.getData(), 18, "nnersCaughtStealing", 0, 19, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingRunnersCaughtStealing;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'S':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'c':
                                                                    if (String.Compare(json_string.getData(), 19, "rifice", 0, 6, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[25])
                                                                          {
                                                                            case 'F':
                                                                                if ((String.Compare(json_string.getData(), 26, "lys", 0, 3, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingSacrificeFlys;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'H':
                                                                                if ((String.Compare(json_string.getData(), 26, "its", 0, 3, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingSacrificeHits;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(json_string.getData(), 19, "e", 0, 1, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'O':
                                                                                if ((String.Compare(json_string.getData(), 21, "pportunities", 0, 12, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingSaveOpportunities;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 's':
                                                                                if (json_string.getData().Length == 21)
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingSaves;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'h':
                                                            if ((String.Compare(json_string.getData(), 18, "utouts", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingShutouts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 18, "nglesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingSinglesAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 't':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'o':
                                                                    if ((String.Compare(json_string.getData(), 19, "lenBasesAllowed", 0, 15, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStolenBasesAllowed;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'r':
                                                                    if (String.Compare(json_string.getData(), 19, "ike", 0, 3, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case 'o':
                                                                                if (String.Compare(json_string.getData(), 23, "uts", 0, 3, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[26])
                                                                                      {
                                                                                        case 'L':
                                                                                            if ((String.Compare(json_string.getData(), 27, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikeoutsLooking;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'P':
                                                                                            if (String.Compare(json_string.getData(), 27, "er", 0, 2, false) == 0)
                                                                                              {
                                                                                                switch (json_string.getData()[29])
                                                                                                  {
                                                                                                    case '9':
                                                                                                        if ((String.Compare(json_string.getData(), 30, "Innings", 0, 7, false) == 0) && (json_string.getData().Length == 37))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPer9Innings;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    case 'W':
                                                                                                        if ((String.Compare(json_string.getData(), 30, "alk", 0, 3, false) == 0) && (json_string.getData().Length == 33))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPerWalk;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 'S':
                                                                                            if ((String.Compare(json_string.getData(), 27, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 34))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikeoutsSwinging;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 's':
                                                                                switch (json_string.getData()[23])
                                                                                  {
                                                                                    case 'L':
                                                                                        if ((String.Compare(json_string.getData(), 24, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikesLooking;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'S':
                                                                                        if ((String.Compare(json_string.getData(), 24, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingStrikesSwinging;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'T':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(json_string.getData(), 18, "tal", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'B':
                                                                        if ((String.Compare(json_string.getData(), 22, "asesAllowed", 0, 11, false) == 0) && (json_string.getData().Length == 33))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingTotalBasesAllowed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(json_string.getData(), 22, "unsAllowed", 0, 10, false) == 0) && (json_string.getData().Length == 32))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingTotalRunsAllowed;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if (String.Compare(json_string.getData(), 22, "trike", 0, 5, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[27])
                                                                              {
                                                                                case 'o':
                                                                                    if ((String.Compare(json_string.getData(), 28, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 31))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingTotalStrikeouts;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 's':
                                                                                    if (json_string.getData().Length == 28)
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingTotalStrikes;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 18, "iplesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingTriplesAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'U':
                                                    if ((String.Compare(json_string.getData(), 17, "nearnedRunsAllowed", 0, 18, false) == 0) && (json_string.getData().Length == 35))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingUnearnedRunsAllowed;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'W':
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'a':
                                                            if (String.Compare(json_string.getData(), 18, "lks", 0, 3, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 21)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingWalks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 22, "lusHitsPerInningPitched", 0, 23, false) == 0) && (json_string.getData().Length == 45))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingWalksPlusHitsPerInningPitched;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'i':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'l':
                                                                    if ((String.Compare(json_string.getData(), 19, "dPitches", 0, 8, false) == 0) && (json_string.getData().Length == 27))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingWildPitches;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'n':
                                                                    if ((String.Compare(json_string.getData(), 19, "s", 0, 1, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BaseballPitchingWins;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'k':
                            if (String.Compare(json_string.getData(), 4, "etball", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[10])
                                  {
                                    case 'A':
                                        if (String.Compare(json_string.getData(), 11, "ssists", 0, 6, false) == 0)
                                          {
                                            if (json_string.getData().Length == 17)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballAssists;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[17])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballAssistsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'T':
                                                    if ((String.Compare(json_string.getData(), 18, "oTurnoverRatio", 0, 14, false) == 0) && (json_string.getData().Length == 32))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballAssistsToTurnoverRatio;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if (String.Compare(json_string.getData(), 11, "locked", 0, 6, false) == 0)
                                          {
                                            switch (json_string.getData()[17])
                                              {
                                                case 'A':
                                                    if (String.Compare(json_string.getData(), 18, "ttempts", 0, 7, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 25)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballBlockedAttempts;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[25])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 26, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballBlockedAttemptsPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'S':
                                                    if (String.Compare(json_string.getData(), 18, "hots", 0, 4, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 22)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballBlockedShots;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[22])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 23, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 29))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballBlockedShotsPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 11, "oachTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 29))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballCoachTechnicalFouls;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'D':
                                        if (String.Compare(json_string.getData(), 11, "efensiveRebounds", 0, 16, false) == 0)
                                          {
                                            if (json_string.getData().Length == 27)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballDefensiveRebounds;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[27])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 28, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 34))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballDefensiveReboundsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'E':
                                        if ((String.Compare(json_string.getData(), 11, "jections", 0, 8, false) == 0) && (json_string.getData().Length == 19))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballEjections;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 12, "stBreakPoints", 0, 13, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 25)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFastBreakPoints;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[25])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 26, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFastBreakPointsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 12, "eldGoal", 0, 7, false) == 0)
                                                  {
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 20, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 27)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFieldGoalAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[27])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 28, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFieldGoalAttemptsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 20, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFieldGoalPercentage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(json_string.getData(), 20, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 24)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFieldGoalsMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[24])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFieldGoalsMadePerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'l':
                                                if (String.Compare(json_string.getData(), 12, "agrantFouls", 0, 11, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 23)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFlagrantFouls;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFlagrantFoulsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(json_string.getData(), 12, "eeThrow", 0, 7, false) == 0)
                                                  {
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 20, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 27)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFreeThrowAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[27])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 28, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFreeThrowAttemptsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 20, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFreeThrowPercentage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(json_string.getData(), 20, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 24)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFreeThrowsMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[24])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballFreeThrowsMadePerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        if (String.Compare(json_string.getData(), 11, "ames", 0, 4, false) == 0)
                                          {
                                            switch (json_string.getData()[15])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 16, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 21))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballGamesPlayed;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'S':
                                                    if ((String.Compare(json_string.getData(), 16, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballGamesStarted;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'M':
                                        if (String.Compare(json_string.getData(), 11, "inutesPlayed", 0, 12, false) == 0)
                                          {
                                            if (json_string.getData().Length == 23)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballMinutesPlayed;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[23])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballMinutesPlayedPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(json_string.getData(), 11, "ffensiveRebounds", 0, 16, false) == 0)
                                          {
                                            if (json_string.getData().Length == 27)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballOffensiveRebounds;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[27])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 28, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 34))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballOffensiveReboundsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'e':
                                                if (String.Compare(json_string.getData(), 12, "rsonalFouls", 0, 11, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 23)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPersonalFouls;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPersonalFoulsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'l':
                                                if ((String.Compare(json_string.getData(), 12, "ayerTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 30))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPlayerTechnicalFouls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if (String.Compare(json_string.getData(), 12, "ints", 0, 4, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 16)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPoints;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'I':
                                                            if (String.Compare(json_string.getData(), 17, "nPaint", 0, 6, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 23)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPointsInPaint;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[23])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPointsInPaintPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(json_string.getData(), 17, "ffTurnovers", 0, 11, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 28)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPointsOffTurnovers;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[28])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 29, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 35))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPointsOffTurnoversPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballPointsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        if (String.Compare(json_string.getData(), 11, "ebounds", 0, 7, false) == 0)
                                          {
                                            if (json_string.getData().Length == 18)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballRebounds;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[18])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballReboundsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'e':
                                                if (String.Compare(json_string.getData(), 12, "condChancePoints", 0, 16, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 28)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballSecondChancePoints;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[28])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 29, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 35))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballSecondChancePointsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if (String.Compare(json_string.getData(), 12, "eals", 0, 4, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 16)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballSteals;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballStealsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 12, "amTechnicalFouls", 0, 16, false) == 0) && (json_string.getData().Length == 28))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTeamTechnicalFouls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'h':
                                                if (String.Compare(json_string.getData(), 12, "reePoint", 0, 8, false) == 0)
                                                  {
                                                    switch (json_string.getData()[20])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 21, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 28)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballThreePointAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[28])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 29, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 35))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballThreePointAttemptsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 21, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballThreePointPercentage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(json_string.getData(), 21, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 25)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballThreePointsMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[25])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 26, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballThreePointsMadePerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'u':
                                                if (String.Compare(json_string.getData(), 12, "rnovers", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTurnovers;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTurnoversPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'w':
                                                if (String.Compare(json_string.getData(), 12, "oPoint", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[18])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 19, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 26)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTwoPointAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[26])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 27, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTwoPointAttemptsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 19, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTwoPointPercentage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(json_string.getData(), 19, "Made", 0, 4, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 23)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTwoPointsMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[23])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_BasketballTwoPointsMadePerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'C':
                if (String.Compare(json_string.getData(), 1, "ricketB", 0, 7, false) == 0)
                  {
                    switch (json_string.getData()[8])
                      {
                        case 'a':
                            if ((String.Compare(json_string.getData(), 9, "ttingRuns", 0, 9, false) == 0) && (json_string.getData().Length == 18))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_CricketBattingRuns;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'o':
                            if ((String.Compare(json_string.getData(), 9, "wlingWickets", 0, 12, false) == 0) && (json_string.getData().Length == 21))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_CricketBowlingWickets;
                                    goto open_enum_is_done;
                                  }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'H':
                if (String.Compare(json_string.getData(), 1, "ockey", 0, 5, false) == 0)
                  {
                    switch (json_string.getData()[6])
                      {
                        case 'A':
                            switch (json_string.getData()[7])
                              {
                                case 's':
                                    if (String.Compare(json_string.getData(), 8, "sists", 0, 5, false) == 0)
                                      {
                                        if (json_string.getData().Length == 13)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyAssists;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[13])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 14, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyAssistsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 8, "erageTimeOnIce", 0, 14, false) == 0) && (json_string.getData().Length == 22))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyAverageTimeOnIce;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'B':
                            if (String.Compare(json_string.getData(), 7, "locked", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[13])
                                  {
                                    case 'A':
                                        if (String.Compare(json_string.getData(), 14, "ttempts", 0, 7, false) == 0)
                                          {
                                            if (json_string.getData().Length == 21)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyBlockedAttempts;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[21])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyBlockedAttemptsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'S':
                                        if (String.Compare(json_string.getData(), 14, "hots", 0, 4, false) == 0)
                                          {
                                            if (json_string.getData().Length == 18)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyBlockedShots;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[18])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyBlockedShotsPerGame;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'E':
                            if (String.Compare(json_string.getData(), 7, "venStrength", 0, 11, false) == 0)
                              {
                                switch (json_string.getData()[18])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 19, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthAssists;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        if (String.Compare(json_string.getData(), 19, "aceoff", 0, 6, false) == 0)
                                          {
                                            switch (json_string.getData()[25])
                                              {
                                                case 'W':
                                                    if ((String.Compare(json_string.getData(), 26, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffWinPerc;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 's':
                                                    if (json_string.getData().Length == 26)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffs;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[26])
                                                      {
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 27, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsLost;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(json_string.getData(), 27, "on", 0, 2, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsWon;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'G':
                                        if ((String.Compare(json_string.getData(), 19, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 23))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthGoals;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'M':
                                        if ((String.Compare(json_string.getData(), 19, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 29))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthMissedShots;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'S':
                                        if ((String.Compare(json_string.getData(), 19, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 29))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthShotsOnGoal;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'T':
                                        if ((String.Compare(json_string.getData(), 19, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 27))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyEvenStrengthTimeOnIce;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            if (String.Compare(json_string.getData(), 7, "aceoff", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[13])
                                  {
                                    case 'W':
                                        if ((String.Compare(json_string.getData(), 14, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyFaceoffWinPerc;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        if (json_string.getData().Length == 14)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyFaceoffs;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[14])
                                          {
                                            case 'L':
                                                if ((String.Compare(json_string.getData(), 15, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyFaceoffsLost;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'W':
                                                if ((String.Compare(json_string.getData(), 15, "on", 0, 2, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyFaceoffsWon;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'G':
                            switch (json_string.getData()[7])
                              {
                                case 'a':
                                    if (String.Compare(json_string.getData(), 8, "me", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'W':
                                                if (String.Compare(json_string.getData(), 11, "inningGoal", 0, 10, false) == 0)
                                                  {
                                                    switch (json_string.getData()[21])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 22, "lag", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGameWinningGoalFlag;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 22)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGameWinningGoals;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                if ((String.Compare(json_string.getData(), 11, "Played", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGamesPlayed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'i':
                                    if (String.Compare(json_string.getData(), 8, "veaways", 0, 7, false) == 0)
                                      {
                                        if (json_string.getData().Length == 15)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGiveaways;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[15])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGiveawaysPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(json_string.getData(), 8, "al", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 's':
                                                if (json_string.getData().Length == 11)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoals;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[11])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 12, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoalsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                if (String.Compare(json_string.getData(), 11, "ending", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'E':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'm':
                                                                    if (String.Compare(json_string.getData(), 19, "ptyNet", 0, 6, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[25])
                                                                          {
                                                                            case 'E':
                                                                                if ((String.Compare(json_string.getData(), 26, "venStrengthGoalsAgainst", 0, 23, false) == 0) && (json_string.getData().Length == 49))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 26, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 37))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 26, "owerPlayGoalsAgainst", 0, 20, false) == 0) && (json_string.getData().Length == 46))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                if (String.Compare(json_string.getData(), 26, "ho", 0, 2, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[28])
                                                                                      {
                                                                                        case 'r':
                                                                                            if ((String.Compare(json_string.getData(), 29, "tHandedGoalsAgainst", 0, 19, false) == 0) && (json_string.getData().Length == 48))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 't':
                                                                                            if ((String.Compare(json_string.getData(), 29, "sAgainst", 0, 8, false) == 0) && (json_string.getData().Length == 37))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShotsAgainst;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'v':
                                                                    if (String.Compare(json_string.getData(), 19, "enStrength", 0, 10, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[29])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 30, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 41))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                switch (json_string.getData()[30])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(json_string.getData(), 31, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (json_string.getData()[33])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(json_string.getData(), 34, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 37))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSavePerc;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (json_string.getData().Length == 34)
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSaves;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(json_string.getData(), 31, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 41))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthShotsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'G':
                                                            if (String.Compare(json_string.getData(), 18, "oalsAgainst", 0, 11, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 29)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainst;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[29])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(json_string.getData(), 30, "verage", 0, 6, false) == 0) && (json_string.getData().Length == 36))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstAverage;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 30, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 36))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 18, "osses", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingLosses;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'O':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'u':
                                                                    if ((String.Compare(json_string.getData(), 19, "tcome", 0, 5, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingOutcome;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(json_string.getData(), 19, "ertimeLosses", 0, 12, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingOvertimeLosses;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'P':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'e':
                                                                    if (String.Compare(json_string.getData(), 19, "nalty", 0, 5, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[24])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 25, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 36))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPenaltyGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                switch (json_string.getData()[25])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(json_string.getData(), 26, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (json_string.getData()[28])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(json_string.getData(), 29, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 32))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPenaltySavePerc;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (json_string.getData().Length == 29)
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPenaltySaves;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(json_string.getData(), 26, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPenaltyShotsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'o':
                                                                    if (String.Compare(json_string.getData(), 19, "werPlay", 0, 7, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[26])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 27, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 38))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                switch (json_string.getData()[27])
                                                                                  {
                                                                                    case 'a':
                                                                                        if (String.Compare(json_string.getData(), 28, "ve", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (json_string.getData()[30])
                                                                                              {
                                                                                                case 'P':
                                                                                                    if ((String.Compare(json_string.getData(), 31, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 34))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySavePerc;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                case 's':
                                                                                                    if (json_string.getData().Length == 31)
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySaves;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    case 'h':
                                                                                        if ((String.Compare(json_string.getData(), 28, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayShotsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'S':
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'a':
                                                                    if (String.Compare(json_string.getData(), 19, "ve", 0, 2, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 22, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingSavePerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 's':
                                                                                if (json_string.getData().Length == 22)
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingSaves;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'h':
                                                                    switch (json_string.getData()[19])
                                                                      {
                                                                        case 'o':
                                                                            switch (json_string.getData()[20])
                                                                              {
                                                                                case 'o':
                                                                                    if (String.Compare(json_string.getData(), 21, "tout", 0, 4, false) == 0)
                                                                                      {
                                                                                        switch (json_string.getData()[25])
                                                                                          {
                                                                                            case 'G':
                                                                                                if ((String.Compare(json_string.getData(), 26, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 37))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShootoutGoalsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            case 'S':
                                                                                                switch (json_string.getData()[26])
                                                                                                  {
                                                                                                    case 'a':
                                                                                                        if (String.Compare(json_string.getData(), 27, "ve", 0, 2, false) == 0)
                                                                                                          {
                                                                                                            switch (json_string.getData()[29])
                                                                                                              {
                                                                                                                case 'P':
                                                                                                                    if ((String.Compare(json_string.getData(), 30, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 33))
                                                                                                                          {
                                                                                                                            the_open_enum.in_known_list = true;
                                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShootoutSavePerc;
                                                                                                                            goto open_enum_is_done;
                                                                                                                          }
                                                                                                                    break;
                                                                                                                case 's':
                                                                                                                    if (json_string.getData().Length == 30)
                                                                                                                          {
                                                                                                                            the_open_enum.in_known_list = true;
                                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShootoutSaves;
                                                                                                                            goto open_enum_is_done;
                                                                                                                          }
                                                                                                                    break;
                                                                                                                default:
                                                                                                                    break;
                                                                                                              }
                                                                                                          }
                                                                                                        break;
                                                                                                    case 'h':
                                                                                                        if ((String.Compare(json_string.getData(), 27, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShootoutShotsAgainst;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                case 'r':
                                                                                    if (String.Compare(json_string.getData(), 21, "tHanded", 0, 7, false) == 0)
                                                                                      {
                                                                                        switch (json_string.getData()[28])
                                                                                          {
                                                                                            case 'G':
                                                                                                if ((String.Compare(json_string.getData(), 29, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 40))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShortHandedGoalsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            case 'S':
                                                                                                switch (json_string.getData()[29])
                                                                                                  {
                                                                                                    case 'a':
                                                                                                        if (String.Compare(json_string.getData(), 30, "ve", 0, 2, false) == 0)
                                                                                                          {
                                                                                                            switch (json_string.getData()[32])
                                                                                                              {
                                                                                                                case 'P':
                                                                                                                    if ((String.Compare(json_string.getData(), 33, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 36))
                                                                                                                          {
                                                                                                                            the_open_enum.in_known_list = true;
                                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSavePerc;
                                                                                                                            goto open_enum_is_done;
                                                                                                                          }
                                                                                                                    break;
                                                                                                                case 's':
                                                                                                                    if (json_string.getData().Length == 33)
                                                                                                                          {
                                                                                                                            the_open_enum.in_known_list = true;
                                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSaves;
                                                                                                                            goto open_enum_is_done;
                                                                                                                          }
                                                                                                                    break;
                                                                                                                default:
                                                                                                                    break;
                                                                                                              }
                                                                                                          }
                                                                                                        break;
                                                                                                    case 'h':
                                                                                                        if ((String.Compare(json_string.getData(), 30, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShortHandedShotsAgainst;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                case 't':
                                                                                    if (String.Compare(json_string.getData(), 21, "sAgainst", 0, 8, false) == 0)
                                                                                      {
                                                                                        if (json_string.getData().Length == 29)
                                                                                          {
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                          }
                                                                                        switch (json_string.getData()[29])
                                                                                          {
                                                                                            case 'P':
                                                                                                if ((String.Compare(json_string.getData(), 30, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 36))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainstPerGame;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case 'u':
                                                                            if (String.Compare(json_string.getData(), 20, "tout", 0, 4, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[24])
                                                                                  {
                                                                                    case 'F':
                                                                                        if ((String.Compare(json_string.getData(), 25, "lag", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShutoutFlag;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 's':
                                                                                        if (json_string.getData().Length == 25)
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingShutouts;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 18, "otal", 0, 4, false) == 0)
                                                              {
                                                                switch (json_string.getData()[22])
                                                                  {
                                                                    case 'G':
                                                                        if ((String.Compare(json_string.getData(), 23, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingTotalGoalsAgainst;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(json_string.getData(), 23, "hotsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingTotalShotsAgainst;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(json_string.getData(), 18, "ins", 0, 3, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyGoaltendingWins;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'H':
                            if (String.Compare(json_string.getData(), 7, "its", 0, 3, false) == 0)
                              {
                                if (json_string.getData().Length == 10)
                                  {
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyHits;
                                        goto open_enum_is_done;
                                      }
                                  }
                                switch (json_string.getData()[10])
                                  {
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 11, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyHitsPerGame;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if (String.Compare(json_string.getData(), 7, "issedShots", 0, 10, false) == 0)
                              {
                                if (json_string.getData().Length == 17)
                                  {
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyMissedShots;
                                        goto open_enum_is_done;
                                      }
                                  }
                                switch (json_string.getData()[17])
                                  {
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyMissedShotsPerGame;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            switch (json_string.getData()[7])
                              {
                                case 'e':
                                    if (String.Compare(json_string.getData(), 8, "nalt", 0, 4, false) == 0)
                                      {
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 13, "es", 0, 2, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 15)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenalties;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltiesPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'y':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'G':
                                                        if ((String.Compare(json_string.getData(), 14, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 18))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltyGoals;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'M':
                                                        if (String.Compare(json_string.getData(), 14, "i", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'n':
                                                                    if (String.Compare(json_string.getData(), 16, "utes", 0, 4, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 20)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltyMinutes;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltyMinutesPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    if ((String.Compare(json_string.getData(), 16, "sedShots", 0, 8, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltyMissedShots;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(json_string.getData(), 14, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPenaltyShotsOnGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'l':
                                    if ((String.Compare(json_string.getData(), 8, "usMinus", 0, 7, false) == 0) && (json_string.getData().Length == 15))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPlusMinus;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    switch (json_string.getData()[8])
                                      {
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 9, "nts", 0, 3, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPoints;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPointsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'w':
                                            if (String.Compare(json_string.getData(), 9, "erPlay", 0, 6, false) == 0)
                                              {
                                                switch (json_string.getData()[15])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(json_string.getData(), 16, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayAssists;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'F':
                                                        if (String.Compare(json_string.getData(), 16, "aceoff", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[22])
                                                              {
                                                                case 'W':
                                                                    if ((String.Compare(json_string.getData(), 23, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 29))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayFaceoffWinPerc;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (json_string.getData().Length == 23)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayFaceoffs;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[23])
                                                                      {
                                                                        case 'L':
                                                                            if ((String.Compare(json_string.getData(), 24, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsLost;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'W':
                                                                            if ((String.Compare(json_string.getData(), 24, "on", 0, 2, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsWon;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'G':
                                                        if ((String.Compare(json_string.getData(), 16, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 20))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayGoals;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'M':
                                                        if ((String.Compare(json_string.getData(), 16, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayMissedShots;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'O':
                                                        if ((String.Compare(json_string.getData(), 16, "pportunities", 0, 12, false) == 0) && (json_string.getData().Length == 28))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayOpportunities;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 16, "oints", 0, 5, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayPoints;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(json_string.getData(), 16, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayShotsOnGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(json_string.getData(), 16, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 24))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyPowerPlayTimeOnIce;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (json_string.getData()[7])
                              {
                                case 'c':
                                    if ((String.Compare(json_string.getData(), 8, "ratches", 0, 7, false) == 0) && (json_string.getData().Length == 15))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyScratches;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'h':
                                    switch (json_string.getData()[8])
                                      {
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 9, "fts", 0, 3, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShifts;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShiftsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            switch (json_string.getData()[9])
                                              {
                                                case 'o':
                                                    if (String.Compare(json_string.getData(), 10, "t", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[11])
                                                          {
                                                            case 'i':
                                                                if ((String.Compare(json_string.getData(), 12, "ngPerc", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShootingPerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                if (String.Compare(json_string.getData(), 12, "ut", 0, 2, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case 'G':
                                                                            if ((String.Compare(json_string.getData(), 15, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 19))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShootoutGoals;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'M':
                                                                            if ((String.Compare(json_string.getData(), 15, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShootoutMissedShots;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(json_string.getData(), 15, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShootoutShotsOnGoal;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'r':
                                                    if (String.Compare(json_string.getData(), 10, "tHanded", 0, 7, false) == 0)
                                                      {
                                                        switch (json_string.getData()[17])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(json_string.getData(), 18, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedAssists;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'F':
                                                                if (String.Compare(json_string.getData(), 18, "aceoff", 0, 6, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[24])
                                                                      {
                                                                        case 'W':
                                                                            if ((String.Compare(json_string.getData(), 25, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedFaceoffWinPerc;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if (json_string.getData().Length == 25)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedFaceoffs;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[25])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(json_string.getData(), 26, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 29))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedFaceoffsLost;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'W':
                                                                                    if ((String.Compare(json_string.getData(), 26, "on", 0, 2, false) == 0) && (json_string.getData().Length == 28))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedFaceoffsWon;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'G':
                                                                if ((String.Compare(json_string.getData(), 18, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 22))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedGoals;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'M':
                                                                if ((String.Compare(json_string.getData(), 18, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedMissedShots;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 18, "oints", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedPoints;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 18, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedShotsOnGoal;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(json_string.getData(), 18, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 26))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShortHandedTimeOnIce;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(json_string.getData(), 10, "sOnGoal", 0, 7, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 17)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShotsOnGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[17])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyShotsOnGoalPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'T':
                            switch (json_string.getData()[7])
                              {
                                case 'a':
                                    if (String.Compare(json_string.getData(), 8, "keaways", 0, 7, false) == 0)
                                      {
                                        if (json_string.getData().Length == 15)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTakeaways;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[15])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTakeawaysPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'e':
                                    if (String.Compare(json_string.getData(), 8, "amPenalt", 0, 8, false) == 0)
                                      {
                                        switch (json_string.getData()[16])
                                          {
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 17, "es", 0, 2, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTeamPenalties;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTeamPenaltiesPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'y':
                                                if (String.Compare(json_string.getData(), 17, "Minutes", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 24)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTeamPenaltyMinutes;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[24])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTeamPenaltyMinutesPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'o':
                                    if (String.Compare(json_string.getData(), 8, "talTimeOnIce", 0, 12, false) == 0)
                                      {
                                        if (json_string.getData().Length == 20)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTotalTimeOnIce;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_HockeyTotalTimeOnIcePerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'S':
                if (String.Compare(json_string.getData(), 1, "occer", 0, 5, false) == 0)
                  {
                    switch (json_string.getData()[6])
                      {
                        case 'B':
                            if ((String.Compare(json_string.getData(), 7, "allPossessions", 0, 14, false) == 0) && (json_string.getData().Length == 21))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerBallPossessions;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'C':
                            switch (json_string.getData()[7])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 8, "rdsGiven", 0, 8, false) == 0) && (json_string.getData().Length == 16))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerCardsGiven;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 8, "rnerKicks", 0, 9, false) == 0) && (json_string.getData().Length == 17))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerCornerKicks;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'F':
                            if ((String.Compare(json_string.getData(), 7, "reeKicks", 0, 8, false) == 0) && (json_string.getData().Length == 15))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerFreeKicks;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'G':
                            if (String.Compare(json_string.getData(), 7, "oal", 0, 3, false) == 0)
                              {
                                switch (json_string.getData()[10])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 11, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalAttempts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'B':
                                                if (String.Compare(json_string.getData(), 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 14, "oot", 0, 3, false) == 0) && (json_string.getData().Length == 17))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByFoot;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(json_string.getData(), 14, "eaders", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByHeaders;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 14, "ime", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[17])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(json_string.getData(), 18, "0To15", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime00To15;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To30", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime16To30;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 18, "1To45", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime31To45;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To60", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime46To60;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(json_string.getData(), 18, "1To75", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime61To75;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To90", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime76To90;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if (String.Compare(json_string.getData(), 12, "onceded", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConceded;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(json_string.getData(), 20, "yTime", 0, 5, false) == 0)
                                                              {
                                                                switch (json_string.getData()[25])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(json_string.getData(), 26, "0To15", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To30", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 26, "1To45", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To60", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(json_string.getData(), 26, "1To75", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To90", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if ((String.Compare(json_string.getData(), 12, "cored", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsScored;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if ((String.Compare(json_string.getData(), 7, "atchesPlayed", 0, 12, false) == 0) && (json_string.getData().Length == 19))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerMatchesPlayed;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'O':
                            switch (json_string.getData()[7])
                              {
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 8, "fsides", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerOffsides;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    if ((String.Compare(json_string.getData(), 8, "nGoals", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerOwnGoals;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (json_string.getData()[7])
                              {
                                case 'h':
                                    if (String.Compare(json_string.getData(), 8, "ots", 0, 3, false) == 0)
                                      {
                                        switch (json_string.getData()[11])
                                          {
                                            case 'B':
                                                if ((String.Compare(json_string.getData(), 12, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsBlocked;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'O':
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'f':
                                                        if ((String.Compare(json_string.getData(), 13, "fGoal", 0, 5, false) == 0) && (json_string.getData().Length == 18))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsOffGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 13, "Goal", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsOnGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(json_string.getData(), 8, "bstituted", 0, 9, false) == 0)
                                      {
                                        switch (json_string.getData()[17])
                                          {
                                            case 'I':
                                                if ((String.Compare(json_string.getData(), 18, "n", 0, 1, false) == 0) && (json_string.getData().Length == 19))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerSubstitutedIn;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'O':
                                                if ((String.Compare(json_string.getData(), 18, "ut", 0, 2, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerSubstitutedOut;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        the_open_enum.in_known_list = false;
        the_open_enum.string_value = json_string.getData();
      open_enum_is_done:;
        setValue(the_open_enum);
      }


    public SportsStatsTypeJSON()
      {
        flagHasValue = false;
      }

    public SportsStatsTypeJSON(TypeValue init_value)
      {
        flagHasValue = true;
        storeValue = init_value;
      }

    public SportsStatsTypeJSON(string init_value)
      {
        flagHasValue = true;
        TypeValueKnownValues known = stringToValue(init_value);
        if (known == TypeValueKnownValues.Value__none)
          {
            storeValue.in_known_list = false;
            storeValue.string_value = init_value;
          }
        else
          {
            storeValue.in_known_list = true;
            storeValue.list_value = known;
          }
      }

    public SportsStatsTypeJSON(TypeValueKnownValues init_value)
      {
        flagHasValue = true;
        Debug.Assert(init_value != TypeValueKnownValues.Value__none);
        storeValue.in_known_list = true;
        storeValue.list_value = init_value;
      }

    public bool  hasValue()
      {
        return flagHasValue;
      }

    public TypeValue  getValue()
      {
        Debug.Assert(flagHasValue);
        return storeValue;
      }

    public string  getValueAsString()
      {
        TypeValue result = getValue();
        if (result.in_known_list)
            return stringFromValue(result.list_value);
        else
            return result.string_value;
      }



    public void setValue(TypeValue new_value)
      {
        flagHasValue = true;
        storeValue = new_value;
      }
    public void setValue(string chars)
      {
        TypeValueKnownValues known = stringToValue(chars);
        TypeValue new_value = new TypeValue();
        if (known == TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setValue(new_value);
      }
    public void setValue(TypeValueKnownValues new_value)
      {
        TypeValue new_full_value = new TypeValue();
        Debug.Assert(new_value != TypeValueKnownValues.Value__none);
        new_full_value.in_known_list = true;
        new_full_value.list_value = new_value;
        setValue(new_full_value);
      }
    public void unsetValue()
      {
        flagHasValue = false;
      }


    public override void write_as_json(JSONHandler handler)
      {
        if (storeValue.in_known_list)
          {
            switch (storeValue.list_value)
              {
                case TypeValueKnownValues.Value_BaseballBaserunningCaughtStealing:
                    handler.string_value("BaseballBaserunningCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningPickoffs:
                    handler.string_value("BaseballBaserunningPickoffs");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningStolenBasePerc:
                    handler.string_value("BaseballBaserunningStolenBasePerc");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningStolenBases:
                    handler.string_value("BaseballBaserunningStolenBases");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingAssists:
                    handler.string_value("BaseballFieldingAssists");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingCompleteGames:
                    handler.string_value("BaseballFieldingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingDoublePlays:
                    handler.string_value("BaseballFieldingDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingErrors:
                    handler.string_value("BaseballFieldingErrors");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingFieldingPercentage:
                    handler.string_value("BaseballFieldingFieldingPercentage");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesFinished:
                    handler.string_value("BaseballFieldingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesPlayed:
                    handler.string_value("BaseballFieldingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesStarted:
                    handler.string_value("BaseballFieldingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingPassedBalls:
                    handler.string_value("BaseballFieldingPassedBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingPutouts:
                    handler.string_value("BaseballFieldingPutouts");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingRangeFactor:
                    handler.string_value("BaseballFieldingRangeFactor");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingTotalChances:
                    handler.string_value("BaseballFieldingTotalChances");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingTriplePlays:
                    handler.string_value("BaseballFieldingTriplePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBats:
                    handler.string_value("BaseballHittingAtBats");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsPerHomeRun:
                    handler.string_value("BaseballHittingAtBatsPerHomeRun");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsPerStrikeout:
                    handler.string_value("BaseballHittingAtBatsPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsWithRunnersInScoringPosition:
                    handler.string_value("BaseballHittingAtBatsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBalls:
                    handler.string_value("BaseballHittingBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBallsInPlay:
                    handler.string_value("BaseballHittingBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBattingAverage:
                    handler.string_value("BaseballHittingBattingAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBattingAverageOnBallsInPlay:
                    handler.string_value("BaseballHittingBattingAverageOnBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingCompleteGames:
                    handler.string_value("BaseballHittingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingCycles:
                    handler.string_value("BaseballHittingCycles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingDirtBallsFaced:
                    handler.string_value("BaseballHittingDirtBallsFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingDoubles:
                    handler.string_value("BaseballHittingDoubles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingEarnedRunsScored:
                    handler.string_value("BaseballHittingEarnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingExtraBaseHits:
                    handler.string_value("BaseballHittingExtraBaseHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFieldersChoice:
                    handler.string_value("BaseballHittingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyBalls:
                    handler.string_value("BaseballHittingFlyBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyOuts:
                    handler.string_value("BaseballHittingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyOutsIntoDoublePlays:
                    handler.string_value("BaseballHittingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFoulBalls:
                    handler.string_value("BaseballHittingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesFinished:
                    handler.string_value("BaseballHittingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesPlayed:
                    handler.string_value("BaseballHittingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesStarted:
                    handler.string_value("BaseballHittingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundBallToFlyBallRatio:
                    handler.string_value("BaseballHittingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundBalls:
                    handler.string_value("BaseballHittingGroundBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundOuts:
                    handler.string_value("BaseballHittingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundedIntoDoublePlay:
                    handler.string_value("BaseballHittingGroundedIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHitByPitch:
                    handler.string_value("BaseballHittingHitByPitch");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHits:
                    handler.string_value("BaseballHittingHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHitsWithRunnersInScoringPosition:
                    handler.string_value("BaseballHittingHitsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHomeRuns:
                    handler.string_value("BaseballHittingHomeRuns");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIntentionalBalls:
                    handler.string_value("BaseballHittingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIntentionalWalks:
                    handler.string_value("BaseballHittingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIsolatedPower:
                    handler.string_value("BaseballHittingIsolatedPower");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineDrives:
                    handler.string_value("BaseballHittingLineDrives");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineOuts:
                    handler.string_value("BaseballHittingLineOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineOutsIntoDoublePlay:
                    handler.string_value("BaseballHittingLineOutsIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingOnBasePlusSluggingPerc:
                    handler.string_value("BaseballHittingOnBasePlusSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingOnBasePerc:
                    handler.string_value("BaseballHittingOnBasePerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPitchesFaced:
                    handler.string_value("BaseballHittingPitchesFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPlateAppearances:
                    handler.string_value("BaseballHittingPlateAppearances");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPopOuts:
                    handler.string_value("BaseballHittingPopOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPopUps:
                    handler.string_value("BaseballHittingPopUps");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingReachedOnError:
                    handler.string_value("BaseballHittingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBase:
                    handler.string_value("BaseballHittingRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                    handler.string_value("BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunsBattedIn:
                    handler.string_value("BaseballHittingRunsBattedIn");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunsBattedInWithTwoOuts:
                    handler.string_value("BaseballHittingRunsBattedInWithTwoOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSacrificeFlys:
                    handler.string_value("BaseballHittingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSacrificeHits:
                    handler.string_value("BaseballHittingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSecondaryAverage:
                    handler.string_value("BaseballHittingSecondaryAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSingles:
                    handler.string_value("BaseballHittingSingles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSluggingPerc:
                    handler.string_value("BaseballHittingSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikeoutsLooking:
                    handler.string_value("BaseballHittingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikeoutsSwinging:
                    handler.string_value("BaseballHittingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikesLooking:
                    handler.string_value("BaseballHittingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikesSwinging:
                    handler.string_value("BaseballHittingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalBases:
                    handler.string_value("BaseballHittingTotalBases");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalRunsScored:
                    handler.string_value("BaseballHittingTotalRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalStrikeouts:
                    handler.string_value("BaseballHittingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalStrikes:
                    handler.string_value("BaseballHittingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTriples:
                    handler.string_value("BaseballHittingTriples");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingUnearnedRunsScored:
                    handler.string_value("BaseballHittingUnearnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalks:
                    handler.string_value("BaseballHittingWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalksPerPlateAppearance:
                    handler.string_value("BaseballHittingWalksPerPlateAppearance");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalksPerStrikeout:
                    handler.string_value("BaseballHittingWalksPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBalks:
                    handler.string_value("BaseballPitchingBalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBalls:
                    handler.string_value("BaseballPitchingBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBattersFaced:
                    handler.string_value("BaseballPitchingBattersFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBlownSaves:
                    handler.string_value("BaseballPitchingBlownSaves");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingCompleteGames:
                    handler.string_value("BaseballPitchingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingDirtBallsThrown:
                    handler.string_value("BaseballPitchingDirtBallsThrown");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingDoublesAllowed:
                    handler.string_value("BaseballPitchingDoublesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingEarnedRunAverage:
                    handler.string_value("BaseballPitchingEarnedRunAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingEarnedRunsAllowed:
                    handler.string_value("BaseballPitchingEarnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingErrors:
                    handler.string_value("BaseballPitchingErrors");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFieldersChoice:
                    handler.string_value("BaseballPitchingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFlyOuts:
                    handler.string_value("BaseballPitchingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFlyOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFoulBalls:
                    handler.string_value("BaseballPitchingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesFinished:
                    handler.string_value("BaseballPitchingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesPlayed:
                    handler.string_value("BaseballPitchingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesStarted:
                    handler.string_value("BaseballPitchingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundBallToFlyBallRatio:
                    handler.string_value("BaseballPitchingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundOuts:
                    handler.string_value("BaseballPitchingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingGroundOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHitBatters:
                    handler.string_value("BaseballPitchingHitBatters");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHitsAllowed:
                    handler.string_value("BaseballPitchingHitsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHolds:
                    handler.string_value("BaseballPitchingHolds");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHomeRunsAllowed:
                    handler.string_value("BaseballPitchingHomeRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedCompletePartial:
                    handler.string_value("BaseballPitchingInningsPitchedCompletePartial");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedTotalOuts:
                    handler.string_value("BaseballPitchingInningsPitchedTotalOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingIntentionalBalls:
                    handler.string_value("BaseballPitchingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingIntentionalWalks:
                    handler.string_value("BaseballPitchingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLineOuts:
                    handler.string_value("BaseballPitchingLineOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLineOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingLineOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLosses:
                    handler.string_value("BaseballPitchingLosses");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingOpponentsBattingAverage:
                    handler.string_value("BaseballPitchingOpponentsBattingAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingOpponentRunnersLeftOnBase:
                    handler.string_value("BaseballPitchingOpponentRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPickoffs:
                    handler.string_value("BaseballPitchingPickoffs");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPitchCount:
                    handler.string_value("BaseballPitchingPitchCount");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPopOutsForced:
                    handler.string_value("BaseballPitchingPopOutsForced");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingQualityStarts:
                    handler.string_value("BaseballPitchingQualityStarts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingReachedOnError:
                    handler.string_value("BaseballPitchingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingRunnersCaughtStealing:
                    handler.string_value("BaseballPitchingRunnersCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSacrificeFlys:
                    handler.string_value("BaseballPitchingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSacrificeHits:
                    handler.string_value("BaseballPitchingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSaveOpportunities:
                    handler.string_value("BaseballPitchingSaveOpportunities");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSaves:
                    handler.string_value("BaseballPitchingSaves");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingShutouts:
                    handler.string_value("BaseballPitchingShutouts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSinglesAllowed:
                    handler.string_value("BaseballPitchingSinglesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStolenBasesAllowed:
                    handler.string_value("BaseballPitchingStolenBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsLooking:
                    handler.string_value("BaseballPitchingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPer9Innings:
                    handler.string_value("BaseballPitchingStrikeoutsPer9Innings");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPerWalk:
                    handler.string_value("BaseballPitchingStrikeoutsPerWalk");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsSwinging:
                    handler.string_value("BaseballPitchingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikesLooking:
                    handler.string_value("BaseballPitchingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikesSwinging:
                    handler.string_value("BaseballPitchingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalBasesAllowed:
                    handler.string_value("BaseballPitchingTotalBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalRunsAllowed:
                    handler.string_value("BaseballPitchingTotalRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalStrikeouts:
                    handler.string_value("BaseballPitchingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalStrikes:
                    handler.string_value("BaseballPitchingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTriplesAllowed:
                    handler.string_value("BaseballPitchingTriplesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingUnearnedRunsAllowed:
                    handler.string_value("BaseballPitchingUnearnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWalks:
                    handler.string_value("BaseballPitchingWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWalksPlusHitsPerInningPitched:
                    handler.string_value("BaseballPitchingWalksPlusHitsPerInningPitched");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWildPitches:
                    handler.string_value("BaseballPitchingWildPitches");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWins:
                    handler.string_value("BaseballPitchingWins");
                    break;
                case TypeValueKnownValues.Value_HockeyAssists:
                    handler.string_value("HockeyAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyAssistsPerGame:
                    handler.string_value("HockeyAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyAverageTimeOnIce:
                    handler.string_value("HockeyAverageTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedAttempts:
                    handler.string_value("HockeyBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedAttemptsPerGame:
                    handler.string_value("HockeyBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedShots:
                    handler.string_value("HockeyBlockedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedShotsPerGame:
                    handler.string_value("HockeyBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthAssists:
                    handler.string_value("HockeyEvenStrengthAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffWinPerc:
                    handler.string_value("HockeyEvenStrengthFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffs:
                    handler.string_value("HockeyEvenStrengthFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsLost:
                    handler.string_value("HockeyEvenStrengthFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsWon:
                    handler.string_value("HockeyEvenStrengthFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthGoals:
                    handler.string_value("HockeyEvenStrengthGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthMissedShots:
                    handler.string_value("HockeyEvenStrengthMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthShotsOnGoal:
                    handler.string_value("HockeyEvenStrengthShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthTimeOnIce:
                    handler.string_value("HockeyEvenStrengthTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffWinPerc:
                    handler.string_value("HockeyFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffs:
                    handler.string_value("HockeyFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffsWon:
                    handler.string_value("HockeyFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffsLost:
                    handler.string_value("HockeyFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyGameWinningGoalFlag:
                    handler.string_value("HockeyGameWinningGoalFlag");
                    break;
                case TypeValueKnownValues.Value_HockeyGameWinningGoals:
                    handler.string_value("HockeyGameWinningGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyGamesPlayed:
                    handler.string_value("HockeyGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_HockeyGiveaways:
                    handler.string_value("HockeyGiveaways");
                    break;
                case TypeValueKnownValues.Value_HockeyGiveawaysPerGame:
                    handler.string_value("HockeyGiveawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoals:
                    handler.string_value("HockeyGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyGoalsPerGame:
                    handler.string_value("HockeyGoalsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyHits:
                    handler.string_value("HockeyHits");
                    break;
                case TypeValueKnownValues.Value_HockeyHitsPerGame:
                    handler.string_value("HockeyHitsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyMissedShots:
                    handler.string_value("HockeyMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyMissedShotsPerGame:
                    handler.string_value("HockeyMissedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenalties:
                    handler.string_value("HockeyPenalties");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltiesPerGame:
                    handler.string_value("HockeyPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyGoals:
                    handler.string_value("HockeyPenaltyGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMinutes:
                    handler.string_value("HockeyPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMinutesPerGame:
                    handler.string_value("HockeyPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMissedShots:
                    handler.string_value("HockeyPenaltyMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyShotsOnGoal:
                    handler.string_value("HockeyPenaltyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyPlusMinus:
                    handler.string_value("HockeyPlusMinus");
                    break;
                case TypeValueKnownValues.Value_HockeyPoints:
                    handler.string_value("HockeyPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyPointsPerGame:
                    handler.string_value("HockeyPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayAssists:
                    handler.string_value("HockeyPowerPlayAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffWinPerc:
                    handler.string_value("HockeyPowerPlayFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffs:
                    handler.string_value("HockeyPowerPlayFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsLost:
                    handler.string_value("HockeyPowerPlayFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsWon:
                    handler.string_value("HockeyPowerPlayFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayGoals:
                    handler.string_value("HockeyPowerPlayGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayMissedShots:
                    handler.string_value("HockeyPowerPlayMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayOpportunities:
                    handler.string_value("HockeyPowerPlayOpportunities");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayPoints:
                    handler.string_value("HockeyPowerPlayPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayShotsOnGoal:
                    handler.string_value("HockeyPowerPlayShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayTimeOnIce:
                    handler.string_value("HockeyPowerPlayTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyScratches:
                    handler.string_value("HockeyScratches");
                    break;
                case TypeValueKnownValues.Value_HockeyShifts:
                    handler.string_value("HockeyShifts");
                    break;
                case TypeValueKnownValues.Value_HockeyShiftsPerGame:
                    handler.string_value("HockeyShiftsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyShootingPerc:
                    handler.string_value("HockeyShootingPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutGoals:
                    handler.string_value("HockeyShootoutGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutMissedShots:
                    handler.string_value("HockeyShootoutMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutShotsOnGoal:
                    handler.string_value("HockeyShootoutShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedAssists:
                    handler.string_value("HockeyShortHandedAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffWinPerc:
                    handler.string_value("HockeyShortHandedFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffs:
                    handler.string_value("HockeyShortHandedFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsLost:
                    handler.string_value("HockeyShortHandedFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsWon:
                    handler.string_value("HockeyShortHandedFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedGoals:
                    handler.string_value("HockeyShortHandedGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedMissedShots:
                    handler.string_value("HockeyShortHandedMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedPoints:
                    handler.string_value("HockeyShortHandedPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedShotsOnGoal:
                    handler.string_value("HockeyShortHandedShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedTimeOnIce:
                    handler.string_value("HockeyShortHandedTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyShotsOnGoal:
                    handler.string_value("HockeyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShotsOnGoalPerGame:
                    handler.string_value("HockeyShotsOnGoalPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTakeaways:
                    handler.string_value("HockeyTakeaways");
                    break;
                case TypeValueKnownValues.Value_HockeyTakeawaysPerGame:
                    handler.string_value("HockeyTakeawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenalties:
                    handler.string_value("HockeyTeamPenalties");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltiesPerGame:
                    handler.string_value("HockeyTeamPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutes:
                    handler.string_value("HockeyTeamPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutesPerGame:
                    handler.string_value("HockeyTeamPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTotalTimeOnIce:
                    handler.string_value("HockeyTotalTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyTotalTimeOnIcePerGame:
                    handler.string_value("HockeyTotalTimeOnIcePerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShotsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSavePerc:
                    handler.string_value("HockeyGoaltendingEvenStrengthSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSaves:
                    handler.string_value("HockeyGoaltendingEvenStrengthSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthShotsAgainst:
                    handler.string_value("HockeyGoaltendingEvenStrengthShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainst:
                    handler.string_value("HockeyGoaltendingGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstAverage:
                    handler.string_value("HockeyGoaltendingGoalsAgainstAverage");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstPerGame:
                    handler.string_value("HockeyGoaltendingGoalsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingLosses:
                    handler.string_value("HockeyGoaltendingLosses");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingOutcome:
                    handler.string_value("HockeyGoaltendingOutcome");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingOvertimeLosses:
                    handler.string_value("HockeyGoaltendingOvertimeLosses");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyGoalsAgainst:
                    handler.string_value("HockeyGoaltendingPenaltyGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySavePerc:
                    handler.string_value("HockeyGoaltendingPenaltySavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySaves:
                    handler.string_value("HockeyGoaltendingPenaltySaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyShotsAgainst:
                    handler.string_value("HockeyGoaltendingPenaltyShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayGoalsAgainst:
                    handler.string_value("HockeyGoaltendingPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySavePerc:
                    handler.string_value("HockeyGoaltendingPowerPlaySavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySaves:
                    handler.string_value("HockeyGoaltendingPowerPlaySaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayShotsAgainst:
                    handler.string_value("HockeyGoaltendingPowerPlayShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingSavePerc:
                    handler.string_value("HockeyGoaltendingSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingSaves:
                    handler.string_value("HockeyGoaltendingSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutGoalsAgainst:
                    handler.string_value("HockeyGoaltendingShootoutGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSavePerc:
                    handler.string_value("HockeyGoaltendingShootoutSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSaves:
                    handler.string_value("HockeyGoaltendingShootoutSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutShotsAgainst:
                    handler.string_value("HockeyGoaltendingShootoutShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedGoalsAgainst:
                    handler.string_value("HockeyGoaltendingShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSavePerc:
                    handler.string_value("HockeyGoaltendingShortHandedSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSaves:
                    handler.string_value("HockeyGoaltendingShortHandedSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedShotsAgainst:
                    handler.string_value("HockeyGoaltendingShortHandedShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainst:
                    handler.string_value("HockeyGoaltendingShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainstPerGame:
                    handler.string_value("HockeyGoaltendingShotsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShutoutFlag:
                    handler.string_value("HockeyGoaltendingShutoutFlag");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShutouts:
                    handler.string_value("HockeyGoaltendingShutouts");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingTotalGoalsAgainst:
                    handler.string_value("HockeyGoaltendingTotalGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingTotalShotsAgainst:
                    handler.string_value("HockeyGoaltendingTotalShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingWins:
                    handler.string_value("HockeyGoaltendingWins");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionAttempts:
                    handler.string_value("AmericanFootball3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversions:
                    handler.string_value("AmericanFootball3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionPerc:
                    handler.string_value("AmericanFootball3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPass:
                    handler.string_value("AmericanFootball3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPenalty:
                    handler.string_value("AmericanFootball3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaRush:
                    handler.string_value("AmericanFootball3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionAttempts:
                    handler.string_value("AmericanFootball4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversions:
                    handler.string_value("AmericanFootball4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionPerc:
                    handler.string_value("AmericanFootball4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPass:
                    handler.string_value("AmericanFootball4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPenalty:
                    handler.string_value("AmericanFootball4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaRush:
                    handler.string_value("AmericanFootball4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGamesPlayed:
                    handler.string_value("AmericanFootballGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGamesStarted:
                    handler.string_value("AmericanFootballGamesStarted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyAttempts:
                    handler.string_value("AmericanFootballGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyPerc:
                    handler.string_value("AmericanFootballGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyTouchdowns:
                    handler.string_value("AmericanFootballGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing10PlusYards:
                    handler.string_value("AmericanFootballPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing20PlusYards:
                    handler.string_value("AmericanFootballPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing30PlusYards:
                    handler.string_value("AmericanFootballPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing40PlusYards:
                    handler.string_value("AmericanFootballPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing50PlusYards:
                    handler.string_value("AmericanFootballPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAttempts:
                    handler.string_value("AmericanFootballPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerCompletion:
                    handler.string_value("AmericanFootballPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerAttempt:
                    handler.string_value("AmericanFootballPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingCompletionPerc:
                    handler.string_value("AmericanFootballPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingCompletions:
                    handler.string_value("AmericanFootballPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing1stDowns:
                    handler.string_value("AmericanFootballPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingGrossYards:
                    handler.string_value("AmericanFootballPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionPerc:
                    handler.string_value("AmericanFootballPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptions:
                    handler.string_value("AmericanFootballPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("AmericanFootballPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingLongestPass:
                    handler.string_value("AmericanFootballPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingNetYards:
                    handler.string_value("AmericanFootballPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingRating:
                    handler.string_value("AmericanFootballPassingRating");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingRedZoneAttempts:
                    handler.string_value("AmericanFootballPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingSacked:
                    handler.string_value("AmericanFootballPassingSacked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingSackedYardsLost:
                    handler.string_value("AmericanFootballPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTackledForSafety:
                    handler.string_value("AmericanFootballPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTotalYards:
                    handler.string_value("AmericanFootballPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTouchdownPerc:
                    handler.string_value("AmericanFootballPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTouchdowns:
                    handler.string_value("AmericanFootballPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving10PlusYards:
                    handler.string_value("AmericanFootballReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving20PlusYards:
                    handler.string_value("AmericanFootballReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving30PlusYards:
                    handler.string_value("AmericanFootballReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving40PlusYards:
                    handler.string_value("AmericanFootballReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving50PlusYards:
                    handler.string_value("AmericanFootballReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingAverageReception:
                    handler.string_value("AmericanFootballReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving1stDowns:
                    handler.string_value("AmericanFootballReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingFumbledOnReception:
                    handler.string_value("AmericanFootballReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingLongestReception:
                    handler.string_value("AmericanFootballReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingReceptions:
                    handler.string_value("AmericanFootballReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingRedZoneTargets:
                    handler.string_value("AmericanFootballReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTargets:
                    handler.string_value("AmericanFootballReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTotalYards:
                    handler.string_value("AmericanFootballReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTouchdowns:
                    handler.string_value("AmericanFootballReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingYardsAfterCompletion:
                    handler.string_value("AmericanFootballReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyAttempts:
                    handler.string_value("AmericanFootballRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyConversions:
                    handler.string_value("AmericanFootballRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyPerc:
                    handler.string_value("AmericanFootballRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing10PlusYards:
                    handler.string_value("AmericanFootballRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing20PlusYards:
                    handler.string_value("AmericanFootballRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing30PlusYards:
                    handler.string_value("AmericanFootballRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing40PlusYards:
                    handler.string_value("AmericanFootballRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing50PlusYards:
                    handler.string_value("AmericanFootballRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingAttempts:
                    handler.string_value("AmericanFootballRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingAverageRush:
                    handler.string_value("AmericanFootballRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing1stDownPerc:
                    handler.string_value("AmericanFootballRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing1stDowns:
                    handler.string_value("AmericanFootballRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingFumbledOnRush:
                    handler.string_value("AmericanFootballRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingLongestRush:
                    handler.string_value("AmericanFootballRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingRedZoneAttempts:
                    handler.string_value("AmericanFootballRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTackledForSafety:
                    handler.string_value("AmericanFootballRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTotalYards:
                    handler.string_value("AmericanFootballRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTouchdowns:
                    handler.string_value("AmericanFootballRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball1stDowns:
                    handler.string_value("AmericanFootball1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsAttempted:
                    handler.string_value("AmericanFootball2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsFailed:
                    handler.string_value("AmericanFootball2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsMade:
                    handler.string_value("AmericanFootball2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsPassing:
                    handler.string_value("AmericanFootball2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsReceiving:
                    handler.string_value("AmericanFootball2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsRushing:
                    handler.string_value("AmericanFootball2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball1PointSafety:
                    handler.string_value("AmericanFootball1PointSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedKicks:
                    handler.string_value("AmericanFootballBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionAttempts:
                    handler.string_value("AmericanFootballConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionsCompleted:
                    handler.string_value("AmericanFootballConversionsCompleted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionsFailed:
                    handler.string_value("AmericanFootballConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballForcedFumbles:
                    handler.string_value("AmericanFootballForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesRecovered:
                    handler.string_value("AmericanFootballFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesRecoveredForTouchdowns:
                    handler.string_value("AmericanFootballFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptions:
                    handler.string_value("AmericanFootballInterceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsLongestInterception:
                    handler.string_value("AmericanFootballInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsTouchdowns:
                    handler.string_value("AmericanFootballInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsYards:
                    handler.string_value("AmericanFootballInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscAssistedTackles:
                    handler.string_value("AmericanFootballMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscCombinedTackles:
                    handler.string_value("AmericanFootballMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscForcedFumbles:
                    handler.string_value("AmericanFootballMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscFumblesRecovered:
                    handler.string_value("AmericanFootballMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscTackles:
                    handler.string_value("AmericanFootballMiscTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassesDefended:
                    handler.string_value("AmericanFootballPassesDefended");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballQuarterbackHits:
                    handler.string_value("AmericanFootballQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSacks:
                    handler.string_value("AmericanFootballSacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSackYards:
                    handler.string_value("AmericanFootballSackYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSafeties:
                    handler.string_value("AmericanFootballSafeties");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsAssistedTackles:
                    handler.string_value("AmericanFootballSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsCombinedTackles:
                    handler.string_value("AmericanFootballSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsForcedFumbles:
                    handler.string_value("AmericanFootballSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsFumblesRecovered:
                    handler.string_value("AmericanFootballSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsTotalTackles:
                    handler.string_value("AmericanFootballSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesAssisted:
                    handler.string_value("AmericanFootballTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesCombined:
                    handler.string_value("AmericanFootballTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesForLoss:
                    handler.string_value("AmericanFootballTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTackles:
                    handler.string_value("AmericanFootballTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn10PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn20PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn30PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn40PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn50PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsAverageReturn:
                    handler.string_value("AmericanFootballBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsLongestReturn:
                    handler.string_value("AmericanFootballBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturns:
                    handler.string_value("AmericanFootballBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTotalYards:
                    handler.string_value("AmericanFootballBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTouchdowns:
                    handler.string_value("AmericanFootballBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted:
                    handler.string_value("AmericanFootballExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttemptedKicking:
                    handler.string_value("AmericanFootballExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted2PointConversion:
                    handler.string_value("AmericanFootballExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsBlocked:
                    handler.string_value("AmericanFootballExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade:
                    handler.string_value("AmericanFootballExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMadeKicking:
                    handler.string_value("AmericanFootballExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade2PointConversion:
                    handler.string_value("AmericanFootballExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsPerc:
                    handler.string_value("AmericanFootballExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns10PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns20PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns30PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns40PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsAverageReturn:
                    handler.string_value("AmericanFootballFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsLongestReturn:
                    handler.string_value("AmericanFootballFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns:
                    handler.string_value("AmericanFootballFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTotalYards:
                    handler.string_value("AmericanFootballFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTouchdowns:
                    handler.string_value("AmericanFootballFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted:
                    handler.string_value("AmericanFootballFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted1to19Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted20to29Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted30to39Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted40to49Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsBlocked:
                    handler.string_value("AmericanFootballFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsLongestMade:
                    handler.string_value("AmericanFootballFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade:
                    handler.string_value("AmericanFootballFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade1to19Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade20to29Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade30to39Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade40to49Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsPerc:
                    handler.string_value("AmericanFootballFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns10PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns20PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns30PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns40PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns50PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsAverageRun:
                    handler.string_value("AmericanFootballKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsFairCatches:
                    handler.string_value("AmericanFootballKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsLongestKickReturn:
                    handler.string_value("AmericanFootballKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsReturns:
                    handler.string_value("AmericanFootballKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsTouchdowns:
                    handler.string_value("AmericanFootballKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsYards:
                    handler.string_value("AmericanFootballKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageGrossYards:
                    handler.string_value("AmericanFootballKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageNetYards:
                    handler.string_value("AmericanFootballKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageReturnYards:
                    handler.string_value("AmericanFootballKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsEndZoneKicks:
                    handler.string_value("AmericanFootballKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsGrossYards:
                    handler.string_value("AmericanFootballKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLine:
                    handler.string_value("AmericanFootballKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsKicks:
                    handler.string_value("AmericanFootballKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsLongestKick:
                    handler.string_value("AmericanFootballKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsNetYards:
                    handler.string_value("AmericanFootballKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("AmericanFootballKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacksPerc:
                    handler.string_value("AmericanFootballKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsReturned:
                    handler.string_value("AmericanFootballKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTotalReturnYards:
                    handler.string_value("AmericanFootballKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacks:
                    handler.string_value("AmericanFootballKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns10PlusYards:
                    handler.string_value("AmericanFootballPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns20PlusYards:
                    handler.string_value("AmericanFootballPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns30PlusYards:
                    handler.string_value("AmericanFootballPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns40PlusYards:
                    handler.string_value("AmericanFootballPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns50PlusYards:
                    handler.string_value("AmericanFootballPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsAverageRun:
                    handler.string_value("AmericanFootballPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsFairCatches:
                    handler.string_value("AmericanFootballPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsLongestKickReturn:
                    handler.string_value("AmericanFootballPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns:
                    handler.string_value("AmericanFootballPuntReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsTouchdowns:
                    handler.string_value("AmericanFootballPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsYards:
                    handler.string_value("AmericanFootballPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageGrossYards:
                    handler.string_value("AmericanFootballPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageNetYards:
                    handler.string_value("AmericanFootballPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageReturnYards:
                    handler.string_value("AmericanFootballPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingBlocked:
                    handler.string_value("AmericanFootballPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingGrossYards:
                    handler.string_value("AmericanFootballPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLine:
                    handler.string_value("AmericanFootballPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingLongestPunt:
                    handler.string_value("AmericanFootballPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingNetYards:
                    handler.string_value("AmericanFootballPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("AmericanFootballPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacksPerc:
                    handler.string_value("AmericanFootballPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingPunts:
                    handler.string_value("AmericanFootballPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingReturnYards:
                    handler.string_value("AmericanFootballPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingReturned:
                    handler.string_value("AmericanFootballPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacks:
                    handler.string_value("AmericanFootballPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesForced:
                    handler.string_value("AmericanFootballFumblesForced");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumbles:
                    handler.string_value("AmericanFootballFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesLost:
                    handler.string_value("AmericanFootballFumblesLost");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentRecovery:
                    handler.string_value("AmericanFootballFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("AmericanFootballFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOutOfBounds:
                    handler.string_value("AmericanFootballFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOwnRecovery:
                    handler.string_value("AmericanFootballFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("AmericanFootballFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOpponentRecovery:
                    handler.string_value("AmericanFootballFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOwnRecovery:
                    handler.string_value("AmericanFootballFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenalties1stDowns:
                    handler.string_value("AmericanFootballPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenalties:
                    handler.string_value("AmericanFootballPenalties");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenaltiesYards:
                    handler.string_value("AmericanFootballPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_BasketballAssists:
                    handler.string_value("BasketballAssists");
                    break;
                case TypeValueKnownValues.Value_BasketballAssistsPerGame:
                    handler.string_value("BasketballAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballAssistsToTurnoverRatio:
                    handler.string_value("BasketballAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedAttempts:
                    handler.string_value("BasketballBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedAttemptsPerGame:
                    handler.string_value("BasketballBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedShots:
                    handler.string_value("BasketballBlockedShots");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedShotsPerGame:
                    handler.string_value("BasketballBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballCoachTechnicalFouls:
                    handler.string_value("BasketballCoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballDefensiveRebounds:
                    handler.string_value("BasketballDefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballDefensiveReboundsPerGame:
                    handler.string_value("BasketballDefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballEjections:
                    handler.string_value("BasketballEjections");
                    break;
                case TypeValueKnownValues.Value_BasketballFastBreakPoints:
                    handler.string_value("BasketballFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_BasketballFastBreakPointsPerGame:
                    handler.string_value("BasketballFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalAttempts:
                    handler.string_value("BasketballFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalAttemptsPerGame:
                    handler.string_value("BasketballFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalPercentage:
                    handler.string_value("BasketballFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalsMade:
                    handler.string_value("BasketballFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalsMadePerGame:
                    handler.string_value("BasketballFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFlagrantFouls:
                    handler.string_value("BasketballFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballFlagrantFoulsPerGame:
                    handler.string_value("BasketballFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowAttempts:
                    handler.string_value("BasketballFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowAttemptsPerGame:
                    handler.string_value("BasketballFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowPercentage:
                    handler.string_value("BasketballFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowsMade:
                    handler.string_value("BasketballFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowsMadePerGame:
                    handler.string_value("BasketballFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballGamesPlayed:
                    handler.string_value("BasketballGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BasketballGamesStarted:
                    handler.string_value("BasketballGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BasketballMinutesPlayed:
                    handler.string_value("BasketballMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_BasketballMinutesPlayedPerGame:
                    handler.string_value("BasketballMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballOffensiveRebounds:
                    handler.string_value("BasketballOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballOffensiveReboundsPerGame:
                    handler.string_value("BasketballOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPersonalFouls:
                    handler.string_value("BasketballPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballPersonalFoulsPerGame:
                    handler.string_value("BasketballPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPoints:
                    handler.string_value("BasketballPoints");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsPerGame:
                    handler.string_value("BasketballPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsInPaint:
                    handler.string_value("BasketballPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsInPaintPerGame:
                    handler.string_value("BasketballPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsOffTurnovers:
                    handler.string_value("BasketballPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsOffTurnoversPerGame:
                    handler.string_value("BasketballPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballRebounds:
                    handler.string_value("BasketballRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballReboundsPerGame:
                    handler.string_value("BasketballReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballSecondChancePoints:
                    handler.string_value("BasketballSecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_BasketballSecondChancePointsPerGame:
                    handler.string_value("BasketballSecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballSteals:
                    handler.string_value("BasketballSteals");
                    break;
                case TypeValueKnownValues.Value_BasketballStealsPerGame:
                    handler.string_value("BasketballStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTeamTechnicalFouls:
                    handler.string_value("BasketballTeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballPlayerTechnicalFouls:
                    handler.string_value("BasketballPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointAttempts:
                    handler.string_value("BasketballThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointAttemptsPerGame:
                    handler.string_value("BasketballThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointPercentage:
                    handler.string_value("BasketballThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointsMade:
                    handler.string_value("BasketballThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointsMadePerGame:
                    handler.string_value("BasketballThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTurnovers:
                    handler.string_value("BasketballTurnovers");
                    break;
                case TypeValueKnownValues.Value_BasketballTurnoversPerGame:
                    handler.string_value("BasketballTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointAttempts:
                    handler.string_value("BasketballTwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointAttemptsPerGame:
                    handler.string_value("BasketballTwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointPercentage:
                    handler.string_value("BasketballTwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointsMade:
                    handler.string_value("BasketballTwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointsMadePerGame:
                    handler.string_value("BasketballTwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_SoccerBallPossessions:
                    handler.string_value("SoccerBallPossessions");
                    break;
                case TypeValueKnownValues.Value_SoccerCardsGiven:
                    handler.string_value("SoccerCardsGiven");
                    break;
                case TypeValueKnownValues.Value_SoccerCornerKicks:
                    handler.string_value("SoccerCornerKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerFreeKicks:
                    handler.string_value("SoccerFreeKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalAttempts:
                    handler.string_value("SoccerGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                    handler.string_value("SoccerGoalsByFoot");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                    handler.string_value("SoccerGoalsByHeaders");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                    handler.string_value("SoccerGoalsByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                    handler.string_value("SoccerGoalsByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                    handler.string_value("SoccerGoalsByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                    handler.string_value("SoccerGoalsByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                    handler.string_value("SoccerGoalsByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                    handler.string_value("SoccerGoalsByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConceded:
                    handler.string_value("SoccerGoalsConceded");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                    handler.string_value("SoccerGoalsConcededByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                    handler.string_value("SoccerGoalsConcededByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                    handler.string_value("SoccerGoalsConcededByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                    handler.string_value("SoccerGoalsConcededByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                    handler.string_value("SoccerGoalsConcededByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                    handler.string_value("SoccerGoalsConcededByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsScored:
                    handler.string_value("SoccerGoalsScored");
                    break;
                case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                    handler.string_value("SoccerMatchesPlayed");
                    break;
                case TypeValueKnownValues.Value_SoccerOffsides:
                    handler.string_value("SoccerOffsides");
                    break;
                case TypeValueKnownValues.Value_SoccerOwnGoals:
                    handler.string_value("SoccerOwnGoals");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsBlocked:
                    handler.string_value("SoccerShotsBlocked");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                    handler.string_value("SoccerShotsOffGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                    handler.string_value("SoccerShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                    handler.string_value("SoccerSubstitutedIn");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                    handler.string_value("SoccerSubstitutedOut");
                    break;
                case TypeValueKnownValues.Value_CricketBattingRuns:
                    handler.string_value("CricketBattingRuns");
                    break;
                case TypeValueKnownValues.Value_CricketBowlingWickets:
                    handler.string_value("CricketBowlingWickets");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        else
          {
                    handler.string_value(storeValue.string_value);
          }
      }
    public override void write_partial_as_json(JSONHandler handler)
      {
        if (storeValue.in_known_list)
          {
            switch (storeValue.list_value)
              {
                case TypeValueKnownValues.Value_BaseballBaserunningCaughtStealing:
                    handler.string_value("BaseballBaserunningCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningPickoffs:
                    handler.string_value("BaseballBaserunningPickoffs");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningStolenBasePerc:
                    handler.string_value("BaseballBaserunningStolenBasePerc");
                    break;
                case TypeValueKnownValues.Value_BaseballBaserunningStolenBases:
                    handler.string_value("BaseballBaserunningStolenBases");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingAssists:
                    handler.string_value("BaseballFieldingAssists");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingCompleteGames:
                    handler.string_value("BaseballFieldingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingDoublePlays:
                    handler.string_value("BaseballFieldingDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingErrors:
                    handler.string_value("BaseballFieldingErrors");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingFieldingPercentage:
                    handler.string_value("BaseballFieldingFieldingPercentage");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesFinished:
                    handler.string_value("BaseballFieldingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesPlayed:
                    handler.string_value("BaseballFieldingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingGamesStarted:
                    handler.string_value("BaseballFieldingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingPassedBalls:
                    handler.string_value("BaseballFieldingPassedBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingPutouts:
                    handler.string_value("BaseballFieldingPutouts");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingRangeFactor:
                    handler.string_value("BaseballFieldingRangeFactor");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingTotalChances:
                    handler.string_value("BaseballFieldingTotalChances");
                    break;
                case TypeValueKnownValues.Value_BaseballFieldingTriplePlays:
                    handler.string_value("BaseballFieldingTriplePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBats:
                    handler.string_value("BaseballHittingAtBats");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsPerHomeRun:
                    handler.string_value("BaseballHittingAtBatsPerHomeRun");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsPerStrikeout:
                    handler.string_value("BaseballHittingAtBatsPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingAtBatsWithRunnersInScoringPosition:
                    handler.string_value("BaseballHittingAtBatsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBalls:
                    handler.string_value("BaseballHittingBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBallsInPlay:
                    handler.string_value("BaseballHittingBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBattingAverage:
                    handler.string_value("BaseballHittingBattingAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingBattingAverageOnBallsInPlay:
                    handler.string_value("BaseballHittingBattingAverageOnBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingCompleteGames:
                    handler.string_value("BaseballHittingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingCycles:
                    handler.string_value("BaseballHittingCycles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingDirtBallsFaced:
                    handler.string_value("BaseballHittingDirtBallsFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingDoubles:
                    handler.string_value("BaseballHittingDoubles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingEarnedRunsScored:
                    handler.string_value("BaseballHittingEarnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingExtraBaseHits:
                    handler.string_value("BaseballHittingExtraBaseHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFieldersChoice:
                    handler.string_value("BaseballHittingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyBalls:
                    handler.string_value("BaseballHittingFlyBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyOuts:
                    handler.string_value("BaseballHittingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFlyOutsIntoDoublePlays:
                    handler.string_value("BaseballHittingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingFoulBalls:
                    handler.string_value("BaseballHittingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesFinished:
                    handler.string_value("BaseballHittingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesPlayed:
                    handler.string_value("BaseballHittingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGamesStarted:
                    handler.string_value("BaseballHittingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundBallToFlyBallRatio:
                    handler.string_value("BaseballHittingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundBalls:
                    handler.string_value("BaseballHittingGroundBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundOuts:
                    handler.string_value("BaseballHittingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingGroundedIntoDoublePlay:
                    handler.string_value("BaseballHittingGroundedIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHitByPitch:
                    handler.string_value("BaseballHittingHitByPitch");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHits:
                    handler.string_value("BaseballHittingHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHitsWithRunnersInScoringPosition:
                    handler.string_value("BaseballHittingHitsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingHomeRuns:
                    handler.string_value("BaseballHittingHomeRuns");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIntentionalBalls:
                    handler.string_value("BaseballHittingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIntentionalWalks:
                    handler.string_value("BaseballHittingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingIsolatedPower:
                    handler.string_value("BaseballHittingIsolatedPower");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineDrives:
                    handler.string_value("BaseballHittingLineDrives");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineOuts:
                    handler.string_value("BaseballHittingLineOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingLineOutsIntoDoublePlay:
                    handler.string_value("BaseballHittingLineOutsIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingOnBasePlusSluggingPerc:
                    handler.string_value("BaseballHittingOnBasePlusSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingOnBasePerc:
                    handler.string_value("BaseballHittingOnBasePerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPitchesFaced:
                    handler.string_value("BaseballHittingPitchesFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPlateAppearances:
                    handler.string_value("BaseballHittingPlateAppearances");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPopOuts:
                    handler.string_value("BaseballHittingPopOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingPopUps:
                    handler.string_value("BaseballHittingPopUps");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingReachedOnError:
                    handler.string_value("BaseballHittingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBase:
                    handler.string_value("BaseballHittingRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                    handler.string_value("BaseballHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunsBattedIn:
                    handler.string_value("BaseballHittingRunsBattedIn");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingRunsBattedInWithTwoOuts:
                    handler.string_value("BaseballHittingRunsBattedInWithTwoOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSacrificeFlys:
                    handler.string_value("BaseballHittingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSacrificeHits:
                    handler.string_value("BaseballHittingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSecondaryAverage:
                    handler.string_value("BaseballHittingSecondaryAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSingles:
                    handler.string_value("BaseballHittingSingles");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingSluggingPerc:
                    handler.string_value("BaseballHittingSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikeoutsLooking:
                    handler.string_value("BaseballHittingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikeoutsSwinging:
                    handler.string_value("BaseballHittingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikesLooking:
                    handler.string_value("BaseballHittingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingStrikesSwinging:
                    handler.string_value("BaseballHittingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalBases:
                    handler.string_value("BaseballHittingTotalBases");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalRunsScored:
                    handler.string_value("BaseballHittingTotalRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalStrikeouts:
                    handler.string_value("BaseballHittingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTotalStrikes:
                    handler.string_value("BaseballHittingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingTriples:
                    handler.string_value("BaseballHittingTriples");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingUnearnedRunsScored:
                    handler.string_value("BaseballHittingUnearnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalks:
                    handler.string_value("BaseballHittingWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalksPerPlateAppearance:
                    handler.string_value("BaseballHittingWalksPerPlateAppearance");
                    break;
                case TypeValueKnownValues.Value_BaseballHittingWalksPerStrikeout:
                    handler.string_value("BaseballHittingWalksPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBalks:
                    handler.string_value("BaseballPitchingBalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBalls:
                    handler.string_value("BaseballPitchingBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBattersFaced:
                    handler.string_value("BaseballPitchingBattersFaced");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingBlownSaves:
                    handler.string_value("BaseballPitchingBlownSaves");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingCompleteGames:
                    handler.string_value("BaseballPitchingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingDirtBallsThrown:
                    handler.string_value("BaseballPitchingDirtBallsThrown");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingDoublesAllowed:
                    handler.string_value("BaseballPitchingDoublesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingEarnedRunAverage:
                    handler.string_value("BaseballPitchingEarnedRunAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingEarnedRunsAllowed:
                    handler.string_value("BaseballPitchingEarnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingErrors:
                    handler.string_value("BaseballPitchingErrors");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFieldersChoice:
                    handler.string_value("BaseballPitchingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFlyOuts:
                    handler.string_value("BaseballPitchingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFlyOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingFoulBalls:
                    handler.string_value("BaseballPitchingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesFinished:
                    handler.string_value("BaseballPitchingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesPlayed:
                    handler.string_value("BaseballPitchingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGamesStarted:
                    handler.string_value("BaseballPitchingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundBallToFlyBallRatio:
                    handler.string_value("BaseballPitchingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundOuts:
                    handler.string_value("BaseballPitchingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingGroundOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingGroundOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHitBatters:
                    handler.string_value("BaseballPitchingHitBatters");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHitsAllowed:
                    handler.string_value("BaseballPitchingHitsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHolds:
                    handler.string_value("BaseballPitchingHolds");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingHomeRunsAllowed:
                    handler.string_value("BaseballPitchingHomeRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedCompletePartial:
                    handler.string_value("BaseballPitchingInningsPitchedCompletePartial");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingInningsPitchedTotalOuts:
                    handler.string_value("BaseballPitchingInningsPitchedTotalOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingIntentionalBalls:
                    handler.string_value("BaseballPitchingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingIntentionalWalks:
                    handler.string_value("BaseballPitchingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLineOuts:
                    handler.string_value("BaseballPitchingLineOuts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLineOutsIntoDoublePlays:
                    handler.string_value("BaseballPitchingLineOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingLosses:
                    handler.string_value("BaseballPitchingLosses");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingOpponentsBattingAverage:
                    handler.string_value("BaseballPitchingOpponentsBattingAverage");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingOpponentRunnersLeftOnBase:
                    handler.string_value("BaseballPitchingOpponentRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPickoffs:
                    handler.string_value("BaseballPitchingPickoffs");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPitchCount:
                    handler.string_value("BaseballPitchingPitchCount");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingPopOutsForced:
                    handler.string_value("BaseballPitchingPopOutsForced");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingQualityStarts:
                    handler.string_value("BaseballPitchingQualityStarts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingReachedOnError:
                    handler.string_value("BaseballPitchingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingRunnersCaughtStealing:
                    handler.string_value("BaseballPitchingRunnersCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSacrificeFlys:
                    handler.string_value("BaseballPitchingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSacrificeHits:
                    handler.string_value("BaseballPitchingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSaveOpportunities:
                    handler.string_value("BaseballPitchingSaveOpportunities");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSaves:
                    handler.string_value("BaseballPitchingSaves");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingShutouts:
                    handler.string_value("BaseballPitchingShutouts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingSinglesAllowed:
                    handler.string_value("BaseballPitchingSinglesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStolenBasesAllowed:
                    handler.string_value("BaseballPitchingStolenBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsLooking:
                    handler.string_value("BaseballPitchingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPer9Innings:
                    handler.string_value("BaseballPitchingStrikeoutsPer9Innings");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsPerWalk:
                    handler.string_value("BaseballPitchingStrikeoutsPerWalk");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikeoutsSwinging:
                    handler.string_value("BaseballPitchingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikesLooking:
                    handler.string_value("BaseballPitchingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingStrikesSwinging:
                    handler.string_value("BaseballPitchingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalBasesAllowed:
                    handler.string_value("BaseballPitchingTotalBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalRunsAllowed:
                    handler.string_value("BaseballPitchingTotalRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalStrikeouts:
                    handler.string_value("BaseballPitchingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTotalStrikes:
                    handler.string_value("BaseballPitchingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingTriplesAllowed:
                    handler.string_value("BaseballPitchingTriplesAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingUnearnedRunsAllowed:
                    handler.string_value("BaseballPitchingUnearnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWalks:
                    handler.string_value("BaseballPitchingWalks");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWalksPlusHitsPerInningPitched:
                    handler.string_value("BaseballPitchingWalksPlusHitsPerInningPitched");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWildPitches:
                    handler.string_value("BaseballPitchingWildPitches");
                    break;
                case TypeValueKnownValues.Value_BaseballPitchingWins:
                    handler.string_value("BaseballPitchingWins");
                    break;
                case TypeValueKnownValues.Value_HockeyAssists:
                    handler.string_value("HockeyAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyAssistsPerGame:
                    handler.string_value("HockeyAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyAverageTimeOnIce:
                    handler.string_value("HockeyAverageTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedAttempts:
                    handler.string_value("HockeyBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedAttemptsPerGame:
                    handler.string_value("HockeyBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedShots:
                    handler.string_value("HockeyBlockedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyBlockedShotsPerGame:
                    handler.string_value("HockeyBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthAssists:
                    handler.string_value("HockeyEvenStrengthAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffWinPerc:
                    handler.string_value("HockeyEvenStrengthFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffs:
                    handler.string_value("HockeyEvenStrengthFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsLost:
                    handler.string_value("HockeyEvenStrengthFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthFaceoffsWon:
                    handler.string_value("HockeyEvenStrengthFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthGoals:
                    handler.string_value("HockeyEvenStrengthGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthMissedShots:
                    handler.string_value("HockeyEvenStrengthMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthShotsOnGoal:
                    handler.string_value("HockeyEvenStrengthShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyEvenStrengthTimeOnIce:
                    handler.string_value("HockeyEvenStrengthTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffWinPerc:
                    handler.string_value("HockeyFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffs:
                    handler.string_value("HockeyFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffsWon:
                    handler.string_value("HockeyFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyFaceoffsLost:
                    handler.string_value("HockeyFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyGameWinningGoalFlag:
                    handler.string_value("HockeyGameWinningGoalFlag");
                    break;
                case TypeValueKnownValues.Value_HockeyGameWinningGoals:
                    handler.string_value("HockeyGameWinningGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyGamesPlayed:
                    handler.string_value("HockeyGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_HockeyGiveaways:
                    handler.string_value("HockeyGiveaways");
                    break;
                case TypeValueKnownValues.Value_HockeyGiveawaysPerGame:
                    handler.string_value("HockeyGiveawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoals:
                    handler.string_value("HockeyGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyGoalsPerGame:
                    handler.string_value("HockeyGoalsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyHits:
                    handler.string_value("HockeyHits");
                    break;
                case TypeValueKnownValues.Value_HockeyHitsPerGame:
                    handler.string_value("HockeyHitsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyMissedShots:
                    handler.string_value("HockeyMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyMissedShotsPerGame:
                    handler.string_value("HockeyMissedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenalties:
                    handler.string_value("HockeyPenalties");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltiesPerGame:
                    handler.string_value("HockeyPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyGoals:
                    handler.string_value("HockeyPenaltyGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMinutes:
                    handler.string_value("HockeyPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMinutesPerGame:
                    handler.string_value("HockeyPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyMissedShots:
                    handler.string_value("HockeyPenaltyMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyPenaltyShotsOnGoal:
                    handler.string_value("HockeyPenaltyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyPlusMinus:
                    handler.string_value("HockeyPlusMinus");
                    break;
                case TypeValueKnownValues.Value_HockeyPoints:
                    handler.string_value("HockeyPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyPointsPerGame:
                    handler.string_value("HockeyPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayAssists:
                    handler.string_value("HockeyPowerPlayAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffWinPerc:
                    handler.string_value("HockeyPowerPlayFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffs:
                    handler.string_value("HockeyPowerPlayFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsLost:
                    handler.string_value("HockeyPowerPlayFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayFaceoffsWon:
                    handler.string_value("HockeyPowerPlayFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayGoals:
                    handler.string_value("HockeyPowerPlayGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayMissedShots:
                    handler.string_value("HockeyPowerPlayMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayOpportunities:
                    handler.string_value("HockeyPowerPlayOpportunities");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayPoints:
                    handler.string_value("HockeyPowerPlayPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayShotsOnGoal:
                    handler.string_value("HockeyPowerPlayShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyPowerPlayTimeOnIce:
                    handler.string_value("HockeyPowerPlayTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyScratches:
                    handler.string_value("HockeyScratches");
                    break;
                case TypeValueKnownValues.Value_HockeyShifts:
                    handler.string_value("HockeyShifts");
                    break;
                case TypeValueKnownValues.Value_HockeyShiftsPerGame:
                    handler.string_value("HockeyShiftsPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyShootingPerc:
                    handler.string_value("HockeyShootingPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutGoals:
                    handler.string_value("HockeyShootoutGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutMissedShots:
                    handler.string_value("HockeyShootoutMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyShootoutShotsOnGoal:
                    handler.string_value("HockeyShootoutShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedAssists:
                    handler.string_value("HockeyShortHandedAssists");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffWinPerc:
                    handler.string_value("HockeyShortHandedFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffs:
                    handler.string_value("HockeyShortHandedFaceoffs");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsLost:
                    handler.string_value("HockeyShortHandedFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedFaceoffsWon:
                    handler.string_value("HockeyShortHandedFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedGoals:
                    handler.string_value("HockeyShortHandedGoals");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedMissedShots:
                    handler.string_value("HockeyShortHandedMissedShots");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedPoints:
                    handler.string_value("HockeyShortHandedPoints");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedShotsOnGoal:
                    handler.string_value("HockeyShortHandedShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShortHandedTimeOnIce:
                    handler.string_value("HockeyShortHandedTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyShotsOnGoal:
                    handler.string_value("HockeyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_HockeyShotsOnGoalPerGame:
                    handler.string_value("HockeyShotsOnGoalPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTakeaways:
                    handler.string_value("HockeyTakeaways");
                    break;
                case TypeValueKnownValues.Value_HockeyTakeawaysPerGame:
                    handler.string_value("HockeyTakeawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenalties:
                    handler.string_value("HockeyTeamPenalties");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltiesPerGame:
                    handler.string_value("HockeyTeamPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutes:
                    handler.string_value("HockeyTeamPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_HockeyTeamPenaltyMinutesPerGame:
                    handler.string_value("HockeyTeamPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyTotalTimeOnIce:
                    handler.string_value("HockeyTotalTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_HockeyTotalTimeOnIcePerGame:
                    handler.string_value("HockeyTotalTimeOnIcePerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShortHandedGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEmptyNetShotsAgainst:
                    handler.string_value("HockeyGoaltendingEmptyNetShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthGoalsAgainst:
                    handler.string_value("HockeyGoaltendingEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSavePerc:
                    handler.string_value("HockeyGoaltendingEvenStrengthSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthSaves:
                    handler.string_value("HockeyGoaltendingEvenStrengthSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingEvenStrengthShotsAgainst:
                    handler.string_value("HockeyGoaltendingEvenStrengthShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainst:
                    handler.string_value("HockeyGoaltendingGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstAverage:
                    handler.string_value("HockeyGoaltendingGoalsAgainstAverage");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingGoalsAgainstPerGame:
                    handler.string_value("HockeyGoaltendingGoalsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingLosses:
                    handler.string_value("HockeyGoaltendingLosses");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingOutcome:
                    handler.string_value("HockeyGoaltendingOutcome");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingOvertimeLosses:
                    handler.string_value("HockeyGoaltendingOvertimeLosses");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyGoalsAgainst:
                    handler.string_value("HockeyGoaltendingPenaltyGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySavePerc:
                    handler.string_value("HockeyGoaltendingPenaltySavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltySaves:
                    handler.string_value("HockeyGoaltendingPenaltySaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPenaltyShotsAgainst:
                    handler.string_value("HockeyGoaltendingPenaltyShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayGoalsAgainst:
                    handler.string_value("HockeyGoaltendingPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySavePerc:
                    handler.string_value("HockeyGoaltendingPowerPlaySavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlaySaves:
                    handler.string_value("HockeyGoaltendingPowerPlaySaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingPowerPlayShotsAgainst:
                    handler.string_value("HockeyGoaltendingPowerPlayShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingSavePerc:
                    handler.string_value("HockeyGoaltendingSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingSaves:
                    handler.string_value("HockeyGoaltendingSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutGoalsAgainst:
                    handler.string_value("HockeyGoaltendingShootoutGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSavePerc:
                    handler.string_value("HockeyGoaltendingShootoutSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutSaves:
                    handler.string_value("HockeyGoaltendingShootoutSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShootoutShotsAgainst:
                    handler.string_value("HockeyGoaltendingShootoutShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedGoalsAgainst:
                    handler.string_value("HockeyGoaltendingShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSavePerc:
                    handler.string_value("HockeyGoaltendingShortHandedSavePerc");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedSaves:
                    handler.string_value("HockeyGoaltendingShortHandedSaves");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShortHandedShotsAgainst:
                    handler.string_value("HockeyGoaltendingShortHandedShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainst:
                    handler.string_value("HockeyGoaltendingShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShotsAgainstPerGame:
                    handler.string_value("HockeyGoaltendingShotsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShutoutFlag:
                    handler.string_value("HockeyGoaltendingShutoutFlag");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingShutouts:
                    handler.string_value("HockeyGoaltendingShutouts");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingTotalGoalsAgainst:
                    handler.string_value("HockeyGoaltendingTotalGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingTotalShotsAgainst:
                    handler.string_value("HockeyGoaltendingTotalShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_HockeyGoaltendingWins:
                    handler.string_value("HockeyGoaltendingWins");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionAttempts:
                    handler.string_value("AmericanFootball3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversions:
                    handler.string_value("AmericanFootball3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionPerc:
                    handler.string_value("AmericanFootball3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPass:
                    handler.string_value("AmericanFootball3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaPenalty:
                    handler.string_value("AmericanFootball3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball3rdDownConversionsViaRush:
                    handler.string_value("AmericanFootball3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionAttempts:
                    handler.string_value("AmericanFootball4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversions:
                    handler.string_value("AmericanFootball4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionPerc:
                    handler.string_value("AmericanFootball4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPass:
                    handler.string_value("AmericanFootball4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaPenalty:
                    handler.string_value("AmericanFootball4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball4thDownConversionsViaRush:
                    handler.string_value("AmericanFootball4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGamesPlayed:
                    handler.string_value("AmericanFootballGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGamesStarted:
                    handler.string_value("AmericanFootballGamesStarted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyAttempts:
                    handler.string_value("AmericanFootballGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyPerc:
                    handler.string_value("AmericanFootballGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballGoalEfficiencyTouchdowns:
                    handler.string_value("AmericanFootballGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing10PlusYards:
                    handler.string_value("AmericanFootballPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing20PlusYards:
                    handler.string_value("AmericanFootballPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing30PlusYards:
                    handler.string_value("AmericanFootballPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing40PlusYards:
                    handler.string_value("AmericanFootballPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing50PlusYards:
                    handler.string_value("AmericanFootballPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAttempts:
                    handler.string_value("AmericanFootballPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerCompletion:
                    handler.string_value("AmericanFootballPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingAverageYardsPerAttempt:
                    handler.string_value("AmericanFootballPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingCompletionPerc:
                    handler.string_value("AmericanFootballPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingCompletions:
                    handler.string_value("AmericanFootballPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassing1stDowns:
                    handler.string_value("AmericanFootballPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingGrossYards:
                    handler.string_value("AmericanFootballPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionPerc:
                    handler.string_value("AmericanFootballPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptions:
                    handler.string_value("AmericanFootballPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("AmericanFootballPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingLongestPass:
                    handler.string_value("AmericanFootballPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingNetYards:
                    handler.string_value("AmericanFootballPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingRating:
                    handler.string_value("AmericanFootballPassingRating");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingRedZoneAttempts:
                    handler.string_value("AmericanFootballPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingSacked:
                    handler.string_value("AmericanFootballPassingSacked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingSackedYardsLost:
                    handler.string_value("AmericanFootballPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTackledForSafety:
                    handler.string_value("AmericanFootballPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTotalYards:
                    handler.string_value("AmericanFootballPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTouchdownPerc:
                    handler.string_value("AmericanFootballPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassingTouchdowns:
                    handler.string_value("AmericanFootballPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving10PlusYards:
                    handler.string_value("AmericanFootballReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving20PlusYards:
                    handler.string_value("AmericanFootballReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving30PlusYards:
                    handler.string_value("AmericanFootballReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving40PlusYards:
                    handler.string_value("AmericanFootballReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving50PlusYards:
                    handler.string_value("AmericanFootballReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingAverageReception:
                    handler.string_value("AmericanFootballReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceiving1stDowns:
                    handler.string_value("AmericanFootballReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingFumbledOnReception:
                    handler.string_value("AmericanFootballReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingLongestReception:
                    handler.string_value("AmericanFootballReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingReceptions:
                    handler.string_value("AmericanFootballReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingRedZoneTargets:
                    handler.string_value("AmericanFootballReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTargets:
                    handler.string_value("AmericanFootballReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTotalYards:
                    handler.string_value("AmericanFootballReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingTouchdowns:
                    handler.string_value("AmericanFootballReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballReceivingYardsAfterCompletion:
                    handler.string_value("AmericanFootballReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyAttempts:
                    handler.string_value("AmericanFootballRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyConversions:
                    handler.string_value("AmericanFootballRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRedZoneEfficiencyPerc:
                    handler.string_value("AmericanFootballRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing10PlusYards:
                    handler.string_value("AmericanFootballRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing20PlusYards:
                    handler.string_value("AmericanFootballRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing30PlusYards:
                    handler.string_value("AmericanFootballRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing40PlusYards:
                    handler.string_value("AmericanFootballRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing50PlusYards:
                    handler.string_value("AmericanFootballRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingAttempts:
                    handler.string_value("AmericanFootballRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingAverageRush:
                    handler.string_value("AmericanFootballRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing1stDownPerc:
                    handler.string_value("AmericanFootballRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushing1stDowns:
                    handler.string_value("AmericanFootballRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingFumbledOnRush:
                    handler.string_value("AmericanFootballRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingLongestRush:
                    handler.string_value("AmericanFootballRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingRedZoneAttempts:
                    handler.string_value("AmericanFootballRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTackledForSafety:
                    handler.string_value("AmericanFootballRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTotalYards:
                    handler.string_value("AmericanFootballRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballRushingTouchdowns:
                    handler.string_value("AmericanFootballRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball1stDowns:
                    handler.string_value("AmericanFootball1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsAttempted:
                    handler.string_value("AmericanFootball2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsFailed:
                    handler.string_value("AmericanFootball2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsMade:
                    handler.string_value("AmericanFootball2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsPassing:
                    handler.string_value("AmericanFootball2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsReceiving:
                    handler.string_value("AmericanFootball2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball2PointConversionsRushing:
                    handler.string_value("AmericanFootball2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_AmericanFootball1PointSafety:
                    handler.string_value("AmericanFootball1PointSafety");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedKicks:
                    handler.string_value("AmericanFootballBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionAttempts:
                    handler.string_value("AmericanFootballConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionsCompleted:
                    handler.string_value("AmericanFootballConversionsCompleted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballConversionsFailed:
                    handler.string_value("AmericanFootballConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballForcedFumbles:
                    handler.string_value("AmericanFootballForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesRecovered:
                    handler.string_value("AmericanFootballFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesRecoveredForTouchdowns:
                    handler.string_value("AmericanFootballFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptions:
                    handler.string_value("AmericanFootballInterceptions");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsLongestInterception:
                    handler.string_value("AmericanFootballInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsTouchdowns:
                    handler.string_value("AmericanFootballInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballInterceptionsYards:
                    handler.string_value("AmericanFootballInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscAssistedTackles:
                    handler.string_value("AmericanFootballMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscCombinedTackles:
                    handler.string_value("AmericanFootballMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscForcedFumbles:
                    handler.string_value("AmericanFootballMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscFumblesRecovered:
                    handler.string_value("AmericanFootballMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballMiscTackles:
                    handler.string_value("AmericanFootballMiscTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPassesDefended:
                    handler.string_value("AmericanFootballPassesDefended");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballQuarterbackHits:
                    handler.string_value("AmericanFootballQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSacks:
                    handler.string_value("AmericanFootballSacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSackYards:
                    handler.string_value("AmericanFootballSackYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSafeties:
                    handler.string_value("AmericanFootballSafeties");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsAssistedTackles:
                    handler.string_value("AmericanFootballSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsCombinedTackles:
                    handler.string_value("AmericanFootballSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsForcedFumbles:
                    handler.string_value("AmericanFootballSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsFumblesRecovered:
                    handler.string_value("AmericanFootballSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballSpecialTeamsTotalTackles:
                    handler.string_value("AmericanFootballSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesAssisted:
                    handler.string_value("AmericanFootballTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesCombined:
                    handler.string_value("AmericanFootballTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTacklesForLoss:
                    handler.string_value("AmericanFootballTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballTackles:
                    handler.string_value("AmericanFootballTackles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturns:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("AmericanFootballBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn10PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn20PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn30PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn40PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturn50PlusYards:
                    handler.string_value("AmericanFootballBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsAverageReturn:
                    handler.string_value("AmericanFootballBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsLongestReturn:
                    handler.string_value("AmericanFootballBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturns:
                    handler.string_value("AmericanFootballBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTotalYards:
                    handler.string_value("AmericanFootballBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballBlockedPuntReturnsTouchdowns:
                    handler.string_value("AmericanFootballBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted:
                    handler.string_value("AmericanFootballExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttemptedKicking:
                    handler.string_value("AmericanFootballExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsAttempted2PointConversion:
                    handler.string_value("AmericanFootballExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsBlocked:
                    handler.string_value("AmericanFootballExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade:
                    handler.string_value("AmericanFootballExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMadeKicking:
                    handler.string_value("AmericanFootballExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsMade2PointConversion:
                    handler.string_value("AmericanFootballExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballExtraPointsPerc:
                    handler.string_value("AmericanFootballExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns10PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns20PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns30PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns40PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsAverageReturn:
                    handler.string_value("AmericanFootballFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsLongestReturn:
                    handler.string_value("AmericanFootballFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturns:
                    handler.string_value("AmericanFootballFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTotalYards:
                    handler.string_value("AmericanFootballFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalReturnsTouchdowns:
                    handler.string_value("AmericanFootballFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted:
                    handler.string_value("AmericanFootballFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted1to19Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted20to29Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted30to39Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted40to49Yards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsAttempted50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsBlocked:
                    handler.string_value("AmericanFootballFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsLongestMade:
                    handler.string_value("AmericanFootballFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade:
                    handler.string_value("AmericanFootballFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade1to19Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade20to29Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade30to39Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade40to49Yards:
                    handler.string_value("AmericanFootballFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsMade50PlusYards:
                    handler.string_value("AmericanFootballFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFieldGoalsPerc:
                    handler.string_value("AmericanFootballFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns10PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns20PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns30PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns40PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturns50PlusYards:
                    handler.string_value("AmericanFootballKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsAverageRun:
                    handler.string_value("AmericanFootballKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsFairCatches:
                    handler.string_value("AmericanFootballKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsLongestKickReturn:
                    handler.string_value("AmericanFootballKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsReturns:
                    handler.string_value("AmericanFootballKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsTouchdowns:
                    handler.string_value("AmericanFootballKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffReturnsYards:
                    handler.string_value("AmericanFootballKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageGrossYards:
                    handler.string_value("AmericanFootballKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageNetYards:
                    handler.string_value("AmericanFootballKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsAverageReturnYards:
                    handler.string_value("AmericanFootballKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsEndZoneKicks:
                    handler.string_value("AmericanFootballKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsGrossYards:
                    handler.string_value("AmericanFootballKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLine:
                    handler.string_value("AmericanFootballKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsKicks:
                    handler.string_value("AmericanFootballKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsLongestKick:
                    handler.string_value("AmericanFootballKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsNetYards:
                    handler.string_value("AmericanFootballKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("AmericanFootballKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacksPerc:
                    handler.string_value("AmericanFootballKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsReturned:
                    handler.string_value("AmericanFootballKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTotalReturnYards:
                    handler.string_value("AmericanFootballKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballKickoffsTouchbacks:
                    handler.string_value("AmericanFootballKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns10PlusYards:
                    handler.string_value("AmericanFootballPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns20PlusYards:
                    handler.string_value("AmericanFootballPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns30PlusYards:
                    handler.string_value("AmericanFootballPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns40PlusYards:
                    handler.string_value("AmericanFootballPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns50PlusYards:
                    handler.string_value("AmericanFootballPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsAverageRun:
                    handler.string_value("AmericanFootballPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsFairCatches:
                    handler.string_value("AmericanFootballPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsLongestKickReturn:
                    handler.string_value("AmericanFootballPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturns:
                    handler.string_value("AmericanFootballPuntReturns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsTouchdowns:
                    handler.string_value("AmericanFootballPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntReturnsYards:
                    handler.string_value("AmericanFootballPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageGrossYards:
                    handler.string_value("AmericanFootballPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageNetYards:
                    handler.string_value("AmericanFootballPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingAverageReturnYards:
                    handler.string_value("AmericanFootballPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingBlocked:
                    handler.string_value("AmericanFootballPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingGrossYards:
                    handler.string_value("AmericanFootballPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLine:
                    handler.string_value("AmericanFootballPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingLongestPunt:
                    handler.string_value("AmericanFootballPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingNetYards:
                    handler.string_value("AmericanFootballPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("AmericanFootballPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacksPerc:
                    handler.string_value("AmericanFootballPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingPunts:
                    handler.string_value("AmericanFootballPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingReturnYards:
                    handler.string_value("AmericanFootballPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingReturned:
                    handler.string_value("AmericanFootballPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPuntingTouchbacks:
                    handler.string_value("AmericanFootballPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesForced:
                    handler.string_value("AmericanFootballFumblesForced");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumbles:
                    handler.string_value("AmericanFootballFumbles");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesLost:
                    handler.string_value("AmericanFootballFumblesLost");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentRecovery:
                    handler.string_value("AmericanFootballFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("AmericanFootballFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOutOfBounds:
                    handler.string_value("AmericanFootballFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOwnRecovery:
                    handler.string_value("AmericanFootballFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("AmericanFootballFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOpponentRecovery:
                    handler.string_value("AmericanFootballFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballFumblesYardsFromOwnRecovery:
                    handler.string_value("AmericanFootballFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenalties1stDowns:
                    handler.string_value("AmericanFootballPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenalties:
                    handler.string_value("AmericanFootballPenalties");
                    break;
                case TypeValueKnownValues.Value_AmericanFootballPenaltiesYards:
                    handler.string_value("AmericanFootballPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_BasketballAssists:
                    handler.string_value("BasketballAssists");
                    break;
                case TypeValueKnownValues.Value_BasketballAssistsPerGame:
                    handler.string_value("BasketballAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballAssistsToTurnoverRatio:
                    handler.string_value("BasketballAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedAttempts:
                    handler.string_value("BasketballBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedAttemptsPerGame:
                    handler.string_value("BasketballBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedShots:
                    handler.string_value("BasketballBlockedShots");
                    break;
                case TypeValueKnownValues.Value_BasketballBlockedShotsPerGame:
                    handler.string_value("BasketballBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballCoachTechnicalFouls:
                    handler.string_value("BasketballCoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballDefensiveRebounds:
                    handler.string_value("BasketballDefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballDefensiveReboundsPerGame:
                    handler.string_value("BasketballDefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballEjections:
                    handler.string_value("BasketballEjections");
                    break;
                case TypeValueKnownValues.Value_BasketballFastBreakPoints:
                    handler.string_value("BasketballFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_BasketballFastBreakPointsPerGame:
                    handler.string_value("BasketballFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalAttempts:
                    handler.string_value("BasketballFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalAttemptsPerGame:
                    handler.string_value("BasketballFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalPercentage:
                    handler.string_value("BasketballFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalsMade:
                    handler.string_value("BasketballFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballFieldGoalsMadePerGame:
                    handler.string_value("BasketballFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFlagrantFouls:
                    handler.string_value("BasketballFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballFlagrantFoulsPerGame:
                    handler.string_value("BasketballFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowAttempts:
                    handler.string_value("BasketballFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowAttemptsPerGame:
                    handler.string_value("BasketballFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowPercentage:
                    handler.string_value("BasketballFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowsMade:
                    handler.string_value("BasketballFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballFreeThrowsMadePerGame:
                    handler.string_value("BasketballFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballGamesPlayed:
                    handler.string_value("BasketballGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_BasketballGamesStarted:
                    handler.string_value("BasketballGamesStarted");
                    break;
                case TypeValueKnownValues.Value_BasketballMinutesPlayed:
                    handler.string_value("BasketballMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_BasketballMinutesPlayedPerGame:
                    handler.string_value("BasketballMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballOffensiveRebounds:
                    handler.string_value("BasketballOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballOffensiveReboundsPerGame:
                    handler.string_value("BasketballOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPersonalFouls:
                    handler.string_value("BasketballPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballPersonalFoulsPerGame:
                    handler.string_value("BasketballPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPoints:
                    handler.string_value("BasketballPoints");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsPerGame:
                    handler.string_value("BasketballPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsInPaint:
                    handler.string_value("BasketballPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsInPaintPerGame:
                    handler.string_value("BasketballPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsOffTurnovers:
                    handler.string_value("BasketballPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_BasketballPointsOffTurnoversPerGame:
                    handler.string_value("BasketballPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballRebounds:
                    handler.string_value("BasketballRebounds");
                    break;
                case TypeValueKnownValues.Value_BasketballReboundsPerGame:
                    handler.string_value("BasketballReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballSecondChancePoints:
                    handler.string_value("BasketballSecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_BasketballSecondChancePointsPerGame:
                    handler.string_value("BasketballSecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballSteals:
                    handler.string_value("BasketballSteals");
                    break;
                case TypeValueKnownValues.Value_BasketballStealsPerGame:
                    handler.string_value("BasketballStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTeamTechnicalFouls:
                    handler.string_value("BasketballTeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballPlayerTechnicalFouls:
                    handler.string_value("BasketballPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointAttempts:
                    handler.string_value("BasketballThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointAttemptsPerGame:
                    handler.string_value("BasketballThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointPercentage:
                    handler.string_value("BasketballThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointsMade:
                    handler.string_value("BasketballThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballThreePointsMadePerGame:
                    handler.string_value("BasketballThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTurnovers:
                    handler.string_value("BasketballTurnovers");
                    break;
                case TypeValueKnownValues.Value_BasketballTurnoversPerGame:
                    handler.string_value("BasketballTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointAttempts:
                    handler.string_value("BasketballTwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointAttemptsPerGame:
                    handler.string_value("BasketballTwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointPercentage:
                    handler.string_value("BasketballTwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointsMade:
                    handler.string_value("BasketballTwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_BasketballTwoPointsMadePerGame:
                    handler.string_value("BasketballTwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_SoccerBallPossessions:
                    handler.string_value("SoccerBallPossessions");
                    break;
                case TypeValueKnownValues.Value_SoccerCardsGiven:
                    handler.string_value("SoccerCardsGiven");
                    break;
                case TypeValueKnownValues.Value_SoccerCornerKicks:
                    handler.string_value("SoccerCornerKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerFreeKicks:
                    handler.string_value("SoccerFreeKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalAttempts:
                    handler.string_value("SoccerGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                    handler.string_value("SoccerGoalsByFoot");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                    handler.string_value("SoccerGoalsByHeaders");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                    handler.string_value("SoccerGoalsByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                    handler.string_value("SoccerGoalsByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                    handler.string_value("SoccerGoalsByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                    handler.string_value("SoccerGoalsByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                    handler.string_value("SoccerGoalsByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                    handler.string_value("SoccerGoalsByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConceded:
                    handler.string_value("SoccerGoalsConceded");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                    handler.string_value("SoccerGoalsConcededByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                    handler.string_value("SoccerGoalsConcededByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                    handler.string_value("SoccerGoalsConcededByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                    handler.string_value("SoccerGoalsConcededByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                    handler.string_value("SoccerGoalsConcededByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                    handler.string_value("SoccerGoalsConcededByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsScored:
                    handler.string_value("SoccerGoalsScored");
                    break;
                case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                    handler.string_value("SoccerMatchesPlayed");
                    break;
                case TypeValueKnownValues.Value_SoccerOffsides:
                    handler.string_value("SoccerOffsides");
                    break;
                case TypeValueKnownValues.Value_SoccerOwnGoals:
                    handler.string_value("SoccerOwnGoals");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsBlocked:
                    handler.string_value("SoccerShotsBlocked");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                    handler.string_value("SoccerShotsOffGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                    handler.string_value("SoccerShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                    handler.string_value("SoccerSubstitutedIn");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                    handler.string_value("SoccerSubstitutedOut");
                    break;
                case TypeValueKnownValues.Value_CricketBattingRuns:
                    handler.string_value("CricketBattingRuns");
                    break;
                case TypeValueKnownValues.Value_CricketBowlingWickets:
                    handler.string_value("CricketBowlingWickets");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        else
          {
                    handler.string_value(storeValue.string_value);
          }
      }

    public static SportsStatsTypeJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write(generator);
            else
                json_value.write(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static SportsStatsTypeJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write_partial_as_json(generator);
            else
                json_value.write_as_json(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static SportsStatsTypeJSON from_text(string text, bool ignore_extras)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            JSONParse.parse_json_value(text, "Text for SportsStatsTypeJSON", generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_file(TextReader fp, string file_name, bool ignore_extras)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            JSONParse.parse_json_value(fp, file_name, generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public abstract class FieldGeneratorValue : JSONStringGenerator
      {
        protected FieldGeneratorValue(string what)
          {
            set_what(what);
          }
        protected FieldGeneratorValue()
          {
          }
        protected override void handle_result(string result)
          {
            TypeValueKnownValues known = stringToValue(result);
            TypeValue new_value = new TypeValue();
            if (known == TypeValueKnownValues.Value__none)
              {
                new_value.in_known_list = false;
                new_value.string_value = result;
              }
            else
              {
                new_value.in_known_list = true;
                new_value.list_value = known;
              }
            handle_result(new_value);
          }
        protected abstract void handle_result(TypeValue result);
      };
    public class FieldHoldingGeneratorValue : FieldGeneratorValue
  {
    protected override void handle_result(TypeValue result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorValue(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeValue value;
  };
    public class FieldHoldingArrayGeneratorValue : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorValue
      {
        private FieldHoldingArrayGeneratorValue top;

        protected override void handle_result(TypeValue result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorValue init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeValue> result)
      {
      }

    public FieldHoldingArrayGeneratorValue(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeValue>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorValue()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeValue>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeValue> value;
  };
    public abstract class Generator : FieldGeneratorValue
      {
        protected override void handle_result(TypeValue new_value)
          {
            SportsStatsTypeJSON result = new SportsStatsTypeJSON();
            result.setValue(new_value);
            handle_result(result);
          }
        protected abstract void handle_result(SportsStatsTypeJSON new_result);
        public Generator(bool ignore_extras) : base("Type SportsStatsType")
          {
          }
        public void set_allow_incomplete(bool new_allow_incomplete)
          {
          }
        public void set_allow_unpolished(bool new_allow_unpolished)
          {
          }
      };
    public class HoldingGenerator : Generator
      {
        protected override void handle_result(SportsStatsTypeJSON  result)
          {
//@@@            Debug.Assert(!have_value);
            have_value = true;
            value = result;
          }

        public HoldingGenerator(String what, bool ignore_extras) : base(ignore_extras)
          {
            have_value = false;
            base.set_what(what);
          }

        public HoldingGenerator(String what) : base(false)
          {
            have_value = false;
            base.set_what(what);
          }

        public override void reset()
          {
            have_value = false;
            base.reset();
          }

        public bool have_value;
        public SportsStatsTypeJSON value;
      };
    public class HoldingArrayGenerator : JSONArrayGenerator
  {
    protected class ElementHandler : Generator
      {
        private HoldingArrayGenerator top;

        protected override void handle_result(SportsStatsTypeJSON  result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(HoldingArrayGenerator init_top, bool ignore_extras) : base(ignore_extras)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<SportsStatsTypeJSON> result)

      {
      }

    public HoldingArrayGenerator(string what, bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<SportsStatsTypeJSON>();
        base.set_what(what);
      }
    public HoldingArrayGenerator(bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        value = new List<SportsStatsTypeJSON>();
        have_value = false;
      }

    public void set_allow_incomplete(bool new_allow_incomplete)
      {
        element_handler.set_allow_incomplete(new_allow_incomplete);
      }

    public void set_allow_unpolished(bool new_allow_unpolished)
      {
        element_handler.set_allow_unpolished(new_allow_unpolished);
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<SportsStatsTypeJSON> value;
  };
  };
