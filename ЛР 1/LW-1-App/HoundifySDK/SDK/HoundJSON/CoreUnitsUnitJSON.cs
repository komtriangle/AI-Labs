/* file "CoreUnitsUnitJSON.cs" */

/* Generated automatically by Classy JSON. */


using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.IO;


public class CoreUnitsUnitJSON : UnitJSON
  {
    public enum TypeTagKnownValues
      {
        Tag_inch,
        Tag_thou,
        Tag_barleycorn,
        Tag_hand,
        Tag_foot,
        Tag_yard,
        Tag_rod,
        Tag_link,
        Tag_chain,
        Tag_furlong,
        Tag_mile,
        Tag_league,
        Tag_nautical_mile,
        Tag_cable,
        Tag_fathom,
        Tag_acre,
        Tag_rood,
        Tag_us_gallon,
        Tag_imperial_gallon,
        Tag_us_dry_gallon,
        Tag_us_quart,
        Tag_imperial_quart,
        Tag_us_dry_quart,
        Tag_us_pint,
        Tag_imperial_pint,
        Tag_us_dry_pint,
        Tag_us_gill,
        Tag_imperial_gill,
        Tag_us_customary_cup,
        Tag_us_legal_cup,
        Tag_metric_cup,
        Tag_imperial_cup,
        Tag_us_fluid_ounce,
        Tag_imperial_fluid_ounce,
        Tag_us_fluid_dram,
        Tag_imperial_fluid_dram,
        Tag_us_fluid_scruple,
        Tag_imperial_fluid_scruple,
        Tag_us_minim,
        Tag_imperial_minim,
        Tag_us_customary_tablespoon,
        Tag_us_legal_tablespoon,
        Tag_australian_tablespoon,
        Tag_us_customary_teaspoon,
        Tag_metric_teaspoon,
        Tag_pound,
        Tag_ounce,
        Tag_troy_ounce,
        Tag_dram,
        Tag_grain,
        Tag_stone,
        Tag_short_hundredweight,
        Tag_long_hundredweight,
        Tag_short_ton,
        Tag_long_ton,
        Tag_oil_barrel,
        Tag_degree_fahrenheit,
        Tag_british_thermal_unit,
        Tag_calorie,
        Tag_kilocalorie,
        Tag_mechanical_horsepower,
        Tag_metric_horsepower,
        Tag_us_bushel,
        Tag_meter,
        Tag_yoctometer,
        Tag_zeptometer,
        Tag_attometer,
        Tag_femtometer,
        Tag_picometer,
        Tag_nanometer,
        Tag_micrometer,
        Tag_millimeter,
        Tag_centimeter,
        Tag_decimeter,
        Tag_decameter,
        Tag_hectometer,
        Tag_kilometer,
        Tag_megameter,
        Tag_gigameter,
        Tag_terameter,
        Tag_petameter,
        Tag_exameter,
        Tag_zettameter,
        Tag_yottameter,
        Tag_gram,
        Tag_yoctogram,
        Tag_zeptogram,
        Tag_attogram,
        Tag_femtogram,
        Tag_picogram,
        Tag_nanogram,
        Tag_microgram,
        Tag_milligram,
        Tag_centigram,
        Tag_decigram,
        Tag_decagram,
        Tag_hectogram,
        Tag_kilogram,
        Tag_megagram,
        Tag_gigagram,
        Tag_teragram,
        Tag_petagram,
        Tag_exagram,
        Tag_zettagram,
        Tag_yottagram,
        Tag_second,
        Tag_yoctosecond,
        Tag_zeptosecond,
        Tag_attosecond,
        Tag_femtosecond,
        Tag_picosecond,
        Tag_nanosecond,
        Tag_microsecond,
        Tag_millisecond,
        Tag_centisecond,
        Tag_decisecond,
        Tag_decasecond,
        Tag_hectosecond,
        Tag_kilosecond,
        Tag_megasecond,
        Tag_gigasecond,
        Tag_terasecond,
        Tag_petasecond,
        Tag_exasecond,
        Tag_zettasecond,
        Tag_yottasecond,
        Tag_ampere,
        Tag_yoctoampere,
        Tag_zeptoampere,
        Tag_attoampere,
        Tag_femtoampere,
        Tag_picoampere,
        Tag_nanoampere,
        Tag_microampere,
        Tag_milliampere,
        Tag_centiampere,
        Tag_deciampere,
        Tag_decaampere,
        Tag_hectoampere,
        Tag_kiloampere,
        Tag_megaampere,
        Tag_gigaampere,
        Tag_teraampere,
        Tag_petaampere,
        Tag_exaampere,
        Tag_zettaampere,
        Tag_yottaampere,
        Tag_kelvin,
        Tag_yoctokelvin,
        Tag_zeptokelvin,
        Tag_attokelvin,
        Tag_femtokelvin,
        Tag_picokelvin,
        Tag_nanokelvin,
        Tag_microkelvin,
        Tag_millikelvin,
        Tag_centikelvin,
        Tag_decikelvin,
        Tag_decakelvin,
        Tag_hectokelvin,
        Tag_kilokelvin,
        Tag_megakelvin,
        Tag_gigakelvin,
        Tag_terakelvin,
        Tag_petakelvin,
        Tag_exakelvin,
        Tag_zettakelvin,
        Tag_yottakelvin,
        Tag_mole,
        Tag_yoctomole,
        Tag_zeptomole,
        Tag_attomole,
        Tag_femtomole,
        Tag_picomole,
        Tag_nanomole,
        Tag_micromole,
        Tag_millimole,
        Tag_centimole,
        Tag_decimole,
        Tag_decamole,
        Tag_hectomole,
        Tag_kilomole,
        Tag_megamole,
        Tag_gigamole,
        Tag_teramole,
        Tag_petamole,
        Tag_examole,
        Tag_zettamole,
        Tag_yottamole,
        Tag_candela,
        Tag_yoctocandela,
        Tag_zeptocandela,
        Tag_attocandela,
        Tag_femtocandela,
        Tag_picocandela,
        Tag_nanocandela,
        Tag_microcandela,
        Tag_millicandela,
        Tag_centicandela,
        Tag_decicandela,
        Tag_decacandela,
        Tag_hectocandela,
        Tag_kilocandela,
        Tag_megacandela,
        Tag_gigacandela,
        Tag_teracandela,
        Tag_petacandela,
        Tag_exacandela,
        Tag_zettacandela,
        Tag_yottacandela,
        Tag_radian,
        Tag_yoctoradian,
        Tag_zeptoradian,
        Tag_attoradian,
        Tag_femtoradian,
        Tag_picoradian,
        Tag_nanoradian,
        Tag_microradian,
        Tag_milliradian,
        Tag_centiradian,
        Tag_deciradian,
        Tag_decaradian,
        Tag_hectoradian,
        Tag_kiloradian,
        Tag_megaradian,
        Tag_gigaradian,
        Tag_teraradian,
        Tag_petaradian,
        Tag_exaradian,
        Tag_zettaradian,
        Tag_yottaradian,
        Tag_steradian,
        Tag_yoctosteradian,
        Tag_zeptosteradian,
        Tag_attosteradian,
        Tag_femtosteradian,
        Tag_picosteradian,
        Tag_nanosteradian,
        Tag_microsteradian,
        Tag_millisteradian,
        Tag_centisteradian,
        Tag_decisteradian,
        Tag_decasteradian,
        Tag_hectosteradian,
        Tag_kilosteradian,
        Tag_megasteradian,
        Tag_gigasteradian,
        Tag_terasteradian,
        Tag_petasteradian,
        Tag_exasteradian,
        Tag_zettasteradian,
        Tag_yottasteradian,
        Tag_hertz,
        Tag_yoctohertz,
        Tag_zeptohertz,
        Tag_attohertz,
        Tag_femtohertz,
        Tag_picohertz,
        Tag_nanohertz,
        Tag_microhertz,
        Tag_millihertz,
        Tag_centihertz,
        Tag_decihertz,
        Tag_decahertz,
        Tag_hectohertz,
        Tag_kilohertz,
        Tag_megahertz,
        Tag_gigahertz,
        Tag_terahertz,
        Tag_petahertz,
        Tag_exahertz,
        Tag_zettahertz,
        Tag_yottahertz,
        Tag_newton,
        Tag_yoctonewton,
        Tag_zeptonewton,
        Tag_attonewton,
        Tag_femtonewton,
        Tag_piconewton,
        Tag_nanonewton,
        Tag_micronewton,
        Tag_millinewton,
        Tag_centinewton,
        Tag_decinewton,
        Tag_decanewton,
        Tag_hectonewton,
        Tag_kilonewton,
        Tag_meganewton,
        Tag_giganewton,
        Tag_teranewton,
        Tag_petanewton,
        Tag_exanewton,
        Tag_zettanewton,
        Tag_yottanewton,
        Tag_pascal,
        Tag_yoctopascal,
        Tag_zeptopascal,
        Tag_attopascal,
        Tag_femtopascal,
        Tag_picopascal,
        Tag_nanopascal,
        Tag_micropascal,
        Tag_millipascal,
        Tag_centipascal,
        Tag_decipascal,
        Tag_decapascal,
        Tag_hectopascal,
        Tag_kilopascal,
        Tag_megapascal,
        Tag_gigapascal,
        Tag_terapascal,
        Tag_petapascal,
        Tag_exapascal,
        Tag_zettapascal,
        Tag_yottapascal,
        Tag_joule,
        Tag_yoctojoule,
        Tag_zeptojoule,
        Tag_attojoule,
        Tag_femtojoule,
        Tag_picojoule,
        Tag_nanojoule,
        Tag_microjoule,
        Tag_millijoule,
        Tag_centijoule,
        Tag_decijoule,
        Tag_decajoule,
        Tag_hectojoule,
        Tag_kilojoule,
        Tag_megajoule,
        Tag_gigajoule,
        Tag_terajoule,
        Tag_petajoule,
        Tag_exajoule,
        Tag_zettajoule,
        Tag_yottajoule,
        Tag_watt,
        Tag_yoctowatt,
        Tag_zeptowatt,
        Tag_attowatt,
        Tag_femtowatt,
        Tag_picowatt,
        Tag_nanowatt,
        Tag_microwatt,
        Tag_milliwatt,
        Tag_centiwatt,
        Tag_deciwatt,
        Tag_decawatt,
        Tag_hectowatt,
        Tag_kilowatt,
        Tag_megawatt,
        Tag_gigawatt,
        Tag_terawatt,
        Tag_petawatt,
        Tag_exawatt,
        Tag_zettawatt,
        Tag_yottawatt,
        Tag_coulomb,
        Tag_yoctocoulomb,
        Tag_zeptocoulomb,
        Tag_attocoulomb,
        Tag_femtocoulomb,
        Tag_picocoulomb,
        Tag_nanocoulomb,
        Tag_microcoulomb,
        Tag_millicoulomb,
        Tag_centicoulomb,
        Tag_decicoulomb,
        Tag_decacoulomb,
        Tag_hectocoulomb,
        Tag_kilocoulomb,
        Tag_megacoulomb,
        Tag_gigacoulomb,
        Tag_teracoulomb,
        Tag_petacoulomb,
        Tag_exacoulomb,
        Tag_zettacoulomb,
        Tag_yottacoulomb,
        Tag_volt,
        Tag_yoctovolt,
        Tag_zeptovolt,
        Tag_attovolt,
        Tag_femtovolt,
        Tag_picovolt,
        Tag_nanovolt,
        Tag_microvolt,
        Tag_millivolt,
        Tag_centivolt,
        Tag_decivolt,
        Tag_decavolt,
        Tag_hectovolt,
        Tag_kilovolt,
        Tag_megavolt,
        Tag_gigavolt,
        Tag_teravolt,
        Tag_petavolt,
        Tag_exavolt,
        Tag_zettavolt,
        Tag_yottavolt,
        Tag_farad,
        Tag_yoctofarad,
        Tag_zeptofarad,
        Tag_attofarad,
        Tag_femtofarad,
        Tag_picofarad,
        Tag_nanofarad,
        Tag_microfarad,
        Tag_millifarad,
        Tag_centifarad,
        Tag_decifarad,
        Tag_decafarad,
        Tag_hectofarad,
        Tag_kilofarad,
        Tag_megafarad,
        Tag_gigafarad,
        Tag_terafarad,
        Tag_petafarad,
        Tag_exafarad,
        Tag_zettafarad,
        Tag_yottafarad,
        Tag_ohm,
        Tag_yoctoohm,
        Tag_zeptoohm,
        Tag_attoohm,
        Tag_femtoohm,
        Tag_picoohm,
        Tag_nanoohm,
        Tag_microohm,
        Tag_milliohm,
        Tag_centiohm,
        Tag_deciohm,
        Tag_decaohm,
        Tag_hectoohm,
        Tag_kiloohm,
        Tag_megaohm,
        Tag_gigaohm,
        Tag_teraohm,
        Tag_petaohm,
        Tag_exaohm,
        Tag_zettaohm,
        Tag_yottaohm,
        Tag_siemens,
        Tag_yoctosiemens,
        Tag_zeptosiemens,
        Tag_attosiemens,
        Tag_femtosiemens,
        Tag_picosiemens,
        Tag_nanosiemens,
        Tag_microsiemens,
        Tag_millisiemens,
        Tag_centisiemens,
        Tag_decisiemens,
        Tag_decasiemens,
        Tag_hectosiemens,
        Tag_kilosiemens,
        Tag_megasiemens,
        Tag_gigasiemens,
        Tag_terasiemens,
        Tag_petasiemens,
        Tag_exasiemens,
        Tag_zettasiemens,
        Tag_yottasiemens,
        Tag_weber,
        Tag_yoctoweber,
        Tag_zeptoweber,
        Tag_attoweber,
        Tag_femtoweber,
        Tag_picoweber,
        Tag_nanoweber,
        Tag_microweber,
        Tag_milliweber,
        Tag_centiweber,
        Tag_deciweber,
        Tag_decaweber,
        Tag_hectoweber,
        Tag_kiloweber,
        Tag_megaweber,
        Tag_gigaweber,
        Tag_teraweber,
        Tag_petaweber,
        Tag_exaweber,
        Tag_zettaweber,
        Tag_yottaweber,
        Tag_tesla,
        Tag_yoctotesla,
        Tag_zeptotesla,
        Tag_attotesla,
        Tag_femtotesla,
        Tag_picotesla,
        Tag_nanotesla,
        Tag_microtesla,
        Tag_millitesla,
        Tag_centitesla,
        Tag_decitesla,
        Tag_decatesla,
        Tag_hectotesla,
        Tag_kilotesla,
        Tag_megatesla,
        Tag_gigatesla,
        Tag_teratesla,
        Tag_petatesla,
        Tag_exatesla,
        Tag_zettatesla,
        Tag_yottatesla,
        Tag_henry,
        Tag_yoctohenry,
        Tag_zeptohenry,
        Tag_attohenry,
        Tag_femtohenry,
        Tag_picohenry,
        Tag_nanohenry,
        Tag_microhenry,
        Tag_millihenry,
        Tag_centihenry,
        Tag_decihenry,
        Tag_decahenry,
        Tag_hectohenry,
        Tag_kilohenry,
        Tag_megahenry,
        Tag_gigahenry,
        Tag_terahenry,
        Tag_petahenry,
        Tag_exahenry,
        Tag_zettahenry,
        Tag_yottahenry,
        Tag_degree_celsius,
        Tag_yoctodegree_celsius,
        Tag_zeptodegree_celsius,
        Tag_attodegree_celsius,
        Tag_femtodegree_celsius,
        Tag_picodegree_celsius,
        Tag_nanodegree_celsius,
        Tag_microdegree_celsius,
        Tag_millidegree_celsius,
        Tag_centidegree_celsius,
        Tag_decidegree_celsius,
        Tag_decadegree_celsius,
        Tag_hectodegree_celsius,
        Tag_kilodegree_celsius,
        Tag_megadegree_celsius,
        Tag_gigadegree_celsius,
        Tag_teradegree_celsius,
        Tag_petadegree_celsius,
        Tag_exadegree_celsius,
        Tag_zettadegree_celsius,
        Tag_yottadegree_celsius,
        Tag_lumen,
        Tag_yoctolumen,
        Tag_zeptolumen,
        Tag_attolumen,
        Tag_femtolumen,
        Tag_picolumen,
        Tag_nanolumen,
        Tag_microlumen,
        Tag_millilumen,
        Tag_centilumen,
        Tag_decilumen,
        Tag_decalumen,
        Tag_hectolumen,
        Tag_kilolumen,
        Tag_megalumen,
        Tag_gigalumen,
        Tag_teralumen,
        Tag_petalumen,
        Tag_exalumen,
        Tag_zettalumen,
        Tag_yottalumen,
        Tag_lux,
        Tag_yoctolux,
        Tag_zeptolux,
        Tag_attolux,
        Tag_femtolux,
        Tag_picolux,
        Tag_nanolux,
        Tag_microlux,
        Tag_millilux,
        Tag_centilux,
        Tag_decilux,
        Tag_decalux,
        Tag_hectolux,
        Tag_kilolux,
        Tag_megalux,
        Tag_gigalux,
        Tag_teralux,
        Tag_petalux,
        Tag_exalux,
        Tag_zettalux,
        Tag_yottalux,
        Tag_becquerel,
        Tag_yoctobecquerel,
        Tag_zeptobecquerel,
        Tag_attobecquerel,
        Tag_femtobecquerel,
        Tag_picobecquerel,
        Tag_nanobecquerel,
        Tag_microbecquerel,
        Tag_millibecquerel,
        Tag_centibecquerel,
        Tag_decibecquerel,
        Tag_decabecquerel,
        Tag_hectobecquerel,
        Tag_kilobecquerel,
        Tag_megabecquerel,
        Tag_gigabecquerel,
        Tag_terabecquerel,
        Tag_petabecquerel,
        Tag_exabecquerel,
        Tag_zettabecquerel,
        Tag_yottabecquerel,
        Tag_gray,
        Tag_yoctogray,
        Tag_zeptogray,
        Tag_attogray,
        Tag_femtogray,
        Tag_picogray,
        Tag_nanogray,
        Tag_microgray,
        Tag_milligray,
        Tag_centigray,
        Tag_decigray,
        Tag_decagray,
        Tag_hectogray,
        Tag_kilogray,
        Tag_megagray,
        Tag_gigagray,
        Tag_teragray,
        Tag_petagray,
        Tag_exagray,
        Tag_zettagray,
        Tag_yottagray,
        Tag_sievert,
        Tag_yoctosievert,
        Tag_zeptosievert,
        Tag_attosievert,
        Tag_femtosievert,
        Tag_picosievert,
        Tag_nanosievert,
        Tag_microsievert,
        Tag_millisievert,
        Tag_centisievert,
        Tag_decisievert,
        Tag_decasievert,
        Tag_hectosievert,
        Tag_kilosievert,
        Tag_megasievert,
        Tag_gigasievert,
        Tag_terasievert,
        Tag_petasievert,
        Tag_exasievert,
        Tag_zettasievert,
        Tag_yottasievert,
        Tag_katal,
        Tag_yoctokatal,
        Tag_zeptokatal,
        Tag_attokatal,
        Tag_femtokatal,
        Tag_picokatal,
        Tag_nanokatal,
        Tag_microkatal,
        Tag_millikatal,
        Tag_centikatal,
        Tag_decikatal,
        Tag_decakatal,
        Tag_hectokatal,
        Tag_kilokatal,
        Tag_megakatal,
        Tag_gigakatal,
        Tag_terakatal,
        Tag_petakatal,
        Tag_exakatal,
        Tag_zettakatal,
        Tag_yottakatal,
        Tag_hectare,
        Tag_liter,
        Tag_yoctoliter,
        Tag_zeptoliter,
        Tag_attoliter,
        Tag_femtoliter,
        Tag_picoliter,
        Tag_nanoliter,
        Tag_microliter,
        Tag_milliliter,
        Tag_centiliter,
        Tag_deciliter,
        Tag_decaliter,
        Tag_hectoliter,
        Tag_kiloliter,
        Tag_megaliter,
        Tag_gigaliter,
        Tag_teraliter,
        Tag_petaliter,
        Tag_exaliter,
        Tag_zettaliter,
        Tag_yottaliter,
        Tag_tonne,
        Tag_yoctotonne,
        Tag_zeptotonne,
        Tag_attotonne,
        Tag_femtotonne,
        Tag_picotonne,
        Tag_nanotonne,
        Tag_microtonne,
        Tag_millitonne,
        Tag_centitonne,
        Tag_decitonne,
        Tag_decatonne,
        Tag_hectotonne,
        Tag_kilotonne,
        Tag_megatonne,
        Tag_gigatonne,
        Tag_teratonne,
        Tag_petatonne,
        Tag_exatonne,
        Tag_zettatonne,
        Tag_yottatonne,
        Tag_astronomical_unit,
        Tag_angstrom,
        Tag_minute,
        Tag_hour,
        Tag_day,
        Tag_week,
        Tag_fortnight,
        Tag_month,
        Tag_year,
        Tag_biennium,
        Tag_triennium,
        Tag_quadrennium,
        Tag_lustrum,
        Tag_decade,
        Tag_century,
        Tag_millennium,
        Tag_sidereal_day,
        Tag_sidereal_year,
        Tag_helek,
        Tag_Planck_time,
        Tag_shake,
        Tag_svedberg,
        Tag_parsec,
        Tag_degree_of_arc,
        Tag__none
      };
    public struct TypeTag
      {
        public bool in_known_list;
        public string string_value;
        public TypeTagKnownValues list_value;
      };

    public static TypeTagKnownValues  stringToTag(string chars)
      {
        switch (chars[0])
          {
            case 'P':
                if ((String.Compare(chars, 1, "lanck_time", 0, 10, false) == 0) && (chars.Length == 11))
                    return TypeTagKnownValues.Tag_Planck_time;
                break;
            case 'a':
                switch (chars[1])
                  {
                    case 'c':
                        if ((String.Compare(chars, 2, "re", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_acre;
                        break;
                    case 'm':
                        if ((String.Compare(chars, 2, "pere", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_ampere;
                        break;
                    case 'n':
                        if ((String.Compare(chars, 2, "gstrom", 0, 6, false) == 0) && (chars.Length == 8))
                            return TypeTagKnownValues.Tag_angstrom;
                        break;
                    case 's':
                        if ((String.Compare(chars, 2, "tronomical_unit", 0, 15, false) == 0) && (chars.Length == 17))
                            return TypeTagKnownValues.Tag_astronomical_unit;
                        break;
                    case 't':
                        if (String.Compare(chars, 2, "to", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_attoampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_attobecquerel;
                                    break;
                                case 'c':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_attocandela;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_attocoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_attodegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_attofarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'm':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_attogram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_attogray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_attohenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_attohertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_attojoule;
                                    break;
                                case 'k':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attokatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_attokelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attoliter;
                                            break;
                                        case 'u':
                                            switch (chars[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_attolumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 7)
                                                        return TypeTagKnownValues.Tag_attolux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attometer;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_attomole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_attonewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_attoohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_attopascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_attoradian;
                                    break;
                                case 's':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_attosecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_attosiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_attosievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_attosteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attotesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attotonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_attovolt;
                                    break;
                                case 'w':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_attowatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_attoweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'u':
                        if ((String.Compare(chars, 2, "stralian_tablespoon", 0, 19, false) == 0) && (chars.Length == 21))
                            return TypeTagKnownValues.Tag_australian_tablespoon;
                        break;
                    default:
                        break;
                  }
                break;
            case 'b':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "rleycorn", 0, 8, false) == 0) && (chars.Length == 10))
                            return TypeTagKnownValues.Tag_barleycorn;
                        break;
                    case 'e':
                        if ((String.Compare(chars, 2, "cquerel", 0, 7, false) == 0) && (chars.Length == 9))
                            return TypeTagKnownValues.Tag_becquerel;
                        break;
                    case 'i':
                        if ((String.Compare(chars, 2, "ennium", 0, 6, false) == 0) && (chars.Length == 8))
                            return TypeTagKnownValues.Tag_biennium;
                        break;
                    case 'r':
                        if ((String.Compare(chars, 2, "itish_thermal_unit", 0, 18, false) == 0) && (chars.Length == 20))
                            return TypeTagKnownValues.Tag_british_thermal_unit;
                        break;
                    default:
                        break;
                  }
                break;
            case 'c':
                switch (chars[1])
                  {
                    case 'a':
                        switch (chars[2])
                          {
                            case 'b':
                                if ((String.Compare(chars, 3, "le", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_cable;
                                break;
                            case 'l':
                                if ((String.Compare(chars, 3, "orie", 0, 4, false) == 0) && (chars.Length == 7))
                                    return TypeTagKnownValues.Tag_calorie;
                                break;
                            case 'n':
                                if ((String.Compare(chars, 3, "dela", 0, 4, false) == 0) && (chars.Length == 7))
                                    return TypeTagKnownValues.Tag_candela;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(chars, 2, "nt", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'i':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_centiampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_centibecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_centicandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_centicoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                return TypeTagKnownValues.Tag_centidegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_centifarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_centigram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_centigray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_centihenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_centihertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_centijoule;
                                            break;
                                        case 'k':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centikatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_centikelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centiliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_centilumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_centilux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centimeter;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_centimole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_centinewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_centiohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_centipascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_centiradian;
                                            break;
                                        case 's':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_centisecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_centisiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_centisievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                        return TypeTagKnownValues.Tag_centisteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centitesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centitonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_centivolt;
                                            break;
                                        case 'w':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_centiwatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_centiweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'u':
                                    if ((String.Compare(chars, 5, "ry", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_century;
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'h':
                        if ((String.Compare(chars, 2, "ain", 0, 3, false) == 0) && (chars.Length == 5))
                            return TypeTagKnownValues.Tag_chain;
                        break;
                    case 'o':
                        if ((String.Compare(chars, 2, "ulomb", 0, 5, false) == 0) && (chars.Length == 7))
                            return TypeTagKnownValues.Tag_coulomb;
                        break;
                    default:
                        break;
                  }
                break;
            case 'd':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "y", 0, 1, false) == 0) && (chars.Length == 3))
                            return TypeTagKnownValues.Tag_day;
                        break;
                    case 'e':
                        switch (chars[2])
                          {
                            case 'c':
                                switch (chars[3])
                                  {
                                    case 'a':
                                        switch (chars[4])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decaampere;
                                                break;
                                            case 'b':
                                                if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                                    return TypeTagKnownValues.Tag_decabecquerel;
                                                break;
                                            case 'c':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_decacandela;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_decacoulomb;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'd':
                                                if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                                  {
                                                    if (chars.Length == 6)
                                                      {
                                                        return TypeTagKnownValues.Tag_decade;
                                                      }
                                                    switch (chars[6])
                                                      {
                                                        case 'g':
                                                            if ((String.Compare(chars, 7, "ree_celsius", 0, 11, false) == 0) && (chars.Length == 18))
                                                                return TypeTagKnownValues.Tag_decadegree_celsius;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'f':
                                                if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_decafarad;
                                                break;
                                            case 'g':
                                                if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_decagram;
                                                            break;
                                                        case 'y':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_decagray;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'h':
                                                if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[6])
                                                      {
                                                        case 'n':
                                                            if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_decahenry;
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_decahertz;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'j':
                                                if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_decajoule;
                                                break;
                                            case 'k':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decakatal;
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_decakelvin;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                switch (chars[5])
                                                  {
                                                    case 'i':
                                                        if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decaliter;
                                                        break;
                                                    case 'u':
                                                        switch (chars[6])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                                    return TypeTagKnownValues.Tag_decalumen;
                                                                break;
                                                            case 'x':
                                                                if (chars.Length == 7)
                                                                    return TypeTagKnownValues.Tag_decalux;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'm':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decameter;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                            return TypeTagKnownValues.Tag_decamole;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'n':
                                                if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decanewton;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                                    return TypeTagKnownValues.Tag_decaohm;
                                                break;
                                            case 'p':
                                                if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decapascal;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decaradian;
                                                break;
                                            case 's':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_decasecond;
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                                        return TypeTagKnownValues.Tag_decasiemens;
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                                        return TypeTagKnownValues.Tag_decasievert;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                            return TypeTagKnownValues.Tag_decasteradian;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decatesla;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decatonne;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'v':
                                                if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                                    return TypeTagKnownValues.Tag_decavolt;
                                                break;
                                            case 'w':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                            return TypeTagKnownValues.Tag_decawatt;
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decaweber;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'i':
                                        switch (chars[4])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_deciampere;
                                                break;
                                            case 'b':
                                                if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                                    return TypeTagKnownValues.Tag_decibecquerel;
                                                break;
                                            case 'c':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_decicandela;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_decicoulomb;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'd':
                                                if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                                    return TypeTagKnownValues.Tag_decidegree_celsius;
                                                break;
                                            case 'f':
                                                if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_decifarad;
                                                break;
                                            case 'g':
                                                if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                                  {
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_decigram;
                                                            break;
                                                        case 'y':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_decigray;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'h':
                                                if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[6])
                                                      {
                                                        case 'n':
                                                            if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_decihenry;
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_decihertz;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'j':
                                                if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_decijoule;
                                                break;
                                            case 'k':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decikatal;
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_decikelvin;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                switch (chars[5])
                                                  {
                                                    case 'i':
                                                        if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_deciliter;
                                                        break;
                                                    case 'u':
                                                        switch (chars[6])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                                    return TypeTagKnownValues.Tag_decilumen;
                                                                break;
                                                            case 'x':
                                                                if (chars.Length == 7)
                                                                    return TypeTagKnownValues.Tag_decilux;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'm':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decimeter;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                            return TypeTagKnownValues.Tag_decimole;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'n':
                                                if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decinewton;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                                    return TypeTagKnownValues.Tag_deciohm;
                                                break;
                                            case 'p':
                                                if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_decipascal;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_deciradian;
                                                break;
                                            case 's':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_decisecond;
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                                        return TypeTagKnownValues.Tag_decisiemens;
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                                        return TypeTagKnownValues.Tag_decisievert;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                            return TypeTagKnownValues.Tag_decisteradian;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                switch (chars[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decitesla;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_decitonne;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'v':
                                                if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                                    return TypeTagKnownValues.Tag_decivolt;
                                                break;
                                            case 'w':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                            return TypeTagKnownValues.Tag_deciwatt;
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_deciweber;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            case 'g':
                                if (String.Compare(chars, 3, "ree_", 0, 4, false) == 0)
                                  {
                                    switch (chars[7])
                                      {
                                        case 'c':
                                            if ((String.Compare(chars, 8, "elsius", 0, 6, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_degree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 8, "ahrenheit", 0, 9, false) == 0) && (chars.Length == 17))
                                                return TypeTagKnownValues.Tag_degree_fahrenheit;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 8, "f_arc", 0, 5, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_degree_of_arc;
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'r':
                        if ((String.Compare(chars, 2, "am", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_dram;
                        break;
                    default:
                        break;
                  }
                break;
            case 'e':
                if (String.Compare(chars, 1, "xa", 0, 2, false) == 0)
                  {
                    switch (chars[3])
                      {
                        case 'a':
                            if ((String.Compare(chars, 4, "mpere", 0, 5, false) == 0) && (chars.Length == 9))
                                return TypeTagKnownValues.Tag_exaampere;
                            break;
                        case 'b':
                            if ((String.Compare(chars, 4, "ecquerel", 0, 8, false) == 0) && (chars.Length == 12))
                                return TypeTagKnownValues.Tag_exabecquerel;
                            break;
                        case 'c':
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "ndela", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_exacandela;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "ulomb", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_exacoulomb;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'd':
                            if ((String.Compare(chars, 4, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 17))
                                return TypeTagKnownValues.Tag_exadegree_celsius;
                            break;
                        case 'f':
                            if ((String.Compare(chars, 4, "arad", 0, 4, false) == 0) && (chars.Length == 8))
                                return TypeTagKnownValues.Tag_exafarad;
                            break;
                        case 'g':
                            if (String.Compare(chars, 4, "ra", 0, 2, false) == 0)
                              {
                                switch (chars[6])
                                  {
                                    case 'm':
                                        if (chars.Length == 7)
                                            return TypeTagKnownValues.Tag_exagram;
                                        break;
                                    case 'y':
                                        if (chars.Length == 7)
                                            return TypeTagKnownValues.Tag_exagray;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'h':
                            if (String.Compare(chars, 4, "e", 0, 1, false) == 0)
                              {
                                switch (chars[5])
                                  {
                                    case 'n':
                                        if ((String.Compare(chars, 6, "ry", 0, 2, false) == 0) && (chars.Length == 8))
                                            return TypeTagKnownValues.Tag_exahenry;
                                        break;
                                    case 'r':
                                        if ((String.Compare(chars, 6, "tz", 0, 2, false) == 0) && (chars.Length == 8))
                                            return TypeTagKnownValues.Tag_exahertz;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'j':
                            if ((String.Compare(chars, 4, "oule", 0, 4, false) == 0) && (chars.Length == 8))
                                return TypeTagKnownValues.Tag_exajoule;
                            break;
                        case 'k':
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "tal", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exakatal;
                                    break;
                                case 'e':
                                    if ((String.Compare(chars, 5, "lvin", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_exakelvin;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'l':
                            switch (chars[4])
                              {
                                case 'i':
                                    if ((String.Compare(chars, 5, "ter", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exaliter;
                                    break;
                                case 'u':
                                    switch (chars[5])
                                      {
                                        case 'm':
                                            if ((String.Compare(chars, 6, "en", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_exalumen;
                                            break;
                                        case 'x':
                                            if (chars.Length == 6)
                                                return TypeTagKnownValues.Tag_exalux;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'm':
                            switch (chars[4])
                              {
                                case 'e':
                                    if ((String.Compare(chars, 5, "ter", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exameter;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "le", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_examole;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'n':
                            if ((String.Compare(chars, 4, "ewton", 0, 5, false) == 0) && (chars.Length == 9))
                                return TypeTagKnownValues.Tag_exanewton;
                            break;
                        case 'o':
                            if ((String.Compare(chars, 4, "hm", 0, 2, false) == 0) && (chars.Length == 6))
                                return TypeTagKnownValues.Tag_exaohm;
                            break;
                        case 'p':
                            if ((String.Compare(chars, 4, "ascal", 0, 5, false) == 0) && (chars.Length == 9))
                                return TypeTagKnownValues.Tag_exapascal;
                            break;
                        case 'r':
                            if ((String.Compare(chars, 4, "adian", 0, 5, false) == 0) && (chars.Length == 9))
                                return TypeTagKnownValues.Tag_exaradian;
                            break;
                        case 's':
                            switch (chars[4])
                              {
                                case 'e':
                                    if ((String.Compare(chars, 5, "cond", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_exasecond;
                                    break;
                                case 'i':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'm':
                                                if ((String.Compare(chars, 7, "ens", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_exasiemens;
                                                break;
                                            case 'v':
                                                if ((String.Compare(chars, 7, "ert", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_exasievert;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 't':
                                    if ((String.Compare(chars, 5, "eradian", 0, 7, false) == 0) && (chars.Length == 12))
                                        return TypeTagKnownValues.Tag_exasteradian;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 't':
                            switch (chars[4])
                              {
                                case 'e':
                                    if ((String.Compare(chars, 5, "sla", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exatesla;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "nne", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exatonne;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'v':
                            if ((String.Compare(chars, 4, "olt", 0, 3, false) == 0) && (chars.Length == 7))
                                return TypeTagKnownValues.Tag_exavolt;
                            break;
                        case 'w':
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "tt", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_exawatt;
                                    break;
                                case 'e':
                                    if ((String.Compare(chars, 5, "ber", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_exaweber;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'f':
                switch (chars[1])
                  {
                    case 'a':
                        switch (chars[2])
                          {
                            case 'r':
                                if ((String.Compare(chars, 3, "ad", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_farad;
                                break;
                            case 't':
                                if ((String.Compare(chars, 3, "hom", 0, 3, false) == 0) && (chars.Length == 6))
                                    return TypeTagKnownValues.Tag_fathom;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(chars, 2, "mto", 0, 3, false) == 0)
                          {
                            switch (chars[5])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                        return TypeTagKnownValues.Tag_femtoampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                        return TypeTagKnownValues.Tag_femtobecquerel;
                                    break;
                                case 'c':
                                    switch (chars[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                return TypeTagKnownValues.Tag_femtocandela;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                return TypeTagKnownValues.Tag_femtocoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                        return TypeTagKnownValues.Tag_femtodegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_femtofarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[8])
                                          {
                                            case 'm':
                                                if (chars.Length == 9)
                                                    return TypeTagKnownValues.Tag_femtogram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 9)
                                                    return TypeTagKnownValues.Tag_femtogray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_femtohenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_femtohertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_femtojoule;
                                    break;
                                case 'k':
                                    switch (chars[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtokatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_femtokelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[6])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtoliter;
                                            break;
                                        case 'u':
                                            switch (chars[7])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_femtolumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 8)
                                                        return TypeTagKnownValues.Tag_femtolux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtometer;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_femtomole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                        return TypeTagKnownValues.Tag_femtonewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_femtoohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                        return TypeTagKnownValues.Tag_femtopascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                        return TypeTagKnownValues.Tag_femtoradian;
                                    break;
                                case 's':
                                    switch (chars[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_femtosecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                            return TypeTagKnownValues.Tag_femtosiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                            return TypeTagKnownValues.Tag_femtosievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_femtosteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtotesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtotonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_femtovolt;
                                    break;
                                case 'w':
                                    switch (chars[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_femtowatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_femtoweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'o':
                        switch (chars[2])
                          {
                            case 'o':
                                if ((String.Compare(chars, 3, "t", 0, 1, false) == 0) && (chars.Length == 4))
                                    return TypeTagKnownValues.Tag_foot;
                                break;
                            case 'r':
                                if ((String.Compare(chars, 3, "tnight", 0, 6, false) == 0) && (chars.Length == 9))
                                    return TypeTagKnownValues.Tag_fortnight;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'u':
                        if ((String.Compare(chars, 2, "rlong", 0, 5, false) == 0) && (chars.Length == 7))
                            return TypeTagKnownValues.Tag_furlong;
                        break;
                    default:
                        break;
                  }
                break;
            case 'g':
                switch (chars[1])
                  {
                    case 'i':
                        if (String.Compare(chars, 2, "ga", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_gigaampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_gigabecquerel;
                                    break;
                                case 'c':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_gigacandela;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_gigacoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_gigadegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_gigafarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'm':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_gigagram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_gigagray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_gigahenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_gigahertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_gigajoule;
                                    break;
                                case 'k':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigakatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_gigakelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigaliter;
                                            break;
                                        case 'u':
                                            switch (chars[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_gigalumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 7)
                                                        return TypeTagKnownValues.Tag_gigalux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigameter;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_gigamole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_giganewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_gigaohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_gigapascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_gigaradian;
                                    break;
                                case 's':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_gigasecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_gigasiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_gigasievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_gigasteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigatesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigatonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_gigavolt;
                                    break;
                                case 'w':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_gigawatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_gigaweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'r':
                        if (String.Compare(chars, 2, "a", 0, 1, false) == 0)
                          {
                            switch (chars[3])
                              {
                                case 'i':
                                    if ((String.Compare(chars, 4, "n", 0, 1, false) == 0) && (chars.Length == 5))
                                        return TypeTagKnownValues.Tag_grain;
                                    break;
                                case 'm':
                                    if (chars.Length == 4)
                                        return TypeTagKnownValues.Tag_gram;
                                    break;
                                case 'y':
                                    if (chars.Length == 4)
                                        return TypeTagKnownValues.Tag_gray;
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'h':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "nd", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_hand;
                        break;
                    case 'e':
                        switch (chars[2])
                          {
                            case 'c':
                                if (String.Compare(chars, 3, "t", 0, 1, false) == 0)
                                  {
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 5, "re", 0, 2, false) == 0) && (chars.Length == 7))
                                                return TypeTagKnownValues.Tag_hectare;
                                            break;
                                        case 'o':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_hectoampere;
                                                    break;
                                                case 'b':
                                                    if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                        return TypeTagKnownValues.Tag_hectobecquerel;
                                                    break;
                                                case 'c':
                                                    switch (chars[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_hectocandela;
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_hectocoulomb;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'd':
                                                    if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                        return TypeTagKnownValues.Tag_hectodegree_celsius;
                                                    break;
                                                case 'f':
                                                    if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_hectofarad;
                                                    break;
                                                case 'g':
                                                    if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                                      {
                                                        switch (chars[8])
                                                          {
                                                            case 'm':
                                                                if (chars.Length == 9)
                                                                    return TypeTagKnownValues.Tag_hectogram;
                                                                break;
                                                            case 'y':
                                                                if (chars.Length == 9)
                                                                    return TypeTagKnownValues.Tag_hectogray;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'h':
                                                    if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[7])
                                                          {
                                                            case 'n':
                                                                if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_hectohenry;
                                                                break;
                                                            case 'r':
                                                                if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_hectohertz;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'j':
                                                    if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_hectojoule;
                                                    break;
                                                case 'k':
                                                    switch (chars[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectokatal;
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                                return TypeTagKnownValues.Tag_hectokelvin;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'l':
                                                    switch (chars[6])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectoliter;
                                                            break;
                                                        case 'u':
                                                            switch (chars[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                        return TypeTagKnownValues.Tag_hectolumen;
                                                                    break;
                                                                case 'x':
                                                                    if (chars.Length == 8)
                                                                        return TypeTagKnownValues.Tag_hectolux;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'm':
                                                    switch (chars[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectometer;
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_hectomole;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'n':
                                                    if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_hectonewton;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_hectoohm;
                                                    break;
                                                case 'p':
                                                    if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_hectopascal;
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_hectoradian;
                                                    break;
                                                case 's':
                                                    switch (chars[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                                return TypeTagKnownValues.Tag_hectosecond;
                                                            break;
                                                        case 'i':
                                                            if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[8])
                                                                  {
                                                                    case 'm':
                                                                        if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                            return TypeTagKnownValues.Tag_hectosiemens;
                                                                        break;
                                                                    case 'v':
                                                                        if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                            return TypeTagKnownValues.Tag_hectosievert;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 't':
                                                            if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                                return TypeTagKnownValues.Tag_hectosteradian;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 't':
                                                    switch (chars[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectotesla;
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectotonne;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'v':
                                                    if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_hectovolt;
                                                    break;
                                                case 'w':
                                                    switch (chars[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_hectowatt;
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_hectoweber;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'l':
                                if ((String.Compare(chars, 3, "ek", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_helek;
                                break;
                            case 'n':
                                if ((String.Compare(chars, 3, "ry", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_henry;
                                break;
                            case 'r':
                                if ((String.Compare(chars, 3, "tz", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_hertz;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        if ((String.Compare(chars, 2, "ur", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_hour;
                        break;
                    default:
                        break;
                  }
                break;
            case 'i':
                switch (chars[1])
                  {
                    case 'm':
                        if (String.Compare(chars, 2, "perial_", 0, 7, false) == 0)
                          {
                            switch (chars[9])
                              {
                                case 'c':
                                    if ((String.Compare(chars, 10, "up", 0, 2, false) == 0) && (chars.Length == 12))
                                        return TypeTagKnownValues.Tag_imperial_cup;
                                    break;
                                case 'f':
                                    if (String.Compare(chars, 10, "luid_", 0, 5, false) == 0)
                                      {
                                        switch (chars[15])
                                          {
                                            case 'd':
                                                if ((String.Compare(chars, 16, "ram", 0, 3, false) == 0) && (chars.Length == 19))
                                                    return TypeTagKnownValues.Tag_imperial_fluid_dram;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 16, "unce", 0, 4, false) == 0) && (chars.Length == 20))
                                                    return TypeTagKnownValues.Tag_imperial_fluid_ounce;
                                                break;
                                            case 's':
                                                if ((String.Compare(chars, 16, "cruple", 0, 6, false) == 0) && (chars.Length == 22))
                                                    return TypeTagKnownValues.Tag_imperial_fluid_scruple;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'g':
                                    switch (chars[10])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 11, "llon", 0, 4, false) == 0) && (chars.Length == 15))
                                                return TypeTagKnownValues.Tag_imperial_gallon;
                                            break;
                                        case 'i':
                                            if ((String.Compare(chars, 11, "ll", 0, 2, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_imperial_gill;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    if ((String.Compare(chars, 10, "inim", 0, 4, false) == 0) && (chars.Length == 14))
                                        return TypeTagKnownValues.Tag_imperial_minim;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 10, "int", 0, 3, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_imperial_pint;
                                    break;
                                case 'q':
                                    if ((String.Compare(chars, 10, "uart", 0, 4, false) == 0) && (chars.Length == 14))
                                        return TypeTagKnownValues.Tag_imperial_quart;
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'n':
                        if ((String.Compare(chars, 2, "ch", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_inch;
                        break;
                    default:
                        break;
                  }
                break;
            case 'j':
                if ((String.Compare(chars, 1, "oule", 0, 4, false) == 0) && (chars.Length == 5))
                    return TypeTagKnownValues.Tag_joule;
                break;
            case 'k':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "tal", 0, 3, false) == 0) && (chars.Length == 5))
                            return TypeTagKnownValues.Tag_katal;
                        break;
                    case 'e':
                        if ((String.Compare(chars, 2, "lvin", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_kelvin;
                        break;
                    case 'i':
                        if (String.Compare(chars, 2, "lo", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_kiloampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_kilobecquerel;
                                    break;
                                case 'c':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            switch (chars[6])
                                              {
                                                case 'l':
                                                    if ((String.Compare(chars, 7, "orie", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_kilocalorie;
                                                    break;
                                                case 'n':
                                                    if ((String.Compare(chars, 7, "dela", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_kilocandela;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_kilocoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_kilodegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_kilofarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'm':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_kilogram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_kilogray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_kilohenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_kilohertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_kilojoule;
                                    break;
                                case 'k':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kilokatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_kilokelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kiloliter;
                                            break;
                                        case 'u':
                                            switch (chars[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_kilolumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 7)
                                                        return TypeTagKnownValues.Tag_kilolux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kilometer;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_kilomole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_kilonewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_kiloohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_kilopascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_kiloradian;
                                    break;
                                case 's':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_kilosecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_kilosiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_kilosievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_kilosteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kilotesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kilotonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_kilovolt;
                                    break;
                                case 'w':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_kilowatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_kiloweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'l':
                switch (chars[1])
                  {
                    case 'e':
                        if ((String.Compare(chars, 2, "ague", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_league;
                        break;
                    case 'i':
                        switch (chars[2])
                          {
                            case 'n':
                                if ((String.Compare(chars, 3, "k", 0, 1, false) == 0) && (chars.Length == 4))
                                    return TypeTagKnownValues.Tag_link;
                                break;
                            case 't':
                                if ((String.Compare(chars, 3, "er", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_liter;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        if (String.Compare(chars, 2, "ng_", 0, 3, false) == 0)
                          {
                            switch (chars[5])
                              {
                                case 'h':
                                    if ((String.Compare(chars, 6, "undredweight", 0, 12, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_long_hundredweight;
                                    break;
                                case 't':
                                    if ((String.Compare(chars, 6, "on", 0, 2, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_long_ton;
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'u':
                        switch (chars[2])
                          {
                            case 'm':
                                if ((String.Compare(chars, 3, "en", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_lumen;
                                break;
                            case 's':
                                if ((String.Compare(chars, 3, "trum", 0, 4, false) == 0) && (chars.Length == 7))
                                    return TypeTagKnownValues.Tag_lustrum;
                                break;
                            case 'x':
                                if (chars.Length == 3)
                                    return TypeTagKnownValues.Tag_lux;
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'm':
                switch (chars[1])
                  {
                    case 'e':
                        switch (chars[2])
                          {
                            case 'c':
                                if ((String.Compare(chars, 3, "hanical_horsepower", 0, 18, false) == 0) && (chars.Length == 21))
                                    return TypeTagKnownValues.Tag_mechanical_horsepower;
                                break;
                            case 'g':
                                if (String.Compare(chars, 3, "a", 0, 1, false) == 0)
                                  {
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_megaampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_megabecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_megacandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_megacoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                                return TypeTagKnownValues.Tag_megadegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_megafarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_megagram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_megagray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_megahenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_megahertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_megajoule;
                                            break;
                                        case 'k':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megakatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_megakelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megaliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_megalumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 7)
                                                                return TypeTagKnownValues.Tag_megalux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megameter;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_megamole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_meganewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                                return TypeTagKnownValues.Tag_megaohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_megapascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_megaradian;
                                            break;
                                        case 's':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_megasecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_megasiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_megasievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                        return TypeTagKnownValues.Tag_megasteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megatesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megatonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_megavolt;
                                            break;
                                        case 'w':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_megawatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_megaweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 't':
                                switch (chars[3])
                                  {
                                    case 'e':
                                        if ((String.Compare(chars, 4, "r", 0, 1, false) == 0) && (chars.Length == 5))
                                            return TypeTagKnownValues.Tag_meter;
                                        break;
                                    case 'r':
                                        if (String.Compare(chars, 4, "ic_", 0, 3, false) == 0)
                                          {
                                            switch (chars[7])
                                              {
                                                case 'c':
                                                    if ((String.Compare(chars, 8, "up", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_metric_cup;
                                                    break;
                                                case 'h':
                                                    if ((String.Compare(chars, 8, "orsepower", 0, 9, false) == 0) && (chars.Length == 17))
                                                        return TypeTagKnownValues.Tag_metric_horsepower;
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 8, "easpoon", 0, 7, false) == 0) && (chars.Length == 15))
                                                        return TypeTagKnownValues.Tag_metric_teaspoon;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'i':
                        switch (chars[2])
                          {
                            case 'c':
                                if (String.Compare(chars, 3, "ro", 0, 2, false) == 0)
                                  {
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_microampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_microbecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_microcandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_microcoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                return TypeTagKnownValues.Tag_microdegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_microfarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_microgram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_microgray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_microhenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_microhertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_microjoule;
                                            break;
                                        case 'k':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_microkatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_microkelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_microliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_microlumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_microlux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_micrometer;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_micromole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_micronewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_microohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_micropascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_microradian;
                                            break;
                                        case 's':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_microsecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_microsiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_microsievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                        return TypeTagKnownValues.Tag_microsteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_microtesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_microtonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_microvolt;
                                            break;
                                        case 'w':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_microwatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_microweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'l':
                                switch (chars[3])
                                  {
                                    case 'e':
                                        if (chars.Length == 4)
                                            return TypeTagKnownValues.Tag_mile;
                                        break;
                                    case 'l':
                                        switch (chars[4])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 5, "nnium", 0, 5, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_millennium;
                                                break;
                                            case 'i':
                                                switch (chars[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_milliampere;
                                                        break;
                                                    case 'b':
                                                        if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                            return TypeTagKnownValues.Tag_millibecquerel;
                                                        break;
                                                    case 'c':
                                                        switch (chars[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_millicandela;
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_millicoulomb;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'd':
                                                        if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                            return TypeTagKnownValues.Tag_millidegree_celsius;
                                                        break;
                                                    case 'f':
                                                        if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_millifarad;
                                                        break;
                                                    case 'g':
                                                        if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[8])
                                                              {
                                                                case 'm':
                                                                    if (chars.Length == 9)
                                                                        return TypeTagKnownValues.Tag_milligram;
                                                                    break;
                                                                case 'y':
                                                                    if (chars.Length == 9)
                                                                        return TypeTagKnownValues.Tag_milligray;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'h':
                                                        if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[7])
                                                              {
                                                                case 'n':
                                                                    if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                                        return TypeTagKnownValues.Tag_millihenry;
                                                                    break;
                                                                case 'r':
                                                                    if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                                        return TypeTagKnownValues.Tag_millihertz;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'j':
                                                        if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_millijoule;
                                                        break;
                                                    case 'k':
                                                        switch (chars[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_millikatal;
                                                                break;
                                                            case 'e':
                                                                if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_millikelvin;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'l':
                                                        switch (chars[6])
                                                          {
                                                            case 'i':
                                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_milliliter;
                                                                break;
                                                            case 'u':
                                                                switch (chars[7])
                                                                  {
                                                                    case 'm':
                                                                        if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                            return TypeTagKnownValues.Tag_millilumen;
                                                                        break;
                                                                    case 'x':
                                                                        if (chars.Length == 8)
                                                                            return TypeTagKnownValues.Tag_millilux;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'm':
                                                        switch (chars[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_millimeter;
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                                    return TypeTagKnownValues.Tag_millimole;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_millinewton;
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                            return TypeTagKnownValues.Tag_milliohm;
                                                        break;
                                                    case 'p':
                                                        if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_millipascal;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_milliradian;
                                                        break;
                                                    case 's':
                                                        switch (chars[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_millisecond;
                                                                break;
                                                            case 'i':
                                                                if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                                  {
                                                                    switch (chars[8])
                                                                      {
                                                                        case 'm':
                                                                            if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                                return TypeTagKnownValues.Tag_millisiemens;
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                                return TypeTagKnownValues.Tag_millisievert;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                                    return TypeTagKnownValues.Tag_millisteradian;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        switch (chars[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_millitesla;
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_millitonne;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_millivolt;
                                                        break;
                                                    case 'w':
                                                        switch (chars[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                                    return TypeTagKnownValues.Tag_milliwatt;
                                                                break;
                                                            case 'e':
                                                                if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                                    return TypeTagKnownValues.Tag_milliweber;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            case 'n':
                                if ((String.Compare(chars, 3, "ute", 0, 3, false) == 0) && (chars.Length == 6))
                                    return TypeTagKnownValues.Tag_minute;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        switch (chars[2])
                          {
                            case 'l':
                                if ((String.Compare(chars, 3, "e", 0, 1, false) == 0) && (chars.Length == 4))
                                    return TypeTagKnownValues.Tag_mole;
                                break;
                            case 'n':
                                if ((String.Compare(chars, 3, "th", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_month;
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'n':
                switch (chars[1])
                  {
                    case 'a':
                        switch (chars[2])
                          {
                            case 'n':
                                if (String.Compare(chars, 3, "o", 0, 1, false) == 0)
                                  {
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_nanoampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_nanobecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_nanocandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_nanocoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                                return TypeTagKnownValues.Tag_nanodegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_nanofarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_nanogram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_nanogray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_nanohenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_nanohertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_nanojoule;
                                            break;
                                        case 'k':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanokatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_nanokelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanoliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_nanolumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 7)
                                                                return TypeTagKnownValues.Tag_nanolux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanometer;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_nanomole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_nanonewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                                return TypeTagKnownValues.Tag_nanoohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_nanopascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_nanoradian;
                                            break;
                                        case 's':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_nanosecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_nanosiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_nanosievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                        return TypeTagKnownValues.Tag_nanosteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanotesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanotonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_nanovolt;
                                            break;
                                        case 'w':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_nanowatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_nanoweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'u':
                                if ((String.Compare(chars, 3, "tical_mile", 0, 10, false) == 0) && (chars.Length == 13))
                                    return TypeTagKnownValues.Tag_nautical_mile;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if ((String.Compare(chars, 2, "wton", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_newton;
                        break;
                    default:
                        break;
                  }
                break;
            case 'o':
                switch (chars[1])
                  {
                    case 'h':
                        if ((String.Compare(chars, 2, "m", 0, 1, false) == 0) && (chars.Length == 3))
                            return TypeTagKnownValues.Tag_ohm;
                        break;
                    case 'i':
                        if ((String.Compare(chars, 2, "l_barrel", 0, 8, false) == 0) && (chars.Length == 10))
                            return TypeTagKnownValues.Tag_oil_barrel;
                        break;
                    case 'u':
                        if ((String.Compare(chars, 2, "nce", 0, 3, false) == 0) && (chars.Length == 5))
                            return TypeTagKnownValues.Tag_ounce;
                        break;
                    default:
                        break;
                  }
                break;
            case 'p':
                switch (chars[1])
                  {
                    case 'a':
                        switch (chars[2])
                          {
                            case 'r':
                                if ((String.Compare(chars, 3, "sec", 0, 3, false) == 0) && (chars.Length == 6))
                                    return TypeTagKnownValues.Tag_parsec;
                                break;
                            case 's':
                                if ((String.Compare(chars, 3, "cal", 0, 3, false) == 0) && (chars.Length == 6))
                                    return TypeTagKnownValues.Tag_pascal;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(chars, 2, "ta", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_petaampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_petabecquerel;
                                    break;
                                case 'c':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_petacandela;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_petacoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_petadegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_petafarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'm':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_petagram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_petagray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_petahenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_petahertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_petajoule;
                                    break;
                                case 'k':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petakatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_petakelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petaliter;
                                            break;
                                        case 'u':
                                            switch (chars[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_petalumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 7)
                                                        return TypeTagKnownValues.Tag_petalux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petameter;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_petamole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_petanewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_petaohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_petapascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_petaradian;
                                    break;
                                case 's':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_petasecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_petasiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_petasievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_petasteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petatesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petatonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_petavolt;
                                    break;
                                case 'w':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_petawatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_petaweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'i':
                        if (String.Compare(chars, 2, "co", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_picoampere;
                                    break;
                                case 'b':
                                    if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                        return TypeTagKnownValues.Tag_picobecquerel;
                                    break;
                                case 'c':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_picocandela;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_picocoulomb;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                        return TypeTagKnownValues.Tag_picodegree_celsius;
                                    break;
                                case 'f':
                                    if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_picofarad;
                                    break;
                                case 'g':
                                    if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'm':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_picogram;
                                                break;
                                            case 'y':
                                                if (chars.Length == 8)
                                                    return TypeTagKnownValues.Tag_picogray;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_picohenry;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_picohertz;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_picojoule;
                                    break;
                                case 'k':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picokatal;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_picokelvin;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (chars[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picoliter;
                                            break;
                                        case 'u':
                                            switch (chars[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_picolumen;
                                                    break;
                                                case 'x':
                                                    if (chars.Length == 7)
                                                        return TypeTagKnownValues.Tag_picolux;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picometer;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_picomole;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_piconewton;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_picoohm;
                                    break;
                                case 'p':
                                    if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_picopascal;
                                    break;
                                case 'r':
                                    if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                        return TypeTagKnownValues.Tag_picoradian;
                                    break;
                                case 's':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_picosecond;
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_picosiemens;
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                            return TypeTagKnownValues.Tag_picosievert;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_picosteradian;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (chars[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picotesla;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picotonne;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                        return TypeTagKnownValues.Tag_picovolt;
                                    break;
                                case 'w':
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_picowatt;
                                            break;
                                        case 'e':
                                            if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_picoweber;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'o':
                        if ((String.Compare(chars, 2, "und", 0, 3, false) == 0) && (chars.Length == 5))
                            return TypeTagKnownValues.Tag_pound;
                        break;
                    default:
                        break;
                  }
                break;
            case 'q':
                if ((String.Compare(chars, 1, "uadrennium", 0, 10, false) == 0) && (chars.Length == 11))
                    return TypeTagKnownValues.Tag_quadrennium;
                break;
            case 'r':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "dian", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_radian;
                        break;
                    case 'o':
                        switch (chars[2])
                          {
                            case 'd':
                                if (chars.Length == 3)
                                    return TypeTagKnownValues.Tag_rod;
                                break;
                            case 'o':
                                if ((String.Compare(chars, 3, "d", 0, 1, false) == 0) && (chars.Length == 4))
                                    return TypeTagKnownValues.Tag_rood;
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 's':
                switch (chars[1])
                  {
                    case 'e':
                        if ((String.Compare(chars, 2, "cond", 0, 4, false) == 0) && (chars.Length == 6))
                            return TypeTagKnownValues.Tag_second;
                        break;
                    case 'h':
                        switch (chars[2])
                          {
                            case 'a':
                                if ((String.Compare(chars, 3, "ke", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_shake;
                                break;
                            case 'o':
                                if (String.Compare(chars, 3, "rt_", 0, 3, false) == 0)
                                  {
                                    switch (chars[6])
                                      {
                                        case 'h':
                                            if ((String.Compare(chars, 7, "undredweight", 0, 12, false) == 0) && (chars.Length == 19))
                                                return TypeTagKnownValues.Tag_short_hundredweight;
                                            break;
                                        case 't':
                                            if ((String.Compare(chars, 7, "on", 0, 2, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_short_ton;
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'i':
                        switch (chars[2])
                          {
                            case 'd':
                                if (String.Compare(chars, 3, "ereal_", 0, 6, false) == 0)
                                  {
                                    switch (chars[9])
                                      {
                                        case 'd':
                                            if ((String.Compare(chars, 10, "ay", 0, 2, false) == 0) && (chars.Length == 12))
                                                return TypeTagKnownValues.Tag_sidereal_day;
                                            break;
                                        case 'y':
                                            if ((String.Compare(chars, 10, "ear", 0, 3, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_sidereal_year;
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'e':
                                switch (chars[3])
                                  {
                                    case 'm':
                                        if ((String.Compare(chars, 4, "ens", 0, 3, false) == 0) && (chars.Length == 7))
                                            return TypeTagKnownValues.Tag_siemens;
                                        break;
                                    case 'v':
                                        if ((String.Compare(chars, 4, "ert", 0, 3, false) == 0) && (chars.Length == 7))
                                            return TypeTagKnownValues.Tag_sievert;
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 't':
                        switch (chars[2])
                          {
                            case 'e':
                                if ((String.Compare(chars, 3, "radian", 0, 6, false) == 0) && (chars.Length == 9))
                                    return TypeTagKnownValues.Tag_steradian;
                                break;
                            case 'o':
                                if ((String.Compare(chars, 3, "ne", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_stone;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'v':
                        if ((String.Compare(chars, 2, "edberg", 0, 6, false) == 0) && (chars.Length == 8))
                            return TypeTagKnownValues.Tag_svedberg;
                        break;
                    default:
                        break;
                  }
                break;
            case 't':
                switch (chars[1])
                  {
                    case 'e':
                        switch (chars[2])
                          {
                            case 'r':
                                if (String.Compare(chars, 3, "a", 0, 1, false) == 0)
                                  {
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 5, "mpere", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_teraampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 5, "ecquerel", 0, 8, false) == 0) && (chars.Length == 13))
                                                return TypeTagKnownValues.Tag_terabecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "ndela", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_teracandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "ulomb", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_teracoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 5, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 18))
                                                return TypeTagKnownValues.Tag_teradegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 5, "arad", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_terafarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_teragram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_teragray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 7, "ry", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_terahenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 7, "tz", 0, 2, false) == 0) && (chars.Length == 9))
                                                            return TypeTagKnownValues.Tag_terahertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 5, "oule", 0, 4, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_terajoule;
                                            break;
                                        case 'k':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tal", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_terakatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "lvin", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_terakelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_teraliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 7, "en", 0, 2, false) == 0) && (chars.Length == 9))
                                                                return TypeTagKnownValues.Tag_teralumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 7)
                                                                return TypeTagKnownValues.Tag_teralux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ter", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_terameter;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "le", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_teramole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 5, "ewton", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_teranewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 5, "hm", 0, 2, false) == 0) && (chars.Length == 7))
                                                return TypeTagKnownValues.Tag_teraohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 5, "ascal", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_terapascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 5, "adian", 0, 5, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_teraradian;
                                            break;
                                        case 's':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "cond", 0, 4, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_terasecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 8, "ens", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_terasiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 8, "ert", 0, 3, false) == 0) && (chars.Length == 11))
                                                                    return TypeTagKnownValues.Tag_terasievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 6, "eradian", 0, 7, false) == 0) && (chars.Length == 13))
                                                        return TypeTagKnownValues.Tag_terasteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "sla", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_teratesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 6, "nne", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_teratonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 5, "olt", 0, 3, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_teravolt;
                                            break;
                                        case 'w':
                                            switch (chars[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 6, "tt", 0, 2, false) == 0) && (chars.Length == 8))
                                                        return TypeTagKnownValues.Tag_terawatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 6, "ber", 0, 3, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_teraweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 's':
                                if ((String.Compare(chars, 3, "la", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_tesla;
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'h':
                        if ((String.Compare(chars, 2, "ou", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_thou;
                        break;
                    case 'o':
                        if ((String.Compare(chars, 2, "nne", 0, 3, false) == 0) && (chars.Length == 5))
                            return TypeTagKnownValues.Tag_tonne;
                        break;
                    case 'r':
                        switch (chars[2])
                          {
                            case 'i':
                                if ((String.Compare(chars, 3, "ennium", 0, 6, false) == 0) && (chars.Length == 9))
                                    return TypeTagKnownValues.Tag_triennium;
                                break;
                            case 'o':
                                if ((String.Compare(chars, 3, "y_ounce", 0, 7, false) == 0) && (chars.Length == 10))
                                    return TypeTagKnownValues.Tag_troy_ounce;
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'u':
                if (String.Compare(chars, 1, "s_", 0, 2, false) == 0)
                  {
                    switch (chars[3])
                      {
                        case 'b':
                            if ((String.Compare(chars, 4, "ushel", 0, 5, false) == 0) && (chars.Length == 9))
                                return TypeTagKnownValues.Tag_us_bushel;
                            break;
                        case 'c':
                            if (String.Compare(chars, 4, "ustomary_", 0, 9, false) == 0)
                              {
                                switch (chars[13])
                                  {
                                    case 'c':
                                        if ((String.Compare(chars, 14, "up", 0, 2, false) == 0) && (chars.Length == 16))
                                            return TypeTagKnownValues.Tag_us_customary_cup;
                                        break;
                                    case 't':
                                        switch (chars[14])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 15, "blespoon", 0, 8, false) == 0) && (chars.Length == 23))
                                                    return TypeTagKnownValues.Tag_us_customary_tablespoon;
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 15, "aspoon", 0, 6, false) == 0) && (chars.Length == 21))
                                                    return TypeTagKnownValues.Tag_us_customary_teaspoon;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'd':
                            if (String.Compare(chars, 4, "ry_", 0, 3, false) == 0)
                              {
                                switch (chars[7])
                                  {
                                    case 'g':
                                        if ((String.Compare(chars, 8, "allon", 0, 5, false) == 0) && (chars.Length == 13))
                                            return TypeTagKnownValues.Tag_us_dry_gallon;
                                        break;
                                    case 'p':
                                        if ((String.Compare(chars, 8, "int", 0, 3, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_us_dry_pint;
                                        break;
                                    case 'q':
                                        if ((String.Compare(chars, 8, "uart", 0, 4, false) == 0) && (chars.Length == 12))
                                            return TypeTagKnownValues.Tag_us_dry_quart;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'f':
                            if (String.Compare(chars, 4, "luid_", 0, 5, false) == 0)
                              {
                                switch (chars[9])
                                  {
                                    case 'd':
                                        if ((String.Compare(chars, 10, "ram", 0, 3, false) == 0) && (chars.Length == 13))
                                            return TypeTagKnownValues.Tag_us_fluid_dram;
                                        break;
                                    case 'o':
                                        if ((String.Compare(chars, 10, "unce", 0, 4, false) == 0) && (chars.Length == 14))
                                            return TypeTagKnownValues.Tag_us_fluid_ounce;
                                        break;
                                    case 's':
                                        if ((String.Compare(chars, 10, "cruple", 0, 6, false) == 0) && (chars.Length == 16))
                                            return TypeTagKnownValues.Tag_us_fluid_scruple;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'g':
                            switch (chars[4])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 5, "llon", 0, 4, false) == 0) && (chars.Length == 9))
                                        return TypeTagKnownValues.Tag_us_gallon;
                                    break;
                                case 'i':
                                    if ((String.Compare(chars, 5, "ll", 0, 2, false) == 0) && (chars.Length == 7))
                                        return TypeTagKnownValues.Tag_us_gill;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'l':
                            if (String.Compare(chars, 4, "egal_", 0, 5, false) == 0)
                              {
                                switch (chars[9])
                                  {
                                    case 'c':
                                        if ((String.Compare(chars, 10, "up", 0, 2, false) == 0) && (chars.Length == 12))
                                            return TypeTagKnownValues.Tag_us_legal_cup;
                                        break;
                                    case 't':
                                        if ((String.Compare(chars, 10, "ablespoon", 0, 9, false) == 0) && (chars.Length == 19))
                                            return TypeTagKnownValues.Tag_us_legal_tablespoon;
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'm':
                            if ((String.Compare(chars, 4, "inim", 0, 4, false) == 0) && (chars.Length == 8))
                                return TypeTagKnownValues.Tag_us_minim;
                            break;
                        case 'p':
                            if ((String.Compare(chars, 4, "int", 0, 3, false) == 0) && (chars.Length == 7))
                                return TypeTagKnownValues.Tag_us_pint;
                            break;
                        case 'q':
                            if ((String.Compare(chars, 4, "uart", 0, 4, false) == 0) && (chars.Length == 8))
                                return TypeTagKnownValues.Tag_us_quart;
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'v':
                if ((String.Compare(chars, 1, "olt", 0, 3, false) == 0) && (chars.Length == 4))
                    return TypeTagKnownValues.Tag_volt;
                break;
            case 'w':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "tt", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_watt;
                        break;
                    case 'e':
                        switch (chars[2])
                          {
                            case 'b':
                                if ((String.Compare(chars, 3, "er", 0, 2, false) == 0) && (chars.Length == 5))
                                    return TypeTagKnownValues.Tag_weber;
                                break;
                            case 'e':
                                if ((String.Compare(chars, 3, "k", 0, 1, false) == 0) && (chars.Length == 4))
                                    return TypeTagKnownValues.Tag_week;
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'y':
                switch (chars[1])
                  {
                    case 'a':
                        if ((String.Compare(chars, 2, "rd", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_yard;
                        break;
                    case 'e':
                        if ((String.Compare(chars, 2, "ar", 0, 2, false) == 0) && (chars.Length == 4))
                            return TypeTagKnownValues.Tag_year;
                        break;
                    case 'o':
                        switch (chars[2])
                          {
                            case 'c':
                                if (String.Compare(chars, 3, "to", 0, 2, false) == 0)
                                  {
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yoctoampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_yoctobecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_yoctocandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_yoctocoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                return TypeTagKnownValues.Tag_yoctodegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_yoctofarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_yoctogram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_yoctogray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_yoctohenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_yoctohertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_yoctojoule;
                                            break;
                                        case 'k':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctokatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_yoctokelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctoliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_yoctolumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_yoctolux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctometer;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_yoctomole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yoctonewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_yoctoohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yoctopascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yoctoradian;
                                            break;
                                        case 's':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_yoctosecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_yoctosiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_yoctosievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                        return TypeTagKnownValues.Tag_yoctosteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctotesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctotonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_yoctovolt;
                                            break;
                                        case 'w':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_yoctowatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yoctoweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 't':
                                if (String.Compare(chars, 3, "ta", 0, 2, false) == 0)
                                  {
                                    switch (chars[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yottaampere;
                                            break;
                                        case 'b':
                                            if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                                return TypeTagKnownValues.Tag_yottabecquerel;
                                            break;
                                        case 'c':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_yottacandela;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                        return TypeTagKnownValues.Tag_yottacoulomb;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                                return TypeTagKnownValues.Tag_yottadegree_celsius;
                                            break;
                                        case 'f':
                                            if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_yottafarad;
                                            break;
                                        case 'g':
                                            if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'm':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_yottagram;
                                                        break;
                                                    case 'y':
                                                        if (chars.Length == 9)
                                                            return TypeTagKnownValues.Tag_yottagray;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_yottahenry;
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_yottahertz;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                                return TypeTagKnownValues.Tag_yottajoule;
                                            break;
                                        case 'k':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottakatal;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_yottakelvin;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (chars[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottaliter;
                                                    break;
                                                case 'u':
                                                    switch (chars[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                                return TypeTagKnownValues.Tag_yottalumen;
                                                            break;
                                                        case 'x':
                                                            if (chars.Length == 8)
                                                                return TypeTagKnownValues.Tag_yottalux;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottameter;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_yottamole;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yottanewton;
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                                return TypeTagKnownValues.Tag_yottaohm;
                                            break;
                                        case 'p':
                                            if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yottapascal;
                                            break;
                                        case 'r':
                                            if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                                return TypeTagKnownValues.Tag_yottaradian;
                                            break;
                                        case 's':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                        return TypeTagKnownValues.Tag_yottasecond;
                                                    break;
                                                case 'i':
                                                    if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_yottasiemens;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                    return TypeTagKnownValues.Tag_yottasievert;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                        return TypeTagKnownValues.Tag_yottasteradian;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (chars[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottatesla;
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottatonne;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                                return TypeTagKnownValues.Tag_yottavolt;
                                            break;
                                        case 'w':
                                            switch (chars[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                        return TypeTagKnownValues.Tag_yottawatt;
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_yottaweber;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'z':
                if (String.Compare(chars, 1, "e", 0, 1, false) == 0)
                  {
                    switch (chars[2])
                      {
                        case 'p':
                            if (String.Compare(chars, 3, "to", 0, 2, false) == 0)
                              {
                                switch (chars[5])
                                  {
                                    case 'a':
                                        if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zeptoampere;
                                        break;
                                    case 'b':
                                        if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                            return TypeTagKnownValues.Tag_zeptobecquerel;
                                        break;
                                    case 'c':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                    return TypeTagKnownValues.Tag_zeptocandela;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                    return TypeTagKnownValues.Tag_zeptocoulomb;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'd':
                                        if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                            return TypeTagKnownValues.Tag_zeptodegree_celsius;
                                        break;
                                    case 'f':
                                        if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                            return TypeTagKnownValues.Tag_zeptofarad;
                                        break;
                                    case 'g':
                                        if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                          {
                                            switch (chars[8])
                                              {
                                                case 'm':
                                                    if (chars.Length == 9)
                                                        return TypeTagKnownValues.Tag_zeptogram;
                                                    break;
                                                case 'y':
                                                    if (chars.Length == 9)
                                                        return TypeTagKnownValues.Tag_zeptogray;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'h':
                                        if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                          {
                                            switch (chars[7])
                                              {
                                                case 'n':
                                                    if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_zeptohenry;
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_zeptohertz;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'j':
                                        if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                            return TypeTagKnownValues.Tag_zeptojoule;
                                        break;
                                    case 'k':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptokatal;
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                    return TypeTagKnownValues.Tag_zeptokelvin;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'l':
                                        switch (chars[6])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptoliter;
                                                break;
                                            case 'u':
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_zeptolumen;
                                                        break;
                                                    case 'x':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_zeptolux;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'm':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptometer;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_zeptomole;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'n':
                                        if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zeptonewton;
                                        break;
                                    case 'o':
                                        if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                            return TypeTagKnownValues.Tag_zeptoohm;
                                        break;
                                    case 'p':
                                        if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zeptopascal;
                                        break;
                                    case 'r':
                                        if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zeptoradian;
                                        break;
                                    case 's':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                    return TypeTagKnownValues.Tag_zeptosecond;
                                                break;
                                            case 'i':
                                                if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[8])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_zeptosiemens;
                                                            break;
                                                        case 'v':
                                                            if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_zeptosievert;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                    return TypeTagKnownValues.Tag_zeptosteradian;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 't':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptotesla;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptotonne;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'v':
                                        if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                            return TypeTagKnownValues.Tag_zeptovolt;
                                        break;
                                    case 'w':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_zeptowatt;
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zeptoweber;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 't':
                            if (String.Compare(chars, 3, "ta", 0, 2, false) == 0)
                              {
                                switch (chars[5])
                                  {
                                    case 'a':
                                        if ((String.Compare(chars, 6, "mpere", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zettaampere;
                                        break;
                                    case 'b':
                                        if ((String.Compare(chars, 6, "ecquerel", 0, 8, false) == 0) && (chars.Length == 14))
                                            return TypeTagKnownValues.Tag_zettabecquerel;
                                        break;
                                    case 'c':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "ndela", 0, 5, false) == 0) && (chars.Length == 12))
                                                    return TypeTagKnownValues.Tag_zettacandela;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "ulomb", 0, 5, false) == 0) && (chars.Length == 12))
                                                    return TypeTagKnownValues.Tag_zettacoulomb;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'd':
                                        if ((String.Compare(chars, 6, "egree_celsius", 0, 13, false) == 0) && (chars.Length == 19))
                                            return TypeTagKnownValues.Tag_zettadegree_celsius;
                                        break;
                                    case 'f':
                                        if ((String.Compare(chars, 6, "arad", 0, 4, false) == 0) && (chars.Length == 10))
                                            return TypeTagKnownValues.Tag_zettafarad;
                                        break;
                                    case 'g':
                                        if (String.Compare(chars, 6, "ra", 0, 2, false) == 0)
                                          {
                                            switch (chars[8])
                                              {
                                                case 'm':
                                                    if (chars.Length == 9)
                                                        return TypeTagKnownValues.Tag_zettagram;
                                                    break;
                                                case 'y':
                                                    if (chars.Length == 9)
                                                        return TypeTagKnownValues.Tag_zettagray;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'h':
                                        if (String.Compare(chars, 6, "e", 0, 1, false) == 0)
                                          {
                                            switch (chars[7])
                                              {
                                                case 'n':
                                                    if ((String.Compare(chars, 8, "ry", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_zettahenry;
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(chars, 8, "tz", 0, 2, false) == 0) && (chars.Length == 10))
                                                        return TypeTagKnownValues.Tag_zettahertz;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'j':
                                        if ((String.Compare(chars, 6, "oule", 0, 4, false) == 0) && (chars.Length == 10))
                                            return TypeTagKnownValues.Tag_zettajoule;
                                        break;
                                    case 'k':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "tal", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettakatal;
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 7, "lvin", 0, 4, false) == 0) && (chars.Length == 11))
                                                    return TypeTagKnownValues.Tag_zettakelvin;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'l':
                                        switch (chars[6])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettaliter;
                                                break;
                                            case 'u':
                                                switch (chars[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(chars, 8, "en", 0, 2, false) == 0) && (chars.Length == 10))
                                                            return TypeTagKnownValues.Tag_zettalumen;
                                                        break;
                                                    case 'x':
                                                        if (chars.Length == 8)
                                                            return TypeTagKnownValues.Tag_zettalux;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'm':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "ter", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettameter;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "le", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_zettamole;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'n':
                                        if ((String.Compare(chars, 6, "ewton", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zettanewton;
                                        break;
                                    case 'o':
                                        if ((String.Compare(chars, 6, "hm", 0, 2, false) == 0) && (chars.Length == 8))
                                            return TypeTagKnownValues.Tag_zettaohm;
                                        break;
                                    case 'p':
                                        if ((String.Compare(chars, 6, "ascal", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zettapascal;
                                        break;
                                    case 'r':
                                        if ((String.Compare(chars, 6, "adian", 0, 5, false) == 0) && (chars.Length == 11))
                                            return TypeTagKnownValues.Tag_zettaradian;
                                        break;
                                    case 's':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "cond", 0, 4, false) == 0) && (chars.Length == 11))
                                                    return TypeTagKnownValues.Tag_zettasecond;
                                                break;
                                            case 'i':
                                                if (String.Compare(chars, 7, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[8])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(chars, 9, "ens", 0, 3, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_zettasiemens;
                                                            break;
                                                        case 'v':
                                                            if ((String.Compare(chars, 9, "ert", 0, 3, false) == 0) && (chars.Length == 12))
                                                                return TypeTagKnownValues.Tag_zettasievert;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if ((String.Compare(chars, 7, "eradian", 0, 7, false) == 0) && (chars.Length == 14))
                                                    return TypeTagKnownValues.Tag_zettasteradian;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 't':
                                        switch (chars[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 7, "sla", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettatesla;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 7, "nne", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettatonne;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'v':
                                        if ((String.Compare(chars, 6, "olt", 0, 3, false) == 0) && (chars.Length == 9))
                                            return TypeTagKnownValues.Tag_zettavolt;
                                        break;
                                    case 'w':
                                        switch (chars[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 7, "tt", 0, 2, false) == 0) && (chars.Length == 9))
                                                    return TypeTagKnownValues.Tag_zettawatt;
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 7, "ber", 0, 3, false) == 0) && (chars.Length == 10))
                                                    return TypeTagKnownValues.Tag_zettaweber;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        return TypeTagKnownValues.Tag__none;
      }

    public static string  stringFromTag(TypeTagKnownValues the_enum)
      {
        switch (the_enum)
          {
            case TypeTagKnownValues.Tag_inch:
                return "inch";
            case TypeTagKnownValues.Tag_thou:
                return "thou";
            case TypeTagKnownValues.Tag_barleycorn:
                return "barleycorn";
            case TypeTagKnownValues.Tag_hand:
                return "hand";
            case TypeTagKnownValues.Tag_foot:
                return "foot";
            case TypeTagKnownValues.Tag_yard:
                return "yard";
            case TypeTagKnownValues.Tag_rod:
                return "rod";
            case TypeTagKnownValues.Tag_link:
                return "link";
            case TypeTagKnownValues.Tag_chain:
                return "chain";
            case TypeTagKnownValues.Tag_furlong:
                return "furlong";
            case TypeTagKnownValues.Tag_mile:
                return "mile";
            case TypeTagKnownValues.Tag_league:
                return "league";
            case TypeTagKnownValues.Tag_nautical_mile:
                return "nautical_mile";
            case TypeTagKnownValues.Tag_cable:
                return "cable";
            case TypeTagKnownValues.Tag_fathom:
                return "fathom";
            case TypeTagKnownValues.Tag_acre:
                return "acre";
            case TypeTagKnownValues.Tag_rood:
                return "rood";
            case TypeTagKnownValues.Tag_us_gallon:
                return "us_gallon";
            case TypeTagKnownValues.Tag_imperial_gallon:
                return "imperial_gallon";
            case TypeTagKnownValues.Tag_us_dry_gallon:
                return "us_dry_gallon";
            case TypeTagKnownValues.Tag_us_quart:
                return "us_quart";
            case TypeTagKnownValues.Tag_imperial_quart:
                return "imperial_quart";
            case TypeTagKnownValues.Tag_us_dry_quart:
                return "us_dry_quart";
            case TypeTagKnownValues.Tag_us_pint:
                return "us_pint";
            case TypeTagKnownValues.Tag_imperial_pint:
                return "imperial_pint";
            case TypeTagKnownValues.Tag_us_dry_pint:
                return "us_dry_pint";
            case TypeTagKnownValues.Tag_us_gill:
                return "us_gill";
            case TypeTagKnownValues.Tag_imperial_gill:
                return "imperial_gill";
            case TypeTagKnownValues.Tag_us_customary_cup:
                return "us_customary_cup";
            case TypeTagKnownValues.Tag_us_legal_cup:
                return "us_legal_cup";
            case TypeTagKnownValues.Tag_metric_cup:
                return "metric_cup";
            case TypeTagKnownValues.Tag_imperial_cup:
                return "imperial_cup";
            case TypeTagKnownValues.Tag_us_fluid_ounce:
                return "us_fluid_ounce";
            case TypeTagKnownValues.Tag_imperial_fluid_ounce:
                return "imperial_fluid_ounce";
            case TypeTagKnownValues.Tag_us_fluid_dram:
                return "us_fluid_dram";
            case TypeTagKnownValues.Tag_imperial_fluid_dram:
                return "imperial_fluid_dram";
            case TypeTagKnownValues.Tag_us_fluid_scruple:
                return "us_fluid_scruple";
            case TypeTagKnownValues.Tag_imperial_fluid_scruple:
                return "imperial_fluid_scruple";
            case TypeTagKnownValues.Tag_us_minim:
                return "us_minim";
            case TypeTagKnownValues.Tag_imperial_minim:
                return "imperial_minim";
            case TypeTagKnownValues.Tag_us_customary_tablespoon:
                return "us_customary_tablespoon";
            case TypeTagKnownValues.Tag_us_legal_tablespoon:
                return "us_legal_tablespoon";
            case TypeTagKnownValues.Tag_australian_tablespoon:
                return "australian_tablespoon";
            case TypeTagKnownValues.Tag_us_customary_teaspoon:
                return "us_customary_teaspoon";
            case TypeTagKnownValues.Tag_metric_teaspoon:
                return "metric_teaspoon";
            case TypeTagKnownValues.Tag_pound:
                return "pound";
            case TypeTagKnownValues.Tag_ounce:
                return "ounce";
            case TypeTagKnownValues.Tag_troy_ounce:
                return "troy_ounce";
            case TypeTagKnownValues.Tag_dram:
                return "dram";
            case TypeTagKnownValues.Tag_grain:
                return "grain";
            case TypeTagKnownValues.Tag_stone:
                return "stone";
            case TypeTagKnownValues.Tag_short_hundredweight:
                return "short_hundredweight";
            case TypeTagKnownValues.Tag_long_hundredweight:
                return "long_hundredweight";
            case TypeTagKnownValues.Tag_short_ton:
                return "short_ton";
            case TypeTagKnownValues.Tag_long_ton:
                return "long_ton";
            case TypeTagKnownValues.Tag_oil_barrel:
                return "oil_barrel";
            case TypeTagKnownValues.Tag_degree_fahrenheit:
                return "degree_fahrenheit";
            case TypeTagKnownValues.Tag_british_thermal_unit:
                return "british_thermal_unit";
            case TypeTagKnownValues.Tag_calorie:
                return "calorie";
            case TypeTagKnownValues.Tag_kilocalorie:
                return "kilocalorie";
            case TypeTagKnownValues.Tag_mechanical_horsepower:
                return "mechanical_horsepower";
            case TypeTagKnownValues.Tag_metric_horsepower:
                return "metric_horsepower";
            case TypeTagKnownValues.Tag_us_bushel:
                return "us_bushel";
            case TypeTagKnownValues.Tag_meter:
                return "meter";
            case TypeTagKnownValues.Tag_yoctometer:
                return "yoctometer";
            case TypeTagKnownValues.Tag_zeptometer:
                return "zeptometer";
            case TypeTagKnownValues.Tag_attometer:
                return "attometer";
            case TypeTagKnownValues.Tag_femtometer:
                return "femtometer";
            case TypeTagKnownValues.Tag_picometer:
                return "picometer";
            case TypeTagKnownValues.Tag_nanometer:
                return "nanometer";
            case TypeTagKnownValues.Tag_micrometer:
                return "micrometer";
            case TypeTagKnownValues.Tag_millimeter:
                return "millimeter";
            case TypeTagKnownValues.Tag_centimeter:
                return "centimeter";
            case TypeTagKnownValues.Tag_decimeter:
                return "decimeter";
            case TypeTagKnownValues.Tag_decameter:
                return "decameter";
            case TypeTagKnownValues.Tag_hectometer:
                return "hectometer";
            case TypeTagKnownValues.Tag_kilometer:
                return "kilometer";
            case TypeTagKnownValues.Tag_megameter:
                return "megameter";
            case TypeTagKnownValues.Tag_gigameter:
                return "gigameter";
            case TypeTagKnownValues.Tag_terameter:
                return "terameter";
            case TypeTagKnownValues.Tag_petameter:
                return "petameter";
            case TypeTagKnownValues.Tag_exameter:
                return "exameter";
            case TypeTagKnownValues.Tag_zettameter:
                return "zettameter";
            case TypeTagKnownValues.Tag_yottameter:
                return "yottameter";
            case TypeTagKnownValues.Tag_gram:
                return "gram";
            case TypeTagKnownValues.Tag_yoctogram:
                return "yoctogram";
            case TypeTagKnownValues.Tag_zeptogram:
                return "zeptogram";
            case TypeTagKnownValues.Tag_attogram:
                return "attogram";
            case TypeTagKnownValues.Tag_femtogram:
                return "femtogram";
            case TypeTagKnownValues.Tag_picogram:
                return "picogram";
            case TypeTagKnownValues.Tag_nanogram:
                return "nanogram";
            case TypeTagKnownValues.Tag_microgram:
                return "microgram";
            case TypeTagKnownValues.Tag_milligram:
                return "milligram";
            case TypeTagKnownValues.Tag_centigram:
                return "centigram";
            case TypeTagKnownValues.Tag_decigram:
                return "decigram";
            case TypeTagKnownValues.Tag_decagram:
                return "decagram";
            case TypeTagKnownValues.Tag_hectogram:
                return "hectogram";
            case TypeTagKnownValues.Tag_kilogram:
                return "kilogram";
            case TypeTagKnownValues.Tag_megagram:
                return "megagram";
            case TypeTagKnownValues.Tag_gigagram:
                return "gigagram";
            case TypeTagKnownValues.Tag_teragram:
                return "teragram";
            case TypeTagKnownValues.Tag_petagram:
                return "petagram";
            case TypeTagKnownValues.Tag_exagram:
                return "exagram";
            case TypeTagKnownValues.Tag_zettagram:
                return "zettagram";
            case TypeTagKnownValues.Tag_yottagram:
                return "yottagram";
            case TypeTagKnownValues.Tag_second:
                return "second";
            case TypeTagKnownValues.Tag_yoctosecond:
                return "yoctosecond";
            case TypeTagKnownValues.Tag_zeptosecond:
                return "zeptosecond";
            case TypeTagKnownValues.Tag_attosecond:
                return "attosecond";
            case TypeTagKnownValues.Tag_femtosecond:
                return "femtosecond";
            case TypeTagKnownValues.Tag_picosecond:
                return "picosecond";
            case TypeTagKnownValues.Tag_nanosecond:
                return "nanosecond";
            case TypeTagKnownValues.Tag_microsecond:
                return "microsecond";
            case TypeTagKnownValues.Tag_millisecond:
                return "millisecond";
            case TypeTagKnownValues.Tag_centisecond:
                return "centisecond";
            case TypeTagKnownValues.Tag_decisecond:
                return "decisecond";
            case TypeTagKnownValues.Tag_decasecond:
                return "decasecond";
            case TypeTagKnownValues.Tag_hectosecond:
                return "hectosecond";
            case TypeTagKnownValues.Tag_kilosecond:
                return "kilosecond";
            case TypeTagKnownValues.Tag_megasecond:
                return "megasecond";
            case TypeTagKnownValues.Tag_gigasecond:
                return "gigasecond";
            case TypeTagKnownValues.Tag_terasecond:
                return "terasecond";
            case TypeTagKnownValues.Tag_petasecond:
                return "petasecond";
            case TypeTagKnownValues.Tag_exasecond:
                return "exasecond";
            case TypeTagKnownValues.Tag_zettasecond:
                return "zettasecond";
            case TypeTagKnownValues.Tag_yottasecond:
                return "yottasecond";
            case TypeTagKnownValues.Tag_ampere:
                return "ampere";
            case TypeTagKnownValues.Tag_yoctoampere:
                return "yoctoampere";
            case TypeTagKnownValues.Tag_zeptoampere:
                return "zeptoampere";
            case TypeTagKnownValues.Tag_attoampere:
                return "attoampere";
            case TypeTagKnownValues.Tag_femtoampere:
                return "femtoampere";
            case TypeTagKnownValues.Tag_picoampere:
                return "picoampere";
            case TypeTagKnownValues.Tag_nanoampere:
                return "nanoampere";
            case TypeTagKnownValues.Tag_microampere:
                return "microampere";
            case TypeTagKnownValues.Tag_milliampere:
                return "milliampere";
            case TypeTagKnownValues.Tag_centiampere:
                return "centiampere";
            case TypeTagKnownValues.Tag_deciampere:
                return "deciampere";
            case TypeTagKnownValues.Tag_decaampere:
                return "decaampere";
            case TypeTagKnownValues.Tag_hectoampere:
                return "hectoampere";
            case TypeTagKnownValues.Tag_kiloampere:
                return "kiloampere";
            case TypeTagKnownValues.Tag_megaampere:
                return "megaampere";
            case TypeTagKnownValues.Tag_gigaampere:
                return "gigaampere";
            case TypeTagKnownValues.Tag_teraampere:
                return "teraampere";
            case TypeTagKnownValues.Tag_petaampere:
                return "petaampere";
            case TypeTagKnownValues.Tag_exaampere:
                return "exaampere";
            case TypeTagKnownValues.Tag_zettaampere:
                return "zettaampere";
            case TypeTagKnownValues.Tag_yottaampere:
                return "yottaampere";
            case TypeTagKnownValues.Tag_kelvin:
                return "kelvin";
            case TypeTagKnownValues.Tag_yoctokelvin:
                return "yoctokelvin";
            case TypeTagKnownValues.Tag_zeptokelvin:
                return "zeptokelvin";
            case TypeTagKnownValues.Tag_attokelvin:
                return "attokelvin";
            case TypeTagKnownValues.Tag_femtokelvin:
                return "femtokelvin";
            case TypeTagKnownValues.Tag_picokelvin:
                return "picokelvin";
            case TypeTagKnownValues.Tag_nanokelvin:
                return "nanokelvin";
            case TypeTagKnownValues.Tag_microkelvin:
                return "microkelvin";
            case TypeTagKnownValues.Tag_millikelvin:
                return "millikelvin";
            case TypeTagKnownValues.Tag_centikelvin:
                return "centikelvin";
            case TypeTagKnownValues.Tag_decikelvin:
                return "decikelvin";
            case TypeTagKnownValues.Tag_decakelvin:
                return "decakelvin";
            case TypeTagKnownValues.Tag_hectokelvin:
                return "hectokelvin";
            case TypeTagKnownValues.Tag_kilokelvin:
                return "kilokelvin";
            case TypeTagKnownValues.Tag_megakelvin:
                return "megakelvin";
            case TypeTagKnownValues.Tag_gigakelvin:
                return "gigakelvin";
            case TypeTagKnownValues.Tag_terakelvin:
                return "terakelvin";
            case TypeTagKnownValues.Tag_petakelvin:
                return "petakelvin";
            case TypeTagKnownValues.Tag_exakelvin:
                return "exakelvin";
            case TypeTagKnownValues.Tag_zettakelvin:
                return "zettakelvin";
            case TypeTagKnownValues.Tag_yottakelvin:
                return "yottakelvin";
            case TypeTagKnownValues.Tag_mole:
                return "mole";
            case TypeTagKnownValues.Tag_yoctomole:
                return "yoctomole";
            case TypeTagKnownValues.Tag_zeptomole:
                return "zeptomole";
            case TypeTagKnownValues.Tag_attomole:
                return "attomole";
            case TypeTagKnownValues.Tag_femtomole:
                return "femtomole";
            case TypeTagKnownValues.Tag_picomole:
                return "picomole";
            case TypeTagKnownValues.Tag_nanomole:
                return "nanomole";
            case TypeTagKnownValues.Tag_micromole:
                return "micromole";
            case TypeTagKnownValues.Tag_millimole:
                return "millimole";
            case TypeTagKnownValues.Tag_centimole:
                return "centimole";
            case TypeTagKnownValues.Tag_decimole:
                return "decimole";
            case TypeTagKnownValues.Tag_decamole:
                return "decamole";
            case TypeTagKnownValues.Tag_hectomole:
                return "hectomole";
            case TypeTagKnownValues.Tag_kilomole:
                return "kilomole";
            case TypeTagKnownValues.Tag_megamole:
                return "megamole";
            case TypeTagKnownValues.Tag_gigamole:
                return "gigamole";
            case TypeTagKnownValues.Tag_teramole:
                return "teramole";
            case TypeTagKnownValues.Tag_petamole:
                return "petamole";
            case TypeTagKnownValues.Tag_examole:
                return "examole";
            case TypeTagKnownValues.Tag_zettamole:
                return "zettamole";
            case TypeTagKnownValues.Tag_yottamole:
                return "yottamole";
            case TypeTagKnownValues.Tag_candela:
                return "candela";
            case TypeTagKnownValues.Tag_yoctocandela:
                return "yoctocandela";
            case TypeTagKnownValues.Tag_zeptocandela:
                return "zeptocandela";
            case TypeTagKnownValues.Tag_attocandela:
                return "attocandela";
            case TypeTagKnownValues.Tag_femtocandela:
                return "femtocandela";
            case TypeTagKnownValues.Tag_picocandela:
                return "picocandela";
            case TypeTagKnownValues.Tag_nanocandela:
                return "nanocandela";
            case TypeTagKnownValues.Tag_microcandela:
                return "microcandela";
            case TypeTagKnownValues.Tag_millicandela:
                return "millicandela";
            case TypeTagKnownValues.Tag_centicandela:
                return "centicandela";
            case TypeTagKnownValues.Tag_decicandela:
                return "decicandela";
            case TypeTagKnownValues.Tag_decacandela:
                return "decacandela";
            case TypeTagKnownValues.Tag_hectocandela:
                return "hectocandela";
            case TypeTagKnownValues.Tag_kilocandela:
                return "kilocandela";
            case TypeTagKnownValues.Tag_megacandela:
                return "megacandela";
            case TypeTagKnownValues.Tag_gigacandela:
                return "gigacandela";
            case TypeTagKnownValues.Tag_teracandela:
                return "teracandela";
            case TypeTagKnownValues.Tag_petacandela:
                return "petacandela";
            case TypeTagKnownValues.Tag_exacandela:
                return "exacandela";
            case TypeTagKnownValues.Tag_zettacandela:
                return "zettacandela";
            case TypeTagKnownValues.Tag_yottacandela:
                return "yottacandela";
            case TypeTagKnownValues.Tag_radian:
                return "radian";
            case TypeTagKnownValues.Tag_yoctoradian:
                return "yoctoradian";
            case TypeTagKnownValues.Tag_zeptoradian:
                return "zeptoradian";
            case TypeTagKnownValues.Tag_attoradian:
                return "attoradian";
            case TypeTagKnownValues.Tag_femtoradian:
                return "femtoradian";
            case TypeTagKnownValues.Tag_picoradian:
                return "picoradian";
            case TypeTagKnownValues.Tag_nanoradian:
                return "nanoradian";
            case TypeTagKnownValues.Tag_microradian:
                return "microradian";
            case TypeTagKnownValues.Tag_milliradian:
                return "milliradian";
            case TypeTagKnownValues.Tag_centiradian:
                return "centiradian";
            case TypeTagKnownValues.Tag_deciradian:
                return "deciradian";
            case TypeTagKnownValues.Tag_decaradian:
                return "decaradian";
            case TypeTagKnownValues.Tag_hectoradian:
                return "hectoradian";
            case TypeTagKnownValues.Tag_kiloradian:
                return "kiloradian";
            case TypeTagKnownValues.Tag_megaradian:
                return "megaradian";
            case TypeTagKnownValues.Tag_gigaradian:
                return "gigaradian";
            case TypeTagKnownValues.Tag_teraradian:
                return "teraradian";
            case TypeTagKnownValues.Tag_petaradian:
                return "petaradian";
            case TypeTagKnownValues.Tag_exaradian:
                return "exaradian";
            case TypeTagKnownValues.Tag_zettaradian:
                return "zettaradian";
            case TypeTagKnownValues.Tag_yottaradian:
                return "yottaradian";
            case TypeTagKnownValues.Tag_steradian:
                return "steradian";
            case TypeTagKnownValues.Tag_yoctosteradian:
                return "yoctosteradian";
            case TypeTagKnownValues.Tag_zeptosteradian:
                return "zeptosteradian";
            case TypeTagKnownValues.Tag_attosteradian:
                return "attosteradian";
            case TypeTagKnownValues.Tag_femtosteradian:
                return "femtosteradian";
            case TypeTagKnownValues.Tag_picosteradian:
                return "picosteradian";
            case TypeTagKnownValues.Tag_nanosteradian:
                return "nanosteradian";
            case TypeTagKnownValues.Tag_microsteradian:
                return "microsteradian";
            case TypeTagKnownValues.Tag_millisteradian:
                return "millisteradian";
            case TypeTagKnownValues.Tag_centisteradian:
                return "centisteradian";
            case TypeTagKnownValues.Tag_decisteradian:
                return "decisteradian";
            case TypeTagKnownValues.Tag_decasteradian:
                return "decasteradian";
            case TypeTagKnownValues.Tag_hectosteradian:
                return "hectosteradian";
            case TypeTagKnownValues.Tag_kilosteradian:
                return "kilosteradian";
            case TypeTagKnownValues.Tag_megasteradian:
                return "megasteradian";
            case TypeTagKnownValues.Tag_gigasteradian:
                return "gigasteradian";
            case TypeTagKnownValues.Tag_terasteradian:
                return "terasteradian";
            case TypeTagKnownValues.Tag_petasteradian:
                return "petasteradian";
            case TypeTagKnownValues.Tag_exasteradian:
                return "exasteradian";
            case TypeTagKnownValues.Tag_zettasteradian:
                return "zettasteradian";
            case TypeTagKnownValues.Tag_yottasteradian:
                return "yottasteradian";
            case TypeTagKnownValues.Tag_hertz:
                return "hertz";
            case TypeTagKnownValues.Tag_yoctohertz:
                return "yoctohertz";
            case TypeTagKnownValues.Tag_zeptohertz:
                return "zeptohertz";
            case TypeTagKnownValues.Tag_attohertz:
                return "attohertz";
            case TypeTagKnownValues.Tag_femtohertz:
                return "femtohertz";
            case TypeTagKnownValues.Tag_picohertz:
                return "picohertz";
            case TypeTagKnownValues.Tag_nanohertz:
                return "nanohertz";
            case TypeTagKnownValues.Tag_microhertz:
                return "microhertz";
            case TypeTagKnownValues.Tag_millihertz:
                return "millihertz";
            case TypeTagKnownValues.Tag_centihertz:
                return "centihertz";
            case TypeTagKnownValues.Tag_decihertz:
                return "decihertz";
            case TypeTagKnownValues.Tag_decahertz:
                return "decahertz";
            case TypeTagKnownValues.Tag_hectohertz:
                return "hectohertz";
            case TypeTagKnownValues.Tag_kilohertz:
                return "kilohertz";
            case TypeTagKnownValues.Tag_megahertz:
                return "megahertz";
            case TypeTagKnownValues.Tag_gigahertz:
                return "gigahertz";
            case TypeTagKnownValues.Tag_terahertz:
                return "terahertz";
            case TypeTagKnownValues.Tag_petahertz:
                return "petahertz";
            case TypeTagKnownValues.Tag_exahertz:
                return "exahertz";
            case TypeTagKnownValues.Tag_zettahertz:
                return "zettahertz";
            case TypeTagKnownValues.Tag_yottahertz:
                return "yottahertz";
            case TypeTagKnownValues.Tag_newton:
                return "newton";
            case TypeTagKnownValues.Tag_yoctonewton:
                return "yoctonewton";
            case TypeTagKnownValues.Tag_zeptonewton:
                return "zeptonewton";
            case TypeTagKnownValues.Tag_attonewton:
                return "attonewton";
            case TypeTagKnownValues.Tag_femtonewton:
                return "femtonewton";
            case TypeTagKnownValues.Tag_piconewton:
                return "piconewton";
            case TypeTagKnownValues.Tag_nanonewton:
                return "nanonewton";
            case TypeTagKnownValues.Tag_micronewton:
                return "micronewton";
            case TypeTagKnownValues.Tag_millinewton:
                return "millinewton";
            case TypeTagKnownValues.Tag_centinewton:
                return "centinewton";
            case TypeTagKnownValues.Tag_decinewton:
                return "decinewton";
            case TypeTagKnownValues.Tag_decanewton:
                return "decanewton";
            case TypeTagKnownValues.Tag_hectonewton:
                return "hectonewton";
            case TypeTagKnownValues.Tag_kilonewton:
                return "kilonewton";
            case TypeTagKnownValues.Tag_meganewton:
                return "meganewton";
            case TypeTagKnownValues.Tag_giganewton:
                return "giganewton";
            case TypeTagKnownValues.Tag_teranewton:
                return "teranewton";
            case TypeTagKnownValues.Tag_petanewton:
                return "petanewton";
            case TypeTagKnownValues.Tag_exanewton:
                return "exanewton";
            case TypeTagKnownValues.Tag_zettanewton:
                return "zettanewton";
            case TypeTagKnownValues.Tag_yottanewton:
                return "yottanewton";
            case TypeTagKnownValues.Tag_pascal:
                return "pascal";
            case TypeTagKnownValues.Tag_yoctopascal:
                return "yoctopascal";
            case TypeTagKnownValues.Tag_zeptopascal:
                return "zeptopascal";
            case TypeTagKnownValues.Tag_attopascal:
                return "attopascal";
            case TypeTagKnownValues.Tag_femtopascal:
                return "femtopascal";
            case TypeTagKnownValues.Tag_picopascal:
                return "picopascal";
            case TypeTagKnownValues.Tag_nanopascal:
                return "nanopascal";
            case TypeTagKnownValues.Tag_micropascal:
                return "micropascal";
            case TypeTagKnownValues.Tag_millipascal:
                return "millipascal";
            case TypeTagKnownValues.Tag_centipascal:
                return "centipascal";
            case TypeTagKnownValues.Tag_decipascal:
                return "decipascal";
            case TypeTagKnownValues.Tag_decapascal:
                return "decapascal";
            case TypeTagKnownValues.Tag_hectopascal:
                return "hectopascal";
            case TypeTagKnownValues.Tag_kilopascal:
                return "kilopascal";
            case TypeTagKnownValues.Tag_megapascal:
                return "megapascal";
            case TypeTagKnownValues.Tag_gigapascal:
                return "gigapascal";
            case TypeTagKnownValues.Tag_terapascal:
                return "terapascal";
            case TypeTagKnownValues.Tag_petapascal:
                return "petapascal";
            case TypeTagKnownValues.Tag_exapascal:
                return "exapascal";
            case TypeTagKnownValues.Tag_zettapascal:
                return "zettapascal";
            case TypeTagKnownValues.Tag_yottapascal:
                return "yottapascal";
            case TypeTagKnownValues.Tag_joule:
                return "joule";
            case TypeTagKnownValues.Tag_yoctojoule:
                return "yoctojoule";
            case TypeTagKnownValues.Tag_zeptojoule:
                return "zeptojoule";
            case TypeTagKnownValues.Tag_attojoule:
                return "attojoule";
            case TypeTagKnownValues.Tag_femtojoule:
                return "femtojoule";
            case TypeTagKnownValues.Tag_picojoule:
                return "picojoule";
            case TypeTagKnownValues.Tag_nanojoule:
                return "nanojoule";
            case TypeTagKnownValues.Tag_microjoule:
                return "microjoule";
            case TypeTagKnownValues.Tag_millijoule:
                return "millijoule";
            case TypeTagKnownValues.Tag_centijoule:
                return "centijoule";
            case TypeTagKnownValues.Tag_decijoule:
                return "decijoule";
            case TypeTagKnownValues.Tag_decajoule:
                return "decajoule";
            case TypeTagKnownValues.Tag_hectojoule:
                return "hectojoule";
            case TypeTagKnownValues.Tag_kilojoule:
                return "kilojoule";
            case TypeTagKnownValues.Tag_megajoule:
                return "megajoule";
            case TypeTagKnownValues.Tag_gigajoule:
                return "gigajoule";
            case TypeTagKnownValues.Tag_terajoule:
                return "terajoule";
            case TypeTagKnownValues.Tag_petajoule:
                return "petajoule";
            case TypeTagKnownValues.Tag_exajoule:
                return "exajoule";
            case TypeTagKnownValues.Tag_zettajoule:
                return "zettajoule";
            case TypeTagKnownValues.Tag_yottajoule:
                return "yottajoule";
            case TypeTagKnownValues.Tag_watt:
                return "watt";
            case TypeTagKnownValues.Tag_yoctowatt:
                return "yoctowatt";
            case TypeTagKnownValues.Tag_zeptowatt:
                return "zeptowatt";
            case TypeTagKnownValues.Tag_attowatt:
                return "attowatt";
            case TypeTagKnownValues.Tag_femtowatt:
                return "femtowatt";
            case TypeTagKnownValues.Tag_picowatt:
                return "picowatt";
            case TypeTagKnownValues.Tag_nanowatt:
                return "nanowatt";
            case TypeTagKnownValues.Tag_microwatt:
                return "microwatt";
            case TypeTagKnownValues.Tag_milliwatt:
                return "milliwatt";
            case TypeTagKnownValues.Tag_centiwatt:
                return "centiwatt";
            case TypeTagKnownValues.Tag_deciwatt:
                return "deciwatt";
            case TypeTagKnownValues.Tag_decawatt:
                return "decawatt";
            case TypeTagKnownValues.Tag_hectowatt:
                return "hectowatt";
            case TypeTagKnownValues.Tag_kilowatt:
                return "kilowatt";
            case TypeTagKnownValues.Tag_megawatt:
                return "megawatt";
            case TypeTagKnownValues.Tag_gigawatt:
                return "gigawatt";
            case TypeTagKnownValues.Tag_terawatt:
                return "terawatt";
            case TypeTagKnownValues.Tag_petawatt:
                return "petawatt";
            case TypeTagKnownValues.Tag_exawatt:
                return "exawatt";
            case TypeTagKnownValues.Tag_zettawatt:
                return "zettawatt";
            case TypeTagKnownValues.Tag_yottawatt:
                return "yottawatt";
            case TypeTagKnownValues.Tag_coulomb:
                return "coulomb";
            case TypeTagKnownValues.Tag_yoctocoulomb:
                return "yoctocoulomb";
            case TypeTagKnownValues.Tag_zeptocoulomb:
                return "zeptocoulomb";
            case TypeTagKnownValues.Tag_attocoulomb:
                return "attocoulomb";
            case TypeTagKnownValues.Tag_femtocoulomb:
                return "femtocoulomb";
            case TypeTagKnownValues.Tag_picocoulomb:
                return "picocoulomb";
            case TypeTagKnownValues.Tag_nanocoulomb:
                return "nanocoulomb";
            case TypeTagKnownValues.Tag_microcoulomb:
                return "microcoulomb";
            case TypeTagKnownValues.Tag_millicoulomb:
                return "millicoulomb";
            case TypeTagKnownValues.Tag_centicoulomb:
                return "centicoulomb";
            case TypeTagKnownValues.Tag_decicoulomb:
                return "decicoulomb";
            case TypeTagKnownValues.Tag_decacoulomb:
                return "decacoulomb";
            case TypeTagKnownValues.Tag_hectocoulomb:
                return "hectocoulomb";
            case TypeTagKnownValues.Tag_kilocoulomb:
                return "kilocoulomb";
            case TypeTagKnownValues.Tag_megacoulomb:
                return "megacoulomb";
            case TypeTagKnownValues.Tag_gigacoulomb:
                return "gigacoulomb";
            case TypeTagKnownValues.Tag_teracoulomb:
                return "teracoulomb";
            case TypeTagKnownValues.Tag_petacoulomb:
                return "petacoulomb";
            case TypeTagKnownValues.Tag_exacoulomb:
                return "exacoulomb";
            case TypeTagKnownValues.Tag_zettacoulomb:
                return "zettacoulomb";
            case TypeTagKnownValues.Tag_yottacoulomb:
                return "yottacoulomb";
            case TypeTagKnownValues.Tag_volt:
                return "volt";
            case TypeTagKnownValues.Tag_yoctovolt:
                return "yoctovolt";
            case TypeTagKnownValues.Tag_zeptovolt:
                return "zeptovolt";
            case TypeTagKnownValues.Tag_attovolt:
                return "attovolt";
            case TypeTagKnownValues.Tag_femtovolt:
                return "femtovolt";
            case TypeTagKnownValues.Tag_picovolt:
                return "picovolt";
            case TypeTagKnownValues.Tag_nanovolt:
                return "nanovolt";
            case TypeTagKnownValues.Tag_microvolt:
                return "microvolt";
            case TypeTagKnownValues.Tag_millivolt:
                return "millivolt";
            case TypeTagKnownValues.Tag_centivolt:
                return "centivolt";
            case TypeTagKnownValues.Tag_decivolt:
                return "decivolt";
            case TypeTagKnownValues.Tag_decavolt:
                return "decavolt";
            case TypeTagKnownValues.Tag_hectovolt:
                return "hectovolt";
            case TypeTagKnownValues.Tag_kilovolt:
                return "kilovolt";
            case TypeTagKnownValues.Tag_megavolt:
                return "megavolt";
            case TypeTagKnownValues.Tag_gigavolt:
                return "gigavolt";
            case TypeTagKnownValues.Tag_teravolt:
                return "teravolt";
            case TypeTagKnownValues.Tag_petavolt:
                return "petavolt";
            case TypeTagKnownValues.Tag_exavolt:
                return "exavolt";
            case TypeTagKnownValues.Tag_zettavolt:
                return "zettavolt";
            case TypeTagKnownValues.Tag_yottavolt:
                return "yottavolt";
            case TypeTagKnownValues.Tag_farad:
                return "farad";
            case TypeTagKnownValues.Tag_yoctofarad:
                return "yoctofarad";
            case TypeTagKnownValues.Tag_zeptofarad:
                return "zeptofarad";
            case TypeTagKnownValues.Tag_attofarad:
                return "attofarad";
            case TypeTagKnownValues.Tag_femtofarad:
                return "femtofarad";
            case TypeTagKnownValues.Tag_picofarad:
                return "picofarad";
            case TypeTagKnownValues.Tag_nanofarad:
                return "nanofarad";
            case TypeTagKnownValues.Tag_microfarad:
                return "microfarad";
            case TypeTagKnownValues.Tag_millifarad:
                return "millifarad";
            case TypeTagKnownValues.Tag_centifarad:
                return "centifarad";
            case TypeTagKnownValues.Tag_decifarad:
                return "decifarad";
            case TypeTagKnownValues.Tag_decafarad:
                return "decafarad";
            case TypeTagKnownValues.Tag_hectofarad:
                return "hectofarad";
            case TypeTagKnownValues.Tag_kilofarad:
                return "kilofarad";
            case TypeTagKnownValues.Tag_megafarad:
                return "megafarad";
            case TypeTagKnownValues.Tag_gigafarad:
                return "gigafarad";
            case TypeTagKnownValues.Tag_terafarad:
                return "terafarad";
            case TypeTagKnownValues.Tag_petafarad:
                return "petafarad";
            case TypeTagKnownValues.Tag_exafarad:
                return "exafarad";
            case TypeTagKnownValues.Tag_zettafarad:
                return "zettafarad";
            case TypeTagKnownValues.Tag_yottafarad:
                return "yottafarad";
            case TypeTagKnownValues.Tag_ohm:
                return "ohm";
            case TypeTagKnownValues.Tag_yoctoohm:
                return "yoctoohm";
            case TypeTagKnownValues.Tag_zeptoohm:
                return "zeptoohm";
            case TypeTagKnownValues.Tag_attoohm:
                return "attoohm";
            case TypeTagKnownValues.Tag_femtoohm:
                return "femtoohm";
            case TypeTagKnownValues.Tag_picoohm:
                return "picoohm";
            case TypeTagKnownValues.Tag_nanoohm:
                return "nanoohm";
            case TypeTagKnownValues.Tag_microohm:
                return "microohm";
            case TypeTagKnownValues.Tag_milliohm:
                return "milliohm";
            case TypeTagKnownValues.Tag_centiohm:
                return "centiohm";
            case TypeTagKnownValues.Tag_deciohm:
                return "deciohm";
            case TypeTagKnownValues.Tag_decaohm:
                return "decaohm";
            case TypeTagKnownValues.Tag_hectoohm:
                return "hectoohm";
            case TypeTagKnownValues.Tag_kiloohm:
                return "kiloohm";
            case TypeTagKnownValues.Tag_megaohm:
                return "megaohm";
            case TypeTagKnownValues.Tag_gigaohm:
                return "gigaohm";
            case TypeTagKnownValues.Tag_teraohm:
                return "teraohm";
            case TypeTagKnownValues.Tag_petaohm:
                return "petaohm";
            case TypeTagKnownValues.Tag_exaohm:
                return "exaohm";
            case TypeTagKnownValues.Tag_zettaohm:
                return "zettaohm";
            case TypeTagKnownValues.Tag_yottaohm:
                return "yottaohm";
            case TypeTagKnownValues.Tag_siemens:
                return "siemens";
            case TypeTagKnownValues.Tag_yoctosiemens:
                return "yoctosiemens";
            case TypeTagKnownValues.Tag_zeptosiemens:
                return "zeptosiemens";
            case TypeTagKnownValues.Tag_attosiemens:
                return "attosiemens";
            case TypeTagKnownValues.Tag_femtosiemens:
                return "femtosiemens";
            case TypeTagKnownValues.Tag_picosiemens:
                return "picosiemens";
            case TypeTagKnownValues.Tag_nanosiemens:
                return "nanosiemens";
            case TypeTagKnownValues.Tag_microsiemens:
                return "microsiemens";
            case TypeTagKnownValues.Tag_millisiemens:
                return "millisiemens";
            case TypeTagKnownValues.Tag_centisiemens:
                return "centisiemens";
            case TypeTagKnownValues.Tag_decisiemens:
                return "decisiemens";
            case TypeTagKnownValues.Tag_decasiemens:
                return "decasiemens";
            case TypeTagKnownValues.Tag_hectosiemens:
                return "hectosiemens";
            case TypeTagKnownValues.Tag_kilosiemens:
                return "kilosiemens";
            case TypeTagKnownValues.Tag_megasiemens:
                return "megasiemens";
            case TypeTagKnownValues.Tag_gigasiemens:
                return "gigasiemens";
            case TypeTagKnownValues.Tag_terasiemens:
                return "terasiemens";
            case TypeTagKnownValues.Tag_petasiemens:
                return "petasiemens";
            case TypeTagKnownValues.Tag_exasiemens:
                return "exasiemens";
            case TypeTagKnownValues.Tag_zettasiemens:
                return "zettasiemens";
            case TypeTagKnownValues.Tag_yottasiemens:
                return "yottasiemens";
            case TypeTagKnownValues.Tag_weber:
                return "weber";
            case TypeTagKnownValues.Tag_yoctoweber:
                return "yoctoweber";
            case TypeTagKnownValues.Tag_zeptoweber:
                return "zeptoweber";
            case TypeTagKnownValues.Tag_attoweber:
                return "attoweber";
            case TypeTagKnownValues.Tag_femtoweber:
                return "femtoweber";
            case TypeTagKnownValues.Tag_picoweber:
                return "picoweber";
            case TypeTagKnownValues.Tag_nanoweber:
                return "nanoweber";
            case TypeTagKnownValues.Tag_microweber:
                return "microweber";
            case TypeTagKnownValues.Tag_milliweber:
                return "milliweber";
            case TypeTagKnownValues.Tag_centiweber:
                return "centiweber";
            case TypeTagKnownValues.Tag_deciweber:
                return "deciweber";
            case TypeTagKnownValues.Tag_decaweber:
                return "decaweber";
            case TypeTagKnownValues.Tag_hectoweber:
                return "hectoweber";
            case TypeTagKnownValues.Tag_kiloweber:
                return "kiloweber";
            case TypeTagKnownValues.Tag_megaweber:
                return "megaweber";
            case TypeTagKnownValues.Tag_gigaweber:
                return "gigaweber";
            case TypeTagKnownValues.Tag_teraweber:
                return "teraweber";
            case TypeTagKnownValues.Tag_petaweber:
                return "petaweber";
            case TypeTagKnownValues.Tag_exaweber:
                return "exaweber";
            case TypeTagKnownValues.Tag_zettaweber:
                return "zettaweber";
            case TypeTagKnownValues.Tag_yottaweber:
                return "yottaweber";
            case TypeTagKnownValues.Tag_tesla:
                return "tesla";
            case TypeTagKnownValues.Tag_yoctotesla:
                return "yoctotesla";
            case TypeTagKnownValues.Tag_zeptotesla:
                return "zeptotesla";
            case TypeTagKnownValues.Tag_attotesla:
                return "attotesla";
            case TypeTagKnownValues.Tag_femtotesla:
                return "femtotesla";
            case TypeTagKnownValues.Tag_picotesla:
                return "picotesla";
            case TypeTagKnownValues.Tag_nanotesla:
                return "nanotesla";
            case TypeTagKnownValues.Tag_microtesla:
                return "microtesla";
            case TypeTagKnownValues.Tag_millitesla:
                return "millitesla";
            case TypeTagKnownValues.Tag_centitesla:
                return "centitesla";
            case TypeTagKnownValues.Tag_decitesla:
                return "decitesla";
            case TypeTagKnownValues.Tag_decatesla:
                return "decatesla";
            case TypeTagKnownValues.Tag_hectotesla:
                return "hectotesla";
            case TypeTagKnownValues.Tag_kilotesla:
                return "kilotesla";
            case TypeTagKnownValues.Tag_megatesla:
                return "megatesla";
            case TypeTagKnownValues.Tag_gigatesla:
                return "gigatesla";
            case TypeTagKnownValues.Tag_teratesla:
                return "teratesla";
            case TypeTagKnownValues.Tag_petatesla:
                return "petatesla";
            case TypeTagKnownValues.Tag_exatesla:
                return "exatesla";
            case TypeTagKnownValues.Tag_zettatesla:
                return "zettatesla";
            case TypeTagKnownValues.Tag_yottatesla:
                return "yottatesla";
            case TypeTagKnownValues.Tag_henry:
                return "henry";
            case TypeTagKnownValues.Tag_yoctohenry:
                return "yoctohenry";
            case TypeTagKnownValues.Tag_zeptohenry:
                return "zeptohenry";
            case TypeTagKnownValues.Tag_attohenry:
                return "attohenry";
            case TypeTagKnownValues.Tag_femtohenry:
                return "femtohenry";
            case TypeTagKnownValues.Tag_picohenry:
                return "picohenry";
            case TypeTagKnownValues.Tag_nanohenry:
                return "nanohenry";
            case TypeTagKnownValues.Tag_microhenry:
                return "microhenry";
            case TypeTagKnownValues.Tag_millihenry:
                return "millihenry";
            case TypeTagKnownValues.Tag_centihenry:
                return "centihenry";
            case TypeTagKnownValues.Tag_decihenry:
                return "decihenry";
            case TypeTagKnownValues.Tag_decahenry:
                return "decahenry";
            case TypeTagKnownValues.Tag_hectohenry:
                return "hectohenry";
            case TypeTagKnownValues.Tag_kilohenry:
                return "kilohenry";
            case TypeTagKnownValues.Tag_megahenry:
                return "megahenry";
            case TypeTagKnownValues.Tag_gigahenry:
                return "gigahenry";
            case TypeTagKnownValues.Tag_terahenry:
                return "terahenry";
            case TypeTagKnownValues.Tag_petahenry:
                return "petahenry";
            case TypeTagKnownValues.Tag_exahenry:
                return "exahenry";
            case TypeTagKnownValues.Tag_zettahenry:
                return "zettahenry";
            case TypeTagKnownValues.Tag_yottahenry:
                return "yottahenry";
            case TypeTagKnownValues.Tag_degree_celsius:
                return "degree_celsius";
            case TypeTagKnownValues.Tag_yoctodegree_celsius:
                return "yoctodegree_celsius";
            case TypeTagKnownValues.Tag_zeptodegree_celsius:
                return "zeptodegree_celsius";
            case TypeTagKnownValues.Tag_attodegree_celsius:
                return "attodegree_celsius";
            case TypeTagKnownValues.Tag_femtodegree_celsius:
                return "femtodegree_celsius";
            case TypeTagKnownValues.Tag_picodegree_celsius:
                return "picodegree_celsius";
            case TypeTagKnownValues.Tag_nanodegree_celsius:
                return "nanodegree_celsius";
            case TypeTagKnownValues.Tag_microdegree_celsius:
                return "microdegree_celsius";
            case TypeTagKnownValues.Tag_millidegree_celsius:
                return "millidegree_celsius";
            case TypeTagKnownValues.Tag_centidegree_celsius:
                return "centidegree_celsius";
            case TypeTagKnownValues.Tag_decidegree_celsius:
                return "decidegree_celsius";
            case TypeTagKnownValues.Tag_decadegree_celsius:
                return "decadegree_celsius";
            case TypeTagKnownValues.Tag_hectodegree_celsius:
                return "hectodegree_celsius";
            case TypeTagKnownValues.Tag_kilodegree_celsius:
                return "kilodegree_celsius";
            case TypeTagKnownValues.Tag_megadegree_celsius:
                return "megadegree_celsius";
            case TypeTagKnownValues.Tag_gigadegree_celsius:
                return "gigadegree_celsius";
            case TypeTagKnownValues.Tag_teradegree_celsius:
                return "teradegree_celsius";
            case TypeTagKnownValues.Tag_petadegree_celsius:
                return "petadegree_celsius";
            case TypeTagKnownValues.Tag_exadegree_celsius:
                return "exadegree_celsius";
            case TypeTagKnownValues.Tag_zettadegree_celsius:
                return "zettadegree_celsius";
            case TypeTagKnownValues.Tag_yottadegree_celsius:
                return "yottadegree_celsius";
            case TypeTagKnownValues.Tag_lumen:
                return "lumen";
            case TypeTagKnownValues.Tag_yoctolumen:
                return "yoctolumen";
            case TypeTagKnownValues.Tag_zeptolumen:
                return "zeptolumen";
            case TypeTagKnownValues.Tag_attolumen:
                return "attolumen";
            case TypeTagKnownValues.Tag_femtolumen:
                return "femtolumen";
            case TypeTagKnownValues.Tag_picolumen:
                return "picolumen";
            case TypeTagKnownValues.Tag_nanolumen:
                return "nanolumen";
            case TypeTagKnownValues.Tag_microlumen:
                return "microlumen";
            case TypeTagKnownValues.Tag_millilumen:
                return "millilumen";
            case TypeTagKnownValues.Tag_centilumen:
                return "centilumen";
            case TypeTagKnownValues.Tag_decilumen:
                return "decilumen";
            case TypeTagKnownValues.Tag_decalumen:
                return "decalumen";
            case TypeTagKnownValues.Tag_hectolumen:
                return "hectolumen";
            case TypeTagKnownValues.Tag_kilolumen:
                return "kilolumen";
            case TypeTagKnownValues.Tag_megalumen:
                return "megalumen";
            case TypeTagKnownValues.Tag_gigalumen:
                return "gigalumen";
            case TypeTagKnownValues.Tag_teralumen:
                return "teralumen";
            case TypeTagKnownValues.Tag_petalumen:
                return "petalumen";
            case TypeTagKnownValues.Tag_exalumen:
                return "exalumen";
            case TypeTagKnownValues.Tag_zettalumen:
                return "zettalumen";
            case TypeTagKnownValues.Tag_yottalumen:
                return "yottalumen";
            case TypeTagKnownValues.Tag_lux:
                return "lux";
            case TypeTagKnownValues.Tag_yoctolux:
                return "yoctolux";
            case TypeTagKnownValues.Tag_zeptolux:
                return "zeptolux";
            case TypeTagKnownValues.Tag_attolux:
                return "attolux";
            case TypeTagKnownValues.Tag_femtolux:
                return "femtolux";
            case TypeTagKnownValues.Tag_picolux:
                return "picolux";
            case TypeTagKnownValues.Tag_nanolux:
                return "nanolux";
            case TypeTagKnownValues.Tag_microlux:
                return "microlux";
            case TypeTagKnownValues.Tag_millilux:
                return "millilux";
            case TypeTagKnownValues.Tag_centilux:
                return "centilux";
            case TypeTagKnownValues.Tag_decilux:
                return "decilux";
            case TypeTagKnownValues.Tag_decalux:
                return "decalux";
            case TypeTagKnownValues.Tag_hectolux:
                return "hectolux";
            case TypeTagKnownValues.Tag_kilolux:
                return "kilolux";
            case TypeTagKnownValues.Tag_megalux:
                return "megalux";
            case TypeTagKnownValues.Tag_gigalux:
                return "gigalux";
            case TypeTagKnownValues.Tag_teralux:
                return "teralux";
            case TypeTagKnownValues.Tag_petalux:
                return "petalux";
            case TypeTagKnownValues.Tag_exalux:
                return "exalux";
            case TypeTagKnownValues.Tag_zettalux:
                return "zettalux";
            case TypeTagKnownValues.Tag_yottalux:
                return "yottalux";
            case TypeTagKnownValues.Tag_becquerel:
                return "becquerel";
            case TypeTagKnownValues.Tag_yoctobecquerel:
                return "yoctobecquerel";
            case TypeTagKnownValues.Tag_zeptobecquerel:
                return "zeptobecquerel";
            case TypeTagKnownValues.Tag_attobecquerel:
                return "attobecquerel";
            case TypeTagKnownValues.Tag_femtobecquerel:
                return "femtobecquerel";
            case TypeTagKnownValues.Tag_picobecquerel:
                return "picobecquerel";
            case TypeTagKnownValues.Tag_nanobecquerel:
                return "nanobecquerel";
            case TypeTagKnownValues.Tag_microbecquerel:
                return "microbecquerel";
            case TypeTagKnownValues.Tag_millibecquerel:
                return "millibecquerel";
            case TypeTagKnownValues.Tag_centibecquerel:
                return "centibecquerel";
            case TypeTagKnownValues.Tag_decibecquerel:
                return "decibecquerel";
            case TypeTagKnownValues.Tag_decabecquerel:
                return "decabecquerel";
            case TypeTagKnownValues.Tag_hectobecquerel:
                return "hectobecquerel";
            case TypeTagKnownValues.Tag_kilobecquerel:
                return "kilobecquerel";
            case TypeTagKnownValues.Tag_megabecquerel:
                return "megabecquerel";
            case TypeTagKnownValues.Tag_gigabecquerel:
                return "gigabecquerel";
            case TypeTagKnownValues.Tag_terabecquerel:
                return "terabecquerel";
            case TypeTagKnownValues.Tag_petabecquerel:
                return "petabecquerel";
            case TypeTagKnownValues.Tag_exabecquerel:
                return "exabecquerel";
            case TypeTagKnownValues.Tag_zettabecquerel:
                return "zettabecquerel";
            case TypeTagKnownValues.Tag_yottabecquerel:
                return "yottabecquerel";
            case TypeTagKnownValues.Tag_gray:
                return "gray";
            case TypeTagKnownValues.Tag_yoctogray:
                return "yoctogray";
            case TypeTagKnownValues.Tag_zeptogray:
                return "zeptogray";
            case TypeTagKnownValues.Tag_attogray:
                return "attogray";
            case TypeTagKnownValues.Tag_femtogray:
                return "femtogray";
            case TypeTagKnownValues.Tag_picogray:
                return "picogray";
            case TypeTagKnownValues.Tag_nanogray:
                return "nanogray";
            case TypeTagKnownValues.Tag_microgray:
                return "microgray";
            case TypeTagKnownValues.Tag_milligray:
                return "milligray";
            case TypeTagKnownValues.Tag_centigray:
                return "centigray";
            case TypeTagKnownValues.Tag_decigray:
                return "decigray";
            case TypeTagKnownValues.Tag_decagray:
                return "decagray";
            case TypeTagKnownValues.Tag_hectogray:
                return "hectogray";
            case TypeTagKnownValues.Tag_kilogray:
                return "kilogray";
            case TypeTagKnownValues.Tag_megagray:
                return "megagray";
            case TypeTagKnownValues.Tag_gigagray:
                return "gigagray";
            case TypeTagKnownValues.Tag_teragray:
                return "teragray";
            case TypeTagKnownValues.Tag_petagray:
                return "petagray";
            case TypeTagKnownValues.Tag_exagray:
                return "exagray";
            case TypeTagKnownValues.Tag_zettagray:
                return "zettagray";
            case TypeTagKnownValues.Tag_yottagray:
                return "yottagray";
            case TypeTagKnownValues.Tag_sievert:
                return "sievert";
            case TypeTagKnownValues.Tag_yoctosievert:
                return "yoctosievert";
            case TypeTagKnownValues.Tag_zeptosievert:
                return "zeptosievert";
            case TypeTagKnownValues.Tag_attosievert:
                return "attosievert";
            case TypeTagKnownValues.Tag_femtosievert:
                return "femtosievert";
            case TypeTagKnownValues.Tag_picosievert:
                return "picosievert";
            case TypeTagKnownValues.Tag_nanosievert:
                return "nanosievert";
            case TypeTagKnownValues.Tag_microsievert:
                return "microsievert";
            case TypeTagKnownValues.Tag_millisievert:
                return "millisievert";
            case TypeTagKnownValues.Tag_centisievert:
                return "centisievert";
            case TypeTagKnownValues.Tag_decisievert:
                return "decisievert";
            case TypeTagKnownValues.Tag_decasievert:
                return "decasievert";
            case TypeTagKnownValues.Tag_hectosievert:
                return "hectosievert";
            case TypeTagKnownValues.Tag_kilosievert:
                return "kilosievert";
            case TypeTagKnownValues.Tag_megasievert:
                return "megasievert";
            case TypeTagKnownValues.Tag_gigasievert:
                return "gigasievert";
            case TypeTagKnownValues.Tag_terasievert:
                return "terasievert";
            case TypeTagKnownValues.Tag_petasievert:
                return "petasievert";
            case TypeTagKnownValues.Tag_exasievert:
                return "exasievert";
            case TypeTagKnownValues.Tag_zettasievert:
                return "zettasievert";
            case TypeTagKnownValues.Tag_yottasievert:
                return "yottasievert";
            case TypeTagKnownValues.Tag_katal:
                return "katal";
            case TypeTagKnownValues.Tag_yoctokatal:
                return "yoctokatal";
            case TypeTagKnownValues.Tag_zeptokatal:
                return "zeptokatal";
            case TypeTagKnownValues.Tag_attokatal:
                return "attokatal";
            case TypeTagKnownValues.Tag_femtokatal:
                return "femtokatal";
            case TypeTagKnownValues.Tag_picokatal:
                return "picokatal";
            case TypeTagKnownValues.Tag_nanokatal:
                return "nanokatal";
            case TypeTagKnownValues.Tag_microkatal:
                return "microkatal";
            case TypeTagKnownValues.Tag_millikatal:
                return "millikatal";
            case TypeTagKnownValues.Tag_centikatal:
                return "centikatal";
            case TypeTagKnownValues.Tag_decikatal:
                return "decikatal";
            case TypeTagKnownValues.Tag_decakatal:
                return "decakatal";
            case TypeTagKnownValues.Tag_hectokatal:
                return "hectokatal";
            case TypeTagKnownValues.Tag_kilokatal:
                return "kilokatal";
            case TypeTagKnownValues.Tag_megakatal:
                return "megakatal";
            case TypeTagKnownValues.Tag_gigakatal:
                return "gigakatal";
            case TypeTagKnownValues.Tag_terakatal:
                return "terakatal";
            case TypeTagKnownValues.Tag_petakatal:
                return "petakatal";
            case TypeTagKnownValues.Tag_exakatal:
                return "exakatal";
            case TypeTagKnownValues.Tag_zettakatal:
                return "zettakatal";
            case TypeTagKnownValues.Tag_yottakatal:
                return "yottakatal";
            case TypeTagKnownValues.Tag_hectare:
                return "hectare";
            case TypeTagKnownValues.Tag_liter:
                return "liter";
            case TypeTagKnownValues.Tag_yoctoliter:
                return "yoctoliter";
            case TypeTagKnownValues.Tag_zeptoliter:
                return "zeptoliter";
            case TypeTagKnownValues.Tag_attoliter:
                return "attoliter";
            case TypeTagKnownValues.Tag_femtoliter:
                return "femtoliter";
            case TypeTagKnownValues.Tag_picoliter:
                return "picoliter";
            case TypeTagKnownValues.Tag_nanoliter:
                return "nanoliter";
            case TypeTagKnownValues.Tag_microliter:
                return "microliter";
            case TypeTagKnownValues.Tag_milliliter:
                return "milliliter";
            case TypeTagKnownValues.Tag_centiliter:
                return "centiliter";
            case TypeTagKnownValues.Tag_deciliter:
                return "deciliter";
            case TypeTagKnownValues.Tag_decaliter:
                return "decaliter";
            case TypeTagKnownValues.Tag_hectoliter:
                return "hectoliter";
            case TypeTagKnownValues.Tag_kiloliter:
                return "kiloliter";
            case TypeTagKnownValues.Tag_megaliter:
                return "megaliter";
            case TypeTagKnownValues.Tag_gigaliter:
                return "gigaliter";
            case TypeTagKnownValues.Tag_teraliter:
                return "teraliter";
            case TypeTagKnownValues.Tag_petaliter:
                return "petaliter";
            case TypeTagKnownValues.Tag_exaliter:
                return "exaliter";
            case TypeTagKnownValues.Tag_zettaliter:
                return "zettaliter";
            case TypeTagKnownValues.Tag_yottaliter:
                return "yottaliter";
            case TypeTagKnownValues.Tag_tonne:
                return "tonne";
            case TypeTagKnownValues.Tag_yoctotonne:
                return "yoctotonne";
            case TypeTagKnownValues.Tag_zeptotonne:
                return "zeptotonne";
            case TypeTagKnownValues.Tag_attotonne:
                return "attotonne";
            case TypeTagKnownValues.Tag_femtotonne:
                return "femtotonne";
            case TypeTagKnownValues.Tag_picotonne:
                return "picotonne";
            case TypeTagKnownValues.Tag_nanotonne:
                return "nanotonne";
            case TypeTagKnownValues.Tag_microtonne:
                return "microtonne";
            case TypeTagKnownValues.Tag_millitonne:
                return "millitonne";
            case TypeTagKnownValues.Tag_centitonne:
                return "centitonne";
            case TypeTagKnownValues.Tag_decitonne:
                return "decitonne";
            case TypeTagKnownValues.Tag_decatonne:
                return "decatonne";
            case TypeTagKnownValues.Tag_hectotonne:
                return "hectotonne";
            case TypeTagKnownValues.Tag_kilotonne:
                return "kilotonne";
            case TypeTagKnownValues.Tag_megatonne:
                return "megatonne";
            case TypeTagKnownValues.Tag_gigatonne:
                return "gigatonne";
            case TypeTagKnownValues.Tag_teratonne:
                return "teratonne";
            case TypeTagKnownValues.Tag_petatonne:
                return "petatonne";
            case TypeTagKnownValues.Tag_exatonne:
                return "exatonne";
            case TypeTagKnownValues.Tag_zettatonne:
                return "zettatonne";
            case TypeTagKnownValues.Tag_yottatonne:
                return "yottatonne";
            case TypeTagKnownValues.Tag_astronomical_unit:
                return "astronomical_unit";
            case TypeTagKnownValues.Tag_angstrom:
                return "angstrom";
            case TypeTagKnownValues.Tag_minute:
                return "minute";
            case TypeTagKnownValues.Tag_hour:
                return "hour";
            case TypeTagKnownValues.Tag_day:
                return "day";
            case TypeTagKnownValues.Tag_week:
                return "week";
            case TypeTagKnownValues.Tag_fortnight:
                return "fortnight";
            case TypeTagKnownValues.Tag_month:
                return "month";
            case TypeTagKnownValues.Tag_year:
                return "year";
            case TypeTagKnownValues.Tag_biennium:
                return "biennium";
            case TypeTagKnownValues.Tag_triennium:
                return "triennium";
            case TypeTagKnownValues.Tag_quadrennium:
                return "quadrennium";
            case TypeTagKnownValues.Tag_lustrum:
                return "lustrum";
            case TypeTagKnownValues.Tag_decade:
                return "decade";
            case TypeTagKnownValues.Tag_century:
                return "century";
            case TypeTagKnownValues.Tag_millennium:
                return "millennium";
            case TypeTagKnownValues.Tag_sidereal_day:
                return "sidereal_day";
            case TypeTagKnownValues.Tag_sidereal_year:
                return "sidereal_year";
            case TypeTagKnownValues.Tag_helek:
                return "helek";
            case TypeTagKnownValues.Tag_Planck_time:
                return "Planck_time";
            case TypeTagKnownValues.Tag_shake:
                return "shake";
            case TypeTagKnownValues.Tag_svedberg:
                return "svedberg";
            case TypeTagKnownValues.Tag_parsec:
                return "parsec";
            case TypeTagKnownValues.Tag_degree_of_arc:
                return "degree_of_arc";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    private bool flagHasTag;
    private TypeTag storeTag;
    private List<string> extraKeys;
    private List<JSONValue > extraValues;
    private Dictionary<string, JSONValue > extraIndex;


    private JSONValue  extraTagToJSON()
      {
        JSONStringValue generated_string_Tag;
        if (!(storeTag.in_known_list))
          {
        generated_string_Tag = new JSONStringValue(storeTag.string_value);
          }
        else
          {
        switch (storeTag.list_value)
          {
            case TypeTagKnownValues.Tag_inch:
                generated_string_Tag = new JSONStringValue("inch");
                break;
            case TypeTagKnownValues.Tag_thou:
                generated_string_Tag = new JSONStringValue("thou");
                break;
            case TypeTagKnownValues.Tag_barleycorn:
                generated_string_Tag = new JSONStringValue("barleycorn");
                break;
            case TypeTagKnownValues.Tag_hand:
                generated_string_Tag = new JSONStringValue("hand");
                break;
            case TypeTagKnownValues.Tag_foot:
                generated_string_Tag = new JSONStringValue("foot");
                break;
            case TypeTagKnownValues.Tag_yard:
                generated_string_Tag = new JSONStringValue("yard");
                break;
            case TypeTagKnownValues.Tag_rod:
                generated_string_Tag = new JSONStringValue("rod");
                break;
            case TypeTagKnownValues.Tag_link:
                generated_string_Tag = new JSONStringValue("link");
                break;
            case TypeTagKnownValues.Tag_chain:
                generated_string_Tag = new JSONStringValue("chain");
                break;
            case TypeTagKnownValues.Tag_furlong:
                generated_string_Tag = new JSONStringValue("furlong");
                break;
            case TypeTagKnownValues.Tag_mile:
                generated_string_Tag = new JSONStringValue("mile");
                break;
            case TypeTagKnownValues.Tag_league:
                generated_string_Tag = new JSONStringValue("league");
                break;
            case TypeTagKnownValues.Tag_nautical_mile:
                generated_string_Tag = new JSONStringValue("nautical_mile");
                break;
            case TypeTagKnownValues.Tag_cable:
                generated_string_Tag = new JSONStringValue("cable");
                break;
            case TypeTagKnownValues.Tag_fathom:
                generated_string_Tag = new JSONStringValue("fathom");
                break;
            case TypeTagKnownValues.Tag_acre:
                generated_string_Tag = new JSONStringValue("acre");
                break;
            case TypeTagKnownValues.Tag_rood:
                generated_string_Tag = new JSONStringValue("rood");
                break;
            case TypeTagKnownValues.Tag_us_gallon:
                generated_string_Tag = new JSONStringValue("us_gallon");
                break;
            case TypeTagKnownValues.Tag_imperial_gallon:
                generated_string_Tag = new JSONStringValue("imperial_gallon");
                break;
            case TypeTagKnownValues.Tag_us_dry_gallon:
                generated_string_Tag = new JSONStringValue("us_dry_gallon");
                break;
            case TypeTagKnownValues.Tag_us_quart:
                generated_string_Tag = new JSONStringValue("us_quart");
                break;
            case TypeTagKnownValues.Tag_imperial_quart:
                generated_string_Tag = new JSONStringValue("imperial_quart");
                break;
            case TypeTagKnownValues.Tag_us_dry_quart:
                generated_string_Tag = new JSONStringValue("us_dry_quart");
                break;
            case TypeTagKnownValues.Tag_us_pint:
                generated_string_Tag = new JSONStringValue("us_pint");
                break;
            case TypeTagKnownValues.Tag_imperial_pint:
                generated_string_Tag = new JSONStringValue("imperial_pint");
                break;
            case TypeTagKnownValues.Tag_us_dry_pint:
                generated_string_Tag = new JSONStringValue("us_dry_pint");
                break;
            case TypeTagKnownValues.Tag_us_gill:
                generated_string_Tag = new JSONStringValue("us_gill");
                break;
            case TypeTagKnownValues.Tag_imperial_gill:
                generated_string_Tag = new JSONStringValue("imperial_gill");
                break;
            case TypeTagKnownValues.Tag_us_customary_cup:
                generated_string_Tag = new JSONStringValue("us_customary_cup");
                break;
            case TypeTagKnownValues.Tag_us_legal_cup:
                generated_string_Tag = new JSONStringValue("us_legal_cup");
                break;
            case TypeTagKnownValues.Tag_metric_cup:
                generated_string_Tag = new JSONStringValue("metric_cup");
                break;
            case TypeTagKnownValues.Tag_imperial_cup:
                generated_string_Tag = new JSONStringValue("imperial_cup");
                break;
            case TypeTagKnownValues.Tag_us_fluid_ounce:
                generated_string_Tag = new JSONStringValue("us_fluid_ounce");
                break;
            case TypeTagKnownValues.Tag_imperial_fluid_ounce:
                generated_string_Tag = new JSONStringValue("imperial_fluid_ounce");
                break;
            case TypeTagKnownValues.Tag_us_fluid_dram:
                generated_string_Tag = new JSONStringValue("us_fluid_dram");
                break;
            case TypeTagKnownValues.Tag_imperial_fluid_dram:
                generated_string_Tag = new JSONStringValue("imperial_fluid_dram");
                break;
            case TypeTagKnownValues.Tag_us_fluid_scruple:
                generated_string_Tag = new JSONStringValue("us_fluid_scruple");
                break;
            case TypeTagKnownValues.Tag_imperial_fluid_scruple:
                generated_string_Tag = new JSONStringValue("imperial_fluid_scruple");
                break;
            case TypeTagKnownValues.Tag_us_minim:
                generated_string_Tag = new JSONStringValue("us_minim");
                break;
            case TypeTagKnownValues.Tag_imperial_minim:
                generated_string_Tag = new JSONStringValue("imperial_minim");
                break;
            case TypeTagKnownValues.Tag_us_customary_tablespoon:
                generated_string_Tag = new JSONStringValue("us_customary_tablespoon");
                break;
            case TypeTagKnownValues.Tag_us_legal_tablespoon:
                generated_string_Tag = new JSONStringValue("us_legal_tablespoon");
                break;
            case TypeTagKnownValues.Tag_australian_tablespoon:
                generated_string_Tag = new JSONStringValue("australian_tablespoon");
                break;
            case TypeTagKnownValues.Tag_us_customary_teaspoon:
                generated_string_Tag = new JSONStringValue("us_customary_teaspoon");
                break;
            case TypeTagKnownValues.Tag_metric_teaspoon:
                generated_string_Tag = new JSONStringValue("metric_teaspoon");
                break;
            case TypeTagKnownValues.Tag_pound:
                generated_string_Tag = new JSONStringValue("pound");
                break;
            case TypeTagKnownValues.Tag_ounce:
                generated_string_Tag = new JSONStringValue("ounce");
                break;
            case TypeTagKnownValues.Tag_troy_ounce:
                generated_string_Tag = new JSONStringValue("troy_ounce");
                break;
            case TypeTagKnownValues.Tag_dram:
                generated_string_Tag = new JSONStringValue("dram");
                break;
            case TypeTagKnownValues.Tag_grain:
                generated_string_Tag = new JSONStringValue("grain");
                break;
            case TypeTagKnownValues.Tag_stone:
                generated_string_Tag = new JSONStringValue("stone");
                break;
            case TypeTagKnownValues.Tag_short_hundredweight:
                generated_string_Tag = new JSONStringValue("short_hundredweight");
                break;
            case TypeTagKnownValues.Tag_long_hundredweight:
                generated_string_Tag = new JSONStringValue("long_hundredweight");
                break;
            case TypeTagKnownValues.Tag_short_ton:
                generated_string_Tag = new JSONStringValue("short_ton");
                break;
            case TypeTagKnownValues.Tag_long_ton:
                generated_string_Tag = new JSONStringValue("long_ton");
                break;
            case TypeTagKnownValues.Tag_oil_barrel:
                generated_string_Tag = new JSONStringValue("oil_barrel");
                break;
            case TypeTagKnownValues.Tag_degree_fahrenheit:
                generated_string_Tag = new JSONStringValue("degree_fahrenheit");
                break;
            case TypeTagKnownValues.Tag_british_thermal_unit:
                generated_string_Tag = new JSONStringValue("british_thermal_unit");
                break;
            case TypeTagKnownValues.Tag_calorie:
                generated_string_Tag = new JSONStringValue("calorie");
                break;
            case TypeTagKnownValues.Tag_kilocalorie:
                generated_string_Tag = new JSONStringValue("kilocalorie");
                break;
            case TypeTagKnownValues.Tag_mechanical_horsepower:
                generated_string_Tag = new JSONStringValue("mechanical_horsepower");
                break;
            case TypeTagKnownValues.Tag_metric_horsepower:
                generated_string_Tag = new JSONStringValue("metric_horsepower");
                break;
            case TypeTagKnownValues.Tag_us_bushel:
                generated_string_Tag = new JSONStringValue("us_bushel");
                break;
            case TypeTagKnownValues.Tag_meter:
                generated_string_Tag = new JSONStringValue("meter");
                break;
            case TypeTagKnownValues.Tag_yoctometer:
                generated_string_Tag = new JSONStringValue("yoctometer");
                break;
            case TypeTagKnownValues.Tag_zeptometer:
                generated_string_Tag = new JSONStringValue("zeptometer");
                break;
            case TypeTagKnownValues.Tag_attometer:
                generated_string_Tag = new JSONStringValue("attometer");
                break;
            case TypeTagKnownValues.Tag_femtometer:
                generated_string_Tag = new JSONStringValue("femtometer");
                break;
            case TypeTagKnownValues.Tag_picometer:
                generated_string_Tag = new JSONStringValue("picometer");
                break;
            case TypeTagKnownValues.Tag_nanometer:
                generated_string_Tag = new JSONStringValue("nanometer");
                break;
            case TypeTagKnownValues.Tag_micrometer:
                generated_string_Tag = new JSONStringValue("micrometer");
                break;
            case TypeTagKnownValues.Tag_millimeter:
                generated_string_Tag = new JSONStringValue("millimeter");
                break;
            case TypeTagKnownValues.Tag_centimeter:
                generated_string_Tag = new JSONStringValue("centimeter");
                break;
            case TypeTagKnownValues.Tag_decimeter:
                generated_string_Tag = new JSONStringValue("decimeter");
                break;
            case TypeTagKnownValues.Tag_decameter:
                generated_string_Tag = new JSONStringValue("decameter");
                break;
            case TypeTagKnownValues.Tag_hectometer:
                generated_string_Tag = new JSONStringValue("hectometer");
                break;
            case TypeTagKnownValues.Tag_kilometer:
                generated_string_Tag = new JSONStringValue("kilometer");
                break;
            case TypeTagKnownValues.Tag_megameter:
                generated_string_Tag = new JSONStringValue("megameter");
                break;
            case TypeTagKnownValues.Tag_gigameter:
                generated_string_Tag = new JSONStringValue("gigameter");
                break;
            case TypeTagKnownValues.Tag_terameter:
                generated_string_Tag = new JSONStringValue("terameter");
                break;
            case TypeTagKnownValues.Tag_petameter:
                generated_string_Tag = new JSONStringValue("petameter");
                break;
            case TypeTagKnownValues.Tag_exameter:
                generated_string_Tag = new JSONStringValue("exameter");
                break;
            case TypeTagKnownValues.Tag_zettameter:
                generated_string_Tag = new JSONStringValue("zettameter");
                break;
            case TypeTagKnownValues.Tag_yottameter:
                generated_string_Tag = new JSONStringValue("yottameter");
                break;
            case TypeTagKnownValues.Tag_gram:
                generated_string_Tag = new JSONStringValue("gram");
                break;
            case TypeTagKnownValues.Tag_yoctogram:
                generated_string_Tag = new JSONStringValue("yoctogram");
                break;
            case TypeTagKnownValues.Tag_zeptogram:
                generated_string_Tag = new JSONStringValue("zeptogram");
                break;
            case TypeTagKnownValues.Tag_attogram:
                generated_string_Tag = new JSONStringValue("attogram");
                break;
            case TypeTagKnownValues.Tag_femtogram:
                generated_string_Tag = new JSONStringValue("femtogram");
                break;
            case TypeTagKnownValues.Tag_picogram:
                generated_string_Tag = new JSONStringValue("picogram");
                break;
            case TypeTagKnownValues.Tag_nanogram:
                generated_string_Tag = new JSONStringValue("nanogram");
                break;
            case TypeTagKnownValues.Tag_microgram:
                generated_string_Tag = new JSONStringValue("microgram");
                break;
            case TypeTagKnownValues.Tag_milligram:
                generated_string_Tag = new JSONStringValue("milligram");
                break;
            case TypeTagKnownValues.Tag_centigram:
                generated_string_Tag = new JSONStringValue("centigram");
                break;
            case TypeTagKnownValues.Tag_decigram:
                generated_string_Tag = new JSONStringValue("decigram");
                break;
            case TypeTagKnownValues.Tag_decagram:
                generated_string_Tag = new JSONStringValue("decagram");
                break;
            case TypeTagKnownValues.Tag_hectogram:
                generated_string_Tag = new JSONStringValue("hectogram");
                break;
            case TypeTagKnownValues.Tag_kilogram:
                generated_string_Tag = new JSONStringValue("kilogram");
                break;
            case TypeTagKnownValues.Tag_megagram:
                generated_string_Tag = new JSONStringValue("megagram");
                break;
            case TypeTagKnownValues.Tag_gigagram:
                generated_string_Tag = new JSONStringValue("gigagram");
                break;
            case TypeTagKnownValues.Tag_teragram:
                generated_string_Tag = new JSONStringValue("teragram");
                break;
            case TypeTagKnownValues.Tag_petagram:
                generated_string_Tag = new JSONStringValue("petagram");
                break;
            case TypeTagKnownValues.Tag_exagram:
                generated_string_Tag = new JSONStringValue("exagram");
                break;
            case TypeTagKnownValues.Tag_zettagram:
                generated_string_Tag = new JSONStringValue("zettagram");
                break;
            case TypeTagKnownValues.Tag_yottagram:
                generated_string_Tag = new JSONStringValue("yottagram");
                break;
            case TypeTagKnownValues.Tag_second:
                generated_string_Tag = new JSONStringValue("second");
                break;
            case TypeTagKnownValues.Tag_yoctosecond:
                generated_string_Tag = new JSONStringValue("yoctosecond");
                break;
            case TypeTagKnownValues.Tag_zeptosecond:
                generated_string_Tag = new JSONStringValue("zeptosecond");
                break;
            case TypeTagKnownValues.Tag_attosecond:
                generated_string_Tag = new JSONStringValue("attosecond");
                break;
            case TypeTagKnownValues.Tag_femtosecond:
                generated_string_Tag = new JSONStringValue("femtosecond");
                break;
            case TypeTagKnownValues.Tag_picosecond:
                generated_string_Tag = new JSONStringValue("picosecond");
                break;
            case TypeTagKnownValues.Tag_nanosecond:
                generated_string_Tag = new JSONStringValue("nanosecond");
                break;
            case TypeTagKnownValues.Tag_microsecond:
                generated_string_Tag = new JSONStringValue("microsecond");
                break;
            case TypeTagKnownValues.Tag_millisecond:
                generated_string_Tag = new JSONStringValue("millisecond");
                break;
            case TypeTagKnownValues.Tag_centisecond:
                generated_string_Tag = new JSONStringValue("centisecond");
                break;
            case TypeTagKnownValues.Tag_decisecond:
                generated_string_Tag = new JSONStringValue("decisecond");
                break;
            case TypeTagKnownValues.Tag_decasecond:
                generated_string_Tag = new JSONStringValue("decasecond");
                break;
            case TypeTagKnownValues.Tag_hectosecond:
                generated_string_Tag = new JSONStringValue("hectosecond");
                break;
            case TypeTagKnownValues.Tag_kilosecond:
                generated_string_Tag = new JSONStringValue("kilosecond");
                break;
            case TypeTagKnownValues.Tag_megasecond:
                generated_string_Tag = new JSONStringValue("megasecond");
                break;
            case TypeTagKnownValues.Tag_gigasecond:
                generated_string_Tag = new JSONStringValue("gigasecond");
                break;
            case TypeTagKnownValues.Tag_terasecond:
                generated_string_Tag = new JSONStringValue("terasecond");
                break;
            case TypeTagKnownValues.Tag_petasecond:
                generated_string_Tag = new JSONStringValue("petasecond");
                break;
            case TypeTagKnownValues.Tag_exasecond:
                generated_string_Tag = new JSONStringValue("exasecond");
                break;
            case TypeTagKnownValues.Tag_zettasecond:
                generated_string_Tag = new JSONStringValue("zettasecond");
                break;
            case TypeTagKnownValues.Tag_yottasecond:
                generated_string_Tag = new JSONStringValue("yottasecond");
                break;
            case TypeTagKnownValues.Tag_ampere:
                generated_string_Tag = new JSONStringValue("ampere");
                break;
            case TypeTagKnownValues.Tag_yoctoampere:
                generated_string_Tag = new JSONStringValue("yoctoampere");
                break;
            case TypeTagKnownValues.Tag_zeptoampere:
                generated_string_Tag = new JSONStringValue("zeptoampere");
                break;
            case TypeTagKnownValues.Tag_attoampere:
                generated_string_Tag = new JSONStringValue("attoampere");
                break;
            case TypeTagKnownValues.Tag_femtoampere:
                generated_string_Tag = new JSONStringValue("femtoampere");
                break;
            case TypeTagKnownValues.Tag_picoampere:
                generated_string_Tag = new JSONStringValue("picoampere");
                break;
            case TypeTagKnownValues.Tag_nanoampere:
                generated_string_Tag = new JSONStringValue("nanoampere");
                break;
            case TypeTagKnownValues.Tag_microampere:
                generated_string_Tag = new JSONStringValue("microampere");
                break;
            case TypeTagKnownValues.Tag_milliampere:
                generated_string_Tag = new JSONStringValue("milliampere");
                break;
            case TypeTagKnownValues.Tag_centiampere:
                generated_string_Tag = new JSONStringValue("centiampere");
                break;
            case TypeTagKnownValues.Tag_deciampere:
                generated_string_Tag = new JSONStringValue("deciampere");
                break;
            case TypeTagKnownValues.Tag_decaampere:
                generated_string_Tag = new JSONStringValue("decaampere");
                break;
            case TypeTagKnownValues.Tag_hectoampere:
                generated_string_Tag = new JSONStringValue("hectoampere");
                break;
            case TypeTagKnownValues.Tag_kiloampere:
                generated_string_Tag = new JSONStringValue("kiloampere");
                break;
            case TypeTagKnownValues.Tag_megaampere:
                generated_string_Tag = new JSONStringValue("megaampere");
                break;
            case TypeTagKnownValues.Tag_gigaampere:
                generated_string_Tag = new JSONStringValue("gigaampere");
                break;
            case TypeTagKnownValues.Tag_teraampere:
                generated_string_Tag = new JSONStringValue("teraampere");
                break;
            case TypeTagKnownValues.Tag_petaampere:
                generated_string_Tag = new JSONStringValue("petaampere");
                break;
            case TypeTagKnownValues.Tag_exaampere:
                generated_string_Tag = new JSONStringValue("exaampere");
                break;
            case TypeTagKnownValues.Tag_zettaampere:
                generated_string_Tag = new JSONStringValue("zettaampere");
                break;
            case TypeTagKnownValues.Tag_yottaampere:
                generated_string_Tag = new JSONStringValue("yottaampere");
                break;
            case TypeTagKnownValues.Tag_kelvin:
                generated_string_Tag = new JSONStringValue("kelvin");
                break;
            case TypeTagKnownValues.Tag_yoctokelvin:
                generated_string_Tag = new JSONStringValue("yoctokelvin");
                break;
            case TypeTagKnownValues.Tag_zeptokelvin:
                generated_string_Tag = new JSONStringValue("zeptokelvin");
                break;
            case TypeTagKnownValues.Tag_attokelvin:
                generated_string_Tag = new JSONStringValue("attokelvin");
                break;
            case TypeTagKnownValues.Tag_femtokelvin:
                generated_string_Tag = new JSONStringValue("femtokelvin");
                break;
            case TypeTagKnownValues.Tag_picokelvin:
                generated_string_Tag = new JSONStringValue("picokelvin");
                break;
            case TypeTagKnownValues.Tag_nanokelvin:
                generated_string_Tag = new JSONStringValue("nanokelvin");
                break;
            case TypeTagKnownValues.Tag_microkelvin:
                generated_string_Tag = new JSONStringValue("microkelvin");
                break;
            case TypeTagKnownValues.Tag_millikelvin:
                generated_string_Tag = new JSONStringValue("millikelvin");
                break;
            case TypeTagKnownValues.Tag_centikelvin:
                generated_string_Tag = new JSONStringValue("centikelvin");
                break;
            case TypeTagKnownValues.Tag_decikelvin:
                generated_string_Tag = new JSONStringValue("decikelvin");
                break;
            case TypeTagKnownValues.Tag_decakelvin:
                generated_string_Tag = new JSONStringValue("decakelvin");
                break;
            case TypeTagKnownValues.Tag_hectokelvin:
                generated_string_Tag = new JSONStringValue("hectokelvin");
                break;
            case TypeTagKnownValues.Tag_kilokelvin:
                generated_string_Tag = new JSONStringValue("kilokelvin");
                break;
            case TypeTagKnownValues.Tag_megakelvin:
                generated_string_Tag = new JSONStringValue("megakelvin");
                break;
            case TypeTagKnownValues.Tag_gigakelvin:
                generated_string_Tag = new JSONStringValue("gigakelvin");
                break;
            case TypeTagKnownValues.Tag_terakelvin:
                generated_string_Tag = new JSONStringValue("terakelvin");
                break;
            case TypeTagKnownValues.Tag_petakelvin:
                generated_string_Tag = new JSONStringValue("petakelvin");
                break;
            case TypeTagKnownValues.Tag_exakelvin:
                generated_string_Tag = new JSONStringValue("exakelvin");
                break;
            case TypeTagKnownValues.Tag_zettakelvin:
                generated_string_Tag = new JSONStringValue("zettakelvin");
                break;
            case TypeTagKnownValues.Tag_yottakelvin:
                generated_string_Tag = new JSONStringValue("yottakelvin");
                break;
            case TypeTagKnownValues.Tag_mole:
                generated_string_Tag = new JSONStringValue("mole");
                break;
            case TypeTagKnownValues.Tag_yoctomole:
                generated_string_Tag = new JSONStringValue("yoctomole");
                break;
            case TypeTagKnownValues.Tag_zeptomole:
                generated_string_Tag = new JSONStringValue("zeptomole");
                break;
            case TypeTagKnownValues.Tag_attomole:
                generated_string_Tag = new JSONStringValue("attomole");
                break;
            case TypeTagKnownValues.Tag_femtomole:
                generated_string_Tag = new JSONStringValue("femtomole");
                break;
            case TypeTagKnownValues.Tag_picomole:
                generated_string_Tag = new JSONStringValue("picomole");
                break;
            case TypeTagKnownValues.Tag_nanomole:
                generated_string_Tag = new JSONStringValue("nanomole");
                break;
            case TypeTagKnownValues.Tag_micromole:
                generated_string_Tag = new JSONStringValue("micromole");
                break;
            case TypeTagKnownValues.Tag_millimole:
                generated_string_Tag = new JSONStringValue("millimole");
                break;
            case TypeTagKnownValues.Tag_centimole:
                generated_string_Tag = new JSONStringValue("centimole");
                break;
            case TypeTagKnownValues.Tag_decimole:
                generated_string_Tag = new JSONStringValue("decimole");
                break;
            case TypeTagKnownValues.Tag_decamole:
                generated_string_Tag = new JSONStringValue("decamole");
                break;
            case TypeTagKnownValues.Tag_hectomole:
                generated_string_Tag = new JSONStringValue("hectomole");
                break;
            case TypeTagKnownValues.Tag_kilomole:
                generated_string_Tag = new JSONStringValue("kilomole");
                break;
            case TypeTagKnownValues.Tag_megamole:
                generated_string_Tag = new JSONStringValue("megamole");
                break;
            case TypeTagKnownValues.Tag_gigamole:
                generated_string_Tag = new JSONStringValue("gigamole");
                break;
            case TypeTagKnownValues.Tag_teramole:
                generated_string_Tag = new JSONStringValue("teramole");
                break;
            case TypeTagKnownValues.Tag_petamole:
                generated_string_Tag = new JSONStringValue("petamole");
                break;
            case TypeTagKnownValues.Tag_examole:
                generated_string_Tag = new JSONStringValue("examole");
                break;
            case TypeTagKnownValues.Tag_zettamole:
                generated_string_Tag = new JSONStringValue("zettamole");
                break;
            case TypeTagKnownValues.Tag_yottamole:
                generated_string_Tag = new JSONStringValue("yottamole");
                break;
            case TypeTagKnownValues.Tag_candela:
                generated_string_Tag = new JSONStringValue("candela");
                break;
            case TypeTagKnownValues.Tag_yoctocandela:
                generated_string_Tag = new JSONStringValue("yoctocandela");
                break;
            case TypeTagKnownValues.Tag_zeptocandela:
                generated_string_Tag = new JSONStringValue("zeptocandela");
                break;
            case TypeTagKnownValues.Tag_attocandela:
                generated_string_Tag = new JSONStringValue("attocandela");
                break;
            case TypeTagKnownValues.Tag_femtocandela:
                generated_string_Tag = new JSONStringValue("femtocandela");
                break;
            case TypeTagKnownValues.Tag_picocandela:
                generated_string_Tag = new JSONStringValue("picocandela");
                break;
            case TypeTagKnownValues.Tag_nanocandela:
                generated_string_Tag = new JSONStringValue("nanocandela");
                break;
            case TypeTagKnownValues.Tag_microcandela:
                generated_string_Tag = new JSONStringValue("microcandela");
                break;
            case TypeTagKnownValues.Tag_millicandela:
                generated_string_Tag = new JSONStringValue("millicandela");
                break;
            case TypeTagKnownValues.Tag_centicandela:
                generated_string_Tag = new JSONStringValue("centicandela");
                break;
            case TypeTagKnownValues.Tag_decicandela:
                generated_string_Tag = new JSONStringValue("decicandela");
                break;
            case TypeTagKnownValues.Tag_decacandela:
                generated_string_Tag = new JSONStringValue("decacandela");
                break;
            case TypeTagKnownValues.Tag_hectocandela:
                generated_string_Tag = new JSONStringValue("hectocandela");
                break;
            case TypeTagKnownValues.Tag_kilocandela:
                generated_string_Tag = new JSONStringValue("kilocandela");
                break;
            case TypeTagKnownValues.Tag_megacandela:
                generated_string_Tag = new JSONStringValue("megacandela");
                break;
            case TypeTagKnownValues.Tag_gigacandela:
                generated_string_Tag = new JSONStringValue("gigacandela");
                break;
            case TypeTagKnownValues.Tag_teracandela:
                generated_string_Tag = new JSONStringValue("teracandela");
                break;
            case TypeTagKnownValues.Tag_petacandela:
                generated_string_Tag = new JSONStringValue("petacandela");
                break;
            case TypeTagKnownValues.Tag_exacandela:
                generated_string_Tag = new JSONStringValue("exacandela");
                break;
            case TypeTagKnownValues.Tag_zettacandela:
                generated_string_Tag = new JSONStringValue("zettacandela");
                break;
            case TypeTagKnownValues.Tag_yottacandela:
                generated_string_Tag = new JSONStringValue("yottacandela");
                break;
            case TypeTagKnownValues.Tag_radian:
                generated_string_Tag = new JSONStringValue("radian");
                break;
            case TypeTagKnownValues.Tag_yoctoradian:
                generated_string_Tag = new JSONStringValue("yoctoradian");
                break;
            case TypeTagKnownValues.Tag_zeptoradian:
                generated_string_Tag = new JSONStringValue("zeptoradian");
                break;
            case TypeTagKnownValues.Tag_attoradian:
                generated_string_Tag = new JSONStringValue("attoradian");
                break;
            case TypeTagKnownValues.Tag_femtoradian:
                generated_string_Tag = new JSONStringValue("femtoradian");
                break;
            case TypeTagKnownValues.Tag_picoradian:
                generated_string_Tag = new JSONStringValue("picoradian");
                break;
            case TypeTagKnownValues.Tag_nanoradian:
                generated_string_Tag = new JSONStringValue("nanoradian");
                break;
            case TypeTagKnownValues.Tag_microradian:
                generated_string_Tag = new JSONStringValue("microradian");
                break;
            case TypeTagKnownValues.Tag_milliradian:
                generated_string_Tag = new JSONStringValue("milliradian");
                break;
            case TypeTagKnownValues.Tag_centiradian:
                generated_string_Tag = new JSONStringValue("centiradian");
                break;
            case TypeTagKnownValues.Tag_deciradian:
                generated_string_Tag = new JSONStringValue("deciradian");
                break;
            case TypeTagKnownValues.Tag_decaradian:
                generated_string_Tag = new JSONStringValue("decaradian");
                break;
            case TypeTagKnownValues.Tag_hectoradian:
                generated_string_Tag = new JSONStringValue("hectoradian");
                break;
            case TypeTagKnownValues.Tag_kiloradian:
                generated_string_Tag = new JSONStringValue("kiloradian");
                break;
            case TypeTagKnownValues.Tag_megaradian:
                generated_string_Tag = new JSONStringValue("megaradian");
                break;
            case TypeTagKnownValues.Tag_gigaradian:
                generated_string_Tag = new JSONStringValue("gigaradian");
                break;
            case TypeTagKnownValues.Tag_teraradian:
                generated_string_Tag = new JSONStringValue("teraradian");
                break;
            case TypeTagKnownValues.Tag_petaradian:
                generated_string_Tag = new JSONStringValue("petaradian");
                break;
            case TypeTagKnownValues.Tag_exaradian:
                generated_string_Tag = new JSONStringValue("exaradian");
                break;
            case TypeTagKnownValues.Tag_zettaradian:
                generated_string_Tag = new JSONStringValue("zettaradian");
                break;
            case TypeTagKnownValues.Tag_yottaradian:
                generated_string_Tag = new JSONStringValue("yottaradian");
                break;
            case TypeTagKnownValues.Tag_steradian:
                generated_string_Tag = new JSONStringValue("steradian");
                break;
            case TypeTagKnownValues.Tag_yoctosteradian:
                generated_string_Tag = new JSONStringValue("yoctosteradian");
                break;
            case TypeTagKnownValues.Tag_zeptosteradian:
                generated_string_Tag = new JSONStringValue("zeptosteradian");
                break;
            case TypeTagKnownValues.Tag_attosteradian:
                generated_string_Tag = new JSONStringValue("attosteradian");
                break;
            case TypeTagKnownValues.Tag_femtosteradian:
                generated_string_Tag = new JSONStringValue("femtosteradian");
                break;
            case TypeTagKnownValues.Tag_picosteradian:
                generated_string_Tag = new JSONStringValue("picosteradian");
                break;
            case TypeTagKnownValues.Tag_nanosteradian:
                generated_string_Tag = new JSONStringValue("nanosteradian");
                break;
            case TypeTagKnownValues.Tag_microsteradian:
                generated_string_Tag = new JSONStringValue("microsteradian");
                break;
            case TypeTagKnownValues.Tag_millisteradian:
                generated_string_Tag = new JSONStringValue("millisteradian");
                break;
            case TypeTagKnownValues.Tag_centisteradian:
                generated_string_Tag = new JSONStringValue("centisteradian");
                break;
            case TypeTagKnownValues.Tag_decisteradian:
                generated_string_Tag = new JSONStringValue("decisteradian");
                break;
            case TypeTagKnownValues.Tag_decasteradian:
                generated_string_Tag = new JSONStringValue("decasteradian");
                break;
            case TypeTagKnownValues.Tag_hectosteradian:
                generated_string_Tag = new JSONStringValue("hectosteradian");
                break;
            case TypeTagKnownValues.Tag_kilosteradian:
                generated_string_Tag = new JSONStringValue("kilosteradian");
                break;
            case TypeTagKnownValues.Tag_megasteradian:
                generated_string_Tag = new JSONStringValue("megasteradian");
                break;
            case TypeTagKnownValues.Tag_gigasteradian:
                generated_string_Tag = new JSONStringValue("gigasteradian");
                break;
            case TypeTagKnownValues.Tag_terasteradian:
                generated_string_Tag = new JSONStringValue("terasteradian");
                break;
            case TypeTagKnownValues.Tag_petasteradian:
                generated_string_Tag = new JSONStringValue("petasteradian");
                break;
            case TypeTagKnownValues.Tag_exasteradian:
                generated_string_Tag = new JSONStringValue("exasteradian");
                break;
            case TypeTagKnownValues.Tag_zettasteradian:
                generated_string_Tag = new JSONStringValue("zettasteradian");
                break;
            case TypeTagKnownValues.Tag_yottasteradian:
                generated_string_Tag = new JSONStringValue("yottasteradian");
                break;
            case TypeTagKnownValues.Tag_hertz:
                generated_string_Tag = new JSONStringValue("hertz");
                break;
            case TypeTagKnownValues.Tag_yoctohertz:
                generated_string_Tag = new JSONStringValue("yoctohertz");
                break;
            case TypeTagKnownValues.Tag_zeptohertz:
                generated_string_Tag = new JSONStringValue("zeptohertz");
                break;
            case TypeTagKnownValues.Tag_attohertz:
                generated_string_Tag = new JSONStringValue("attohertz");
                break;
            case TypeTagKnownValues.Tag_femtohertz:
                generated_string_Tag = new JSONStringValue("femtohertz");
                break;
            case TypeTagKnownValues.Tag_picohertz:
                generated_string_Tag = new JSONStringValue("picohertz");
                break;
            case TypeTagKnownValues.Tag_nanohertz:
                generated_string_Tag = new JSONStringValue("nanohertz");
                break;
            case TypeTagKnownValues.Tag_microhertz:
                generated_string_Tag = new JSONStringValue("microhertz");
                break;
            case TypeTagKnownValues.Tag_millihertz:
                generated_string_Tag = new JSONStringValue("millihertz");
                break;
            case TypeTagKnownValues.Tag_centihertz:
                generated_string_Tag = new JSONStringValue("centihertz");
                break;
            case TypeTagKnownValues.Tag_decihertz:
                generated_string_Tag = new JSONStringValue("decihertz");
                break;
            case TypeTagKnownValues.Tag_decahertz:
                generated_string_Tag = new JSONStringValue("decahertz");
                break;
            case TypeTagKnownValues.Tag_hectohertz:
                generated_string_Tag = new JSONStringValue("hectohertz");
                break;
            case TypeTagKnownValues.Tag_kilohertz:
                generated_string_Tag = new JSONStringValue("kilohertz");
                break;
            case TypeTagKnownValues.Tag_megahertz:
                generated_string_Tag = new JSONStringValue("megahertz");
                break;
            case TypeTagKnownValues.Tag_gigahertz:
                generated_string_Tag = new JSONStringValue("gigahertz");
                break;
            case TypeTagKnownValues.Tag_terahertz:
                generated_string_Tag = new JSONStringValue("terahertz");
                break;
            case TypeTagKnownValues.Tag_petahertz:
                generated_string_Tag = new JSONStringValue("petahertz");
                break;
            case TypeTagKnownValues.Tag_exahertz:
                generated_string_Tag = new JSONStringValue("exahertz");
                break;
            case TypeTagKnownValues.Tag_zettahertz:
                generated_string_Tag = new JSONStringValue("zettahertz");
                break;
            case TypeTagKnownValues.Tag_yottahertz:
                generated_string_Tag = new JSONStringValue("yottahertz");
                break;
            case TypeTagKnownValues.Tag_newton:
                generated_string_Tag = new JSONStringValue("newton");
                break;
            case TypeTagKnownValues.Tag_yoctonewton:
                generated_string_Tag = new JSONStringValue("yoctonewton");
                break;
            case TypeTagKnownValues.Tag_zeptonewton:
                generated_string_Tag = new JSONStringValue("zeptonewton");
                break;
            case TypeTagKnownValues.Tag_attonewton:
                generated_string_Tag = new JSONStringValue("attonewton");
                break;
            case TypeTagKnownValues.Tag_femtonewton:
                generated_string_Tag = new JSONStringValue("femtonewton");
                break;
            case TypeTagKnownValues.Tag_piconewton:
                generated_string_Tag = new JSONStringValue("piconewton");
                break;
            case TypeTagKnownValues.Tag_nanonewton:
                generated_string_Tag = new JSONStringValue("nanonewton");
                break;
            case TypeTagKnownValues.Tag_micronewton:
                generated_string_Tag = new JSONStringValue("micronewton");
                break;
            case TypeTagKnownValues.Tag_millinewton:
                generated_string_Tag = new JSONStringValue("millinewton");
                break;
            case TypeTagKnownValues.Tag_centinewton:
                generated_string_Tag = new JSONStringValue("centinewton");
                break;
            case TypeTagKnownValues.Tag_decinewton:
                generated_string_Tag = new JSONStringValue("decinewton");
                break;
            case TypeTagKnownValues.Tag_decanewton:
                generated_string_Tag = new JSONStringValue("decanewton");
                break;
            case TypeTagKnownValues.Tag_hectonewton:
                generated_string_Tag = new JSONStringValue("hectonewton");
                break;
            case TypeTagKnownValues.Tag_kilonewton:
                generated_string_Tag = new JSONStringValue("kilonewton");
                break;
            case TypeTagKnownValues.Tag_meganewton:
                generated_string_Tag = new JSONStringValue("meganewton");
                break;
            case TypeTagKnownValues.Tag_giganewton:
                generated_string_Tag = new JSONStringValue("giganewton");
                break;
            case TypeTagKnownValues.Tag_teranewton:
                generated_string_Tag = new JSONStringValue("teranewton");
                break;
            case TypeTagKnownValues.Tag_petanewton:
                generated_string_Tag = new JSONStringValue("petanewton");
                break;
            case TypeTagKnownValues.Tag_exanewton:
                generated_string_Tag = new JSONStringValue("exanewton");
                break;
            case TypeTagKnownValues.Tag_zettanewton:
                generated_string_Tag = new JSONStringValue("zettanewton");
                break;
            case TypeTagKnownValues.Tag_yottanewton:
                generated_string_Tag = new JSONStringValue("yottanewton");
                break;
            case TypeTagKnownValues.Tag_pascal:
                generated_string_Tag = new JSONStringValue("pascal");
                break;
            case TypeTagKnownValues.Tag_yoctopascal:
                generated_string_Tag = new JSONStringValue("yoctopascal");
                break;
            case TypeTagKnownValues.Tag_zeptopascal:
                generated_string_Tag = new JSONStringValue("zeptopascal");
                break;
            case TypeTagKnownValues.Tag_attopascal:
                generated_string_Tag = new JSONStringValue("attopascal");
                break;
            case TypeTagKnownValues.Tag_femtopascal:
                generated_string_Tag = new JSONStringValue("femtopascal");
                break;
            case TypeTagKnownValues.Tag_picopascal:
                generated_string_Tag = new JSONStringValue("picopascal");
                break;
            case TypeTagKnownValues.Tag_nanopascal:
                generated_string_Tag = new JSONStringValue("nanopascal");
                break;
            case TypeTagKnownValues.Tag_micropascal:
                generated_string_Tag = new JSONStringValue("micropascal");
                break;
            case TypeTagKnownValues.Tag_millipascal:
                generated_string_Tag = new JSONStringValue("millipascal");
                break;
            case TypeTagKnownValues.Tag_centipascal:
                generated_string_Tag = new JSONStringValue("centipascal");
                break;
            case TypeTagKnownValues.Tag_decipascal:
                generated_string_Tag = new JSONStringValue("decipascal");
                break;
            case TypeTagKnownValues.Tag_decapascal:
                generated_string_Tag = new JSONStringValue("decapascal");
                break;
            case TypeTagKnownValues.Tag_hectopascal:
                generated_string_Tag = new JSONStringValue("hectopascal");
                break;
            case TypeTagKnownValues.Tag_kilopascal:
                generated_string_Tag = new JSONStringValue("kilopascal");
                break;
            case TypeTagKnownValues.Tag_megapascal:
                generated_string_Tag = new JSONStringValue("megapascal");
                break;
            case TypeTagKnownValues.Tag_gigapascal:
                generated_string_Tag = new JSONStringValue("gigapascal");
                break;
            case TypeTagKnownValues.Tag_terapascal:
                generated_string_Tag = new JSONStringValue("terapascal");
                break;
            case TypeTagKnownValues.Tag_petapascal:
                generated_string_Tag = new JSONStringValue("petapascal");
                break;
            case TypeTagKnownValues.Tag_exapascal:
                generated_string_Tag = new JSONStringValue("exapascal");
                break;
            case TypeTagKnownValues.Tag_zettapascal:
                generated_string_Tag = new JSONStringValue("zettapascal");
                break;
            case TypeTagKnownValues.Tag_yottapascal:
                generated_string_Tag = new JSONStringValue("yottapascal");
                break;
            case TypeTagKnownValues.Tag_joule:
                generated_string_Tag = new JSONStringValue("joule");
                break;
            case TypeTagKnownValues.Tag_yoctojoule:
                generated_string_Tag = new JSONStringValue("yoctojoule");
                break;
            case TypeTagKnownValues.Tag_zeptojoule:
                generated_string_Tag = new JSONStringValue("zeptojoule");
                break;
            case TypeTagKnownValues.Tag_attojoule:
                generated_string_Tag = new JSONStringValue("attojoule");
                break;
            case TypeTagKnownValues.Tag_femtojoule:
                generated_string_Tag = new JSONStringValue("femtojoule");
                break;
            case TypeTagKnownValues.Tag_picojoule:
                generated_string_Tag = new JSONStringValue("picojoule");
                break;
            case TypeTagKnownValues.Tag_nanojoule:
                generated_string_Tag = new JSONStringValue("nanojoule");
                break;
            case TypeTagKnownValues.Tag_microjoule:
                generated_string_Tag = new JSONStringValue("microjoule");
                break;
            case TypeTagKnownValues.Tag_millijoule:
                generated_string_Tag = new JSONStringValue("millijoule");
                break;
            case TypeTagKnownValues.Tag_centijoule:
                generated_string_Tag = new JSONStringValue("centijoule");
                break;
            case TypeTagKnownValues.Tag_decijoule:
                generated_string_Tag = new JSONStringValue("decijoule");
                break;
            case TypeTagKnownValues.Tag_decajoule:
                generated_string_Tag = new JSONStringValue("decajoule");
                break;
            case TypeTagKnownValues.Tag_hectojoule:
                generated_string_Tag = new JSONStringValue("hectojoule");
                break;
            case TypeTagKnownValues.Tag_kilojoule:
                generated_string_Tag = new JSONStringValue("kilojoule");
                break;
            case TypeTagKnownValues.Tag_megajoule:
                generated_string_Tag = new JSONStringValue("megajoule");
                break;
            case TypeTagKnownValues.Tag_gigajoule:
                generated_string_Tag = new JSONStringValue("gigajoule");
                break;
            case TypeTagKnownValues.Tag_terajoule:
                generated_string_Tag = new JSONStringValue("terajoule");
                break;
            case TypeTagKnownValues.Tag_petajoule:
                generated_string_Tag = new JSONStringValue("petajoule");
                break;
            case TypeTagKnownValues.Tag_exajoule:
                generated_string_Tag = new JSONStringValue("exajoule");
                break;
            case TypeTagKnownValues.Tag_zettajoule:
                generated_string_Tag = new JSONStringValue("zettajoule");
                break;
            case TypeTagKnownValues.Tag_yottajoule:
                generated_string_Tag = new JSONStringValue("yottajoule");
                break;
            case TypeTagKnownValues.Tag_watt:
                generated_string_Tag = new JSONStringValue("watt");
                break;
            case TypeTagKnownValues.Tag_yoctowatt:
                generated_string_Tag = new JSONStringValue("yoctowatt");
                break;
            case TypeTagKnownValues.Tag_zeptowatt:
                generated_string_Tag = new JSONStringValue("zeptowatt");
                break;
            case TypeTagKnownValues.Tag_attowatt:
                generated_string_Tag = new JSONStringValue("attowatt");
                break;
            case TypeTagKnownValues.Tag_femtowatt:
                generated_string_Tag = new JSONStringValue("femtowatt");
                break;
            case TypeTagKnownValues.Tag_picowatt:
                generated_string_Tag = new JSONStringValue("picowatt");
                break;
            case TypeTagKnownValues.Tag_nanowatt:
                generated_string_Tag = new JSONStringValue("nanowatt");
                break;
            case TypeTagKnownValues.Tag_microwatt:
                generated_string_Tag = new JSONStringValue("microwatt");
                break;
            case TypeTagKnownValues.Tag_milliwatt:
                generated_string_Tag = new JSONStringValue("milliwatt");
                break;
            case TypeTagKnownValues.Tag_centiwatt:
                generated_string_Tag = new JSONStringValue("centiwatt");
                break;
            case TypeTagKnownValues.Tag_deciwatt:
                generated_string_Tag = new JSONStringValue("deciwatt");
                break;
            case TypeTagKnownValues.Tag_decawatt:
                generated_string_Tag = new JSONStringValue("decawatt");
                break;
            case TypeTagKnownValues.Tag_hectowatt:
                generated_string_Tag = new JSONStringValue("hectowatt");
                break;
            case TypeTagKnownValues.Tag_kilowatt:
                generated_string_Tag = new JSONStringValue("kilowatt");
                break;
            case TypeTagKnownValues.Tag_megawatt:
                generated_string_Tag = new JSONStringValue("megawatt");
                break;
            case TypeTagKnownValues.Tag_gigawatt:
                generated_string_Tag = new JSONStringValue("gigawatt");
                break;
            case TypeTagKnownValues.Tag_terawatt:
                generated_string_Tag = new JSONStringValue("terawatt");
                break;
            case TypeTagKnownValues.Tag_petawatt:
                generated_string_Tag = new JSONStringValue("petawatt");
                break;
            case TypeTagKnownValues.Tag_exawatt:
                generated_string_Tag = new JSONStringValue("exawatt");
                break;
            case TypeTagKnownValues.Tag_zettawatt:
                generated_string_Tag = new JSONStringValue("zettawatt");
                break;
            case TypeTagKnownValues.Tag_yottawatt:
                generated_string_Tag = new JSONStringValue("yottawatt");
                break;
            case TypeTagKnownValues.Tag_coulomb:
                generated_string_Tag = new JSONStringValue("coulomb");
                break;
            case TypeTagKnownValues.Tag_yoctocoulomb:
                generated_string_Tag = new JSONStringValue("yoctocoulomb");
                break;
            case TypeTagKnownValues.Tag_zeptocoulomb:
                generated_string_Tag = new JSONStringValue("zeptocoulomb");
                break;
            case TypeTagKnownValues.Tag_attocoulomb:
                generated_string_Tag = new JSONStringValue("attocoulomb");
                break;
            case TypeTagKnownValues.Tag_femtocoulomb:
                generated_string_Tag = new JSONStringValue("femtocoulomb");
                break;
            case TypeTagKnownValues.Tag_picocoulomb:
                generated_string_Tag = new JSONStringValue("picocoulomb");
                break;
            case TypeTagKnownValues.Tag_nanocoulomb:
                generated_string_Tag = new JSONStringValue("nanocoulomb");
                break;
            case TypeTagKnownValues.Tag_microcoulomb:
                generated_string_Tag = new JSONStringValue("microcoulomb");
                break;
            case TypeTagKnownValues.Tag_millicoulomb:
                generated_string_Tag = new JSONStringValue("millicoulomb");
                break;
            case TypeTagKnownValues.Tag_centicoulomb:
                generated_string_Tag = new JSONStringValue("centicoulomb");
                break;
            case TypeTagKnownValues.Tag_decicoulomb:
                generated_string_Tag = new JSONStringValue("decicoulomb");
                break;
            case TypeTagKnownValues.Tag_decacoulomb:
                generated_string_Tag = new JSONStringValue("decacoulomb");
                break;
            case TypeTagKnownValues.Tag_hectocoulomb:
                generated_string_Tag = new JSONStringValue("hectocoulomb");
                break;
            case TypeTagKnownValues.Tag_kilocoulomb:
                generated_string_Tag = new JSONStringValue("kilocoulomb");
                break;
            case TypeTagKnownValues.Tag_megacoulomb:
                generated_string_Tag = new JSONStringValue("megacoulomb");
                break;
            case TypeTagKnownValues.Tag_gigacoulomb:
                generated_string_Tag = new JSONStringValue("gigacoulomb");
                break;
            case TypeTagKnownValues.Tag_teracoulomb:
                generated_string_Tag = new JSONStringValue("teracoulomb");
                break;
            case TypeTagKnownValues.Tag_petacoulomb:
                generated_string_Tag = new JSONStringValue("petacoulomb");
                break;
            case TypeTagKnownValues.Tag_exacoulomb:
                generated_string_Tag = new JSONStringValue("exacoulomb");
                break;
            case TypeTagKnownValues.Tag_zettacoulomb:
                generated_string_Tag = new JSONStringValue("zettacoulomb");
                break;
            case TypeTagKnownValues.Tag_yottacoulomb:
                generated_string_Tag = new JSONStringValue("yottacoulomb");
                break;
            case TypeTagKnownValues.Tag_volt:
                generated_string_Tag = new JSONStringValue("volt");
                break;
            case TypeTagKnownValues.Tag_yoctovolt:
                generated_string_Tag = new JSONStringValue("yoctovolt");
                break;
            case TypeTagKnownValues.Tag_zeptovolt:
                generated_string_Tag = new JSONStringValue("zeptovolt");
                break;
            case TypeTagKnownValues.Tag_attovolt:
                generated_string_Tag = new JSONStringValue("attovolt");
                break;
            case TypeTagKnownValues.Tag_femtovolt:
                generated_string_Tag = new JSONStringValue("femtovolt");
                break;
            case TypeTagKnownValues.Tag_picovolt:
                generated_string_Tag = new JSONStringValue("picovolt");
                break;
            case TypeTagKnownValues.Tag_nanovolt:
                generated_string_Tag = new JSONStringValue("nanovolt");
                break;
            case TypeTagKnownValues.Tag_microvolt:
                generated_string_Tag = new JSONStringValue("microvolt");
                break;
            case TypeTagKnownValues.Tag_millivolt:
                generated_string_Tag = new JSONStringValue("millivolt");
                break;
            case TypeTagKnownValues.Tag_centivolt:
                generated_string_Tag = new JSONStringValue("centivolt");
                break;
            case TypeTagKnownValues.Tag_decivolt:
                generated_string_Tag = new JSONStringValue("decivolt");
                break;
            case TypeTagKnownValues.Tag_decavolt:
                generated_string_Tag = new JSONStringValue("decavolt");
                break;
            case TypeTagKnownValues.Tag_hectovolt:
                generated_string_Tag = new JSONStringValue("hectovolt");
                break;
            case TypeTagKnownValues.Tag_kilovolt:
                generated_string_Tag = new JSONStringValue("kilovolt");
                break;
            case TypeTagKnownValues.Tag_megavolt:
                generated_string_Tag = new JSONStringValue("megavolt");
                break;
            case TypeTagKnownValues.Tag_gigavolt:
                generated_string_Tag = new JSONStringValue("gigavolt");
                break;
            case TypeTagKnownValues.Tag_teravolt:
                generated_string_Tag = new JSONStringValue("teravolt");
                break;
            case TypeTagKnownValues.Tag_petavolt:
                generated_string_Tag = new JSONStringValue("petavolt");
                break;
            case TypeTagKnownValues.Tag_exavolt:
                generated_string_Tag = new JSONStringValue("exavolt");
                break;
            case TypeTagKnownValues.Tag_zettavolt:
                generated_string_Tag = new JSONStringValue("zettavolt");
                break;
            case TypeTagKnownValues.Tag_yottavolt:
                generated_string_Tag = new JSONStringValue("yottavolt");
                break;
            case TypeTagKnownValues.Tag_farad:
                generated_string_Tag = new JSONStringValue("farad");
                break;
            case TypeTagKnownValues.Tag_yoctofarad:
                generated_string_Tag = new JSONStringValue("yoctofarad");
                break;
            case TypeTagKnownValues.Tag_zeptofarad:
                generated_string_Tag = new JSONStringValue("zeptofarad");
                break;
            case TypeTagKnownValues.Tag_attofarad:
                generated_string_Tag = new JSONStringValue("attofarad");
                break;
            case TypeTagKnownValues.Tag_femtofarad:
                generated_string_Tag = new JSONStringValue("femtofarad");
                break;
            case TypeTagKnownValues.Tag_picofarad:
                generated_string_Tag = new JSONStringValue("picofarad");
                break;
            case TypeTagKnownValues.Tag_nanofarad:
                generated_string_Tag = new JSONStringValue("nanofarad");
                break;
            case TypeTagKnownValues.Tag_microfarad:
                generated_string_Tag = new JSONStringValue("microfarad");
                break;
            case TypeTagKnownValues.Tag_millifarad:
                generated_string_Tag = new JSONStringValue("millifarad");
                break;
            case TypeTagKnownValues.Tag_centifarad:
                generated_string_Tag = new JSONStringValue("centifarad");
                break;
            case TypeTagKnownValues.Tag_decifarad:
                generated_string_Tag = new JSONStringValue("decifarad");
                break;
            case TypeTagKnownValues.Tag_decafarad:
                generated_string_Tag = new JSONStringValue("decafarad");
                break;
            case TypeTagKnownValues.Tag_hectofarad:
                generated_string_Tag = new JSONStringValue("hectofarad");
                break;
            case TypeTagKnownValues.Tag_kilofarad:
                generated_string_Tag = new JSONStringValue("kilofarad");
                break;
            case TypeTagKnownValues.Tag_megafarad:
                generated_string_Tag = new JSONStringValue("megafarad");
                break;
            case TypeTagKnownValues.Tag_gigafarad:
                generated_string_Tag = new JSONStringValue("gigafarad");
                break;
            case TypeTagKnownValues.Tag_terafarad:
                generated_string_Tag = new JSONStringValue("terafarad");
                break;
            case TypeTagKnownValues.Tag_petafarad:
                generated_string_Tag = new JSONStringValue("petafarad");
                break;
            case TypeTagKnownValues.Tag_exafarad:
                generated_string_Tag = new JSONStringValue("exafarad");
                break;
            case TypeTagKnownValues.Tag_zettafarad:
                generated_string_Tag = new JSONStringValue("zettafarad");
                break;
            case TypeTagKnownValues.Tag_yottafarad:
                generated_string_Tag = new JSONStringValue("yottafarad");
                break;
            case TypeTagKnownValues.Tag_ohm:
                generated_string_Tag = new JSONStringValue("ohm");
                break;
            case TypeTagKnownValues.Tag_yoctoohm:
                generated_string_Tag = new JSONStringValue("yoctoohm");
                break;
            case TypeTagKnownValues.Tag_zeptoohm:
                generated_string_Tag = new JSONStringValue("zeptoohm");
                break;
            case TypeTagKnownValues.Tag_attoohm:
                generated_string_Tag = new JSONStringValue("attoohm");
                break;
            case TypeTagKnownValues.Tag_femtoohm:
                generated_string_Tag = new JSONStringValue("femtoohm");
                break;
            case TypeTagKnownValues.Tag_picoohm:
                generated_string_Tag = new JSONStringValue("picoohm");
                break;
            case TypeTagKnownValues.Tag_nanoohm:
                generated_string_Tag = new JSONStringValue("nanoohm");
                break;
            case TypeTagKnownValues.Tag_microohm:
                generated_string_Tag = new JSONStringValue("microohm");
                break;
            case TypeTagKnownValues.Tag_milliohm:
                generated_string_Tag = new JSONStringValue("milliohm");
                break;
            case TypeTagKnownValues.Tag_centiohm:
                generated_string_Tag = new JSONStringValue("centiohm");
                break;
            case TypeTagKnownValues.Tag_deciohm:
                generated_string_Tag = new JSONStringValue("deciohm");
                break;
            case TypeTagKnownValues.Tag_decaohm:
                generated_string_Tag = new JSONStringValue("decaohm");
                break;
            case TypeTagKnownValues.Tag_hectoohm:
                generated_string_Tag = new JSONStringValue("hectoohm");
                break;
            case TypeTagKnownValues.Tag_kiloohm:
                generated_string_Tag = new JSONStringValue("kiloohm");
                break;
            case TypeTagKnownValues.Tag_megaohm:
                generated_string_Tag = new JSONStringValue("megaohm");
                break;
            case TypeTagKnownValues.Tag_gigaohm:
                generated_string_Tag = new JSONStringValue("gigaohm");
                break;
            case TypeTagKnownValues.Tag_teraohm:
                generated_string_Tag = new JSONStringValue("teraohm");
                break;
            case TypeTagKnownValues.Tag_petaohm:
                generated_string_Tag = new JSONStringValue("petaohm");
                break;
            case TypeTagKnownValues.Tag_exaohm:
                generated_string_Tag = new JSONStringValue("exaohm");
                break;
            case TypeTagKnownValues.Tag_zettaohm:
                generated_string_Tag = new JSONStringValue("zettaohm");
                break;
            case TypeTagKnownValues.Tag_yottaohm:
                generated_string_Tag = new JSONStringValue("yottaohm");
                break;
            case TypeTagKnownValues.Tag_siemens:
                generated_string_Tag = new JSONStringValue("siemens");
                break;
            case TypeTagKnownValues.Tag_yoctosiemens:
                generated_string_Tag = new JSONStringValue("yoctosiemens");
                break;
            case TypeTagKnownValues.Tag_zeptosiemens:
                generated_string_Tag = new JSONStringValue("zeptosiemens");
                break;
            case TypeTagKnownValues.Tag_attosiemens:
                generated_string_Tag = new JSONStringValue("attosiemens");
                break;
            case TypeTagKnownValues.Tag_femtosiemens:
                generated_string_Tag = new JSONStringValue("femtosiemens");
                break;
            case TypeTagKnownValues.Tag_picosiemens:
                generated_string_Tag = new JSONStringValue("picosiemens");
                break;
            case TypeTagKnownValues.Tag_nanosiemens:
                generated_string_Tag = new JSONStringValue("nanosiemens");
                break;
            case TypeTagKnownValues.Tag_microsiemens:
                generated_string_Tag = new JSONStringValue("microsiemens");
                break;
            case TypeTagKnownValues.Tag_millisiemens:
                generated_string_Tag = new JSONStringValue("millisiemens");
                break;
            case TypeTagKnownValues.Tag_centisiemens:
                generated_string_Tag = new JSONStringValue("centisiemens");
                break;
            case TypeTagKnownValues.Tag_decisiemens:
                generated_string_Tag = new JSONStringValue("decisiemens");
                break;
            case TypeTagKnownValues.Tag_decasiemens:
                generated_string_Tag = new JSONStringValue("decasiemens");
                break;
            case TypeTagKnownValues.Tag_hectosiemens:
                generated_string_Tag = new JSONStringValue("hectosiemens");
                break;
            case TypeTagKnownValues.Tag_kilosiemens:
                generated_string_Tag = new JSONStringValue("kilosiemens");
                break;
            case TypeTagKnownValues.Tag_megasiemens:
                generated_string_Tag = new JSONStringValue("megasiemens");
                break;
            case TypeTagKnownValues.Tag_gigasiemens:
                generated_string_Tag = new JSONStringValue("gigasiemens");
                break;
            case TypeTagKnownValues.Tag_terasiemens:
                generated_string_Tag = new JSONStringValue("terasiemens");
                break;
            case TypeTagKnownValues.Tag_petasiemens:
                generated_string_Tag = new JSONStringValue("petasiemens");
                break;
            case TypeTagKnownValues.Tag_exasiemens:
                generated_string_Tag = new JSONStringValue("exasiemens");
                break;
            case TypeTagKnownValues.Tag_zettasiemens:
                generated_string_Tag = new JSONStringValue("zettasiemens");
                break;
            case TypeTagKnownValues.Tag_yottasiemens:
                generated_string_Tag = new JSONStringValue("yottasiemens");
                break;
            case TypeTagKnownValues.Tag_weber:
                generated_string_Tag = new JSONStringValue("weber");
                break;
            case TypeTagKnownValues.Tag_yoctoweber:
                generated_string_Tag = new JSONStringValue("yoctoweber");
                break;
            case TypeTagKnownValues.Tag_zeptoweber:
                generated_string_Tag = new JSONStringValue("zeptoweber");
                break;
            case TypeTagKnownValues.Tag_attoweber:
                generated_string_Tag = new JSONStringValue("attoweber");
                break;
            case TypeTagKnownValues.Tag_femtoweber:
                generated_string_Tag = new JSONStringValue("femtoweber");
                break;
            case TypeTagKnownValues.Tag_picoweber:
                generated_string_Tag = new JSONStringValue("picoweber");
                break;
            case TypeTagKnownValues.Tag_nanoweber:
                generated_string_Tag = new JSONStringValue("nanoweber");
                break;
            case TypeTagKnownValues.Tag_microweber:
                generated_string_Tag = new JSONStringValue("microweber");
                break;
            case TypeTagKnownValues.Tag_milliweber:
                generated_string_Tag = new JSONStringValue("milliweber");
                break;
            case TypeTagKnownValues.Tag_centiweber:
                generated_string_Tag = new JSONStringValue("centiweber");
                break;
            case TypeTagKnownValues.Tag_deciweber:
                generated_string_Tag = new JSONStringValue("deciweber");
                break;
            case TypeTagKnownValues.Tag_decaweber:
                generated_string_Tag = new JSONStringValue("decaweber");
                break;
            case TypeTagKnownValues.Tag_hectoweber:
                generated_string_Tag = new JSONStringValue("hectoweber");
                break;
            case TypeTagKnownValues.Tag_kiloweber:
                generated_string_Tag = new JSONStringValue("kiloweber");
                break;
            case TypeTagKnownValues.Tag_megaweber:
                generated_string_Tag = new JSONStringValue("megaweber");
                break;
            case TypeTagKnownValues.Tag_gigaweber:
                generated_string_Tag = new JSONStringValue("gigaweber");
                break;
            case TypeTagKnownValues.Tag_teraweber:
                generated_string_Tag = new JSONStringValue("teraweber");
                break;
            case TypeTagKnownValues.Tag_petaweber:
                generated_string_Tag = new JSONStringValue("petaweber");
                break;
            case TypeTagKnownValues.Tag_exaweber:
                generated_string_Tag = new JSONStringValue("exaweber");
                break;
            case TypeTagKnownValues.Tag_zettaweber:
                generated_string_Tag = new JSONStringValue("zettaweber");
                break;
            case TypeTagKnownValues.Tag_yottaweber:
                generated_string_Tag = new JSONStringValue("yottaweber");
                break;
            case TypeTagKnownValues.Tag_tesla:
                generated_string_Tag = new JSONStringValue("tesla");
                break;
            case TypeTagKnownValues.Tag_yoctotesla:
                generated_string_Tag = new JSONStringValue("yoctotesla");
                break;
            case TypeTagKnownValues.Tag_zeptotesla:
                generated_string_Tag = new JSONStringValue("zeptotesla");
                break;
            case TypeTagKnownValues.Tag_attotesla:
                generated_string_Tag = new JSONStringValue("attotesla");
                break;
            case TypeTagKnownValues.Tag_femtotesla:
                generated_string_Tag = new JSONStringValue("femtotesla");
                break;
            case TypeTagKnownValues.Tag_picotesla:
                generated_string_Tag = new JSONStringValue("picotesla");
                break;
            case TypeTagKnownValues.Tag_nanotesla:
                generated_string_Tag = new JSONStringValue("nanotesla");
                break;
            case TypeTagKnownValues.Tag_microtesla:
                generated_string_Tag = new JSONStringValue("microtesla");
                break;
            case TypeTagKnownValues.Tag_millitesla:
                generated_string_Tag = new JSONStringValue("millitesla");
                break;
            case TypeTagKnownValues.Tag_centitesla:
                generated_string_Tag = new JSONStringValue("centitesla");
                break;
            case TypeTagKnownValues.Tag_decitesla:
                generated_string_Tag = new JSONStringValue("decitesla");
                break;
            case TypeTagKnownValues.Tag_decatesla:
                generated_string_Tag = new JSONStringValue("decatesla");
                break;
            case TypeTagKnownValues.Tag_hectotesla:
                generated_string_Tag = new JSONStringValue("hectotesla");
                break;
            case TypeTagKnownValues.Tag_kilotesla:
                generated_string_Tag = new JSONStringValue("kilotesla");
                break;
            case TypeTagKnownValues.Tag_megatesla:
                generated_string_Tag = new JSONStringValue("megatesla");
                break;
            case TypeTagKnownValues.Tag_gigatesla:
                generated_string_Tag = new JSONStringValue("gigatesla");
                break;
            case TypeTagKnownValues.Tag_teratesla:
                generated_string_Tag = new JSONStringValue("teratesla");
                break;
            case TypeTagKnownValues.Tag_petatesla:
                generated_string_Tag = new JSONStringValue("petatesla");
                break;
            case TypeTagKnownValues.Tag_exatesla:
                generated_string_Tag = new JSONStringValue("exatesla");
                break;
            case TypeTagKnownValues.Tag_zettatesla:
                generated_string_Tag = new JSONStringValue("zettatesla");
                break;
            case TypeTagKnownValues.Tag_yottatesla:
                generated_string_Tag = new JSONStringValue("yottatesla");
                break;
            case TypeTagKnownValues.Tag_henry:
                generated_string_Tag = new JSONStringValue("henry");
                break;
            case TypeTagKnownValues.Tag_yoctohenry:
                generated_string_Tag = new JSONStringValue("yoctohenry");
                break;
            case TypeTagKnownValues.Tag_zeptohenry:
                generated_string_Tag = new JSONStringValue("zeptohenry");
                break;
            case TypeTagKnownValues.Tag_attohenry:
                generated_string_Tag = new JSONStringValue("attohenry");
                break;
            case TypeTagKnownValues.Tag_femtohenry:
                generated_string_Tag = new JSONStringValue("femtohenry");
                break;
            case TypeTagKnownValues.Tag_picohenry:
                generated_string_Tag = new JSONStringValue("picohenry");
                break;
            case TypeTagKnownValues.Tag_nanohenry:
                generated_string_Tag = new JSONStringValue("nanohenry");
                break;
            case TypeTagKnownValues.Tag_microhenry:
                generated_string_Tag = new JSONStringValue("microhenry");
                break;
            case TypeTagKnownValues.Tag_millihenry:
                generated_string_Tag = new JSONStringValue("millihenry");
                break;
            case TypeTagKnownValues.Tag_centihenry:
                generated_string_Tag = new JSONStringValue("centihenry");
                break;
            case TypeTagKnownValues.Tag_decihenry:
                generated_string_Tag = new JSONStringValue("decihenry");
                break;
            case TypeTagKnownValues.Tag_decahenry:
                generated_string_Tag = new JSONStringValue("decahenry");
                break;
            case TypeTagKnownValues.Tag_hectohenry:
                generated_string_Tag = new JSONStringValue("hectohenry");
                break;
            case TypeTagKnownValues.Tag_kilohenry:
                generated_string_Tag = new JSONStringValue("kilohenry");
                break;
            case TypeTagKnownValues.Tag_megahenry:
                generated_string_Tag = new JSONStringValue("megahenry");
                break;
            case TypeTagKnownValues.Tag_gigahenry:
                generated_string_Tag = new JSONStringValue("gigahenry");
                break;
            case TypeTagKnownValues.Tag_terahenry:
                generated_string_Tag = new JSONStringValue("terahenry");
                break;
            case TypeTagKnownValues.Tag_petahenry:
                generated_string_Tag = new JSONStringValue("petahenry");
                break;
            case TypeTagKnownValues.Tag_exahenry:
                generated_string_Tag = new JSONStringValue("exahenry");
                break;
            case TypeTagKnownValues.Tag_zettahenry:
                generated_string_Tag = new JSONStringValue("zettahenry");
                break;
            case TypeTagKnownValues.Tag_yottahenry:
                generated_string_Tag = new JSONStringValue("yottahenry");
                break;
            case TypeTagKnownValues.Tag_degree_celsius:
                generated_string_Tag = new JSONStringValue("degree_celsius");
                break;
            case TypeTagKnownValues.Tag_yoctodegree_celsius:
                generated_string_Tag = new JSONStringValue("yoctodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_zeptodegree_celsius:
                generated_string_Tag = new JSONStringValue("zeptodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_attodegree_celsius:
                generated_string_Tag = new JSONStringValue("attodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_femtodegree_celsius:
                generated_string_Tag = new JSONStringValue("femtodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_picodegree_celsius:
                generated_string_Tag = new JSONStringValue("picodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_nanodegree_celsius:
                generated_string_Tag = new JSONStringValue("nanodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_microdegree_celsius:
                generated_string_Tag = new JSONStringValue("microdegree_celsius");
                break;
            case TypeTagKnownValues.Tag_millidegree_celsius:
                generated_string_Tag = new JSONStringValue("millidegree_celsius");
                break;
            case TypeTagKnownValues.Tag_centidegree_celsius:
                generated_string_Tag = new JSONStringValue("centidegree_celsius");
                break;
            case TypeTagKnownValues.Tag_decidegree_celsius:
                generated_string_Tag = new JSONStringValue("decidegree_celsius");
                break;
            case TypeTagKnownValues.Tag_decadegree_celsius:
                generated_string_Tag = new JSONStringValue("decadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_hectodegree_celsius:
                generated_string_Tag = new JSONStringValue("hectodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_kilodegree_celsius:
                generated_string_Tag = new JSONStringValue("kilodegree_celsius");
                break;
            case TypeTagKnownValues.Tag_megadegree_celsius:
                generated_string_Tag = new JSONStringValue("megadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_gigadegree_celsius:
                generated_string_Tag = new JSONStringValue("gigadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_teradegree_celsius:
                generated_string_Tag = new JSONStringValue("teradegree_celsius");
                break;
            case TypeTagKnownValues.Tag_petadegree_celsius:
                generated_string_Tag = new JSONStringValue("petadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_exadegree_celsius:
                generated_string_Tag = new JSONStringValue("exadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_zettadegree_celsius:
                generated_string_Tag = new JSONStringValue("zettadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_yottadegree_celsius:
                generated_string_Tag = new JSONStringValue("yottadegree_celsius");
                break;
            case TypeTagKnownValues.Tag_lumen:
                generated_string_Tag = new JSONStringValue("lumen");
                break;
            case TypeTagKnownValues.Tag_yoctolumen:
                generated_string_Tag = new JSONStringValue("yoctolumen");
                break;
            case TypeTagKnownValues.Tag_zeptolumen:
                generated_string_Tag = new JSONStringValue("zeptolumen");
                break;
            case TypeTagKnownValues.Tag_attolumen:
                generated_string_Tag = new JSONStringValue("attolumen");
                break;
            case TypeTagKnownValues.Tag_femtolumen:
                generated_string_Tag = new JSONStringValue("femtolumen");
                break;
            case TypeTagKnownValues.Tag_picolumen:
                generated_string_Tag = new JSONStringValue("picolumen");
                break;
            case TypeTagKnownValues.Tag_nanolumen:
                generated_string_Tag = new JSONStringValue("nanolumen");
                break;
            case TypeTagKnownValues.Tag_microlumen:
                generated_string_Tag = new JSONStringValue("microlumen");
                break;
            case TypeTagKnownValues.Tag_millilumen:
                generated_string_Tag = new JSONStringValue("millilumen");
                break;
            case TypeTagKnownValues.Tag_centilumen:
                generated_string_Tag = new JSONStringValue("centilumen");
                break;
            case TypeTagKnownValues.Tag_decilumen:
                generated_string_Tag = new JSONStringValue("decilumen");
                break;
            case TypeTagKnownValues.Tag_decalumen:
                generated_string_Tag = new JSONStringValue("decalumen");
                break;
            case TypeTagKnownValues.Tag_hectolumen:
                generated_string_Tag = new JSONStringValue("hectolumen");
                break;
            case TypeTagKnownValues.Tag_kilolumen:
                generated_string_Tag = new JSONStringValue("kilolumen");
                break;
            case TypeTagKnownValues.Tag_megalumen:
                generated_string_Tag = new JSONStringValue("megalumen");
                break;
            case TypeTagKnownValues.Tag_gigalumen:
                generated_string_Tag = new JSONStringValue("gigalumen");
                break;
            case TypeTagKnownValues.Tag_teralumen:
                generated_string_Tag = new JSONStringValue("teralumen");
                break;
            case TypeTagKnownValues.Tag_petalumen:
                generated_string_Tag = new JSONStringValue("petalumen");
                break;
            case TypeTagKnownValues.Tag_exalumen:
                generated_string_Tag = new JSONStringValue("exalumen");
                break;
            case TypeTagKnownValues.Tag_zettalumen:
                generated_string_Tag = new JSONStringValue("zettalumen");
                break;
            case TypeTagKnownValues.Tag_yottalumen:
                generated_string_Tag = new JSONStringValue("yottalumen");
                break;
            case TypeTagKnownValues.Tag_lux:
                generated_string_Tag = new JSONStringValue("lux");
                break;
            case TypeTagKnownValues.Tag_yoctolux:
                generated_string_Tag = new JSONStringValue("yoctolux");
                break;
            case TypeTagKnownValues.Tag_zeptolux:
                generated_string_Tag = new JSONStringValue("zeptolux");
                break;
            case TypeTagKnownValues.Tag_attolux:
                generated_string_Tag = new JSONStringValue("attolux");
                break;
            case TypeTagKnownValues.Tag_femtolux:
                generated_string_Tag = new JSONStringValue("femtolux");
                break;
            case TypeTagKnownValues.Tag_picolux:
                generated_string_Tag = new JSONStringValue("picolux");
                break;
            case TypeTagKnownValues.Tag_nanolux:
                generated_string_Tag = new JSONStringValue("nanolux");
                break;
            case TypeTagKnownValues.Tag_microlux:
                generated_string_Tag = new JSONStringValue("microlux");
                break;
            case TypeTagKnownValues.Tag_millilux:
                generated_string_Tag = new JSONStringValue("millilux");
                break;
            case TypeTagKnownValues.Tag_centilux:
                generated_string_Tag = new JSONStringValue("centilux");
                break;
            case TypeTagKnownValues.Tag_decilux:
                generated_string_Tag = new JSONStringValue("decilux");
                break;
            case TypeTagKnownValues.Tag_decalux:
                generated_string_Tag = new JSONStringValue("decalux");
                break;
            case TypeTagKnownValues.Tag_hectolux:
                generated_string_Tag = new JSONStringValue("hectolux");
                break;
            case TypeTagKnownValues.Tag_kilolux:
                generated_string_Tag = new JSONStringValue("kilolux");
                break;
            case TypeTagKnownValues.Tag_megalux:
                generated_string_Tag = new JSONStringValue("megalux");
                break;
            case TypeTagKnownValues.Tag_gigalux:
                generated_string_Tag = new JSONStringValue("gigalux");
                break;
            case TypeTagKnownValues.Tag_teralux:
                generated_string_Tag = new JSONStringValue("teralux");
                break;
            case TypeTagKnownValues.Tag_petalux:
                generated_string_Tag = new JSONStringValue("petalux");
                break;
            case TypeTagKnownValues.Tag_exalux:
                generated_string_Tag = new JSONStringValue("exalux");
                break;
            case TypeTagKnownValues.Tag_zettalux:
                generated_string_Tag = new JSONStringValue("zettalux");
                break;
            case TypeTagKnownValues.Tag_yottalux:
                generated_string_Tag = new JSONStringValue("yottalux");
                break;
            case TypeTagKnownValues.Tag_becquerel:
                generated_string_Tag = new JSONStringValue("becquerel");
                break;
            case TypeTagKnownValues.Tag_yoctobecquerel:
                generated_string_Tag = new JSONStringValue("yoctobecquerel");
                break;
            case TypeTagKnownValues.Tag_zeptobecquerel:
                generated_string_Tag = new JSONStringValue("zeptobecquerel");
                break;
            case TypeTagKnownValues.Tag_attobecquerel:
                generated_string_Tag = new JSONStringValue("attobecquerel");
                break;
            case TypeTagKnownValues.Tag_femtobecquerel:
                generated_string_Tag = new JSONStringValue("femtobecquerel");
                break;
            case TypeTagKnownValues.Tag_picobecquerel:
                generated_string_Tag = new JSONStringValue("picobecquerel");
                break;
            case TypeTagKnownValues.Tag_nanobecquerel:
                generated_string_Tag = new JSONStringValue("nanobecquerel");
                break;
            case TypeTagKnownValues.Tag_microbecquerel:
                generated_string_Tag = new JSONStringValue("microbecquerel");
                break;
            case TypeTagKnownValues.Tag_millibecquerel:
                generated_string_Tag = new JSONStringValue("millibecquerel");
                break;
            case TypeTagKnownValues.Tag_centibecquerel:
                generated_string_Tag = new JSONStringValue("centibecquerel");
                break;
            case TypeTagKnownValues.Tag_decibecquerel:
                generated_string_Tag = new JSONStringValue("decibecquerel");
                break;
            case TypeTagKnownValues.Tag_decabecquerel:
                generated_string_Tag = new JSONStringValue("decabecquerel");
                break;
            case TypeTagKnownValues.Tag_hectobecquerel:
                generated_string_Tag = new JSONStringValue("hectobecquerel");
                break;
            case TypeTagKnownValues.Tag_kilobecquerel:
                generated_string_Tag = new JSONStringValue("kilobecquerel");
                break;
            case TypeTagKnownValues.Tag_megabecquerel:
                generated_string_Tag = new JSONStringValue("megabecquerel");
                break;
            case TypeTagKnownValues.Tag_gigabecquerel:
                generated_string_Tag = new JSONStringValue("gigabecquerel");
                break;
            case TypeTagKnownValues.Tag_terabecquerel:
                generated_string_Tag = new JSONStringValue("terabecquerel");
                break;
            case TypeTagKnownValues.Tag_petabecquerel:
                generated_string_Tag = new JSONStringValue("petabecquerel");
                break;
            case TypeTagKnownValues.Tag_exabecquerel:
                generated_string_Tag = new JSONStringValue("exabecquerel");
                break;
            case TypeTagKnownValues.Tag_zettabecquerel:
                generated_string_Tag = new JSONStringValue("zettabecquerel");
                break;
            case TypeTagKnownValues.Tag_yottabecquerel:
                generated_string_Tag = new JSONStringValue("yottabecquerel");
                break;
            case TypeTagKnownValues.Tag_gray:
                generated_string_Tag = new JSONStringValue("gray");
                break;
            case TypeTagKnownValues.Tag_yoctogray:
                generated_string_Tag = new JSONStringValue("yoctogray");
                break;
            case TypeTagKnownValues.Tag_zeptogray:
                generated_string_Tag = new JSONStringValue("zeptogray");
                break;
            case TypeTagKnownValues.Tag_attogray:
                generated_string_Tag = new JSONStringValue("attogray");
                break;
            case TypeTagKnownValues.Tag_femtogray:
                generated_string_Tag = new JSONStringValue("femtogray");
                break;
            case TypeTagKnownValues.Tag_picogray:
                generated_string_Tag = new JSONStringValue("picogray");
                break;
            case TypeTagKnownValues.Tag_nanogray:
                generated_string_Tag = new JSONStringValue("nanogray");
                break;
            case TypeTagKnownValues.Tag_microgray:
                generated_string_Tag = new JSONStringValue("microgray");
                break;
            case TypeTagKnownValues.Tag_milligray:
                generated_string_Tag = new JSONStringValue("milligray");
                break;
            case TypeTagKnownValues.Tag_centigray:
                generated_string_Tag = new JSONStringValue("centigray");
                break;
            case TypeTagKnownValues.Tag_decigray:
                generated_string_Tag = new JSONStringValue("decigray");
                break;
            case TypeTagKnownValues.Tag_decagray:
                generated_string_Tag = new JSONStringValue("decagray");
                break;
            case TypeTagKnownValues.Tag_hectogray:
                generated_string_Tag = new JSONStringValue("hectogray");
                break;
            case TypeTagKnownValues.Tag_kilogray:
                generated_string_Tag = new JSONStringValue("kilogray");
                break;
            case TypeTagKnownValues.Tag_megagray:
                generated_string_Tag = new JSONStringValue("megagray");
                break;
            case TypeTagKnownValues.Tag_gigagray:
                generated_string_Tag = new JSONStringValue("gigagray");
                break;
            case TypeTagKnownValues.Tag_teragray:
                generated_string_Tag = new JSONStringValue("teragray");
                break;
            case TypeTagKnownValues.Tag_petagray:
                generated_string_Tag = new JSONStringValue("petagray");
                break;
            case TypeTagKnownValues.Tag_exagray:
                generated_string_Tag = new JSONStringValue("exagray");
                break;
            case TypeTagKnownValues.Tag_zettagray:
                generated_string_Tag = new JSONStringValue("zettagray");
                break;
            case TypeTagKnownValues.Tag_yottagray:
                generated_string_Tag = new JSONStringValue("yottagray");
                break;
            case TypeTagKnownValues.Tag_sievert:
                generated_string_Tag = new JSONStringValue("sievert");
                break;
            case TypeTagKnownValues.Tag_yoctosievert:
                generated_string_Tag = new JSONStringValue("yoctosievert");
                break;
            case TypeTagKnownValues.Tag_zeptosievert:
                generated_string_Tag = new JSONStringValue("zeptosievert");
                break;
            case TypeTagKnownValues.Tag_attosievert:
                generated_string_Tag = new JSONStringValue("attosievert");
                break;
            case TypeTagKnownValues.Tag_femtosievert:
                generated_string_Tag = new JSONStringValue("femtosievert");
                break;
            case TypeTagKnownValues.Tag_picosievert:
                generated_string_Tag = new JSONStringValue("picosievert");
                break;
            case TypeTagKnownValues.Tag_nanosievert:
                generated_string_Tag = new JSONStringValue("nanosievert");
                break;
            case TypeTagKnownValues.Tag_microsievert:
                generated_string_Tag = new JSONStringValue("microsievert");
                break;
            case TypeTagKnownValues.Tag_millisievert:
                generated_string_Tag = new JSONStringValue("millisievert");
                break;
            case TypeTagKnownValues.Tag_centisievert:
                generated_string_Tag = new JSONStringValue("centisievert");
                break;
            case TypeTagKnownValues.Tag_decisievert:
                generated_string_Tag = new JSONStringValue("decisievert");
                break;
            case TypeTagKnownValues.Tag_decasievert:
                generated_string_Tag = new JSONStringValue("decasievert");
                break;
            case TypeTagKnownValues.Tag_hectosievert:
                generated_string_Tag = new JSONStringValue("hectosievert");
                break;
            case TypeTagKnownValues.Tag_kilosievert:
                generated_string_Tag = new JSONStringValue("kilosievert");
                break;
            case TypeTagKnownValues.Tag_megasievert:
                generated_string_Tag = new JSONStringValue("megasievert");
                break;
            case TypeTagKnownValues.Tag_gigasievert:
                generated_string_Tag = new JSONStringValue("gigasievert");
                break;
            case TypeTagKnownValues.Tag_terasievert:
                generated_string_Tag = new JSONStringValue("terasievert");
                break;
            case TypeTagKnownValues.Tag_petasievert:
                generated_string_Tag = new JSONStringValue("petasievert");
                break;
            case TypeTagKnownValues.Tag_exasievert:
                generated_string_Tag = new JSONStringValue("exasievert");
                break;
            case TypeTagKnownValues.Tag_zettasievert:
                generated_string_Tag = new JSONStringValue("zettasievert");
                break;
            case TypeTagKnownValues.Tag_yottasievert:
                generated_string_Tag = new JSONStringValue("yottasievert");
                break;
            case TypeTagKnownValues.Tag_katal:
                generated_string_Tag = new JSONStringValue("katal");
                break;
            case TypeTagKnownValues.Tag_yoctokatal:
                generated_string_Tag = new JSONStringValue("yoctokatal");
                break;
            case TypeTagKnownValues.Tag_zeptokatal:
                generated_string_Tag = new JSONStringValue("zeptokatal");
                break;
            case TypeTagKnownValues.Tag_attokatal:
                generated_string_Tag = new JSONStringValue("attokatal");
                break;
            case TypeTagKnownValues.Tag_femtokatal:
                generated_string_Tag = new JSONStringValue("femtokatal");
                break;
            case TypeTagKnownValues.Tag_picokatal:
                generated_string_Tag = new JSONStringValue("picokatal");
                break;
            case TypeTagKnownValues.Tag_nanokatal:
                generated_string_Tag = new JSONStringValue("nanokatal");
                break;
            case TypeTagKnownValues.Tag_microkatal:
                generated_string_Tag = new JSONStringValue("microkatal");
                break;
            case TypeTagKnownValues.Tag_millikatal:
                generated_string_Tag = new JSONStringValue("millikatal");
                break;
            case TypeTagKnownValues.Tag_centikatal:
                generated_string_Tag = new JSONStringValue("centikatal");
                break;
            case TypeTagKnownValues.Tag_decikatal:
                generated_string_Tag = new JSONStringValue("decikatal");
                break;
            case TypeTagKnownValues.Tag_decakatal:
                generated_string_Tag = new JSONStringValue("decakatal");
                break;
            case TypeTagKnownValues.Tag_hectokatal:
                generated_string_Tag = new JSONStringValue("hectokatal");
                break;
            case TypeTagKnownValues.Tag_kilokatal:
                generated_string_Tag = new JSONStringValue("kilokatal");
                break;
            case TypeTagKnownValues.Tag_megakatal:
                generated_string_Tag = new JSONStringValue("megakatal");
                break;
            case TypeTagKnownValues.Tag_gigakatal:
                generated_string_Tag = new JSONStringValue("gigakatal");
                break;
            case TypeTagKnownValues.Tag_terakatal:
                generated_string_Tag = new JSONStringValue("terakatal");
                break;
            case TypeTagKnownValues.Tag_petakatal:
                generated_string_Tag = new JSONStringValue("petakatal");
                break;
            case TypeTagKnownValues.Tag_exakatal:
                generated_string_Tag = new JSONStringValue("exakatal");
                break;
            case TypeTagKnownValues.Tag_zettakatal:
                generated_string_Tag = new JSONStringValue("zettakatal");
                break;
            case TypeTagKnownValues.Tag_yottakatal:
                generated_string_Tag = new JSONStringValue("yottakatal");
                break;
            case TypeTagKnownValues.Tag_hectare:
                generated_string_Tag = new JSONStringValue("hectare");
                break;
            case TypeTagKnownValues.Tag_liter:
                generated_string_Tag = new JSONStringValue("liter");
                break;
            case TypeTagKnownValues.Tag_yoctoliter:
                generated_string_Tag = new JSONStringValue("yoctoliter");
                break;
            case TypeTagKnownValues.Tag_zeptoliter:
                generated_string_Tag = new JSONStringValue("zeptoliter");
                break;
            case TypeTagKnownValues.Tag_attoliter:
                generated_string_Tag = new JSONStringValue("attoliter");
                break;
            case TypeTagKnownValues.Tag_femtoliter:
                generated_string_Tag = new JSONStringValue("femtoliter");
                break;
            case TypeTagKnownValues.Tag_picoliter:
                generated_string_Tag = new JSONStringValue("picoliter");
                break;
            case TypeTagKnownValues.Tag_nanoliter:
                generated_string_Tag = new JSONStringValue("nanoliter");
                break;
            case TypeTagKnownValues.Tag_microliter:
                generated_string_Tag = new JSONStringValue("microliter");
                break;
            case TypeTagKnownValues.Tag_milliliter:
                generated_string_Tag = new JSONStringValue("milliliter");
                break;
            case TypeTagKnownValues.Tag_centiliter:
                generated_string_Tag = new JSONStringValue("centiliter");
                break;
            case TypeTagKnownValues.Tag_deciliter:
                generated_string_Tag = new JSONStringValue("deciliter");
                break;
            case TypeTagKnownValues.Tag_decaliter:
                generated_string_Tag = new JSONStringValue("decaliter");
                break;
            case TypeTagKnownValues.Tag_hectoliter:
                generated_string_Tag = new JSONStringValue("hectoliter");
                break;
            case TypeTagKnownValues.Tag_kiloliter:
                generated_string_Tag = new JSONStringValue("kiloliter");
                break;
            case TypeTagKnownValues.Tag_megaliter:
                generated_string_Tag = new JSONStringValue("megaliter");
                break;
            case TypeTagKnownValues.Tag_gigaliter:
                generated_string_Tag = new JSONStringValue("gigaliter");
                break;
            case TypeTagKnownValues.Tag_teraliter:
                generated_string_Tag = new JSONStringValue("teraliter");
                break;
            case TypeTagKnownValues.Tag_petaliter:
                generated_string_Tag = new JSONStringValue("petaliter");
                break;
            case TypeTagKnownValues.Tag_exaliter:
                generated_string_Tag = new JSONStringValue("exaliter");
                break;
            case TypeTagKnownValues.Tag_zettaliter:
                generated_string_Tag = new JSONStringValue("zettaliter");
                break;
            case TypeTagKnownValues.Tag_yottaliter:
                generated_string_Tag = new JSONStringValue("yottaliter");
                break;
            case TypeTagKnownValues.Tag_tonne:
                generated_string_Tag = new JSONStringValue("tonne");
                break;
            case TypeTagKnownValues.Tag_yoctotonne:
                generated_string_Tag = new JSONStringValue("yoctotonne");
                break;
            case TypeTagKnownValues.Tag_zeptotonne:
                generated_string_Tag = new JSONStringValue("zeptotonne");
                break;
            case TypeTagKnownValues.Tag_attotonne:
                generated_string_Tag = new JSONStringValue("attotonne");
                break;
            case TypeTagKnownValues.Tag_femtotonne:
                generated_string_Tag = new JSONStringValue("femtotonne");
                break;
            case TypeTagKnownValues.Tag_picotonne:
                generated_string_Tag = new JSONStringValue("picotonne");
                break;
            case TypeTagKnownValues.Tag_nanotonne:
                generated_string_Tag = new JSONStringValue("nanotonne");
                break;
            case TypeTagKnownValues.Tag_microtonne:
                generated_string_Tag = new JSONStringValue("microtonne");
                break;
            case TypeTagKnownValues.Tag_millitonne:
                generated_string_Tag = new JSONStringValue("millitonne");
                break;
            case TypeTagKnownValues.Tag_centitonne:
                generated_string_Tag = new JSONStringValue("centitonne");
                break;
            case TypeTagKnownValues.Tag_decitonne:
                generated_string_Tag = new JSONStringValue("decitonne");
                break;
            case TypeTagKnownValues.Tag_decatonne:
                generated_string_Tag = new JSONStringValue("decatonne");
                break;
            case TypeTagKnownValues.Tag_hectotonne:
                generated_string_Tag = new JSONStringValue("hectotonne");
                break;
            case TypeTagKnownValues.Tag_kilotonne:
                generated_string_Tag = new JSONStringValue("kilotonne");
                break;
            case TypeTagKnownValues.Tag_megatonne:
                generated_string_Tag = new JSONStringValue("megatonne");
                break;
            case TypeTagKnownValues.Tag_gigatonne:
                generated_string_Tag = new JSONStringValue("gigatonne");
                break;
            case TypeTagKnownValues.Tag_teratonne:
                generated_string_Tag = new JSONStringValue("teratonne");
                break;
            case TypeTagKnownValues.Tag_petatonne:
                generated_string_Tag = new JSONStringValue("petatonne");
                break;
            case TypeTagKnownValues.Tag_exatonne:
                generated_string_Tag = new JSONStringValue("exatonne");
                break;
            case TypeTagKnownValues.Tag_zettatonne:
                generated_string_Tag = new JSONStringValue("zettatonne");
                break;
            case TypeTagKnownValues.Tag_yottatonne:
                generated_string_Tag = new JSONStringValue("yottatonne");
                break;
            case TypeTagKnownValues.Tag_astronomical_unit:
                generated_string_Tag = new JSONStringValue("astronomical_unit");
                break;
            case TypeTagKnownValues.Tag_angstrom:
                generated_string_Tag = new JSONStringValue("angstrom");
                break;
            case TypeTagKnownValues.Tag_minute:
                generated_string_Tag = new JSONStringValue("minute");
                break;
            case TypeTagKnownValues.Tag_hour:
                generated_string_Tag = new JSONStringValue("hour");
                break;
            case TypeTagKnownValues.Tag_day:
                generated_string_Tag = new JSONStringValue("day");
                break;
            case TypeTagKnownValues.Tag_week:
                generated_string_Tag = new JSONStringValue("week");
                break;
            case TypeTagKnownValues.Tag_fortnight:
                generated_string_Tag = new JSONStringValue("fortnight");
                break;
            case TypeTagKnownValues.Tag_month:
                generated_string_Tag = new JSONStringValue("month");
                break;
            case TypeTagKnownValues.Tag_year:
                generated_string_Tag = new JSONStringValue("year");
                break;
            case TypeTagKnownValues.Tag_biennium:
                generated_string_Tag = new JSONStringValue("biennium");
                break;
            case TypeTagKnownValues.Tag_triennium:
                generated_string_Tag = new JSONStringValue("triennium");
                break;
            case TypeTagKnownValues.Tag_quadrennium:
                generated_string_Tag = new JSONStringValue("quadrennium");
                break;
            case TypeTagKnownValues.Tag_lustrum:
                generated_string_Tag = new JSONStringValue("lustrum");
                break;
            case TypeTagKnownValues.Tag_decade:
                generated_string_Tag = new JSONStringValue("decade");
                break;
            case TypeTagKnownValues.Tag_century:
                generated_string_Tag = new JSONStringValue("century");
                break;
            case TypeTagKnownValues.Tag_millennium:
                generated_string_Tag = new JSONStringValue("millennium");
                break;
            case TypeTagKnownValues.Tag_sidereal_day:
                generated_string_Tag = new JSONStringValue("sidereal_day");
                break;
            case TypeTagKnownValues.Tag_sidereal_year:
                generated_string_Tag = new JSONStringValue("sidereal_year");
                break;
            case TypeTagKnownValues.Tag_helek:
                generated_string_Tag = new JSONStringValue("helek");
                break;
            case TypeTagKnownValues.Tag_Planck_time:
                generated_string_Tag = new JSONStringValue("Planck_time");
                break;
            case TypeTagKnownValues.Tag_shake:
                generated_string_Tag = new JSONStringValue("shake");
                break;
            case TypeTagKnownValues.Tag_svedberg:
                generated_string_Tag = new JSONStringValue("svedberg");
                break;
            case TypeTagKnownValues.Tag_parsec:
                generated_string_Tag = new JSONStringValue("parsec");
                break;
            case TypeTagKnownValues.Tag_degree_of_arc:
                generated_string_Tag = new JSONStringValue("degree_of_arc");
                break;
            default:
                Debug.Assert(false);
                generated_string_Tag = null;
                break;
          }
          }
        return generated_string_Tag;
      }


    private void  fromJSONTag(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field Tag of CoreUnitsUnitJSON is not a string.");
        TypeTag the_open_enum = new TypeTag();
        switch (json_string.getData()[0])
          {
            case 'P':
                if ((String.Compare(json_string.getData(), 1, "lanck_time", 0, 10, false) == 0) && (json_string.getData().Length == 11))
                      {
                        the_open_enum.in_known_list = true;
                        the_open_enum.list_value = TypeTagKnownValues.Tag_Planck_time;
                        goto open_enum_is_done;
                      }
                break;
            case 'a':
                switch (json_string.getData()[1])
                  {
                    case 'c':
                        if ((String.Compare(json_string.getData(), 2, "re", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_acre;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'm':
                        if ((String.Compare(json_string.getData(), 2, "pere", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_ampere;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'n':
                        if ((String.Compare(json_string.getData(), 2, "gstrom", 0, 6, false) == 0) && (json_string.getData().Length == 8))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_angstrom;
                                goto open_enum_is_done;
                              }
                        break;
                    case 's':
                        if ((String.Compare(json_string.getData(), 2, "tronomical_unit", 0, 15, false) == 0) && (json_string.getData().Length == 17))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_astronomical_unit;
                                goto open_enum_is_done;
                              }
                        break;
                    case 't':
                        if (String.Compare(json_string.getData(), 2, "to", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attoampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attobecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attocandela;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attocoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attodegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attofarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_attogram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_attogray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_attohenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_attohertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attojoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attokatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attokelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attoliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attolumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 7)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attolux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attometer;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attomole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attonewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attoohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attopascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attoradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attosecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_attosiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_attosievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attosteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attotesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attotonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_attovolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attowatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_attoweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'u':
                        if ((String.Compare(json_string.getData(), 2, "stralian_tablespoon", 0, 19, false) == 0) && (json_string.getData().Length == 21))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_australian_tablespoon;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'b':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "rleycorn", 0, 8, false) == 0) && (json_string.getData().Length == 10))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_barleycorn;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "cquerel", 0, 7, false) == 0) && (json_string.getData().Length == 9))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_becquerel;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'i':
                        if ((String.Compare(json_string.getData(), 2, "ennium", 0, 6, false) == 0) && (json_string.getData().Length == 8))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_biennium;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'r':
                        if ((String.Compare(json_string.getData(), 2, "itish_thermal_unit", 0, 18, false) == 0) && (json_string.getData().Length == 20))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_british_thermal_unit;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'c':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        switch (json_string.getData()[2])
                          {
                            case 'b':
                                if ((String.Compare(json_string.getData(), 3, "le", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_cable;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'l':
                                if ((String.Compare(json_string.getData(), 3, "orie", 0, 4, false) == 0) && (json_string.getData().Length == 7))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_calorie;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'n':
                                if ((String.Compare(json_string.getData(), 3, "dela", 0, 4, false) == 0) && (json_string.getData().Length == 7))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_candela;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(json_string.getData(), 2, "nt", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'i':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centiampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centibecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centicandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centicoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centidegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centifarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_centigram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_centigray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_centihenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_centihertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centijoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centikatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centikelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centiliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centilumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centilux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centimeter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centimole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centinewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centiohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centipascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centiradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centisecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_centisiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_centisievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centisteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centitesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centitonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_centivolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centiwatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_centiweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'u':
                                    if ((String.Compare(json_string.getData(), 5, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_century;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'h':
                        if ((String.Compare(json_string.getData(), 2, "ain", 0, 3, false) == 0) && (json_string.getData().Length == 5))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_chain;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'o':
                        if ((String.Compare(json_string.getData(), 2, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 7))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_coulomb;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'd':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "y", 0, 1, false) == 0) && (json_string.getData().Length == 3))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_day;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        switch (json_string.getData()[2])
                          {
                            case 'c':
                                switch (json_string.getData()[3])
                                  {
                                    case 'a':
                                        switch (json_string.getData()[4])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decaampere;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'b':
                                                if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decabecquerel;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'c':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decacandela;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decacoulomb;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'd':
                                                if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 6)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_decade;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'g':
                                                            if ((String.Compare(json_string.getData(), 7, "ree_celsius", 0, 11, false) == 0) && (json_string.getData().Length == 18))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decadegree_celsius;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'f':
                                                if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decafarad;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'g':
                                                if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decagram;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'y':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decagray;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'h':
                                                if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'n':
                                                            if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decahenry;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decahertz;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'j':
                                                if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decajoule;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'k':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decakatal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decakelvin;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'i':
                                                        if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decaliter;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decalumen;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'x':
                                                                if (json_string.getData().Length == 7)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decalux;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'm':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decameter;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decamole;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decanewton;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decaohm;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'p':
                                                if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decapascal;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decaradian;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decasecond;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_decasiemens;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_decasievert;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decasteradian;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decatesla;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decatonne;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'v':
                                                if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decavolt;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'w':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decawatt;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decaweber;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'i':
                                        switch (json_string.getData()[4])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_deciampere;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'b':
                                                if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decibecquerel;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'c':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decicandela;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decicoulomb;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'd':
                                                if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decidegree_celsius;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'f':
                                                if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decifarad;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'g':
                                                if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                                  {
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decigram;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'y':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decigray;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'h':
                                                if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'n':
                                                            if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decihenry;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'r':
                                                            if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_decihertz;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'j':
                                                if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decijoule;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'k':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decikatal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decikelvin;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'i':
                                                        if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_deciliter;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decilumen;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'x':
                                                                if (json_string.getData().Length == 7)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decilux;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'm':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decimeter;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decimole;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decinewton;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_deciohm;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'p':
                                                if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decipascal;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_deciradian;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decisecond;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_decisiemens;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'v':
                                                                    if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_decisievert;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decisteradian;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 't':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decitesla;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_decitonne;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'v':
                                                if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_decivolt;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'w':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_deciwatt;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_deciweber;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            case 'g':
                                if (String.Compare(json_string.getData(), 3, "ree_", 0, 4, false) == 0)
                                  {
                                    switch (json_string.getData()[7])
                                      {
                                        case 'c':
                                            if ((String.Compare(json_string.getData(), 8, "elsius", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_degree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 8, "ahrenheit", 0, 9, false) == 0) && (json_string.getData().Length == 17))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_degree_fahrenheit;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 8, "f_arc", 0, 5, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_degree_of_arc;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'r':
                        if ((String.Compare(json_string.getData(), 2, "am", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_dram;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'e':
                if (String.Compare(json_string.getData(), 1, "xa", 0, 2, false) == 0)
                  {
                    switch (json_string.getData()[3])
                      {
                        case 'a':
                            if ((String.Compare(json_string.getData(), 4, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 9))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exaampere;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'b':
                            if ((String.Compare(json_string.getData(), 4, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 12))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exabecquerel;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'c':
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exacandela;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exacoulomb;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'd':
                            if ((String.Compare(json_string.getData(), 4, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 17))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exadegree_celsius;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'f':
                            if ((String.Compare(json_string.getData(), 4, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 8))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exafarad;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'g':
                            if (String.Compare(json_string.getData(), 4, "ra", 0, 2, false) == 0)
                              {
                                switch (json_string.getData()[6])
                                  {
                                    case 'm':
                                        if (json_string.getData().Length == 7)
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_exagram;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'y':
                                        if (json_string.getData().Length == 7)
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_exagray;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'h':
                            if (String.Compare(json_string.getData(), 4, "e", 0, 1, false) == 0)
                              {
                                switch (json_string.getData()[5])
                                  {
                                    case 'n':
                                        if ((String.Compare(json_string.getData(), 6, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_exahenry;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'r':
                                        if ((String.Compare(json_string.getData(), 6, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_exahertz;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'j':
                            if ((String.Compare(json_string.getData(), 4, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 8))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exajoule;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'k':
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exakatal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'e':
                                    if ((String.Compare(json_string.getData(), 5, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exakelvin;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'l':
                            switch (json_string.getData()[4])
                              {
                                case 'i':
                                    if ((String.Compare(json_string.getData(), 5, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exaliter;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'u':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'm':
                                            if ((String.Compare(json_string.getData(), 6, "en", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exalumen;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'x':
                                            if (json_string.getData().Length == 6)
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exalux;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'm':
                            switch (json_string.getData()[4])
                              {
                                case 'e':
                                    if ((String.Compare(json_string.getData(), 5, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exameter;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "le", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_examole;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'n':
                            if ((String.Compare(json_string.getData(), 4, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 9))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exanewton;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'o':
                            if ((String.Compare(json_string.getData(), 4, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 6))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exaohm;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'p':
                            if ((String.Compare(json_string.getData(), 4, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 9))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exapascal;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'r':
                            if ((String.Compare(json_string.getData(), 4, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 9))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exaradian;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 's':
                            switch (json_string.getData()[4])
                              {
                                case 'e':
                                    if ((String.Compare(json_string.getData(), 5, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exasecond;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'i':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'm':
                                                if ((String.Compare(json_string.getData(), 7, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_exasiemens;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'v':
                                                if ((String.Compare(json_string.getData(), 7, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_exasievert;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 't':
                                    if ((String.Compare(json_string.getData(), 5, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 12))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exasteradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 't':
                            switch (json_string.getData()[4])
                              {
                                case 'e':
                                    if ((String.Compare(json_string.getData(), 5, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exatesla;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exatonne;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'v':
                            if ((String.Compare(json_string.getData(), 4, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 7))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_exavolt;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'w':
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exawatt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'e':
                                    if ((String.Compare(json_string.getData(), 5, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_exaweber;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'f':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        switch (json_string.getData()[2])
                          {
                            case 'r':
                                if ((String.Compare(json_string.getData(), 3, "ad", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_farad;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 't':
                                if ((String.Compare(json_string.getData(), 3, "hom", 0, 3, false) == 0) && (json_string.getData().Length == 6))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_fathom;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(json_string.getData(), 2, "mto", 0, 3, false) == 0)
                          {
                            switch (json_string.getData()[5])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtoampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtobecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtocandela;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtocoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtodegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtofarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[8])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 9)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_femtogram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 9)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_femtogray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_femtohenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_femtohertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtojoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtokatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtokelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtoliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[7])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtolumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 8)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtolux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtometer;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtomole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtonewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtoohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtopascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtoradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtosecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_femtosiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_femtosievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtosteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtotesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtotonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_femtovolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[6])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtowatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_femtoweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'o':
                        switch (json_string.getData()[2])
                          {
                            case 'o':
                                if ((String.Compare(json_string.getData(), 3, "t", 0, 1, false) == 0) && (json_string.getData().Length == 4))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_foot;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'r':
                                if ((String.Compare(json_string.getData(), 3, "tnight", 0, 6, false) == 0) && (json_string.getData().Length == 9))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_fortnight;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'u':
                        if ((String.Compare(json_string.getData(), 2, "rlong", 0, 5, false) == 0) && (json_string.getData().Length == 7))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_furlong;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'g':
                switch (json_string.getData()[1])
                  {
                    case 'i':
                        if (String.Compare(json_string.getData(), 2, "ga", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigaampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigabecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigacandela;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigacoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigadegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigafarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_gigagram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_gigagray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_gigahenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_gigahertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigajoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigakatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigakelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigaliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigalumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 7)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigalux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigameter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigamole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_giganewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigaohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigapascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigaradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigasecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_gigasiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_gigasievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigasteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigatesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigatonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gigavolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigawatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_gigaweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'r':
                        if (String.Compare(json_string.getData(), 2, "a", 0, 1, false) == 0)
                          {
                            switch (json_string.getData()[3])
                              {
                                case 'i':
                                    if ((String.Compare(json_string.getData(), 4, "n", 0, 1, false) == 0) && (json_string.getData().Length == 5))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_grain;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'm':
                                    if (json_string.getData().Length == 4)
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gram;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'y':
                                    if (json_string.getData().Length == 4)
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_gray;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'h':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "nd", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_hand;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        switch (json_string.getData()[2])
                          {
                            case 'c':
                                if (String.Compare(json_string.getData(), 3, "t", 0, 1, false) == 0)
                                  {
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 5, "re", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectare;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectoampere;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'b':
                                                    if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectobecquerel;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'c':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectocandela;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectocoulomb;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'd':
                                                    if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectodegree_celsius;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'f':
                                                    if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectofarad;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'g':
                                                    if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                                      {
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'm':
                                                                if (json_string.getData().Length == 9)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_hectogram;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'y':
                                                                if (json_string.getData().Length == 9)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_hectogray;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'h':
                                                    if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[7])
                                                          {
                                                            case 'n':
                                                                if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_hectohenry;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'r':
                                                                if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_hectohertz;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'j':
                                                    if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectojoule;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'k':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectokatal;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectokelvin;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'l':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'i':
                                                            if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectoliter;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'u':
                                                            switch (json_string.getData()[7])
                                                              {
                                                                case 'm':
                                                                    if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectolumen;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'x':
                                                                    if (json_string.getData().Length == 8)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectolux;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'm':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectometer;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectomole;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'n':
                                                    if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectonewton;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectoohm;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'p':
                                                    if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectopascal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectoradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 's':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectosecond;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'i':
                                                            if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[8])
                                                                  {
                                                                    case 'm':
                                                                        if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_hectosiemens;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'v':
                                                                        if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_hectosievert;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 't':
                                                            if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectosteradian;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 't':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectotesla;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'o':
                                                            if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectotonne;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                case 'v':
                                                    if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_hectovolt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'w':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'a':
                                                            if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectowatt;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_hectoweber;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'l':
                                if ((String.Compare(json_string.getData(), 3, "ek", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_helek;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'n':
                                if ((String.Compare(json_string.getData(), 3, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_henry;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'r':
                                if ((String.Compare(json_string.getData(), 3, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_hertz;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        if ((String.Compare(json_string.getData(), 2, "ur", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_hour;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'i':
                switch (json_string.getData()[1])
                  {
                    case 'm':
                        if (String.Compare(json_string.getData(), 2, "perial_", 0, 7, false) == 0)
                          {
                            switch (json_string.getData()[9])
                              {
                                case 'c':
                                    if ((String.Compare(json_string.getData(), 10, "up", 0, 2, false) == 0) && (json_string.getData().Length == 12))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_cup;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if (String.Compare(json_string.getData(), 10, "luid_", 0, 5, false) == 0)
                                      {
                                        switch (json_string.getData()[15])
                                          {
                                            case 'd':
                                                if ((String.Compare(json_string.getData(), 16, "ram", 0, 3, false) == 0) && (json_string.getData().Length == 19))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_fluid_dram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 16, "unce", 0, 4, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_fluid_ounce;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                if ((String.Compare(json_string.getData(), 16, "cruple", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_fluid_scruple;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'g':
                                    switch (json_string.getData()[10])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 11, "llon", 0, 4, false) == 0) && (json_string.getData().Length == 15))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_gallon;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 11, "ll", 0, 2, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_gill;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    if ((String.Compare(json_string.getData(), 10, "inim", 0, 4, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_minim;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 10, "int", 0, 3, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_pint;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'q':
                                    if ((String.Compare(json_string.getData(), 10, "uart", 0, 4, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_imperial_quart;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'n':
                        if ((String.Compare(json_string.getData(), 2, "ch", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_inch;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'j':
                if ((String.Compare(json_string.getData(), 1, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 5))
                      {
                        the_open_enum.in_known_list = true;
                        the_open_enum.list_value = TypeTagKnownValues.Tag_joule;
                        goto open_enum_is_done;
                      }
                break;
            case 'k':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 5))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_katal;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_kelvin;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'i':
                        if (String.Compare(json_string.getData(), 2, "lo", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kiloampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilobecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'l':
                                                    if ((String.Compare(json_string.getData(), 7, "orie", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilocalorie;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'n':
                                                    if ((String.Compare(json_string.getData(), 7, "dela", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilocandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilocoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilodegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilofarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_kilogram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_kilogray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_kilohenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_kilohertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilojoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilokatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilokelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kiloliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilolumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 7)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilolux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilometer;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilomole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilonewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kiloohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilopascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kiloradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilosecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_kilosiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_kilosievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilosteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilotesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilotonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_kilovolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kilowatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_kiloweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'l':
                switch (json_string.getData()[1])
                  {
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "ague", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_league;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'i':
                        switch (json_string.getData()[2])
                          {
                            case 'n':
                                if ((String.Compare(json_string.getData(), 3, "k", 0, 1, false) == 0) && (json_string.getData().Length == 4))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_link;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 't':
                                if ((String.Compare(json_string.getData(), 3, "er", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_liter;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        if (String.Compare(json_string.getData(), 2, "ng_", 0, 3, false) == 0)
                          {
                            switch (json_string.getData()[5])
                              {
                                case 'h':
                                    if ((String.Compare(json_string.getData(), 6, "undredweight", 0, 12, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_long_hundredweight;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 't':
                                    if ((String.Compare(json_string.getData(), 6, "on", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_long_ton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'u':
                        switch (json_string.getData()[2])
                          {
                            case 'm':
                                if ((String.Compare(json_string.getData(), 3, "en", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_lumen;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 's':
                                if ((String.Compare(json_string.getData(), 3, "trum", 0, 4, false) == 0) && (json_string.getData().Length == 7))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_lustrum;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'x':
                                if (json_string.getData().Length == 3)
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_lux;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'm':
                switch (json_string.getData()[1])
                  {
                    case 'e':
                        switch (json_string.getData()[2])
                          {
                            case 'c':
                                if ((String.Compare(json_string.getData(), 3, "hanical_horsepower", 0, 18, false) == 0) && (json_string.getData().Length == 21))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_mechanical_horsepower;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'g':
                                if (String.Compare(json_string.getData(), 3, "a", 0, 1, false) == 0)
                                  {
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megaampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megabecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megacandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megacoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megadegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megafarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_megagram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_megagray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_megahenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_megahertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megajoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megakatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megakelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megaliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megalumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 7)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megalux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megameter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megamole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_meganewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megaohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megapascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megaradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megasecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_megasiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_megasievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megasteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megatesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megatonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_megavolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megawatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_megaweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 't':
                                switch (json_string.getData()[3])
                                  {
                                    case 'e':
                                        if ((String.Compare(json_string.getData(), 4, "r", 0, 1, false) == 0) && (json_string.getData().Length == 5))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_meter;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'r':
                                        if (String.Compare(json_string.getData(), 4, "ic_", 0, 3, false) == 0)
                                          {
                                            switch (json_string.getData()[7])
                                              {
                                                case 'c':
                                                    if ((String.Compare(json_string.getData(), 8, "up", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_metric_cup;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'h':
                                                    if ((String.Compare(json_string.getData(), 8, "orsepower", 0, 9, false) == 0) && (json_string.getData().Length == 17))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_metric_horsepower;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 8, "easpoon", 0, 7, false) == 0) && (json_string.getData().Length == 15))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_metric_teaspoon;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'i':
                        switch (json_string.getData()[2])
                          {
                            case 'c':
                                if (String.Compare(json_string.getData(), 3, "ro", 0, 2, false) == 0)
                                  {
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microbecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microcandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microcoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microdegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microfarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_microgram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_microgray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_microhenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_microhertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microjoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microkatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microkelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microlumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microlux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_micrometer;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_micromole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_micronewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_micropascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microsecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_microsiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_microsievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microsteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microtesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microtonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_microvolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microwatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_microweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'l':
                                switch (json_string.getData()[3])
                                  {
                                    case 'e':
                                        if (json_string.getData().Length == 4)
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_mile;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'l':
                                        switch (json_string.getData()[4])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 5, "nnium", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millennium;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                switch (json_string.getData()[5])
                                                  {
                                                    case 'a':
                                                        if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_milliampere;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'b':
                                                        if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millibecquerel;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'c':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millicandela;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millicoulomb;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'd':
                                                        if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millidegree_celsius;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'f':
                                                        if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millifarad;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'g':
                                                        if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[8])
                                                              {
                                                                case 'm':
                                                                    if (json_string.getData().Length == 9)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_milligram;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'y':
                                                                    if (json_string.getData().Length == 9)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_milligray;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'h':
                                                        if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[7])
                                                              {
                                                                case 'n':
                                                                    if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_millihenry;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'r':
                                                                    if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_millihertz;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'j':
                                                        if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millijoule;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'k':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millikatal;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millikelvin;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'l':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'i':
                                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_milliliter;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'u':
                                                                switch (json_string.getData()[7])
                                                                  {
                                                                    case 'm':
                                                                        if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millilumen;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'x':
                                                                        if (json_string.getData().Length == 8)
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millilux;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'm':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millimeter;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millimole;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millinewton;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_milliohm;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'p':
                                                        if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millipascal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_milliradian;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millisecond;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'i':
                                                                if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[8])
                                                                      {
                                                                        case 'm':
                                                                            if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_millisiemens;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_millisievert;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 't':
                                                                if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millisteradian;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millitesla;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_millitonne;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_millivolt;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'w':
                                                        switch (json_string.getData()[6])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_milliwatt;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'e':
                                                                if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_milliweber;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            case 'n':
                                if ((String.Compare(json_string.getData(), 3, "ute", 0, 3, false) == 0) && (json_string.getData().Length == 6))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_minute;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'o':
                        switch (json_string.getData()[2])
                          {
                            case 'l':
                                if ((String.Compare(json_string.getData(), 3, "e", 0, 1, false) == 0) && (json_string.getData().Length == 4))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_mole;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'n':
                                if ((String.Compare(json_string.getData(), 3, "th", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_month;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'n':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        switch (json_string.getData()[2])
                          {
                            case 'n':
                                if (String.Compare(json_string.getData(), 3, "o", 0, 1, false) == 0)
                                  {
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanoampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanobecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanocandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanocoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanodegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanofarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_nanogram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_nanogray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_nanohenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_nanohertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanojoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanokatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanokelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanoliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanolumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 7)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanolux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanometer;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanomole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanonewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanoohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanopascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanoradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanosecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_nanosiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_nanosievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanosteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanotesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanotonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_nanovolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanowatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_nanoweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'u':
                                if ((String.Compare(json_string.getData(), 3, "tical_mile", 0, 10, false) == 0) && (json_string.getData().Length == 13))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_nautical_mile;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "wton", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_newton;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'o':
                switch (json_string.getData()[1])
                  {
                    case 'h':
                        if ((String.Compare(json_string.getData(), 2, "m", 0, 1, false) == 0) && (json_string.getData().Length == 3))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_ohm;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'i':
                        if ((String.Compare(json_string.getData(), 2, "l_barrel", 0, 8, false) == 0) && (json_string.getData().Length == 10))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_oil_barrel;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'u':
                        if ((String.Compare(json_string.getData(), 2, "nce", 0, 3, false) == 0) && (json_string.getData().Length == 5))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_ounce;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'p':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        switch (json_string.getData()[2])
                          {
                            case 'r':
                                if ((String.Compare(json_string.getData(), 3, "sec", 0, 3, false) == 0) && (json_string.getData().Length == 6))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_parsec;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 's':
                                if ((String.Compare(json_string.getData(), 3, "cal", 0, 3, false) == 0) && (json_string.getData().Length == 6))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_pascal;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'e':
                        if (String.Compare(json_string.getData(), 2, "ta", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petaampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petabecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petacandela;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petacoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petadegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petafarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_petagram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_petagray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_petahenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_petahertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petajoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petakatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petakelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petaliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petalumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 7)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petalux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petameter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petamole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petanewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petaohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petapascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petaradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petasecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_petasiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_petasievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petasteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petatesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petatonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_petavolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petawatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_petaweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'i':
                        if (String.Compare(json_string.getData(), 2, "co", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picoampere;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'b':
                                    if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picobecquerel;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'c':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picocandela;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picocoulomb;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'd':
                                    if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picodegree_celsius;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picofarad;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'g':
                                    if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'm':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_picogram;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if (json_string.getData().Length == 8)
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_picogray;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'h':
                                    if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'n':
                                                if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_picohenry;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_picohertz;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'j':
                                    if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picojoule;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'k':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picokatal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picokelvin;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'l':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'i':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picoliter;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'm':
                                                    if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picolumen;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'x':
                                                    if (json_string.getData().Length == 7)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picolux;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'm':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picometer;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picomole;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'n':
                                    if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_piconewton;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picoohm;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'p':
                                    if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picopascal;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'r':
                                    if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picoradian;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 's':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picosecond;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_picosiemens;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'v':
                                                        if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_picosievert;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picosteradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 't':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picotesla;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picotonne;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'v':
                                    if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_picovolt;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picowatt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_picoweber;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'o':
                        if ((String.Compare(json_string.getData(), 2, "und", 0, 3, false) == 0) && (json_string.getData().Length == 5))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_pound;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 'q':
                if ((String.Compare(json_string.getData(), 1, "uadrennium", 0, 10, false) == 0) && (json_string.getData().Length == 11))
                      {
                        the_open_enum.in_known_list = true;
                        the_open_enum.list_value = TypeTagKnownValues.Tag_quadrennium;
                        goto open_enum_is_done;
                      }
                break;
            case 'r':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "dian", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_radian;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'o':
                        switch (json_string.getData()[2])
                          {
                            case 'd':
                                if (json_string.getData().Length == 3)
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_rod;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'o':
                                if ((String.Compare(json_string.getData(), 3, "d", 0, 1, false) == 0) && (json_string.getData().Length == 4))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_rood;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 's':
                switch (json_string.getData()[1])
                  {
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 6))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_second;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'h':
                        switch (json_string.getData()[2])
                          {
                            case 'a':
                                if ((String.Compare(json_string.getData(), 3, "ke", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_shake;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'o':
                                if (String.Compare(json_string.getData(), 3, "rt_", 0, 3, false) == 0)
                                  {
                                    switch (json_string.getData()[6])
                                      {
                                        case 'h':
                                            if ((String.Compare(json_string.getData(), 7, "undredweight", 0, 12, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_short_hundredweight;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 't':
                                            if ((String.Compare(json_string.getData(), 7, "on", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_short_ton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'i':
                        switch (json_string.getData()[2])
                          {
                            case 'd':
                                if (String.Compare(json_string.getData(), 3, "ereal_", 0, 6, false) == 0)
                                  {
                                    switch (json_string.getData()[9])
                                      {
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 10, "ay", 0, 2, false) == 0) && (json_string.getData().Length == 12))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_sidereal_day;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'y':
                                            if ((String.Compare(json_string.getData(), 10, "ear", 0, 3, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_sidereal_year;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 'e':
                                switch (json_string.getData()[3])
                                  {
                                    case 'm':
                                        if ((String.Compare(json_string.getData(), 4, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 7))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_siemens;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'v':
                                        if ((String.Compare(json_string.getData(), 4, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 7))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_sievert;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 't':
                        switch (json_string.getData()[2])
                          {
                            case 'e':
                                if ((String.Compare(json_string.getData(), 3, "radian", 0, 6, false) == 0) && (json_string.getData().Length == 9))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_steradian;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'o':
                                if ((String.Compare(json_string.getData(), 3, "ne", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_stone;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'v':
                        if ((String.Compare(json_string.getData(), 2, "edberg", 0, 6, false) == 0) && (json_string.getData().Length == 8))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_svedberg;
                                goto open_enum_is_done;
                              }
                        break;
                    default:
                        break;
                  }
                break;
            case 't':
                switch (json_string.getData()[1])
                  {
                    case 'e':
                        switch (json_string.getData()[2])
                          {
                            case 'r':
                                if (String.Compare(json_string.getData(), 3, "a", 0, 1, false) == 0)
                                  {
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 5, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teraampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 5, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 13))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_terabecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teracandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teracoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 5, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 18))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teradegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 5, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_terafarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 5, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_teragram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_teragray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 5, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[6])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 7, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_terahenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 7, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_terahertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 5, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_terajoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terakatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terakelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teraliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 7, "en", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teralumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 7)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teralux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terameter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "le", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teramole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 5, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teranewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 5, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teraohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 5, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_terapascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 5, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teraradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terasecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[7])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 8, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_terasiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 8, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_terasievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 6, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 13))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terasteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teratesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 6, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teratonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 5, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_teravolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 6, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_terawatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 6, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_teraweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 's':
                                if ((String.Compare(json_string.getData(), 3, "la", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_tesla;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    case 'h':
                        if ((String.Compare(json_string.getData(), 2, "ou", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_thou;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'o':
                        if ((String.Compare(json_string.getData(), 2, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 5))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_tonne;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'r':
                        switch (json_string.getData()[2])
                          {
                            case 'i':
                                if ((String.Compare(json_string.getData(), 3, "ennium", 0, 6, false) == 0) && (json_string.getData().Length == 9))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_triennium;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'o':
                                if ((String.Compare(json_string.getData(), 3, "y_ounce", 0, 7, false) == 0) && (json_string.getData().Length == 10))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_troy_ounce;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'u':
                if (String.Compare(json_string.getData(), 1, "s_", 0, 2, false) == 0)
                  {
                    switch (json_string.getData()[3])
                      {
                        case 'b':
                            if ((String.Compare(json_string.getData(), 4, "ushel", 0, 5, false) == 0) && (json_string.getData().Length == 9))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_us_bushel;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'c':
                            if (String.Compare(json_string.getData(), 4, "ustomary_", 0, 9, false) == 0)
                              {
                                switch (json_string.getData()[13])
                                  {
                                    case 'c':
                                        if ((String.Compare(json_string.getData(), 14, "up", 0, 2, false) == 0) && (json_string.getData().Length == 16))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_customary_cup;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 't':
                                        switch (json_string.getData()[14])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 15, "blespoon", 0, 8, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_us_customary_tablespoon;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 15, "aspoon", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_us_customary_teaspoon;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'd':
                            if (String.Compare(json_string.getData(), 4, "ry_", 0, 3, false) == 0)
                              {
                                switch (json_string.getData()[7])
                                  {
                                    case 'g':
                                        if ((String.Compare(json_string.getData(), 8, "allon", 0, 5, false) == 0) && (json_string.getData().Length == 13))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_dry_gallon;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'p':
                                        if ((String.Compare(json_string.getData(), 8, "int", 0, 3, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_dry_pint;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'q':
                                        if ((String.Compare(json_string.getData(), 8, "uart", 0, 4, false) == 0) && (json_string.getData().Length == 12))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_dry_quart;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'f':
                            if (String.Compare(json_string.getData(), 4, "luid_", 0, 5, false) == 0)
                              {
                                switch (json_string.getData()[9])
                                  {
                                    case 'd':
                                        if ((String.Compare(json_string.getData(), 10, "ram", 0, 3, false) == 0) && (json_string.getData().Length == 13))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_fluid_dram;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'o':
                                        if ((String.Compare(json_string.getData(), 10, "unce", 0, 4, false) == 0) && (json_string.getData().Length == 14))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_fluid_ounce;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        if ((String.Compare(json_string.getData(), 10, "cruple", 0, 6, false) == 0) && (json_string.getData().Length == 16))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_fluid_scruple;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'g':
                            switch (json_string.getData()[4])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 5, "llon", 0, 4, false) == 0) && (json_string.getData().Length == 9))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_us_gallon;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'i':
                                    if ((String.Compare(json_string.getData(), 5, "ll", 0, 2, false) == 0) && (json_string.getData().Length == 7))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeTagKnownValues.Tag_us_gill;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'l':
                            if (String.Compare(json_string.getData(), 4, "egal_", 0, 5, false) == 0)
                              {
                                switch (json_string.getData()[9])
                                  {
                                    case 'c':
                                        if ((String.Compare(json_string.getData(), 10, "up", 0, 2, false) == 0) && (json_string.getData().Length == 12))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_legal_cup;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 't':
                                        if ((String.Compare(json_string.getData(), 10, "ablespoon", 0, 9, false) == 0) && (json_string.getData().Length == 19))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_us_legal_tablespoon;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'm':
                            if ((String.Compare(json_string.getData(), 4, "inim", 0, 4, false) == 0) && (json_string.getData().Length == 8))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_us_minim;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'p':
                            if ((String.Compare(json_string.getData(), 4, "int", 0, 3, false) == 0) && (json_string.getData().Length == 7))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_us_pint;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'q':
                            if ((String.Compare(json_string.getData(), 4, "uart", 0, 4, false) == 0) && (json_string.getData().Length == 8))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeTagKnownValues.Tag_us_quart;
                                    goto open_enum_is_done;
                                  }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'v':
                if ((String.Compare(json_string.getData(), 1, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 4))
                      {
                        the_open_enum.in_known_list = true;
                        the_open_enum.list_value = TypeTagKnownValues.Tag_volt;
                        goto open_enum_is_done;
                      }
                break;
            case 'w':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_watt;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        switch (json_string.getData()[2])
                          {
                            case 'b':
                                if ((String.Compare(json_string.getData(), 3, "er", 0, 2, false) == 0) && (json_string.getData().Length == 5))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_weber;
                                        goto open_enum_is_done;
                                      }
                                break;
                            case 'e':
                                if ((String.Compare(json_string.getData(), 3, "k", 0, 1, false) == 0) && (json_string.getData().Length == 4))
                                      {
                                        the_open_enum.in_known_list = true;
                                        the_open_enum.list_value = TypeTagKnownValues.Tag_week;
                                        goto open_enum_is_done;
                                      }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'y':
                switch (json_string.getData()[1])
                  {
                    case 'a':
                        if ((String.Compare(json_string.getData(), 2, "rd", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_yard;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'e':
                        if ((String.Compare(json_string.getData(), 2, "ar", 0, 2, false) == 0) && (json_string.getData().Length == 4))
                              {
                                the_open_enum.in_known_list = true;
                                the_open_enum.list_value = TypeTagKnownValues.Tag_year;
                                goto open_enum_is_done;
                              }
                        break;
                    case 'o':
                        switch (json_string.getData()[2])
                          {
                            case 'c':
                                if (String.Compare(json_string.getData(), 3, "to", 0, 2, false) == 0)
                                  {
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctoampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctobecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctocandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctocoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctodegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctofarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yoctogram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yoctogray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yoctohenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yoctohertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctojoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctokatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctokelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctoliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctolumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctolux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctometer;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctomole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctonewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctoohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctopascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctoradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctosecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_yoctosiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_yoctosievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctosteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctotesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctotonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yoctovolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctowatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yoctoweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            case 't':
                                if (String.Compare(json_string.getData(), 3, "ta", 0, 2, false) == 0)
                                  {
                                    switch (json_string.getData()[5])
                                      {
                                        case 'a':
                                            if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottaampere;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'b':
                                            if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottabecquerel;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'c':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottacandela;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottacoulomb;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'd':
                                            if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottadegree_celsius;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'f':
                                            if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottafarad;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'g':
                                            if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'm':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yottagram;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'y':
                                                        if (json_string.getData().Length == 9)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yottagray;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yottahenry;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_yottahertz;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'j':
                                            if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottajoule;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'k':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottakatal;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottakelvin;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'l':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'i':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottaliter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'u':
                                                    switch (json_string.getData()[7])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottalumen;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'x':
                                                            if (json_string.getData().Length == 8)
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottalux;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'm':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottameter;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottamole;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'n':
                                            if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottanewton;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottaohm;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'p':
                                            if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottapascal;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'r':
                                            if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottaradian;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottasecond;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'm':
                                                                if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_yottasiemens;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_yottasievert;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottasteradian;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 't':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottatesla;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'o':
                                                    if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottatonne;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_yottavolt;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'w':
                                            switch (json_string.getData()[6])
                                              {
                                                case 'a':
                                                    if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottawatt;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_yottaweber;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                  }
                                break;
                            default:
                                break;
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'z':
                if (String.Compare(json_string.getData(), 1, "e", 0, 1, false) == 0)
                  {
                    switch (json_string.getData()[2])
                      {
                        case 'p':
                            if (String.Compare(json_string.getData(), 3, "to", 0, 2, false) == 0)
                              {
                                switch (json_string.getData()[5])
                                  {
                                    case 'a':
                                        if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptoampere;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'b':
                                        if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptobecquerel;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'c':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptocandela;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptocoulomb;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'd':
                                        if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptodegree_celsius;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'f':
                                        if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptofarad;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'g':
                                        if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                          {
                                            switch (json_string.getData()[8])
                                              {
                                                case 'm':
                                                    if (json_string.getData().Length == 9)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zeptogram;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'y':
                                                    if (json_string.getData().Length == 9)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zeptogray;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'h':
                                        if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                          {
                                            switch (json_string.getData()[7])
                                              {
                                                case 'n':
                                                    if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zeptohenry;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zeptohertz;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'j':
                                        if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptojoule;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'k':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptokatal;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptokelvin;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'l':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptoliter;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptolumen;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'x':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptolux;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'm':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptometer;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptomole;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'n':
                                        if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptonewton;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'o':
                                        if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptoohm;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'p':
                                        if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptopascal;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'r':
                                        if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptoradian;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptosecond;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[8])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_zeptosiemens;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'v':
                                                            if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_zeptosievert;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptosteradian;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 't':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptotesla;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptotonne;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'v':
                                        if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zeptovolt;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'w':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptowatt;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zeptoweber;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 't':
                            if (String.Compare(json_string.getData(), 3, "ta", 0, 2, false) == 0)
                              {
                                switch (json_string.getData()[5])
                                  {
                                    case 'a':
                                        if ((String.Compare(json_string.getData(), 6, "mpere", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettaampere;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'b':
                                        if ((String.Compare(json_string.getData(), 6, "ecquerel", 0, 8, false) == 0) && (json_string.getData().Length == 14))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettabecquerel;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'c':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "ndela", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettacandela;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "ulomb", 0, 5, false) == 0) && (json_string.getData().Length == 12))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettacoulomb;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'd':
                                        if ((String.Compare(json_string.getData(), 6, "egree_celsius", 0, 13, false) == 0) && (json_string.getData().Length == 19))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettadegree_celsius;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'f':
                                        if ((String.Compare(json_string.getData(), 6, "arad", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettafarad;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'g':
                                        if (String.Compare(json_string.getData(), 6, "ra", 0, 2, false) == 0)
                                          {
                                            switch (json_string.getData()[8])
                                              {
                                                case 'm':
                                                    if (json_string.getData().Length == 9)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zettagram;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'y':
                                                    if (json_string.getData().Length == 9)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zettagray;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'h':
                                        if (String.Compare(json_string.getData(), 6, "e", 0, 1, false) == 0)
                                          {
                                            switch (json_string.getData()[7])
                                              {
                                                case 'n':
                                                    if ((String.Compare(json_string.getData(), 8, "ry", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zettahenry;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'r':
                                                    if ((String.Compare(json_string.getData(), 8, "tz", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeTagKnownValues.Tag_zettahertz;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'j':
                                        if ((String.Compare(json_string.getData(), 6, "oule", 0, 4, false) == 0) && (json_string.getData().Length == 10))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettajoule;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'k':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "tal", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettakatal;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "lvin", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettakelvin;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'l':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettaliter;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 8, "en", 0, 2, false) == 0) && (json_string.getData().Length == 10))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettalumen;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'x':
                                                        if (json_string.getData().Length == 8)
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettalux;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'm':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "ter", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettameter;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "le", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettamole;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'n':
                                        if ((String.Compare(json_string.getData(), 6, "ewton", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettanewton;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'o':
                                        if ((String.Compare(json_string.getData(), 6, "hm", 0, 2, false) == 0) && (json_string.getData().Length == 8))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettaohm;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'p':
                                        if ((String.Compare(json_string.getData(), 6, "ascal", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettapascal;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'r':
                                        if ((String.Compare(json_string.getData(), 6, "adian", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettaradian;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "cond", 0, 4, false) == 0) && (json_string.getData().Length == 11))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettasecond;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 7, "e", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[8])
                                                      {
                                                        case 'm':
                                                            if ((String.Compare(json_string.getData(), 9, "ens", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_zettasiemens;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'v':
                                                            if ((String.Compare(json_string.getData(), 9, "ert", 0, 3, false) == 0) && (json_string.getData().Length == 12))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeTagKnownValues.Tag_zettasievert;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 't':
                                                if ((String.Compare(json_string.getData(), 7, "eradian", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettasteradian;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 't':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "sla", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettatesla;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 7, "nne", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettatonne;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'v':
                                        if ((String.Compare(json_string.getData(), 6, "olt", 0, 3, false) == 0) && (json_string.getData().Length == 9))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeTagKnownValues.Tag_zettavolt;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'w':
                                        switch (json_string.getData()[6])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 7, "tt", 0, 2, false) == 0) && (json_string.getData().Length == 9))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettawatt;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 7, "ber", 0, 3, false) == 0) && (json_string.getData().Length == 10))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeTagKnownValues.Tag_zettaweber;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        the_open_enum.in_known_list = false;
        the_open_enum.string_value = json_string.getData();
      open_enum_is_done:;
        setTag(the_open_enum);
      }


    public CoreUnitsUnitJSON()
      {
        flagHasTag = false;
        extraKeys = new List<string>();
    extraValues = new List<JSONValue >();
    extraIndex = new Dictionary<string, JSONValue >();
      }

    public override string  getUnitKind()
      {
        return "Core";
      }

    public bool  hasTag()
      {
        return flagHasTag;
      }

    public TypeTag  getTag()
      {
        Debug.Assert(flagHasTag);
        return storeTag;
      }

    public string  getTagAsString()
      {
        TypeTag result = getTag();
        if (result.in_known_list)
            return stringFromTag(result.list_value);
        else
            return result.string_value;
      }


    public virtual int extraCoreUnitsUnitComponentCount()
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        return extraKeys.Count;
      }
    public virtual string extraCoreUnitsUnitComponentKey(int component_num)
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        Debug.Assert(component_num < extraValues.Count);
        return extraKeys[component_num];
      }
    public virtual JSONValue extraCoreUnitsUnitComponentValue(int component_num)
      {
        Debug.Assert(extraKeys.Count == extraValues.Count);
        Debug.Assert(component_num < extraValues.Count);
        return extraValues[component_num];
      }
    public virtual JSONValue extraCoreUnitsUnitLookup(string field_name)
      {
        JSONValue result = (extraIndex.ContainsKey(field_name) ? extraIndex[field_name] : null);
        return result;
      }
    public override int extraUnitComponentCount()
      {
        int result = 0;
        if (flagHasTag)
            ++result;
        result += extraCoreUnitsUnitComponentCount();
        return result;
      }
    public override string extraUnitComponentKey(int component_num)
      {
        int remainder = component_num;
        if (flagHasTag)
          {
            if (remainder == 0)
                return "Tag";
            --remainder;
          }
        return extraCoreUnitsUnitComponentKey(remainder);
      }
    public override JSONValue extraUnitComponentValue(int component_num)
      {
        int remainder = component_num;
        if (flagHasTag)
          {
            if (remainder == 0)
                return extraTagToJSON();
            --remainder;
          }
        return extraCoreUnitsUnitComponentValue(remainder);
      }
    public override JSONValue extraUnitLookup(string field_name)
      {
        if ((String.Compare(field_name, 0, "Tag", 0, 3, false) == 0) && (field_name.Length == 3))
            return (flagHasTag ? extraTagToJSON() : null);
        return extraCoreUnitsUnitLookup(field_name);
      }

    public void setTag(TypeTag new_value)
      {
        flagHasTag = true;
        storeTag = new_value;
      }
    public void setTag(string chars)
      {
        TypeTagKnownValues known = stringToTag(chars);
        TypeTag new_value = new TypeTag();
        if (known == TypeTagKnownValues.Tag__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setTag(new_value);
      }
    public void setTag(TypeTagKnownValues new_value)
      {
        TypeTag new_full_value = new TypeTag();
        Debug.Assert(new_value != TypeTagKnownValues.Tag__none);
        new_full_value.in_known_list = true;
        new_full_value.list_value = new_value;
        setTag(new_full_value);
      }
    public void unsetTag()
      {
        flagHasTag = false;
      }

    public virtual void extraCoreUnitsUnitAppendPair(string key, JSONValue new_component)
      {
        Debug.Assert(key != null);
        Debug.Assert(new_component != null);

        Debug.Assert(extraKeys.Count == extraValues.Count);
        extraKeys.Add(key);
        extraValues.Add(new_component);
        extraIndex.Add(key, new_component);
      }
    public virtual void extraCoreUnitsUnitSetField(string key, JSONValue new_component)
      {
        Debug.Assert(key != null);
        Debug.Assert(new_component != null);

        JSONValue old_field = extraCoreUnitsUnitLookup(key);
        if (old_field == null)
          {
            extraCoreUnitsUnitAppendPair(key, new_component);
          }
        else
          {
            int count = extraKeys.Count;
            Debug.Assert(count == extraValues.Count);
            for (int num = 0; num < count; ++num)
              {
                if (extraKeys[num].Equals( key))
                  {
                    extraValues[num] = new_component;
                    break;
                  }
              }
            extraIndex.Add(key, new_component);
          }
      }
    public override void extraUnitAppendPair(string key, JSONValue new_component)
      {
        if ((String.Compare(key, 0, "Tag", 0, 3, false) == 0) && (key.Length == 3))
            {
            fromJSONTag(new_component, false);
            return;
            }
        extraCoreUnitsUnitAppendPair(key, new_component);
      }
    public override void extraUnitSetField(string key, JSONValue new_component)
      {
        if ((String.Compare(key, 0, "Tag", 0, 3, false) == 0) && (key.Length == 3))
            {
            fromJSONTag(new_component, false);
            return;
            }
        extraCoreUnitsUnitSetField(key, new_component);
      }

    public override void write_as_json(JSONHandler handler)
      {
        handler.start_object();
        write_fields_as_json(handler);
        int extra_count = extraKeys.Count;
        Debug.Assert(extra_count == extraValues.Count);
        for (int extra_num = 0; extra_num < extra_count; ++extra_num)
          {
            handler.start_pair(extraKeys[extra_num]);
            extraValues[extra_num].write(handler);
          }
        handler.finish_object();
      }

    public override void write_fields_as_json(JSONHandler handler)
      {
        write_fields_as_json(handler, false);
      }

    public override void write_fields_as_json(JSONHandler handler, bool partial_allowed)
      {
        base.write_fields_as_json(handler, partial_allowed);
        Debug.Assert(partial_allowed || flagHasTag);
        if (flagHasTag)
          {
            handler.start_pair("Tag");
            if (storeTag.in_known_list)
              {
                switch (storeTag.list_value)
                  {
                    case TypeTagKnownValues.Tag_inch:
                        handler.string_value("inch");
                        break;
                    case TypeTagKnownValues.Tag_thou:
                        handler.string_value("thou");
                        break;
                    case TypeTagKnownValues.Tag_barleycorn:
                        handler.string_value("barleycorn");
                        break;
                    case TypeTagKnownValues.Tag_hand:
                        handler.string_value("hand");
                        break;
                    case TypeTagKnownValues.Tag_foot:
                        handler.string_value("foot");
                        break;
                    case TypeTagKnownValues.Tag_yard:
                        handler.string_value("yard");
                        break;
                    case TypeTagKnownValues.Tag_rod:
                        handler.string_value("rod");
                        break;
                    case TypeTagKnownValues.Tag_link:
                        handler.string_value("link");
                        break;
                    case TypeTagKnownValues.Tag_chain:
                        handler.string_value("chain");
                        break;
                    case TypeTagKnownValues.Tag_furlong:
                        handler.string_value("furlong");
                        break;
                    case TypeTagKnownValues.Tag_mile:
                        handler.string_value("mile");
                        break;
                    case TypeTagKnownValues.Tag_league:
                        handler.string_value("league");
                        break;
                    case TypeTagKnownValues.Tag_nautical_mile:
                        handler.string_value("nautical_mile");
                        break;
                    case TypeTagKnownValues.Tag_cable:
                        handler.string_value("cable");
                        break;
                    case TypeTagKnownValues.Tag_fathom:
                        handler.string_value("fathom");
                        break;
                    case TypeTagKnownValues.Tag_acre:
                        handler.string_value("acre");
                        break;
                    case TypeTagKnownValues.Tag_rood:
                        handler.string_value("rood");
                        break;
                    case TypeTagKnownValues.Tag_us_gallon:
                        handler.string_value("us_gallon");
                        break;
                    case TypeTagKnownValues.Tag_imperial_gallon:
                        handler.string_value("imperial_gallon");
                        break;
                    case TypeTagKnownValues.Tag_us_dry_gallon:
                        handler.string_value("us_dry_gallon");
                        break;
                    case TypeTagKnownValues.Tag_us_quart:
                        handler.string_value("us_quart");
                        break;
                    case TypeTagKnownValues.Tag_imperial_quart:
                        handler.string_value("imperial_quart");
                        break;
                    case TypeTagKnownValues.Tag_us_dry_quart:
                        handler.string_value("us_dry_quart");
                        break;
                    case TypeTagKnownValues.Tag_us_pint:
                        handler.string_value("us_pint");
                        break;
                    case TypeTagKnownValues.Tag_imperial_pint:
                        handler.string_value("imperial_pint");
                        break;
                    case TypeTagKnownValues.Tag_us_dry_pint:
                        handler.string_value("us_dry_pint");
                        break;
                    case TypeTagKnownValues.Tag_us_gill:
                        handler.string_value("us_gill");
                        break;
                    case TypeTagKnownValues.Tag_imperial_gill:
                        handler.string_value("imperial_gill");
                        break;
                    case TypeTagKnownValues.Tag_us_customary_cup:
                        handler.string_value("us_customary_cup");
                        break;
                    case TypeTagKnownValues.Tag_us_legal_cup:
                        handler.string_value("us_legal_cup");
                        break;
                    case TypeTagKnownValues.Tag_metric_cup:
                        handler.string_value("metric_cup");
                        break;
                    case TypeTagKnownValues.Tag_imperial_cup:
                        handler.string_value("imperial_cup");
                        break;
                    case TypeTagKnownValues.Tag_us_fluid_ounce:
                        handler.string_value("us_fluid_ounce");
                        break;
                    case TypeTagKnownValues.Tag_imperial_fluid_ounce:
                        handler.string_value("imperial_fluid_ounce");
                        break;
                    case TypeTagKnownValues.Tag_us_fluid_dram:
                        handler.string_value("us_fluid_dram");
                        break;
                    case TypeTagKnownValues.Tag_imperial_fluid_dram:
                        handler.string_value("imperial_fluid_dram");
                        break;
                    case TypeTagKnownValues.Tag_us_fluid_scruple:
                        handler.string_value("us_fluid_scruple");
                        break;
                    case TypeTagKnownValues.Tag_imperial_fluid_scruple:
                        handler.string_value("imperial_fluid_scruple");
                        break;
                    case TypeTagKnownValues.Tag_us_minim:
                        handler.string_value("us_minim");
                        break;
                    case TypeTagKnownValues.Tag_imperial_minim:
                        handler.string_value("imperial_minim");
                        break;
                    case TypeTagKnownValues.Tag_us_customary_tablespoon:
                        handler.string_value("us_customary_tablespoon");
                        break;
                    case TypeTagKnownValues.Tag_us_legal_tablespoon:
                        handler.string_value("us_legal_tablespoon");
                        break;
                    case TypeTagKnownValues.Tag_australian_tablespoon:
                        handler.string_value("australian_tablespoon");
                        break;
                    case TypeTagKnownValues.Tag_us_customary_teaspoon:
                        handler.string_value("us_customary_teaspoon");
                        break;
                    case TypeTagKnownValues.Tag_metric_teaspoon:
                        handler.string_value("metric_teaspoon");
                        break;
                    case TypeTagKnownValues.Tag_pound:
                        handler.string_value("pound");
                        break;
                    case TypeTagKnownValues.Tag_ounce:
                        handler.string_value("ounce");
                        break;
                    case TypeTagKnownValues.Tag_troy_ounce:
                        handler.string_value("troy_ounce");
                        break;
                    case TypeTagKnownValues.Tag_dram:
                        handler.string_value("dram");
                        break;
                    case TypeTagKnownValues.Tag_grain:
                        handler.string_value("grain");
                        break;
                    case TypeTagKnownValues.Tag_stone:
                        handler.string_value("stone");
                        break;
                    case TypeTagKnownValues.Tag_short_hundredweight:
                        handler.string_value("short_hundredweight");
                        break;
                    case TypeTagKnownValues.Tag_long_hundredweight:
                        handler.string_value("long_hundredweight");
                        break;
                    case TypeTagKnownValues.Tag_short_ton:
                        handler.string_value("short_ton");
                        break;
                    case TypeTagKnownValues.Tag_long_ton:
                        handler.string_value("long_ton");
                        break;
                    case TypeTagKnownValues.Tag_oil_barrel:
                        handler.string_value("oil_barrel");
                        break;
                    case TypeTagKnownValues.Tag_degree_fahrenheit:
                        handler.string_value("degree_fahrenheit");
                        break;
                    case TypeTagKnownValues.Tag_british_thermal_unit:
                        handler.string_value("british_thermal_unit");
                        break;
                    case TypeTagKnownValues.Tag_calorie:
                        handler.string_value("calorie");
                        break;
                    case TypeTagKnownValues.Tag_kilocalorie:
                        handler.string_value("kilocalorie");
                        break;
                    case TypeTagKnownValues.Tag_mechanical_horsepower:
                        handler.string_value("mechanical_horsepower");
                        break;
                    case TypeTagKnownValues.Tag_metric_horsepower:
                        handler.string_value("metric_horsepower");
                        break;
                    case TypeTagKnownValues.Tag_us_bushel:
                        handler.string_value("us_bushel");
                        break;
                    case TypeTagKnownValues.Tag_meter:
                        handler.string_value("meter");
                        break;
                    case TypeTagKnownValues.Tag_yoctometer:
                        handler.string_value("yoctometer");
                        break;
                    case TypeTagKnownValues.Tag_zeptometer:
                        handler.string_value("zeptometer");
                        break;
                    case TypeTagKnownValues.Tag_attometer:
                        handler.string_value("attometer");
                        break;
                    case TypeTagKnownValues.Tag_femtometer:
                        handler.string_value("femtometer");
                        break;
                    case TypeTagKnownValues.Tag_picometer:
                        handler.string_value("picometer");
                        break;
                    case TypeTagKnownValues.Tag_nanometer:
                        handler.string_value("nanometer");
                        break;
                    case TypeTagKnownValues.Tag_micrometer:
                        handler.string_value("micrometer");
                        break;
                    case TypeTagKnownValues.Tag_millimeter:
                        handler.string_value("millimeter");
                        break;
                    case TypeTagKnownValues.Tag_centimeter:
                        handler.string_value("centimeter");
                        break;
                    case TypeTagKnownValues.Tag_decimeter:
                        handler.string_value("decimeter");
                        break;
                    case TypeTagKnownValues.Tag_decameter:
                        handler.string_value("decameter");
                        break;
                    case TypeTagKnownValues.Tag_hectometer:
                        handler.string_value("hectometer");
                        break;
                    case TypeTagKnownValues.Tag_kilometer:
                        handler.string_value("kilometer");
                        break;
                    case TypeTagKnownValues.Tag_megameter:
                        handler.string_value("megameter");
                        break;
                    case TypeTagKnownValues.Tag_gigameter:
                        handler.string_value("gigameter");
                        break;
                    case TypeTagKnownValues.Tag_terameter:
                        handler.string_value("terameter");
                        break;
                    case TypeTagKnownValues.Tag_petameter:
                        handler.string_value("petameter");
                        break;
                    case TypeTagKnownValues.Tag_exameter:
                        handler.string_value("exameter");
                        break;
                    case TypeTagKnownValues.Tag_zettameter:
                        handler.string_value("zettameter");
                        break;
                    case TypeTagKnownValues.Tag_yottameter:
                        handler.string_value("yottameter");
                        break;
                    case TypeTagKnownValues.Tag_gram:
                        handler.string_value("gram");
                        break;
                    case TypeTagKnownValues.Tag_yoctogram:
                        handler.string_value("yoctogram");
                        break;
                    case TypeTagKnownValues.Tag_zeptogram:
                        handler.string_value("zeptogram");
                        break;
                    case TypeTagKnownValues.Tag_attogram:
                        handler.string_value("attogram");
                        break;
                    case TypeTagKnownValues.Tag_femtogram:
                        handler.string_value("femtogram");
                        break;
                    case TypeTagKnownValues.Tag_picogram:
                        handler.string_value("picogram");
                        break;
                    case TypeTagKnownValues.Tag_nanogram:
                        handler.string_value("nanogram");
                        break;
                    case TypeTagKnownValues.Tag_microgram:
                        handler.string_value("microgram");
                        break;
                    case TypeTagKnownValues.Tag_milligram:
                        handler.string_value("milligram");
                        break;
                    case TypeTagKnownValues.Tag_centigram:
                        handler.string_value("centigram");
                        break;
                    case TypeTagKnownValues.Tag_decigram:
                        handler.string_value("decigram");
                        break;
                    case TypeTagKnownValues.Tag_decagram:
                        handler.string_value("decagram");
                        break;
                    case TypeTagKnownValues.Tag_hectogram:
                        handler.string_value("hectogram");
                        break;
                    case TypeTagKnownValues.Tag_kilogram:
                        handler.string_value("kilogram");
                        break;
                    case TypeTagKnownValues.Tag_megagram:
                        handler.string_value("megagram");
                        break;
                    case TypeTagKnownValues.Tag_gigagram:
                        handler.string_value("gigagram");
                        break;
                    case TypeTagKnownValues.Tag_teragram:
                        handler.string_value("teragram");
                        break;
                    case TypeTagKnownValues.Tag_petagram:
                        handler.string_value("petagram");
                        break;
                    case TypeTagKnownValues.Tag_exagram:
                        handler.string_value("exagram");
                        break;
                    case TypeTagKnownValues.Tag_zettagram:
                        handler.string_value("zettagram");
                        break;
                    case TypeTagKnownValues.Tag_yottagram:
                        handler.string_value("yottagram");
                        break;
                    case TypeTagKnownValues.Tag_second:
                        handler.string_value("second");
                        break;
                    case TypeTagKnownValues.Tag_yoctosecond:
                        handler.string_value("yoctosecond");
                        break;
                    case TypeTagKnownValues.Tag_zeptosecond:
                        handler.string_value("zeptosecond");
                        break;
                    case TypeTagKnownValues.Tag_attosecond:
                        handler.string_value("attosecond");
                        break;
                    case TypeTagKnownValues.Tag_femtosecond:
                        handler.string_value("femtosecond");
                        break;
                    case TypeTagKnownValues.Tag_picosecond:
                        handler.string_value("picosecond");
                        break;
                    case TypeTagKnownValues.Tag_nanosecond:
                        handler.string_value("nanosecond");
                        break;
                    case TypeTagKnownValues.Tag_microsecond:
                        handler.string_value("microsecond");
                        break;
                    case TypeTagKnownValues.Tag_millisecond:
                        handler.string_value("millisecond");
                        break;
                    case TypeTagKnownValues.Tag_centisecond:
                        handler.string_value("centisecond");
                        break;
                    case TypeTagKnownValues.Tag_decisecond:
                        handler.string_value("decisecond");
                        break;
                    case TypeTagKnownValues.Tag_decasecond:
                        handler.string_value("decasecond");
                        break;
                    case TypeTagKnownValues.Tag_hectosecond:
                        handler.string_value("hectosecond");
                        break;
                    case TypeTagKnownValues.Tag_kilosecond:
                        handler.string_value("kilosecond");
                        break;
                    case TypeTagKnownValues.Tag_megasecond:
                        handler.string_value("megasecond");
                        break;
                    case TypeTagKnownValues.Tag_gigasecond:
                        handler.string_value("gigasecond");
                        break;
                    case TypeTagKnownValues.Tag_terasecond:
                        handler.string_value("terasecond");
                        break;
                    case TypeTagKnownValues.Tag_petasecond:
                        handler.string_value("petasecond");
                        break;
                    case TypeTagKnownValues.Tag_exasecond:
                        handler.string_value("exasecond");
                        break;
                    case TypeTagKnownValues.Tag_zettasecond:
                        handler.string_value("zettasecond");
                        break;
                    case TypeTagKnownValues.Tag_yottasecond:
                        handler.string_value("yottasecond");
                        break;
                    case TypeTagKnownValues.Tag_ampere:
                        handler.string_value("ampere");
                        break;
                    case TypeTagKnownValues.Tag_yoctoampere:
                        handler.string_value("yoctoampere");
                        break;
                    case TypeTagKnownValues.Tag_zeptoampere:
                        handler.string_value("zeptoampere");
                        break;
                    case TypeTagKnownValues.Tag_attoampere:
                        handler.string_value("attoampere");
                        break;
                    case TypeTagKnownValues.Tag_femtoampere:
                        handler.string_value("femtoampere");
                        break;
                    case TypeTagKnownValues.Tag_picoampere:
                        handler.string_value("picoampere");
                        break;
                    case TypeTagKnownValues.Tag_nanoampere:
                        handler.string_value("nanoampere");
                        break;
                    case TypeTagKnownValues.Tag_microampere:
                        handler.string_value("microampere");
                        break;
                    case TypeTagKnownValues.Tag_milliampere:
                        handler.string_value("milliampere");
                        break;
                    case TypeTagKnownValues.Tag_centiampere:
                        handler.string_value("centiampere");
                        break;
                    case TypeTagKnownValues.Tag_deciampere:
                        handler.string_value("deciampere");
                        break;
                    case TypeTagKnownValues.Tag_decaampere:
                        handler.string_value("decaampere");
                        break;
                    case TypeTagKnownValues.Tag_hectoampere:
                        handler.string_value("hectoampere");
                        break;
                    case TypeTagKnownValues.Tag_kiloampere:
                        handler.string_value("kiloampere");
                        break;
                    case TypeTagKnownValues.Tag_megaampere:
                        handler.string_value("megaampere");
                        break;
                    case TypeTagKnownValues.Tag_gigaampere:
                        handler.string_value("gigaampere");
                        break;
                    case TypeTagKnownValues.Tag_teraampere:
                        handler.string_value("teraampere");
                        break;
                    case TypeTagKnownValues.Tag_petaampere:
                        handler.string_value("petaampere");
                        break;
                    case TypeTagKnownValues.Tag_exaampere:
                        handler.string_value("exaampere");
                        break;
                    case TypeTagKnownValues.Tag_zettaampere:
                        handler.string_value("zettaampere");
                        break;
                    case TypeTagKnownValues.Tag_yottaampere:
                        handler.string_value("yottaampere");
                        break;
                    case TypeTagKnownValues.Tag_kelvin:
                        handler.string_value("kelvin");
                        break;
                    case TypeTagKnownValues.Tag_yoctokelvin:
                        handler.string_value("yoctokelvin");
                        break;
                    case TypeTagKnownValues.Tag_zeptokelvin:
                        handler.string_value("zeptokelvin");
                        break;
                    case TypeTagKnownValues.Tag_attokelvin:
                        handler.string_value("attokelvin");
                        break;
                    case TypeTagKnownValues.Tag_femtokelvin:
                        handler.string_value("femtokelvin");
                        break;
                    case TypeTagKnownValues.Tag_picokelvin:
                        handler.string_value("picokelvin");
                        break;
                    case TypeTagKnownValues.Tag_nanokelvin:
                        handler.string_value("nanokelvin");
                        break;
                    case TypeTagKnownValues.Tag_microkelvin:
                        handler.string_value("microkelvin");
                        break;
                    case TypeTagKnownValues.Tag_millikelvin:
                        handler.string_value("millikelvin");
                        break;
                    case TypeTagKnownValues.Tag_centikelvin:
                        handler.string_value("centikelvin");
                        break;
                    case TypeTagKnownValues.Tag_decikelvin:
                        handler.string_value("decikelvin");
                        break;
                    case TypeTagKnownValues.Tag_decakelvin:
                        handler.string_value("decakelvin");
                        break;
                    case TypeTagKnownValues.Tag_hectokelvin:
                        handler.string_value("hectokelvin");
                        break;
                    case TypeTagKnownValues.Tag_kilokelvin:
                        handler.string_value("kilokelvin");
                        break;
                    case TypeTagKnownValues.Tag_megakelvin:
                        handler.string_value("megakelvin");
                        break;
                    case TypeTagKnownValues.Tag_gigakelvin:
                        handler.string_value("gigakelvin");
                        break;
                    case TypeTagKnownValues.Tag_terakelvin:
                        handler.string_value("terakelvin");
                        break;
                    case TypeTagKnownValues.Tag_petakelvin:
                        handler.string_value("petakelvin");
                        break;
                    case TypeTagKnownValues.Tag_exakelvin:
                        handler.string_value("exakelvin");
                        break;
                    case TypeTagKnownValues.Tag_zettakelvin:
                        handler.string_value("zettakelvin");
                        break;
                    case TypeTagKnownValues.Tag_yottakelvin:
                        handler.string_value("yottakelvin");
                        break;
                    case TypeTagKnownValues.Tag_mole:
                        handler.string_value("mole");
                        break;
                    case TypeTagKnownValues.Tag_yoctomole:
                        handler.string_value("yoctomole");
                        break;
                    case TypeTagKnownValues.Tag_zeptomole:
                        handler.string_value("zeptomole");
                        break;
                    case TypeTagKnownValues.Tag_attomole:
                        handler.string_value("attomole");
                        break;
                    case TypeTagKnownValues.Tag_femtomole:
                        handler.string_value("femtomole");
                        break;
                    case TypeTagKnownValues.Tag_picomole:
                        handler.string_value("picomole");
                        break;
                    case TypeTagKnownValues.Tag_nanomole:
                        handler.string_value("nanomole");
                        break;
                    case TypeTagKnownValues.Tag_micromole:
                        handler.string_value("micromole");
                        break;
                    case TypeTagKnownValues.Tag_millimole:
                        handler.string_value("millimole");
                        break;
                    case TypeTagKnownValues.Tag_centimole:
                        handler.string_value("centimole");
                        break;
                    case TypeTagKnownValues.Tag_decimole:
                        handler.string_value("decimole");
                        break;
                    case TypeTagKnownValues.Tag_decamole:
                        handler.string_value("decamole");
                        break;
                    case TypeTagKnownValues.Tag_hectomole:
                        handler.string_value("hectomole");
                        break;
                    case TypeTagKnownValues.Tag_kilomole:
                        handler.string_value("kilomole");
                        break;
                    case TypeTagKnownValues.Tag_megamole:
                        handler.string_value("megamole");
                        break;
                    case TypeTagKnownValues.Tag_gigamole:
                        handler.string_value("gigamole");
                        break;
                    case TypeTagKnownValues.Tag_teramole:
                        handler.string_value("teramole");
                        break;
                    case TypeTagKnownValues.Tag_petamole:
                        handler.string_value("petamole");
                        break;
                    case TypeTagKnownValues.Tag_examole:
                        handler.string_value("examole");
                        break;
                    case TypeTagKnownValues.Tag_zettamole:
                        handler.string_value("zettamole");
                        break;
                    case TypeTagKnownValues.Tag_yottamole:
                        handler.string_value("yottamole");
                        break;
                    case TypeTagKnownValues.Tag_candela:
                        handler.string_value("candela");
                        break;
                    case TypeTagKnownValues.Tag_yoctocandela:
                        handler.string_value("yoctocandela");
                        break;
                    case TypeTagKnownValues.Tag_zeptocandela:
                        handler.string_value("zeptocandela");
                        break;
                    case TypeTagKnownValues.Tag_attocandela:
                        handler.string_value("attocandela");
                        break;
                    case TypeTagKnownValues.Tag_femtocandela:
                        handler.string_value("femtocandela");
                        break;
                    case TypeTagKnownValues.Tag_picocandela:
                        handler.string_value("picocandela");
                        break;
                    case TypeTagKnownValues.Tag_nanocandela:
                        handler.string_value("nanocandela");
                        break;
                    case TypeTagKnownValues.Tag_microcandela:
                        handler.string_value("microcandela");
                        break;
                    case TypeTagKnownValues.Tag_millicandela:
                        handler.string_value("millicandela");
                        break;
                    case TypeTagKnownValues.Tag_centicandela:
                        handler.string_value("centicandela");
                        break;
                    case TypeTagKnownValues.Tag_decicandela:
                        handler.string_value("decicandela");
                        break;
                    case TypeTagKnownValues.Tag_decacandela:
                        handler.string_value("decacandela");
                        break;
                    case TypeTagKnownValues.Tag_hectocandela:
                        handler.string_value("hectocandela");
                        break;
                    case TypeTagKnownValues.Tag_kilocandela:
                        handler.string_value("kilocandela");
                        break;
                    case TypeTagKnownValues.Tag_megacandela:
                        handler.string_value("megacandela");
                        break;
                    case TypeTagKnownValues.Tag_gigacandela:
                        handler.string_value("gigacandela");
                        break;
                    case TypeTagKnownValues.Tag_teracandela:
                        handler.string_value("teracandela");
                        break;
                    case TypeTagKnownValues.Tag_petacandela:
                        handler.string_value("petacandela");
                        break;
                    case TypeTagKnownValues.Tag_exacandela:
                        handler.string_value("exacandela");
                        break;
                    case TypeTagKnownValues.Tag_zettacandela:
                        handler.string_value("zettacandela");
                        break;
                    case TypeTagKnownValues.Tag_yottacandela:
                        handler.string_value("yottacandela");
                        break;
                    case TypeTagKnownValues.Tag_radian:
                        handler.string_value("radian");
                        break;
                    case TypeTagKnownValues.Tag_yoctoradian:
                        handler.string_value("yoctoradian");
                        break;
                    case TypeTagKnownValues.Tag_zeptoradian:
                        handler.string_value("zeptoradian");
                        break;
                    case TypeTagKnownValues.Tag_attoradian:
                        handler.string_value("attoradian");
                        break;
                    case TypeTagKnownValues.Tag_femtoradian:
                        handler.string_value("femtoradian");
                        break;
                    case TypeTagKnownValues.Tag_picoradian:
                        handler.string_value("picoradian");
                        break;
                    case TypeTagKnownValues.Tag_nanoradian:
                        handler.string_value("nanoradian");
                        break;
                    case TypeTagKnownValues.Tag_microradian:
                        handler.string_value("microradian");
                        break;
                    case TypeTagKnownValues.Tag_milliradian:
                        handler.string_value("milliradian");
                        break;
                    case TypeTagKnownValues.Tag_centiradian:
                        handler.string_value("centiradian");
                        break;
                    case TypeTagKnownValues.Tag_deciradian:
                        handler.string_value("deciradian");
                        break;
                    case TypeTagKnownValues.Tag_decaradian:
                        handler.string_value("decaradian");
                        break;
                    case TypeTagKnownValues.Tag_hectoradian:
                        handler.string_value("hectoradian");
                        break;
                    case TypeTagKnownValues.Tag_kiloradian:
                        handler.string_value("kiloradian");
                        break;
                    case TypeTagKnownValues.Tag_megaradian:
                        handler.string_value("megaradian");
                        break;
                    case TypeTagKnownValues.Tag_gigaradian:
                        handler.string_value("gigaradian");
                        break;
                    case TypeTagKnownValues.Tag_teraradian:
                        handler.string_value("teraradian");
                        break;
                    case TypeTagKnownValues.Tag_petaradian:
                        handler.string_value("petaradian");
                        break;
                    case TypeTagKnownValues.Tag_exaradian:
                        handler.string_value("exaradian");
                        break;
                    case TypeTagKnownValues.Tag_zettaradian:
                        handler.string_value("zettaradian");
                        break;
                    case TypeTagKnownValues.Tag_yottaradian:
                        handler.string_value("yottaradian");
                        break;
                    case TypeTagKnownValues.Tag_steradian:
                        handler.string_value("steradian");
                        break;
                    case TypeTagKnownValues.Tag_yoctosteradian:
                        handler.string_value("yoctosteradian");
                        break;
                    case TypeTagKnownValues.Tag_zeptosteradian:
                        handler.string_value("zeptosteradian");
                        break;
                    case TypeTagKnownValues.Tag_attosteradian:
                        handler.string_value("attosteradian");
                        break;
                    case TypeTagKnownValues.Tag_femtosteradian:
                        handler.string_value("femtosteradian");
                        break;
                    case TypeTagKnownValues.Tag_picosteradian:
                        handler.string_value("picosteradian");
                        break;
                    case TypeTagKnownValues.Tag_nanosteradian:
                        handler.string_value("nanosteradian");
                        break;
                    case TypeTagKnownValues.Tag_microsteradian:
                        handler.string_value("microsteradian");
                        break;
                    case TypeTagKnownValues.Tag_millisteradian:
                        handler.string_value("millisteradian");
                        break;
                    case TypeTagKnownValues.Tag_centisteradian:
                        handler.string_value("centisteradian");
                        break;
                    case TypeTagKnownValues.Tag_decisteradian:
                        handler.string_value("decisteradian");
                        break;
                    case TypeTagKnownValues.Tag_decasteradian:
                        handler.string_value("decasteradian");
                        break;
                    case TypeTagKnownValues.Tag_hectosteradian:
                        handler.string_value("hectosteradian");
                        break;
                    case TypeTagKnownValues.Tag_kilosteradian:
                        handler.string_value("kilosteradian");
                        break;
                    case TypeTagKnownValues.Tag_megasteradian:
                        handler.string_value("megasteradian");
                        break;
                    case TypeTagKnownValues.Tag_gigasteradian:
                        handler.string_value("gigasteradian");
                        break;
                    case TypeTagKnownValues.Tag_terasteradian:
                        handler.string_value("terasteradian");
                        break;
                    case TypeTagKnownValues.Tag_petasteradian:
                        handler.string_value("petasteradian");
                        break;
                    case TypeTagKnownValues.Tag_exasteradian:
                        handler.string_value("exasteradian");
                        break;
                    case TypeTagKnownValues.Tag_zettasteradian:
                        handler.string_value("zettasteradian");
                        break;
                    case TypeTagKnownValues.Tag_yottasteradian:
                        handler.string_value("yottasteradian");
                        break;
                    case TypeTagKnownValues.Tag_hertz:
                        handler.string_value("hertz");
                        break;
                    case TypeTagKnownValues.Tag_yoctohertz:
                        handler.string_value("yoctohertz");
                        break;
                    case TypeTagKnownValues.Tag_zeptohertz:
                        handler.string_value("zeptohertz");
                        break;
                    case TypeTagKnownValues.Tag_attohertz:
                        handler.string_value("attohertz");
                        break;
                    case TypeTagKnownValues.Tag_femtohertz:
                        handler.string_value("femtohertz");
                        break;
                    case TypeTagKnownValues.Tag_picohertz:
                        handler.string_value("picohertz");
                        break;
                    case TypeTagKnownValues.Tag_nanohertz:
                        handler.string_value("nanohertz");
                        break;
                    case TypeTagKnownValues.Tag_microhertz:
                        handler.string_value("microhertz");
                        break;
                    case TypeTagKnownValues.Tag_millihertz:
                        handler.string_value("millihertz");
                        break;
                    case TypeTagKnownValues.Tag_centihertz:
                        handler.string_value("centihertz");
                        break;
                    case TypeTagKnownValues.Tag_decihertz:
                        handler.string_value("decihertz");
                        break;
                    case TypeTagKnownValues.Tag_decahertz:
                        handler.string_value("decahertz");
                        break;
                    case TypeTagKnownValues.Tag_hectohertz:
                        handler.string_value("hectohertz");
                        break;
                    case TypeTagKnownValues.Tag_kilohertz:
                        handler.string_value("kilohertz");
                        break;
                    case TypeTagKnownValues.Tag_megahertz:
                        handler.string_value("megahertz");
                        break;
                    case TypeTagKnownValues.Tag_gigahertz:
                        handler.string_value("gigahertz");
                        break;
                    case TypeTagKnownValues.Tag_terahertz:
                        handler.string_value("terahertz");
                        break;
                    case TypeTagKnownValues.Tag_petahertz:
                        handler.string_value("petahertz");
                        break;
                    case TypeTagKnownValues.Tag_exahertz:
                        handler.string_value("exahertz");
                        break;
                    case TypeTagKnownValues.Tag_zettahertz:
                        handler.string_value("zettahertz");
                        break;
                    case TypeTagKnownValues.Tag_yottahertz:
                        handler.string_value("yottahertz");
                        break;
                    case TypeTagKnownValues.Tag_newton:
                        handler.string_value("newton");
                        break;
                    case TypeTagKnownValues.Tag_yoctonewton:
                        handler.string_value("yoctonewton");
                        break;
                    case TypeTagKnownValues.Tag_zeptonewton:
                        handler.string_value("zeptonewton");
                        break;
                    case TypeTagKnownValues.Tag_attonewton:
                        handler.string_value("attonewton");
                        break;
                    case TypeTagKnownValues.Tag_femtonewton:
                        handler.string_value("femtonewton");
                        break;
                    case TypeTagKnownValues.Tag_piconewton:
                        handler.string_value("piconewton");
                        break;
                    case TypeTagKnownValues.Tag_nanonewton:
                        handler.string_value("nanonewton");
                        break;
                    case TypeTagKnownValues.Tag_micronewton:
                        handler.string_value("micronewton");
                        break;
                    case TypeTagKnownValues.Tag_millinewton:
                        handler.string_value("millinewton");
                        break;
                    case TypeTagKnownValues.Tag_centinewton:
                        handler.string_value("centinewton");
                        break;
                    case TypeTagKnownValues.Tag_decinewton:
                        handler.string_value("decinewton");
                        break;
                    case TypeTagKnownValues.Tag_decanewton:
                        handler.string_value("decanewton");
                        break;
                    case TypeTagKnownValues.Tag_hectonewton:
                        handler.string_value("hectonewton");
                        break;
                    case TypeTagKnownValues.Tag_kilonewton:
                        handler.string_value("kilonewton");
                        break;
                    case TypeTagKnownValues.Tag_meganewton:
                        handler.string_value("meganewton");
                        break;
                    case TypeTagKnownValues.Tag_giganewton:
                        handler.string_value("giganewton");
                        break;
                    case TypeTagKnownValues.Tag_teranewton:
                        handler.string_value("teranewton");
                        break;
                    case TypeTagKnownValues.Tag_petanewton:
                        handler.string_value("petanewton");
                        break;
                    case TypeTagKnownValues.Tag_exanewton:
                        handler.string_value("exanewton");
                        break;
                    case TypeTagKnownValues.Tag_zettanewton:
                        handler.string_value("zettanewton");
                        break;
                    case TypeTagKnownValues.Tag_yottanewton:
                        handler.string_value("yottanewton");
                        break;
                    case TypeTagKnownValues.Tag_pascal:
                        handler.string_value("pascal");
                        break;
                    case TypeTagKnownValues.Tag_yoctopascal:
                        handler.string_value("yoctopascal");
                        break;
                    case TypeTagKnownValues.Tag_zeptopascal:
                        handler.string_value("zeptopascal");
                        break;
                    case TypeTagKnownValues.Tag_attopascal:
                        handler.string_value("attopascal");
                        break;
                    case TypeTagKnownValues.Tag_femtopascal:
                        handler.string_value("femtopascal");
                        break;
                    case TypeTagKnownValues.Tag_picopascal:
                        handler.string_value("picopascal");
                        break;
                    case TypeTagKnownValues.Tag_nanopascal:
                        handler.string_value("nanopascal");
                        break;
                    case TypeTagKnownValues.Tag_micropascal:
                        handler.string_value("micropascal");
                        break;
                    case TypeTagKnownValues.Tag_millipascal:
                        handler.string_value("millipascal");
                        break;
                    case TypeTagKnownValues.Tag_centipascal:
                        handler.string_value("centipascal");
                        break;
                    case TypeTagKnownValues.Tag_decipascal:
                        handler.string_value("decipascal");
                        break;
                    case TypeTagKnownValues.Tag_decapascal:
                        handler.string_value("decapascal");
                        break;
                    case TypeTagKnownValues.Tag_hectopascal:
                        handler.string_value("hectopascal");
                        break;
                    case TypeTagKnownValues.Tag_kilopascal:
                        handler.string_value("kilopascal");
                        break;
                    case TypeTagKnownValues.Tag_megapascal:
                        handler.string_value("megapascal");
                        break;
                    case TypeTagKnownValues.Tag_gigapascal:
                        handler.string_value("gigapascal");
                        break;
                    case TypeTagKnownValues.Tag_terapascal:
                        handler.string_value("terapascal");
                        break;
                    case TypeTagKnownValues.Tag_petapascal:
                        handler.string_value("petapascal");
                        break;
                    case TypeTagKnownValues.Tag_exapascal:
                        handler.string_value("exapascal");
                        break;
                    case TypeTagKnownValues.Tag_zettapascal:
                        handler.string_value("zettapascal");
                        break;
                    case TypeTagKnownValues.Tag_yottapascal:
                        handler.string_value("yottapascal");
                        break;
                    case TypeTagKnownValues.Tag_joule:
                        handler.string_value("joule");
                        break;
                    case TypeTagKnownValues.Tag_yoctojoule:
                        handler.string_value("yoctojoule");
                        break;
                    case TypeTagKnownValues.Tag_zeptojoule:
                        handler.string_value("zeptojoule");
                        break;
                    case TypeTagKnownValues.Tag_attojoule:
                        handler.string_value("attojoule");
                        break;
                    case TypeTagKnownValues.Tag_femtojoule:
                        handler.string_value("femtojoule");
                        break;
                    case TypeTagKnownValues.Tag_picojoule:
                        handler.string_value("picojoule");
                        break;
                    case TypeTagKnownValues.Tag_nanojoule:
                        handler.string_value("nanojoule");
                        break;
                    case TypeTagKnownValues.Tag_microjoule:
                        handler.string_value("microjoule");
                        break;
                    case TypeTagKnownValues.Tag_millijoule:
                        handler.string_value("millijoule");
                        break;
                    case TypeTagKnownValues.Tag_centijoule:
                        handler.string_value("centijoule");
                        break;
                    case TypeTagKnownValues.Tag_decijoule:
                        handler.string_value("decijoule");
                        break;
                    case TypeTagKnownValues.Tag_decajoule:
                        handler.string_value("decajoule");
                        break;
                    case TypeTagKnownValues.Tag_hectojoule:
                        handler.string_value("hectojoule");
                        break;
                    case TypeTagKnownValues.Tag_kilojoule:
                        handler.string_value("kilojoule");
                        break;
                    case TypeTagKnownValues.Tag_megajoule:
                        handler.string_value("megajoule");
                        break;
                    case TypeTagKnownValues.Tag_gigajoule:
                        handler.string_value("gigajoule");
                        break;
                    case TypeTagKnownValues.Tag_terajoule:
                        handler.string_value("terajoule");
                        break;
                    case TypeTagKnownValues.Tag_petajoule:
                        handler.string_value("petajoule");
                        break;
                    case TypeTagKnownValues.Tag_exajoule:
                        handler.string_value("exajoule");
                        break;
                    case TypeTagKnownValues.Tag_zettajoule:
                        handler.string_value("zettajoule");
                        break;
                    case TypeTagKnownValues.Tag_yottajoule:
                        handler.string_value("yottajoule");
                        break;
                    case TypeTagKnownValues.Tag_watt:
                        handler.string_value("watt");
                        break;
                    case TypeTagKnownValues.Tag_yoctowatt:
                        handler.string_value("yoctowatt");
                        break;
                    case TypeTagKnownValues.Tag_zeptowatt:
                        handler.string_value("zeptowatt");
                        break;
                    case TypeTagKnownValues.Tag_attowatt:
                        handler.string_value("attowatt");
                        break;
                    case TypeTagKnownValues.Tag_femtowatt:
                        handler.string_value("femtowatt");
                        break;
                    case TypeTagKnownValues.Tag_picowatt:
                        handler.string_value("picowatt");
                        break;
                    case TypeTagKnownValues.Tag_nanowatt:
                        handler.string_value("nanowatt");
                        break;
                    case TypeTagKnownValues.Tag_microwatt:
                        handler.string_value("microwatt");
                        break;
                    case TypeTagKnownValues.Tag_milliwatt:
                        handler.string_value("milliwatt");
                        break;
                    case TypeTagKnownValues.Tag_centiwatt:
                        handler.string_value("centiwatt");
                        break;
                    case TypeTagKnownValues.Tag_deciwatt:
                        handler.string_value("deciwatt");
                        break;
                    case TypeTagKnownValues.Tag_decawatt:
                        handler.string_value("decawatt");
                        break;
                    case TypeTagKnownValues.Tag_hectowatt:
                        handler.string_value("hectowatt");
                        break;
                    case TypeTagKnownValues.Tag_kilowatt:
                        handler.string_value("kilowatt");
                        break;
                    case TypeTagKnownValues.Tag_megawatt:
                        handler.string_value("megawatt");
                        break;
                    case TypeTagKnownValues.Tag_gigawatt:
                        handler.string_value("gigawatt");
                        break;
                    case TypeTagKnownValues.Tag_terawatt:
                        handler.string_value("terawatt");
                        break;
                    case TypeTagKnownValues.Tag_petawatt:
                        handler.string_value("petawatt");
                        break;
                    case TypeTagKnownValues.Tag_exawatt:
                        handler.string_value("exawatt");
                        break;
                    case TypeTagKnownValues.Tag_zettawatt:
                        handler.string_value("zettawatt");
                        break;
                    case TypeTagKnownValues.Tag_yottawatt:
                        handler.string_value("yottawatt");
                        break;
                    case TypeTagKnownValues.Tag_coulomb:
                        handler.string_value("coulomb");
                        break;
                    case TypeTagKnownValues.Tag_yoctocoulomb:
                        handler.string_value("yoctocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_zeptocoulomb:
                        handler.string_value("zeptocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_attocoulomb:
                        handler.string_value("attocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_femtocoulomb:
                        handler.string_value("femtocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_picocoulomb:
                        handler.string_value("picocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_nanocoulomb:
                        handler.string_value("nanocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_microcoulomb:
                        handler.string_value("microcoulomb");
                        break;
                    case TypeTagKnownValues.Tag_millicoulomb:
                        handler.string_value("millicoulomb");
                        break;
                    case TypeTagKnownValues.Tag_centicoulomb:
                        handler.string_value("centicoulomb");
                        break;
                    case TypeTagKnownValues.Tag_decicoulomb:
                        handler.string_value("decicoulomb");
                        break;
                    case TypeTagKnownValues.Tag_decacoulomb:
                        handler.string_value("decacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_hectocoulomb:
                        handler.string_value("hectocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_kilocoulomb:
                        handler.string_value("kilocoulomb");
                        break;
                    case TypeTagKnownValues.Tag_megacoulomb:
                        handler.string_value("megacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_gigacoulomb:
                        handler.string_value("gigacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_teracoulomb:
                        handler.string_value("teracoulomb");
                        break;
                    case TypeTagKnownValues.Tag_petacoulomb:
                        handler.string_value("petacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_exacoulomb:
                        handler.string_value("exacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_zettacoulomb:
                        handler.string_value("zettacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_yottacoulomb:
                        handler.string_value("yottacoulomb");
                        break;
                    case TypeTagKnownValues.Tag_volt:
                        handler.string_value("volt");
                        break;
                    case TypeTagKnownValues.Tag_yoctovolt:
                        handler.string_value("yoctovolt");
                        break;
                    case TypeTagKnownValues.Tag_zeptovolt:
                        handler.string_value("zeptovolt");
                        break;
                    case TypeTagKnownValues.Tag_attovolt:
                        handler.string_value("attovolt");
                        break;
                    case TypeTagKnownValues.Tag_femtovolt:
                        handler.string_value("femtovolt");
                        break;
                    case TypeTagKnownValues.Tag_picovolt:
                        handler.string_value("picovolt");
                        break;
                    case TypeTagKnownValues.Tag_nanovolt:
                        handler.string_value("nanovolt");
                        break;
                    case TypeTagKnownValues.Tag_microvolt:
                        handler.string_value("microvolt");
                        break;
                    case TypeTagKnownValues.Tag_millivolt:
                        handler.string_value("millivolt");
                        break;
                    case TypeTagKnownValues.Tag_centivolt:
                        handler.string_value("centivolt");
                        break;
                    case TypeTagKnownValues.Tag_decivolt:
                        handler.string_value("decivolt");
                        break;
                    case TypeTagKnownValues.Tag_decavolt:
                        handler.string_value("decavolt");
                        break;
                    case TypeTagKnownValues.Tag_hectovolt:
                        handler.string_value("hectovolt");
                        break;
                    case TypeTagKnownValues.Tag_kilovolt:
                        handler.string_value("kilovolt");
                        break;
                    case TypeTagKnownValues.Tag_megavolt:
                        handler.string_value("megavolt");
                        break;
                    case TypeTagKnownValues.Tag_gigavolt:
                        handler.string_value("gigavolt");
                        break;
                    case TypeTagKnownValues.Tag_teravolt:
                        handler.string_value("teravolt");
                        break;
                    case TypeTagKnownValues.Tag_petavolt:
                        handler.string_value("petavolt");
                        break;
                    case TypeTagKnownValues.Tag_exavolt:
                        handler.string_value("exavolt");
                        break;
                    case TypeTagKnownValues.Tag_zettavolt:
                        handler.string_value("zettavolt");
                        break;
                    case TypeTagKnownValues.Tag_yottavolt:
                        handler.string_value("yottavolt");
                        break;
                    case TypeTagKnownValues.Tag_farad:
                        handler.string_value("farad");
                        break;
                    case TypeTagKnownValues.Tag_yoctofarad:
                        handler.string_value("yoctofarad");
                        break;
                    case TypeTagKnownValues.Tag_zeptofarad:
                        handler.string_value("zeptofarad");
                        break;
                    case TypeTagKnownValues.Tag_attofarad:
                        handler.string_value("attofarad");
                        break;
                    case TypeTagKnownValues.Tag_femtofarad:
                        handler.string_value("femtofarad");
                        break;
                    case TypeTagKnownValues.Tag_picofarad:
                        handler.string_value("picofarad");
                        break;
                    case TypeTagKnownValues.Tag_nanofarad:
                        handler.string_value("nanofarad");
                        break;
                    case TypeTagKnownValues.Tag_microfarad:
                        handler.string_value("microfarad");
                        break;
                    case TypeTagKnownValues.Tag_millifarad:
                        handler.string_value("millifarad");
                        break;
                    case TypeTagKnownValues.Tag_centifarad:
                        handler.string_value("centifarad");
                        break;
                    case TypeTagKnownValues.Tag_decifarad:
                        handler.string_value("decifarad");
                        break;
                    case TypeTagKnownValues.Tag_decafarad:
                        handler.string_value("decafarad");
                        break;
                    case TypeTagKnownValues.Tag_hectofarad:
                        handler.string_value("hectofarad");
                        break;
                    case TypeTagKnownValues.Tag_kilofarad:
                        handler.string_value("kilofarad");
                        break;
                    case TypeTagKnownValues.Tag_megafarad:
                        handler.string_value("megafarad");
                        break;
                    case TypeTagKnownValues.Tag_gigafarad:
                        handler.string_value("gigafarad");
                        break;
                    case TypeTagKnownValues.Tag_terafarad:
                        handler.string_value("terafarad");
                        break;
                    case TypeTagKnownValues.Tag_petafarad:
                        handler.string_value("petafarad");
                        break;
                    case TypeTagKnownValues.Tag_exafarad:
                        handler.string_value("exafarad");
                        break;
                    case TypeTagKnownValues.Tag_zettafarad:
                        handler.string_value("zettafarad");
                        break;
                    case TypeTagKnownValues.Tag_yottafarad:
                        handler.string_value("yottafarad");
                        break;
                    case TypeTagKnownValues.Tag_ohm:
                        handler.string_value("ohm");
                        break;
                    case TypeTagKnownValues.Tag_yoctoohm:
                        handler.string_value("yoctoohm");
                        break;
                    case TypeTagKnownValues.Tag_zeptoohm:
                        handler.string_value("zeptoohm");
                        break;
                    case TypeTagKnownValues.Tag_attoohm:
                        handler.string_value("attoohm");
                        break;
                    case TypeTagKnownValues.Tag_femtoohm:
                        handler.string_value("femtoohm");
                        break;
                    case TypeTagKnownValues.Tag_picoohm:
                        handler.string_value("picoohm");
                        break;
                    case TypeTagKnownValues.Tag_nanoohm:
                        handler.string_value("nanoohm");
                        break;
                    case TypeTagKnownValues.Tag_microohm:
                        handler.string_value("microohm");
                        break;
                    case TypeTagKnownValues.Tag_milliohm:
                        handler.string_value("milliohm");
                        break;
                    case TypeTagKnownValues.Tag_centiohm:
                        handler.string_value("centiohm");
                        break;
                    case TypeTagKnownValues.Tag_deciohm:
                        handler.string_value("deciohm");
                        break;
                    case TypeTagKnownValues.Tag_decaohm:
                        handler.string_value("decaohm");
                        break;
                    case TypeTagKnownValues.Tag_hectoohm:
                        handler.string_value("hectoohm");
                        break;
                    case TypeTagKnownValues.Tag_kiloohm:
                        handler.string_value("kiloohm");
                        break;
                    case TypeTagKnownValues.Tag_megaohm:
                        handler.string_value("megaohm");
                        break;
                    case TypeTagKnownValues.Tag_gigaohm:
                        handler.string_value("gigaohm");
                        break;
                    case TypeTagKnownValues.Tag_teraohm:
                        handler.string_value("teraohm");
                        break;
                    case TypeTagKnownValues.Tag_petaohm:
                        handler.string_value("petaohm");
                        break;
                    case TypeTagKnownValues.Tag_exaohm:
                        handler.string_value("exaohm");
                        break;
                    case TypeTagKnownValues.Tag_zettaohm:
                        handler.string_value("zettaohm");
                        break;
                    case TypeTagKnownValues.Tag_yottaohm:
                        handler.string_value("yottaohm");
                        break;
                    case TypeTagKnownValues.Tag_siemens:
                        handler.string_value("siemens");
                        break;
                    case TypeTagKnownValues.Tag_yoctosiemens:
                        handler.string_value("yoctosiemens");
                        break;
                    case TypeTagKnownValues.Tag_zeptosiemens:
                        handler.string_value("zeptosiemens");
                        break;
                    case TypeTagKnownValues.Tag_attosiemens:
                        handler.string_value("attosiemens");
                        break;
                    case TypeTagKnownValues.Tag_femtosiemens:
                        handler.string_value("femtosiemens");
                        break;
                    case TypeTagKnownValues.Tag_picosiemens:
                        handler.string_value("picosiemens");
                        break;
                    case TypeTagKnownValues.Tag_nanosiemens:
                        handler.string_value("nanosiemens");
                        break;
                    case TypeTagKnownValues.Tag_microsiemens:
                        handler.string_value("microsiemens");
                        break;
                    case TypeTagKnownValues.Tag_millisiemens:
                        handler.string_value("millisiemens");
                        break;
                    case TypeTagKnownValues.Tag_centisiemens:
                        handler.string_value("centisiemens");
                        break;
                    case TypeTagKnownValues.Tag_decisiemens:
                        handler.string_value("decisiemens");
                        break;
                    case TypeTagKnownValues.Tag_decasiemens:
                        handler.string_value("decasiemens");
                        break;
                    case TypeTagKnownValues.Tag_hectosiemens:
                        handler.string_value("hectosiemens");
                        break;
                    case TypeTagKnownValues.Tag_kilosiemens:
                        handler.string_value("kilosiemens");
                        break;
                    case TypeTagKnownValues.Tag_megasiemens:
                        handler.string_value("megasiemens");
                        break;
                    case TypeTagKnownValues.Tag_gigasiemens:
                        handler.string_value("gigasiemens");
                        break;
                    case TypeTagKnownValues.Tag_terasiemens:
                        handler.string_value("terasiemens");
                        break;
                    case TypeTagKnownValues.Tag_petasiemens:
                        handler.string_value("petasiemens");
                        break;
                    case TypeTagKnownValues.Tag_exasiemens:
                        handler.string_value("exasiemens");
                        break;
                    case TypeTagKnownValues.Tag_zettasiemens:
                        handler.string_value("zettasiemens");
                        break;
                    case TypeTagKnownValues.Tag_yottasiemens:
                        handler.string_value("yottasiemens");
                        break;
                    case TypeTagKnownValues.Tag_weber:
                        handler.string_value("weber");
                        break;
                    case TypeTagKnownValues.Tag_yoctoweber:
                        handler.string_value("yoctoweber");
                        break;
                    case TypeTagKnownValues.Tag_zeptoweber:
                        handler.string_value("zeptoweber");
                        break;
                    case TypeTagKnownValues.Tag_attoweber:
                        handler.string_value("attoweber");
                        break;
                    case TypeTagKnownValues.Tag_femtoweber:
                        handler.string_value("femtoweber");
                        break;
                    case TypeTagKnownValues.Tag_picoweber:
                        handler.string_value("picoweber");
                        break;
                    case TypeTagKnownValues.Tag_nanoweber:
                        handler.string_value("nanoweber");
                        break;
                    case TypeTagKnownValues.Tag_microweber:
                        handler.string_value("microweber");
                        break;
                    case TypeTagKnownValues.Tag_milliweber:
                        handler.string_value("milliweber");
                        break;
                    case TypeTagKnownValues.Tag_centiweber:
                        handler.string_value("centiweber");
                        break;
                    case TypeTagKnownValues.Tag_deciweber:
                        handler.string_value("deciweber");
                        break;
                    case TypeTagKnownValues.Tag_decaweber:
                        handler.string_value("decaweber");
                        break;
                    case TypeTagKnownValues.Tag_hectoweber:
                        handler.string_value("hectoweber");
                        break;
                    case TypeTagKnownValues.Tag_kiloweber:
                        handler.string_value("kiloweber");
                        break;
                    case TypeTagKnownValues.Tag_megaweber:
                        handler.string_value("megaweber");
                        break;
                    case TypeTagKnownValues.Tag_gigaweber:
                        handler.string_value("gigaweber");
                        break;
                    case TypeTagKnownValues.Tag_teraweber:
                        handler.string_value("teraweber");
                        break;
                    case TypeTagKnownValues.Tag_petaweber:
                        handler.string_value("petaweber");
                        break;
                    case TypeTagKnownValues.Tag_exaweber:
                        handler.string_value("exaweber");
                        break;
                    case TypeTagKnownValues.Tag_zettaweber:
                        handler.string_value("zettaweber");
                        break;
                    case TypeTagKnownValues.Tag_yottaweber:
                        handler.string_value("yottaweber");
                        break;
                    case TypeTagKnownValues.Tag_tesla:
                        handler.string_value("tesla");
                        break;
                    case TypeTagKnownValues.Tag_yoctotesla:
                        handler.string_value("yoctotesla");
                        break;
                    case TypeTagKnownValues.Tag_zeptotesla:
                        handler.string_value("zeptotesla");
                        break;
                    case TypeTagKnownValues.Tag_attotesla:
                        handler.string_value("attotesla");
                        break;
                    case TypeTagKnownValues.Tag_femtotesla:
                        handler.string_value("femtotesla");
                        break;
                    case TypeTagKnownValues.Tag_picotesla:
                        handler.string_value("picotesla");
                        break;
                    case TypeTagKnownValues.Tag_nanotesla:
                        handler.string_value("nanotesla");
                        break;
                    case TypeTagKnownValues.Tag_microtesla:
                        handler.string_value("microtesla");
                        break;
                    case TypeTagKnownValues.Tag_millitesla:
                        handler.string_value("millitesla");
                        break;
                    case TypeTagKnownValues.Tag_centitesla:
                        handler.string_value("centitesla");
                        break;
                    case TypeTagKnownValues.Tag_decitesla:
                        handler.string_value("decitesla");
                        break;
                    case TypeTagKnownValues.Tag_decatesla:
                        handler.string_value("decatesla");
                        break;
                    case TypeTagKnownValues.Tag_hectotesla:
                        handler.string_value("hectotesla");
                        break;
                    case TypeTagKnownValues.Tag_kilotesla:
                        handler.string_value("kilotesla");
                        break;
                    case TypeTagKnownValues.Tag_megatesla:
                        handler.string_value("megatesla");
                        break;
                    case TypeTagKnownValues.Tag_gigatesla:
                        handler.string_value("gigatesla");
                        break;
                    case TypeTagKnownValues.Tag_teratesla:
                        handler.string_value("teratesla");
                        break;
                    case TypeTagKnownValues.Tag_petatesla:
                        handler.string_value("petatesla");
                        break;
                    case TypeTagKnownValues.Tag_exatesla:
                        handler.string_value("exatesla");
                        break;
                    case TypeTagKnownValues.Tag_zettatesla:
                        handler.string_value("zettatesla");
                        break;
                    case TypeTagKnownValues.Tag_yottatesla:
                        handler.string_value("yottatesla");
                        break;
                    case TypeTagKnownValues.Tag_henry:
                        handler.string_value("henry");
                        break;
                    case TypeTagKnownValues.Tag_yoctohenry:
                        handler.string_value("yoctohenry");
                        break;
                    case TypeTagKnownValues.Tag_zeptohenry:
                        handler.string_value("zeptohenry");
                        break;
                    case TypeTagKnownValues.Tag_attohenry:
                        handler.string_value("attohenry");
                        break;
                    case TypeTagKnownValues.Tag_femtohenry:
                        handler.string_value("femtohenry");
                        break;
                    case TypeTagKnownValues.Tag_picohenry:
                        handler.string_value("picohenry");
                        break;
                    case TypeTagKnownValues.Tag_nanohenry:
                        handler.string_value("nanohenry");
                        break;
                    case TypeTagKnownValues.Tag_microhenry:
                        handler.string_value("microhenry");
                        break;
                    case TypeTagKnownValues.Tag_millihenry:
                        handler.string_value("millihenry");
                        break;
                    case TypeTagKnownValues.Tag_centihenry:
                        handler.string_value("centihenry");
                        break;
                    case TypeTagKnownValues.Tag_decihenry:
                        handler.string_value("decihenry");
                        break;
                    case TypeTagKnownValues.Tag_decahenry:
                        handler.string_value("decahenry");
                        break;
                    case TypeTagKnownValues.Tag_hectohenry:
                        handler.string_value("hectohenry");
                        break;
                    case TypeTagKnownValues.Tag_kilohenry:
                        handler.string_value("kilohenry");
                        break;
                    case TypeTagKnownValues.Tag_megahenry:
                        handler.string_value("megahenry");
                        break;
                    case TypeTagKnownValues.Tag_gigahenry:
                        handler.string_value("gigahenry");
                        break;
                    case TypeTagKnownValues.Tag_terahenry:
                        handler.string_value("terahenry");
                        break;
                    case TypeTagKnownValues.Tag_petahenry:
                        handler.string_value("petahenry");
                        break;
                    case TypeTagKnownValues.Tag_exahenry:
                        handler.string_value("exahenry");
                        break;
                    case TypeTagKnownValues.Tag_zettahenry:
                        handler.string_value("zettahenry");
                        break;
                    case TypeTagKnownValues.Tag_yottahenry:
                        handler.string_value("yottahenry");
                        break;
                    case TypeTagKnownValues.Tag_degree_celsius:
                        handler.string_value("degree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_yoctodegree_celsius:
                        handler.string_value("yoctodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_zeptodegree_celsius:
                        handler.string_value("zeptodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_attodegree_celsius:
                        handler.string_value("attodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_femtodegree_celsius:
                        handler.string_value("femtodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_picodegree_celsius:
                        handler.string_value("picodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_nanodegree_celsius:
                        handler.string_value("nanodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_microdegree_celsius:
                        handler.string_value("microdegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_millidegree_celsius:
                        handler.string_value("millidegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_centidegree_celsius:
                        handler.string_value("centidegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_decidegree_celsius:
                        handler.string_value("decidegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_decadegree_celsius:
                        handler.string_value("decadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_hectodegree_celsius:
                        handler.string_value("hectodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_kilodegree_celsius:
                        handler.string_value("kilodegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_megadegree_celsius:
                        handler.string_value("megadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_gigadegree_celsius:
                        handler.string_value("gigadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_teradegree_celsius:
                        handler.string_value("teradegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_petadegree_celsius:
                        handler.string_value("petadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_exadegree_celsius:
                        handler.string_value("exadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_zettadegree_celsius:
                        handler.string_value("zettadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_yottadegree_celsius:
                        handler.string_value("yottadegree_celsius");
                        break;
                    case TypeTagKnownValues.Tag_lumen:
                        handler.string_value("lumen");
                        break;
                    case TypeTagKnownValues.Tag_yoctolumen:
                        handler.string_value("yoctolumen");
                        break;
                    case TypeTagKnownValues.Tag_zeptolumen:
                        handler.string_value("zeptolumen");
                        break;
                    case TypeTagKnownValues.Tag_attolumen:
                        handler.string_value("attolumen");
                        break;
                    case TypeTagKnownValues.Tag_femtolumen:
                        handler.string_value("femtolumen");
                        break;
                    case TypeTagKnownValues.Tag_picolumen:
                        handler.string_value("picolumen");
                        break;
                    case TypeTagKnownValues.Tag_nanolumen:
                        handler.string_value("nanolumen");
                        break;
                    case TypeTagKnownValues.Tag_microlumen:
                        handler.string_value("microlumen");
                        break;
                    case TypeTagKnownValues.Tag_millilumen:
                        handler.string_value("millilumen");
                        break;
                    case TypeTagKnownValues.Tag_centilumen:
                        handler.string_value("centilumen");
                        break;
                    case TypeTagKnownValues.Tag_decilumen:
                        handler.string_value("decilumen");
                        break;
                    case TypeTagKnownValues.Tag_decalumen:
                        handler.string_value("decalumen");
                        break;
                    case TypeTagKnownValues.Tag_hectolumen:
                        handler.string_value("hectolumen");
                        break;
                    case TypeTagKnownValues.Tag_kilolumen:
                        handler.string_value("kilolumen");
                        break;
                    case TypeTagKnownValues.Tag_megalumen:
                        handler.string_value("megalumen");
                        break;
                    case TypeTagKnownValues.Tag_gigalumen:
                        handler.string_value("gigalumen");
                        break;
                    case TypeTagKnownValues.Tag_teralumen:
                        handler.string_value("teralumen");
                        break;
                    case TypeTagKnownValues.Tag_petalumen:
                        handler.string_value("petalumen");
                        break;
                    case TypeTagKnownValues.Tag_exalumen:
                        handler.string_value("exalumen");
                        break;
                    case TypeTagKnownValues.Tag_zettalumen:
                        handler.string_value("zettalumen");
                        break;
                    case TypeTagKnownValues.Tag_yottalumen:
                        handler.string_value("yottalumen");
                        break;
                    case TypeTagKnownValues.Tag_lux:
                        handler.string_value("lux");
                        break;
                    case TypeTagKnownValues.Tag_yoctolux:
                        handler.string_value("yoctolux");
                        break;
                    case TypeTagKnownValues.Tag_zeptolux:
                        handler.string_value("zeptolux");
                        break;
                    case TypeTagKnownValues.Tag_attolux:
                        handler.string_value("attolux");
                        break;
                    case TypeTagKnownValues.Tag_femtolux:
                        handler.string_value("femtolux");
                        break;
                    case TypeTagKnownValues.Tag_picolux:
                        handler.string_value("picolux");
                        break;
                    case TypeTagKnownValues.Tag_nanolux:
                        handler.string_value("nanolux");
                        break;
                    case TypeTagKnownValues.Tag_microlux:
                        handler.string_value("microlux");
                        break;
                    case TypeTagKnownValues.Tag_millilux:
                        handler.string_value("millilux");
                        break;
                    case TypeTagKnownValues.Tag_centilux:
                        handler.string_value("centilux");
                        break;
                    case TypeTagKnownValues.Tag_decilux:
                        handler.string_value("decilux");
                        break;
                    case TypeTagKnownValues.Tag_decalux:
                        handler.string_value("decalux");
                        break;
                    case TypeTagKnownValues.Tag_hectolux:
                        handler.string_value("hectolux");
                        break;
                    case TypeTagKnownValues.Tag_kilolux:
                        handler.string_value("kilolux");
                        break;
                    case TypeTagKnownValues.Tag_megalux:
                        handler.string_value("megalux");
                        break;
                    case TypeTagKnownValues.Tag_gigalux:
                        handler.string_value("gigalux");
                        break;
                    case TypeTagKnownValues.Tag_teralux:
                        handler.string_value("teralux");
                        break;
                    case TypeTagKnownValues.Tag_petalux:
                        handler.string_value("petalux");
                        break;
                    case TypeTagKnownValues.Tag_exalux:
                        handler.string_value("exalux");
                        break;
                    case TypeTagKnownValues.Tag_zettalux:
                        handler.string_value("zettalux");
                        break;
                    case TypeTagKnownValues.Tag_yottalux:
                        handler.string_value("yottalux");
                        break;
                    case TypeTagKnownValues.Tag_becquerel:
                        handler.string_value("becquerel");
                        break;
                    case TypeTagKnownValues.Tag_yoctobecquerel:
                        handler.string_value("yoctobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_zeptobecquerel:
                        handler.string_value("zeptobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_attobecquerel:
                        handler.string_value("attobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_femtobecquerel:
                        handler.string_value("femtobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_picobecquerel:
                        handler.string_value("picobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_nanobecquerel:
                        handler.string_value("nanobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_microbecquerel:
                        handler.string_value("microbecquerel");
                        break;
                    case TypeTagKnownValues.Tag_millibecquerel:
                        handler.string_value("millibecquerel");
                        break;
                    case TypeTagKnownValues.Tag_centibecquerel:
                        handler.string_value("centibecquerel");
                        break;
                    case TypeTagKnownValues.Tag_decibecquerel:
                        handler.string_value("decibecquerel");
                        break;
                    case TypeTagKnownValues.Tag_decabecquerel:
                        handler.string_value("decabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_hectobecquerel:
                        handler.string_value("hectobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_kilobecquerel:
                        handler.string_value("kilobecquerel");
                        break;
                    case TypeTagKnownValues.Tag_megabecquerel:
                        handler.string_value("megabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_gigabecquerel:
                        handler.string_value("gigabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_terabecquerel:
                        handler.string_value("terabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_petabecquerel:
                        handler.string_value("petabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_exabecquerel:
                        handler.string_value("exabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_zettabecquerel:
                        handler.string_value("zettabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_yottabecquerel:
                        handler.string_value("yottabecquerel");
                        break;
                    case TypeTagKnownValues.Tag_gray:
                        handler.string_value("gray");
                        break;
                    case TypeTagKnownValues.Tag_yoctogray:
                        handler.string_value("yoctogray");
                        break;
                    case TypeTagKnownValues.Tag_zeptogray:
                        handler.string_value("zeptogray");
                        break;
                    case TypeTagKnownValues.Tag_attogray:
                        handler.string_value("attogray");
                        break;
                    case TypeTagKnownValues.Tag_femtogray:
                        handler.string_value("femtogray");
                        break;
                    case TypeTagKnownValues.Tag_picogray:
                        handler.string_value("picogray");
                        break;
                    case TypeTagKnownValues.Tag_nanogray:
                        handler.string_value("nanogray");
                        break;
                    case TypeTagKnownValues.Tag_microgray:
                        handler.string_value("microgray");
                        break;
                    case TypeTagKnownValues.Tag_milligray:
                        handler.string_value("milligray");
                        break;
                    case TypeTagKnownValues.Tag_centigray:
                        handler.string_value("centigray");
                        break;
                    case TypeTagKnownValues.Tag_decigray:
                        handler.string_value("decigray");
                        break;
                    case TypeTagKnownValues.Tag_decagray:
                        handler.string_value("decagray");
                        break;
                    case TypeTagKnownValues.Tag_hectogray:
                        handler.string_value("hectogray");
                        break;
                    case TypeTagKnownValues.Tag_kilogray:
                        handler.string_value("kilogray");
                        break;
                    case TypeTagKnownValues.Tag_megagray:
                        handler.string_value("megagray");
                        break;
                    case TypeTagKnownValues.Tag_gigagray:
                        handler.string_value("gigagray");
                        break;
                    case TypeTagKnownValues.Tag_teragray:
                        handler.string_value("teragray");
                        break;
                    case TypeTagKnownValues.Tag_petagray:
                        handler.string_value("petagray");
                        break;
                    case TypeTagKnownValues.Tag_exagray:
                        handler.string_value("exagray");
                        break;
                    case TypeTagKnownValues.Tag_zettagray:
                        handler.string_value("zettagray");
                        break;
                    case TypeTagKnownValues.Tag_yottagray:
                        handler.string_value("yottagray");
                        break;
                    case TypeTagKnownValues.Tag_sievert:
                        handler.string_value("sievert");
                        break;
                    case TypeTagKnownValues.Tag_yoctosievert:
                        handler.string_value("yoctosievert");
                        break;
                    case TypeTagKnownValues.Tag_zeptosievert:
                        handler.string_value("zeptosievert");
                        break;
                    case TypeTagKnownValues.Tag_attosievert:
                        handler.string_value("attosievert");
                        break;
                    case TypeTagKnownValues.Tag_femtosievert:
                        handler.string_value("femtosievert");
                        break;
                    case TypeTagKnownValues.Tag_picosievert:
                        handler.string_value("picosievert");
                        break;
                    case TypeTagKnownValues.Tag_nanosievert:
                        handler.string_value("nanosievert");
                        break;
                    case TypeTagKnownValues.Tag_microsievert:
                        handler.string_value("microsievert");
                        break;
                    case TypeTagKnownValues.Tag_millisievert:
                        handler.string_value("millisievert");
                        break;
                    case TypeTagKnownValues.Tag_centisievert:
                        handler.string_value("centisievert");
                        break;
                    case TypeTagKnownValues.Tag_decisievert:
                        handler.string_value("decisievert");
                        break;
                    case TypeTagKnownValues.Tag_decasievert:
                        handler.string_value("decasievert");
                        break;
                    case TypeTagKnownValues.Tag_hectosievert:
                        handler.string_value("hectosievert");
                        break;
                    case TypeTagKnownValues.Tag_kilosievert:
                        handler.string_value("kilosievert");
                        break;
                    case TypeTagKnownValues.Tag_megasievert:
                        handler.string_value("megasievert");
                        break;
                    case TypeTagKnownValues.Tag_gigasievert:
                        handler.string_value("gigasievert");
                        break;
                    case TypeTagKnownValues.Tag_terasievert:
                        handler.string_value("terasievert");
                        break;
                    case TypeTagKnownValues.Tag_petasievert:
                        handler.string_value("petasievert");
                        break;
                    case TypeTagKnownValues.Tag_exasievert:
                        handler.string_value("exasievert");
                        break;
                    case TypeTagKnownValues.Tag_zettasievert:
                        handler.string_value("zettasievert");
                        break;
                    case TypeTagKnownValues.Tag_yottasievert:
                        handler.string_value("yottasievert");
                        break;
                    case TypeTagKnownValues.Tag_katal:
                        handler.string_value("katal");
                        break;
                    case TypeTagKnownValues.Tag_yoctokatal:
                        handler.string_value("yoctokatal");
                        break;
                    case TypeTagKnownValues.Tag_zeptokatal:
                        handler.string_value("zeptokatal");
                        break;
                    case TypeTagKnownValues.Tag_attokatal:
                        handler.string_value("attokatal");
                        break;
                    case TypeTagKnownValues.Tag_femtokatal:
                        handler.string_value("femtokatal");
                        break;
                    case TypeTagKnownValues.Tag_picokatal:
                        handler.string_value("picokatal");
                        break;
                    case TypeTagKnownValues.Tag_nanokatal:
                        handler.string_value("nanokatal");
                        break;
                    case TypeTagKnownValues.Tag_microkatal:
                        handler.string_value("microkatal");
                        break;
                    case TypeTagKnownValues.Tag_millikatal:
                        handler.string_value("millikatal");
                        break;
                    case TypeTagKnownValues.Tag_centikatal:
                        handler.string_value("centikatal");
                        break;
                    case TypeTagKnownValues.Tag_decikatal:
                        handler.string_value("decikatal");
                        break;
                    case TypeTagKnownValues.Tag_decakatal:
                        handler.string_value("decakatal");
                        break;
                    case TypeTagKnownValues.Tag_hectokatal:
                        handler.string_value("hectokatal");
                        break;
                    case TypeTagKnownValues.Tag_kilokatal:
                        handler.string_value("kilokatal");
                        break;
                    case TypeTagKnownValues.Tag_megakatal:
                        handler.string_value("megakatal");
                        break;
                    case TypeTagKnownValues.Tag_gigakatal:
                        handler.string_value("gigakatal");
                        break;
                    case TypeTagKnownValues.Tag_terakatal:
                        handler.string_value("terakatal");
                        break;
                    case TypeTagKnownValues.Tag_petakatal:
                        handler.string_value("petakatal");
                        break;
                    case TypeTagKnownValues.Tag_exakatal:
                        handler.string_value("exakatal");
                        break;
                    case TypeTagKnownValues.Tag_zettakatal:
                        handler.string_value("zettakatal");
                        break;
                    case TypeTagKnownValues.Tag_yottakatal:
                        handler.string_value("yottakatal");
                        break;
                    case TypeTagKnownValues.Tag_hectare:
                        handler.string_value("hectare");
                        break;
                    case TypeTagKnownValues.Tag_liter:
                        handler.string_value("liter");
                        break;
                    case TypeTagKnownValues.Tag_yoctoliter:
                        handler.string_value("yoctoliter");
                        break;
                    case TypeTagKnownValues.Tag_zeptoliter:
                        handler.string_value("zeptoliter");
                        break;
                    case TypeTagKnownValues.Tag_attoliter:
                        handler.string_value("attoliter");
                        break;
                    case TypeTagKnownValues.Tag_femtoliter:
                        handler.string_value("femtoliter");
                        break;
                    case TypeTagKnownValues.Tag_picoliter:
                        handler.string_value("picoliter");
                        break;
                    case TypeTagKnownValues.Tag_nanoliter:
                        handler.string_value("nanoliter");
                        break;
                    case TypeTagKnownValues.Tag_microliter:
                        handler.string_value("microliter");
                        break;
                    case TypeTagKnownValues.Tag_milliliter:
                        handler.string_value("milliliter");
                        break;
                    case TypeTagKnownValues.Tag_centiliter:
                        handler.string_value("centiliter");
                        break;
                    case TypeTagKnownValues.Tag_deciliter:
                        handler.string_value("deciliter");
                        break;
                    case TypeTagKnownValues.Tag_decaliter:
                        handler.string_value("decaliter");
                        break;
                    case TypeTagKnownValues.Tag_hectoliter:
                        handler.string_value("hectoliter");
                        break;
                    case TypeTagKnownValues.Tag_kiloliter:
                        handler.string_value("kiloliter");
                        break;
                    case TypeTagKnownValues.Tag_megaliter:
                        handler.string_value("megaliter");
                        break;
                    case TypeTagKnownValues.Tag_gigaliter:
                        handler.string_value("gigaliter");
                        break;
                    case TypeTagKnownValues.Tag_teraliter:
                        handler.string_value("teraliter");
                        break;
                    case TypeTagKnownValues.Tag_petaliter:
                        handler.string_value("petaliter");
                        break;
                    case TypeTagKnownValues.Tag_exaliter:
                        handler.string_value("exaliter");
                        break;
                    case TypeTagKnownValues.Tag_zettaliter:
                        handler.string_value("zettaliter");
                        break;
                    case TypeTagKnownValues.Tag_yottaliter:
                        handler.string_value("yottaliter");
                        break;
                    case TypeTagKnownValues.Tag_tonne:
                        handler.string_value("tonne");
                        break;
                    case TypeTagKnownValues.Tag_yoctotonne:
                        handler.string_value("yoctotonne");
                        break;
                    case TypeTagKnownValues.Tag_zeptotonne:
                        handler.string_value("zeptotonne");
                        break;
                    case TypeTagKnownValues.Tag_attotonne:
                        handler.string_value("attotonne");
                        break;
                    case TypeTagKnownValues.Tag_femtotonne:
                        handler.string_value("femtotonne");
                        break;
                    case TypeTagKnownValues.Tag_picotonne:
                        handler.string_value("picotonne");
                        break;
                    case TypeTagKnownValues.Tag_nanotonne:
                        handler.string_value("nanotonne");
                        break;
                    case TypeTagKnownValues.Tag_microtonne:
                        handler.string_value("microtonne");
                        break;
                    case TypeTagKnownValues.Tag_millitonne:
                        handler.string_value("millitonne");
                        break;
                    case TypeTagKnownValues.Tag_centitonne:
                        handler.string_value("centitonne");
                        break;
                    case TypeTagKnownValues.Tag_decitonne:
                        handler.string_value("decitonne");
                        break;
                    case TypeTagKnownValues.Tag_decatonne:
                        handler.string_value("decatonne");
                        break;
                    case TypeTagKnownValues.Tag_hectotonne:
                        handler.string_value("hectotonne");
                        break;
                    case TypeTagKnownValues.Tag_kilotonne:
                        handler.string_value("kilotonne");
                        break;
                    case TypeTagKnownValues.Tag_megatonne:
                        handler.string_value("megatonne");
                        break;
                    case TypeTagKnownValues.Tag_gigatonne:
                        handler.string_value("gigatonne");
                        break;
                    case TypeTagKnownValues.Tag_teratonne:
                        handler.string_value("teratonne");
                        break;
                    case TypeTagKnownValues.Tag_petatonne:
                        handler.string_value("petatonne");
                        break;
                    case TypeTagKnownValues.Tag_exatonne:
                        handler.string_value("exatonne");
                        break;
                    case TypeTagKnownValues.Tag_zettatonne:
                        handler.string_value("zettatonne");
                        break;
                    case TypeTagKnownValues.Tag_yottatonne:
                        handler.string_value("yottatonne");
                        break;
                    case TypeTagKnownValues.Tag_astronomical_unit:
                        handler.string_value("astronomical_unit");
                        break;
                    case TypeTagKnownValues.Tag_angstrom:
                        handler.string_value("angstrom");
                        break;
                    case TypeTagKnownValues.Tag_minute:
                        handler.string_value("minute");
                        break;
                    case TypeTagKnownValues.Tag_hour:
                        handler.string_value("hour");
                        break;
                    case TypeTagKnownValues.Tag_day:
                        handler.string_value("day");
                        break;
                    case TypeTagKnownValues.Tag_week:
                        handler.string_value("week");
                        break;
                    case TypeTagKnownValues.Tag_fortnight:
                        handler.string_value("fortnight");
                        break;
                    case TypeTagKnownValues.Tag_month:
                        handler.string_value("month");
                        break;
                    case TypeTagKnownValues.Tag_year:
                        handler.string_value("year");
                        break;
                    case TypeTagKnownValues.Tag_biennium:
                        handler.string_value("biennium");
                        break;
                    case TypeTagKnownValues.Tag_triennium:
                        handler.string_value("triennium");
                        break;
                    case TypeTagKnownValues.Tag_quadrennium:
                        handler.string_value("quadrennium");
                        break;
                    case TypeTagKnownValues.Tag_lustrum:
                        handler.string_value("lustrum");
                        break;
                    case TypeTagKnownValues.Tag_decade:
                        handler.string_value("decade");
                        break;
                    case TypeTagKnownValues.Tag_century:
                        handler.string_value("century");
                        break;
                    case TypeTagKnownValues.Tag_millennium:
                        handler.string_value("millennium");
                        break;
                    case TypeTagKnownValues.Tag_sidereal_day:
                        handler.string_value("sidereal_day");
                        break;
                    case TypeTagKnownValues.Tag_sidereal_year:
                        handler.string_value("sidereal_year");
                        break;
                    case TypeTagKnownValues.Tag_helek:
                        handler.string_value("helek");
                        break;
                    case TypeTagKnownValues.Tag_Planck_time:
                        handler.string_value("Planck_time");
                        break;
                    case TypeTagKnownValues.Tag_shake:
                        handler.string_value("shake");
                        break;
                    case TypeTagKnownValues.Tag_svedberg:
                        handler.string_value("svedberg");
                        break;
                    case TypeTagKnownValues.Tag_parsec:
                        handler.string_value("parsec");
                        break;
                    case TypeTagKnownValues.Tag_degree_of_arc:
                        handler.string_value("degree_of_arc");
                        break;
                    default:
                        Debug.Assert(false);
                        break;
                  }
              }
            else
              {
                        handler.string_value(storeTag.string_value);
              }
          }
      }
    public override void write_partial_as_json(JSONHandler handler)
      {
        handler.start_object();
        write_fields_as_json(handler, true);
        int extra_count = extraKeys.Count;
        Debug.Assert(extra_count == extraValues.Count);
        for (int extra_num = 0; extra_num < extra_count; ++extra_num)
          {
            handler.start_pair(extraKeys[extra_num]);
            extraValues[extra_num].write(handler);
          }
        handler.finish_object();
      }
    public override string missing_field_error(bool allow_unpolished)
      {
        if (!(hasTag()))
          {
            return "When parsing the object for %what%, the \"Tag\" field was missing.";
          }
        return null;
      }

    public static new CoreUnitsUnitJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        CoreUnitsUnitJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type CoreUnitsUnit", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write(generator);
            else
                json_value.write(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static new CoreUnitsUnitJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static new CoreUnitsUnitJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        CoreUnitsUnitJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type CoreUnitsUnit", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write_partial_as_json(generator);
            else
                json_value.write_as_json(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static new CoreUnitsUnitJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static new CoreUnitsUnitJSON from_text(string text, bool ignore_extras)
      {
        CoreUnitsUnitJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type CoreUnitsUnit", ignore_extras);
            JSONParse.parse_json_value(text, "Text for CoreUnitsUnitJSON", generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static new CoreUnitsUnitJSON from_file(TextReader fp, string file_name, bool ignore_extras)
      {
        CoreUnitsUnitJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type CoreUnitsUnit", ignore_extras);
            JSONParse.parse_json_value(fp, file_name, generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public new abstract class Generator : UnitJSON.Generator
      {
    private abstract class FieldGeneratorTag : JSONStringGenerator
          {
            protected FieldGeneratorTag(string what)
              {
                set_what(what);
              }
            protected FieldGeneratorTag()
              {
              }
            protected override void handle_result(string result)
              {
                TypeTagKnownValues known = stringToTag(result);
                TypeTag new_value = new TypeTag();
                if (known == TypeTagKnownValues.Tag__none)
                  {
                    new_value.in_known_list = false;
                    new_value.string_value = result;
                  }
                else
                  {
                    new_value.in_known_list = true;
                    new_value.list_value = known;
                  }
                handle_result(new_value);
              }
            protected abstract void handle_result(TypeTag result);
          };
    private class FieldHoldingGeneratorTag : FieldGeneratorTag
  {
    protected override void handle_result(TypeTag result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorTag(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeTag value;
  };
    private class FieldHoldingArrayGeneratorTag : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorTag
      {
        private FieldHoldingArrayGeneratorTag top;

        protected override void handle_result(TypeTag result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorTag init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeTag> result)
      {
      }

    public FieldHoldingArrayGeneratorTag(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeTag>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorTag()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeTag>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeTag> value;
  };
        private FieldHoldingGeneratorTag fieldGeneratorTag;
        private class UnknownFieldGenerator : JSONValueHandler
          {
            public bool ignore;
            public List<string> field_names;
            public List<JSONValue > field_values;
            public Dictionary<string, JSONValue > index;
            public UnknownFieldGenerator(bool init_ignore)
              {
                ignore = init_ignore;
                field_names = new List<string>();
                field_values = new List<JSONValue >();
            index = new Dictionary<string, JSONValue >();
              }

            protected override void new_value(JSONValue item)
              {
                if (ignore)
                    return;
                Debug.Assert(field_names.Count == (field_values.Count + 1));
                index.Add(field_names[field_values.Count], item);
                field_values.Add(item);
              }
            public override void reset()
              {
                field_names.Clear();
                field_values.Clear();
            index = new Dictionary<string, JSONValue >();
              }
          };
        private UnknownFieldGenerator unknownFieldGenerator;

        protected override void start()
          {
          }
        protected override JSONHandler start_field(string field_name)
          {
            JSONHandler result = start_known_field(field_name);
            if (result != null)
                return result;
            Debug.Assert(unknownFieldGenerator.field_names.Count ==
                   unknownFieldGenerator.field_values.Count);
            if (unknownFieldGenerator.ignore)
              {
                Debug.Assert(unknownFieldGenerator.field_names.Count == 0);
              }
            else
              {
                unknownFieldGenerator.field_names.Add(field_name);
              }
            return unknownFieldGenerator;
          }
        protected override void finish_field(string field_name, JSONHandler field_handler)
          {
          }
        protected override void finish()
          {
            if (!(getUnitJSONKey().Equals("Core")))
                throw new Exception("The key field has a value other than `Core'.");
            CoreUnitsUnitJSON result = new CoreUnitsUnitJSON();
            Debug.Assert(result != null);
            finish(result);
            int extra_count = unknownFieldGenerator.field_names.Count;
            Debug.Assert(extra_count == unknownFieldGenerator.field_values.Count);
            for (int extra_num = 0; extra_num < extra_count; ++extra_num)
              {
                result.extraCoreUnitsUnitAppendPair(unknownFieldGenerator.field_names[extra_num], unknownFieldGenerator.field_values[extra_num]);
              }
            unknownFieldGenerator.field_names.Clear();
            unknownFieldGenerator.field_values.Clear();
            unknownFieldGenerator.index = new Dictionary<string, JSONValue >();
            handle_result(result);
          }
        protected override void handle_result(UnitJSON new_result)
          {
            handle_result((CoreUnitsUnitJSON )new_result);
          }
        protected void finish(CoreUnitsUnitJSON result)
          {
            if (fieldGeneratorTag.have_value)
              {
                result.setTag(fieldGeneratorTag.value);
                fieldGeneratorTag.have_value = false;
              }
            else if ((!(result.hasTag())) && !allow_incomplete)
              {
                error("When parsing the object for %what%, the \"Tag\" field was missing.");
              }
            base.finish(result);
          }
        protected abstract void handle_result(CoreUnitsUnitJSON new_result);
        protected override JSONHandler start_known_field(string field_name)
          {
            if ((String.Compare(field_name, 0, "Tag", 0, 3, false) == 0) && (field_name.Length == 3))
                return fieldGeneratorTag;
            return base.start_known_field(field_name);
          }
        public Generator(bool ignore_extras) : base(ignore_extras)
          {
            fieldGeneratorTag = new FieldHoldingGeneratorTag("field \"Tag\" of the CoreUnitsUnit class");
            unknownFieldGenerator = new UnknownFieldGenerator(ignore_extras);
            set_what("the CoreUnitsUnit class");
          }
        public Generator() : base(false)
          {
            fieldGeneratorTag = new FieldHoldingGeneratorTag("field \"Tag\" of the CoreUnitsUnit class");
            unknownFieldGenerator = new UnknownFieldGenerator(false);
            set_what("the CoreUnitsUnit class");
          }

        public override void reset()
          {
            fieldGeneratorTag.reset();
            base.reset();
            unknownFieldGenerator.reset();
          }
      };
    public new class HoldingGenerator : Generator
      {
        protected override void handle_result(CoreUnitsUnitJSON  result)
          {
//@@@            Debug.Assert(!have_value);
            have_value = true;
            value = result;
          }

        public HoldingGenerator(String what, bool ignore_extras) : base(ignore_extras)
          {
            have_value = false;
            base.set_what(what);
          }

        public HoldingGenerator(String what) : base(false)
          {
            have_value = false;
            base.set_what(what);
          }

        public override void reset()
          {
            have_value = false;
            base.reset();
          }

        public bool have_value;
        public CoreUnitsUnitJSON value;
      };
    public new class HoldingArrayGenerator : JSONArrayGenerator
  {
    protected class ElementHandler : Generator
      {
        private HoldingArrayGenerator top;

        protected override void handle_result(CoreUnitsUnitJSON  result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(HoldingArrayGenerator init_top, bool ignore_extras) : base(ignore_extras)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<CoreUnitsUnitJSON> result)

      {
      }

    public HoldingArrayGenerator(string what, bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<CoreUnitsUnitJSON>();
        base.set_what(what);
      }
    public HoldingArrayGenerator(bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        value = new List<CoreUnitsUnitJSON>();
        have_value = false;
      }

    public void set_allow_incomplete(bool new_allow_incomplete)
      {
        element_handler.set_allow_incomplete(new_allow_incomplete);
      }

    public void set_allow_unpolished(bool new_allow_unpolished)
      {
        element_handler.set_allow_unpolished(new_allow_unpolished);
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<CoreUnitsUnitJSON> value;
  };
  };
